{"repository_name":"chem.cr","body":"# chem.cr\n\n[![GitHub Workflow Status](https://img.shields.io/github/workflow/status/franciscoadasme/chem.cr/Crystal%20CI.svg)](https://github.com/franciscoadasme/chem.cr/actions?query=workflow%3A%22Crystal+CI%22)\n[![Version](https://img.shields.io/github/v/release/franciscoadasme/chem.cr.svg?label=version)](https://github.com/franciscoadasme/chem.cr/releases/latest)\n[![License](https://img.shields.io/github/license/franciscoadasme/chem.cr.svg)](https://github.com/franciscoadasme/chem.cr/blob/master/LICENSE)\n****\nA modern library written in [Crystal][1] primarily designed for\nmanipulating molecular files created by computational chemistry\nprograms. It aims to be both fast and easy to use.\n\n**NOTE**: PSIQUE can be found [here](https://github.com/franciscoadasme/chem.cr/wiki/PSIQUE)\n\n**IMPORTANT**: this library is in alpha stage, meaning that there is missing\nfunctionality, documentation, etc. and there will be breaking changes.\n\n[Features](#features) | \n[Installation](#installation) | \n[Usage](#usage) | \n[Tools](https://github.com/franciscoadasme/chem.cr/wiki#tools) |\n[Benchmarks](#benchmarks) |\n[Roadmap](#roadmap) |\n[Testing](#testing) |\n[Similar software](#similar-software) |\n[Contributing](#contributing) |\n[Contributors](#contributors) |\n[License](#license)\n\n## Features\n\n- Object-oriented API for accessing and manipulating molecules. It\n  follows the topology commonly used in [Protein Data Bank][2] (PDB)\n  file format: Structure (or model) → Chain → Residue → Atom.\n- Type safety (assigning a number to the atom's name will result in a\n  compilation error)\n- Support for periodic molecular structures\n- Support for several file formats (and many more to come...)\n- Iterator-based file reading (avoids reading all data into memory)\n- Fast performance (see Benchmarks below)\n\n## Installation\n\n**NOTE** Tools such as `psique` may be download separately from the\n[releases][7] page or built from source if required. Refer to the\n[Wiki](https://github.com/franciscoadasme/chem.cr/wiki) for more\ninformation.\n\nFirst check that the Crystal compiler is installed correctly:\n\n```sh\n$ crystal --version\nCrystal 0.35.1 [5999ae29b] (2020-06-19)\n\nLLVM: 8.0.0\nDefault target: x86_64-unknown-linux-gnu\n```\n\nIf the command fails, you need to install the crystal compiler by\nfollowing [these steps][3].\n\n### Using Shards\n\nCrystal handles dependencies by listing the packages on a `shard.yml`\nfile in a Crystal project. First, create a new project:\n\n```sh\n$ crystal init app myapp\n    create  myapp/.gitignore\n    create  myapp/.editorconfig\n    create  myapp/LICENSE\n    create  myapp/README.md\n    create  myapp/.travis.yml\n    create  myapp/shard.yml\n    create  myapp/src/myapp.cr\n    create  myapp/src/myapp/version.cr\n    create  myapp/spec/spec_helper.cr\n    create  myapp/spec/myapp_spec.cr\nInitialized empty Git repository in /home/crystal/myapp/.git/\n$ cd myapp\n```\n\nRead more about projects at the [Crystal guides][4]. Add this to your\napplication's `shard.yml`:\n\n```yaml\ndependencies:\n  chem:\n    github: franciscoadasme/chem.cr\n    version: ~> 0.1\n```\n\nThen, resolve and install missing dependencies:\n\n```sh\nshards install\n```\n\nDependencies are installed into the `lib` folder. More about\ndependencies at the [Shards guides][5].\n\n### Manual download\n\nEither clone the repository or download a copy of the `chem` module to\nyour local machine:\n\n```sh\ntag=$(curl -s https://api.github.com/repos/franciscoadasme/chem.cr/releases/latest | grep \"tag_name\" | cut -d\\\" -f4)\nwget https://github.com/franciscoadasme/chem.cr/archive/$tag.tar.gz -O chem.cr-${tag#v}.tar.gz\ntar xvf chem.cr-${tag#v}.tar.gz\n```\n\nThis will download the latest version of the `chem` module to a folder\nnamed `chem.cr-X.Y.Z`, where `X.Y.Z` stands for the current version.\n\n### Requirements\n\n- To run STRIDE analysis, you'll need to set `STRIDE_BIN` to the STRIDE\n  executable path.\n\n## Usage\n\nFirst require the `chem` module. If you used Shards to installed the\ndependencies:\n\n```crystal\nrequire \"chem\"\n```\n\nOr if you download a copy named `chem.cr-X.Y.Z` and it is placed at the\nparent directory:\n\n```crystal\nrequire \"../chem.cr-X.Y.Z/src/chem\"\n```\n\nRefer to the [Crystal guides][6] for more information about how to\nrequire other files. Either way, write the following to avoid typing the\n`Chem::` prefix:\n\n```crystal\ninclude Chem\n```\n\nLet's first read a structure:\n\n```crystal\nst = Structure.read \"/path/to/file.pdb\"\nst # => <Structure \"1cbn\": 644 atoms, 47 residues, periodic>\n```\n\nYou can also use a custom read method that accepts specific options:\n\n```crystal\nStructure.from_pdb \"/path/to/file.pdb\"\nStructure.from_pdb \"/path/to/file.pdb\", chains: ['A'] # read only chain A\nStructure.from_pdb \"/path/to/file.pdb\", het: false # skip HET atoms\nStructure.from_pdb \"/path/to/file.pdb\", alt_loc: 'A' # select alternate location A\n```\n\nYou can access PDB header information via the `#experiment` property:\n\n```crystal\nif expt = st.experiment # check if experiment data is present\n  expt.title # => \"ATOMIC RESOLUTION (0.83 ANGSTROMS) CRYSTAL STRUCTURE...\"\n  expt.kind # => XRayDiffraction\n  expt.resolution # => 0.83\n  expt.deposition_date # => 1991-10-11\n  ...\nend\n```\n\nYou can also read many structures at once:\n\n```crystal\n# read all models\nArray(Structure).from_pdb \"/path/to/file.pdb\"\n# read 2th and 5th models\nArray(Structure).from_pdb \"/path/to/file.pdb\", indexes: [1, 4]\n```\n\nAlternatively, you could use an IO iterator to read one by one:\n\n```crystal\nPDB::Parser.new(\"/path/to/file.pdb\").each { |st| ... }\nPDB::Parser.new(\"/path/to/file.pdb\").each(indexes: [1, 4]) { |st| ... }\n```\n\n### Topology access\n\nYou can access topology objects using the bracket syntax (like a hash or\nassociative array or dictionary):\n\n```crystal\nst['A'] # => <Chain A>\nst['A'][10] # => <Residue A:ARG10>\nst['A'][10][\"CA\"] # => <Atom A:ARG10:CA(146)>\n```\n\nAlternatively, you can use the `#dig` and `#dig?` methods:\n\n```crystal\nst.dig 'A' # => <Chain A>\nst.dig 'A', 10 # => <Residue A:ARG10>\nst.dig 'A', 10, \"CA\" # => <Atom A:ARG10:CA(146)>\n\nst.dig 'A', 10, \"CJ\" # causes an error because \"CJ\" doesn't exist\nst.dig? 'A', 10, \"CJ\" # => nil\n```\n\nEach topology object have several modifiable properties:\n\n```crystal\natom = st.dig 'A', 10, \"CA\"\natom.element.name # => Carbon\natom.coords # => [8.47 4.577 8.764]\natom.occupancy # => 1.0\natom.bonded_atoms.map &.name # => [\"N\", \"C\", \"HA\", \"CB\"]\n```\n\nThanks to Crystal's powerful standard library, manipulating topology objects is\nvery easy:\n\n```crystal\n# ramachandran angles\nst.residues.map { |r| {r.phi, r.psi} } # => [{129.5, 90.1}, ...]\n# renumber residues starting from 1\nst.residues.each_with_index { |res, i| res.number = i + 1 }\n# constrain Z-axis\nst.atoms.each { |atom| atom.constraint = :z }\n# total charge\nst.atoms.sum_of &.partial_charge\n# iterate over secondary structure elements\nst.residues.chunk(&.sec).each do |sec, residues|\n  sec # => HelixAlpha\n  residues # => [<Residue A:ARG1>, <Residue A:LEU2>, ...]\nend\n```\n\nHere `#residues` and `#atoms` return an array of `Residue` and `Atom` instances,\nrespectively. Collections also provide iterator-based access, e.g.,\n`#each_atom`, that avoids expensive memory allocations:\n\n```crystal\nst.atoms.any? &.constraint # array allocation to just check a condition\nst.each_atom.any? &.constraint # faster!\n```\n\n### Atom selection\n\nRight now, there is no custom language to select a subset of atoms. However,\nthanks to Crystal, one can achieve a similar result with an intuitive syntax:\n\n```crystal\nst.atoms.select { |atom| atom.partial_charge > 0 }\n# or\nst.atoms.select &.partial_charge.>(0)\n# compared to a custom language\nst.atoms.select \"partial_charge > 0\"\n\n# select atoms within a cylinder of radius = 4 A and centered at the origin\nst.atoms.select { |atom| atom.x**2 + atom.y**2 < 4 }\n# compared to a custom language\nst.atoms.select \"sqrt(x) + sqrt(y) < 4\" # or \"x**2 + y**2 < 4\"\n```\n\nOne advantage to using Crystal itself is that it provides type-safety: doing\nsomething like `atom.name**2` will result in a compilation error, whereas using\na custom language will probably produce a confusing error during runtime.\nAdditionally, the code block can be as big and complex as necessary with\nmultiple intermediary computations. Furthermore, a negative condition may be\nconfusing and not be trivial to write, but in Crystal you would simply use\n`#reject` instead.\n\nFinally, the above also works for chain and residue collections:\n\n```crystal\n# select protein chains\nst.chains.select &.each_residue.any?(&.protein?)\n# select only solvent residues\nst.residues.select &.solvent?\n# select residues with any atom within 5 A of the first CA atom\n# (this is equivalent to \"same residue as\" or \"fillres\" in other libraries)\nca = st.dig 'A', 1, \"CA\"\nst.residues.select do |res|\n  res.each_atom.any? { |atom| Spatial.distance(atom, ca) < 5 }\nend\n# or\nst.atoms.select { |atom| Spatial.distance(atom, ca) < 5 }.residues\n```\n\n### Coordinates manipulation\n\nAll coordinates manipulation is done using a `CoordinatesProxy` instance,\navailable for any atom collection (i.e., structure, chain or residue) via\n`#coords`:\n\n```crystal\n# geometric center\nst.coords.center\n# center at origin\nst.coords.translate! -st.coords.center\n# wraps atoms into the primary unit cell\nst.coords.wrap\n...\n```\n\n## Benchmarks\n\n`chem.cr` is implemented in pure Crystal, making it as fast or even faster than\nsome C-powered packages.\n\nThe benchmark is designed as follows:\n\n* The tests are implemented using the functionality documented by each library\n  in tutorials, examples, etc. Optimized versions may be faster but require\n  advanced (possibly undocumented) usage.\n* Tests are run ten times (except for 1HTQ, 3 times) and the elapsed time for\n  each run is averaged.\n* Parsing PDB files\n  * [1CRN](http://www.rcsb.org/pdb/explore/explore.do?structureId=1crn) -\n    hydrophobic protein (327 atoms).\n  * [3JYV](http://www.rcsb.org/pdb/explore/explore.do?structureId=3jyv) - 80S\n    rRNA (57,327 atoms).\n  * [1HTQ](http://www.rcsb.org/pdb/explore/explore.do?structureId=1htq) -\n    multicopy glutamine synthetase (10 models of 97,872 atoms).\n* Counting the number of alanine residues in adenylate kinase (1AKE, 3816\n  atoms).\n* Calculating the distance between residues 50 and 60 of chain A in adenylate\n  kinase (1AKE, 3816 atoms).\n* Calculating the Ramachandran phi/psi angles in adenylate kinase (1AKE, 3816\n  atoms).\n\n**IMPORTANT**: direct comparison of parsing times should be taken with a grain\nof salt because each library does something slightly different, e.g., error\nchecking. Some of this functionality is listed below. Nonetheless, these results\ngives an overall picture in terms of the expected performance.\n\n|                      | Biopython | chem.cr | Chemfiles | MDAnalysis | MDTraj | schrodinger |   VMD |\n| -------------------- | --------: | ------: | --------: | ---------: | -----: | ----------: | ----: |\n| Parse 1CRN [ms]      |     6.521 |   1.028 |     1.668 |      5.059 | 11.923 |      45.497 | 2.285 |\n| Parse 3JYV [s]       |     0.837 |   0.086 |     0.199 |      0.404 |  1.490 |       0.766 | 0.162 |\n| Parse 1HTQ [s]       |    16.146 |   1.673 |     2.540 |      1.387 | 18.969 |      11.997 | 0.236 |\n| Count [ms]           |     0.210 |   0.009 |     0.322 |      0.041 |  0.079 |      25.997 | 0.165 |\n| Distance [ms]        |     0.172 |   0.000 |     1.016 |      0.382 |  0.990 |      43.101 | 0.379 |\n| Ramachandran [ms]    |   110.450 |   0.607 |         - |    690.201 |  4.947 |      68.758 | 1.814 |\n|                      |           |         |           |            |        |             |       |\n| License              | Biopython |     MIT |       BSD |      GPLv2 |   LGPL | Proprietary |   VMD |\n| Parse Header         |       yes |     yes |       yes |         no |     no |          no |    no |\n| Parse CONECT         |        no |     yes |       yes |         no |    yes |         yes |   yes |\n| Guess bonds          |        no |      no |       yes |         no |    yes |         yes |   yes |\n| Hybrid36             |        no |     yes |        no |        yes |     no |          no |    no |\n| Hierarchical parsing |       yes |     yes |        no |         no |     no |          no |    no |\n| Supports disorder    |       yes |     yes |        no |         no |    yes |         yes |    no |\n\nLatest update: 2019-11-10\n\nScripts and details are provided at [pdb-bench](https://github.com/franciscoadasme/pdb-bench).\n\n## Roadmap\n\n### Topology manipulation\n\n- [x] Automatic connectivity detection (includes periodic systems)\n- [x] Automatic bond order assignment\n- [x] Residue templates (basic impl.)\n  - [ ] Custom terminal groups\n- [x] Automatic topology assignment (chain, residue names, atom names) based on\n  residue templates\n- [ ] Atom wildcards (`\"C*\"` will select `\"C\"`, `\"CA\"`, `\"CB\"`, etc.)\n- [ ] Atom selection language\n\n### Input and Output\n\n- [x] Automatic file format detection\n- [x] Support for per-file format options (e.g., select PDB chain)\n- [x] Friendly errors (message with error location)\n- [x] Iterator-based IO\n- [ ] Compressed files (.gz and .xz)\n- [ ] Trajectory support\n\n#### File formats\n\n- [x] DFTB+'s Gen format\n- [ ] Macromolecular Crystallographic Information Framework (CIF)\n- [ ] MacroMolecular Transmission Format (MMTF)\n- [x] PDB\n- [x] Tripos Mol2\n- [x] VASP's Poscar\n- [x] XYZ\n- [ ] and many more\n\n### Analysis\n\n- [x] Coordinates manipulation (via `CoordinatesProxy`)\n- [x] Spatial calculations (distance, angle, dihedral, quaternions, affine\n  transformations)\n- [x] Periodic boundary conditions (PBC) support (topology-aware wrap and\n  unwrap)\n- [x] Secondary structure assignment\n  - [x] DSSP (native implementation)\n  - [x] STRIDE (uses external program for now)\n- [x] Nearest neighbor search (via native k-d tree impl.)\n- [ ] RMSD\n- [ ] Structure superposition\n- [ ] Intermolecular interactions (H-bonds, etc.)\n- [ ] Volumetric data\n- [ ] Parallel processing\n\n### Other\n\n- [ ] Documentation\n- [ ] Guides\n- [ ] Workflows (handle calculation pipelines)\n- [ ] More tests\n\n## Testing\n\nRun the tests with `crystal spec`.\n\n## Similar software\n\nThere are several libraries providing similar functionality. Here we list some\nof them and provide one or more reasons for why we didn't use them. However,\neach one of them is good in their own right so please do check them out if\n`chem.cr` does not work for you.\n\n- [Chemfiles](http://chemfiles.org/) is a library for reading and writing\n  chemistry files written in C++, but can also be used from other languages such\n  as Python. It is mainly focused on simulation trajectories and does not\n  provide an object-oriented topology access.\n- [OpenBabel](https://openbabel.org/wiki/Main_Page) is a massive C++ library\n  providing support for more than 110 formats. Its API is very complex to use.\n- [MDTraj](http://mdtraj.org/latest/), [MDAnalysis](http://www.mdanalysis.org/),\n  [cclib](https://cclib.github.io), [pymatgen](https://pymatgen.org),\n  [prody](http://prody.csb.pitt.edu), [Biopython](https://biopython.org) and\n  more are written in Python, which usually means two things: (1) no type safety\n  makes them sometimes difficult to use if there is not enough documentation\n  (more common than one may think), (2) one usually have to deal with C for\n  performance critical code.\n- [VMD](http://www.ks.uiuc.edu/Research/vmd/) and\n  [Schrodinger](https://schrodinger.com/) are very popular software for\n  molecular visualization that provide an API in Tcl and/or Python to manipulate\n  molecules. However, these usually suffer from poor documentation.\n\n## Contributing\n\n1. Fork it (<https://github.com/franciscoadasme/chem.cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [franciscoadasme](https://github.com/franciscoadasme) Francisco Adasme -\n  creator, maintainer\n\n## License\n\nLicensed under the MIT license, see the separate LICENSE file.\n\n[1]: https://crystal-lang.org\n[2]: https://en.wikipedia.org/wiki/Protein_Data_Bank_(file_format)\n[3]: https://crystal-lang.org/install\n[4]: https://crystal-lang.org/reference/using_the_compiler/#creating-a-crystal-project\n[5]: https://crystal-lang.org/reference/the_shards_command/\n[6]: https://crystal-lang.org/reference/syntax_and_semantics/requiring_files.html\n[7]: https://github.com/franciscoadasme/chem.cr/releases/latest","program":{"html_id":"chem.cr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"chem.cr","program":true,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"1.1.2\"","doc":null,"summary":null},{"id":"VERSION_DATE","name":"VERSION_DATE","value":"\"2020-11-16\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Array","path":"Array.html","kind":"class","full_name":"Array(T)","name":"Array","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core_ext/array.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/array.cr#L1"},{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"An `Array` is an ordered, integer-indexed collection of objects of type T.\n\nArray indexing starts at 0. A negative index is assumed to be\nrelative to the end of the array: -1 indicates the last element,\n-2 is the next to last element, and so on.\n\nAn `Array` can be created using the usual `new` method (several are provided), or with an array literal:\n\n```\nArray(Int32).new  # => []\n[1, 2, 3]         # Array(Int32)\n[1, \"hello\", 'x'] # Array(Int32 | String | Char)\n```\n\nSee [`Array` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/array.html) in the language reference.\n\nAn `Array` can have mixed types, meaning T will be a union of types, but these are determined\nwhen the array is created, either by specifying T or by using an array literal. In the latter\ncase, T will be set to the union of the array literal elements' types.\n\nWhen creating an empty array you must always specify T:\n\n```\n[] of Int32 # same as Array(Int32)\n[]          # syntax error\n```\n\nAn `Array` is implemented using an internal buffer of some capacity\nand is reallocated when elements are pushed to it when more capacity\nis needed. This is normally known as a [dynamic array](http://en.wikipedia.org/wiki/Dynamic_array).\n\nYou can use a special array literal syntax with other types too, as long as they define an argless\n`new` method and a `<<` method. `Set` is one such type:\n\n```\nset = Set{1, 2, 3} # => Set{1, 2, 3}\nset.class          # => Set(Int32)\n```\n\nThe above is the same as this:\n\n```\nset = Set(typeof(1, 2, 3)).new\nset << 1\nset << 2\nset << 3\n```","summary":"<p>An <code><a href=\"Array.html\">Array</a></code> is an ordered, integer-indexed collection of objects of type T.</p>","class_methods":[],"constructors":[{"html_id":"from_mol2(input:IO|Path|String,indexes:Array(Int)):self-class-method","name":"from_mol2","doc":"Creates a new array of `Chem::Structure` with the entries at\n*indexes* encoded in *input* using the `Chem::Mol2` file\nformat. Arguments are fowarded to `Chem::Mol2::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries at <em>indexes</em> encoded in <em>input</em> using the <code><a href=\"Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","doc":null,"default_value":"","external_name":"indexes","restriction":"Array(Int)"}],"args_string":"(input : IO | Path | String, indexes : Array(Int)) : self","args_html":"(input : IO | Path | String, indexes : <a href=\"Array.html\">Array</a>(Int)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_mol2","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","doc":null,"default_value":"","external_name":"indexes","restriction":"Array(Int)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::Mol2::Reader.open(input) do |reader|\n  (Array(T).new(indexes.size)).tap do |ary|\n    reader.each(indexes) do |obj|\n      ary << obj\n    end\n  end\nend"}},{"html_id":"from_mol2(input:IO|Path|String):self-class-method","name":"from_mol2","doc":"Creates a new array of `Chem::Structure` with the entries\nencoded in *input* using the `Chem::Mol2` file format.\nArguments are fowarded to `Chem::Mol2::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries encoded in <em>input</em> using the <code><a href=\"Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_mol2","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"{% if (type = @type) <= Array(Chem::Structure) %}{% else %}\n              {% raise(\"undefined method '.from_mol2' for #{type}.class\") %}\n            {% end %}\nChem::Mol2::Reader.open(input) do |reader|\n  Array(T).new.tap do |ary|\n    reader.each do |obj|\n      ary << obj\n    end\n  end\nend\n"}},{"html_id":"from_pdb(input:IO|Path|String,alt_loc:Char?=nil,chains:Enumerable(Char)|String|Nil=nil,het:Bool=true):self-class-method","name":"from_pdb","doc":"Creates a new array of `Chem::Structure` with the entries\nencoded in *input* using the `Chem::PDB` file format.\nArguments are fowarded to `Chem::PDB::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries encoded in <em>input</em> using the <code><a href=\"Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"}],"args_string":"(input : IO | Path | String, alt_loc : Char? = nil, chains : Enumerable(Char) | String | Nil = nil, het : Bool = true) : self","args_html":"(input : IO | Path | String, alt_loc : <a href=\"Char.html\">Char</a>? = <span class=\"n\">nil</span>, chains : Enumerable(<a href=\"Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, het : Bool = <span class=\"n\">true</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_pdb","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"{% if (type = @type) <= Array(Chem::Structure) %}{% else %}\n              {% raise(\"undefined method '.from_pdb' for #{type}.class\") %}\n            {% end %}\nChem::PDB::Reader.open(input, alt_loc, chains, het) do |reader|\n  Array(T).new.tap do |ary|\n    reader.each do |obj|\n      ary << obj\n    end\n  end\nend\n"}},{"html_id":"from_pdb(input:IO|Path|String,indexes:Array(Int),alt_loc:Char?=nil,chains:Enumerable(Char)|String|Nil=nil,het:Bool=true):self-class-method","name":"from_pdb","doc":"Creates a new array of `Chem::Structure` with the entries at\n*indexes* encoded in *input* using the `Chem::PDB` file\nformat. Arguments are fowarded to `Chem::PDB::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries at <em>indexes</em> encoded in <em>input</em> using the <code><a href=\"Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","doc":null,"default_value":"","external_name":"indexes","restriction":"Array(Int)"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"}],"args_string":"(input : IO | Path | String, indexes : Array(Int), alt_loc : Char? = nil, chains : Enumerable(Char) | String | Nil = nil, het : Bool = true) : self","args_html":"(input : IO | Path | String, indexes : <a href=\"Array.html\">Array</a>(Int), alt_loc : <a href=\"Char.html\">Char</a>? = <span class=\"n\">nil</span>, chains : Enumerable(<a href=\"Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, het : Bool = <span class=\"n\">true</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_pdb","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","doc":null,"default_value":"","external_name":"indexes","restriction":"Array(Int)"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::PDB::Reader.open(input, alt_loc, chains, het) do |reader|\n  (Array(T).new(indexes.size)).tap do |ary|\n    reader.each(indexes) do |obj|\n      ary << obj\n    end\n  end\nend"}},{"html_id":"from_xyz(input:IO|Path|String,guess_topology:Bool=false):self-class-method","name":"from_xyz","doc":"Creates a new array of `Chem::Structure` with the entries\nencoded in *input* using the `Chem::XYZ` file format.\nArguments are fowarded to `Chem::XYZ::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries encoded in <em>input</em> using the <code><a href=\"Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"args_string":"(input : IO | Path | String, guess_topology : Bool = false) : self","args_html":"(input : IO | Path | String, guess_topology : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_xyz","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"{% if (type = @type) <= Array(Chem::Structure) %}{% else %}\n              {% raise(\"undefined method '.from_xyz' for #{type}.class\") %}\n            {% end %}\nChem::XYZ::Reader.open(input, guess_topology) do |reader|\n  Array(T).new.tap do |ary|\n    reader.each do |obj|\n      ary << obj\n    end\n  end\nend\n"}},{"html_id":"from_xyz(input:IO|Path|String,indexes:Array(Int),guess_topology:Bool=false):self-class-method","name":"from_xyz","doc":"Creates a new array of `Chem::Structure` with the entries at\n*indexes* encoded in *input* using the `Chem::XYZ` file\nformat. Arguments are fowarded to `Chem::XYZ::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries at <em>indexes</em> encoded in <em>input</em> using the <code><a href=\"Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","doc":null,"default_value":"","external_name":"indexes","restriction":"Array(Int)"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"args_string":"(input : IO | Path | String, indexes : Array(Int), guess_topology : Bool = false) : self","args_html":"(input : IO | Path | String, indexes : <a href=\"Array.html\">Array</a>(Int), guess_topology : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_xyz","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","doc":null,"default_value":"","external_name":"indexes","restriction":"Array(Int)"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::XYZ::Reader.open(input, guess_topology) do |reader|\n  (Array(T).new(indexes.size)).tap do |ary|\n    reader.each(indexes) do |obj|\n      ary << obj\n    end\n  end\nend"}},{"html_id":"read(input:IO|Path|String,format:String):self-class-method","name":"read","doc":"Returns the entries encoded in the specified file using *format*.\nRaises `ArgumentError` if *format* is invalid.","summary":"<p>Returns the entries encoded in the specified file using <em>format</em>.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"String"}],"args_string":"(input : IO | Path | String, format : String) : self","args_html":"(input : IO | Path | String, format : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"read","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"read(input, Chem::Format.parse(format))"}},{"html_id":"read(input:IO|Path|String,format:Chem::Format):self-class-method","name":"read","doc":"Returns the entries encoded in the specified file using *format*.\nRaises `ArgumentError` if *format* cannot read the element type or\nit is write only.","summary":"<p>Returns the entries encoded in the specified file using <em>format</em>.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"Chem::Format"}],"args_string":"(input : IO | Path | String, format : Chem::Format) : self","args_html":"(input : IO | Path | String, format : <a href=\"Chem/Format.html\">Chem::Format</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"read","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"Chem::Format"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"{% if ![Chem::Structure].any? do |etype|\n  @type.type_vars[0] <= etype\nend %}\n        {% raise(\"undefined method 'read' for #{@type}.class\") %}\n      {% end %}\ncase format\nwhen .cube?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self.class}\"))\nwhen .dx?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self.class}\"))\nwhen .gen?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self.class}\"))\nwhen .mol2?\n  {% if @type.type_vars[0] <= Chem::Structure.resolve %}\n                  Chem::Mol2::Reader.open(input) do |reader|\n                    {{ @type }}.new.tap do |ary|\n                      reader.each do |obj|\n                        ary << obj\n                      end\n                    end\n                  end\n                {% else %}\n                  raise ArgumentError.new(\"#{format} format cannot read #{self.class}\")\n                {% end %}\nwhen .pdb?\n  {% if @type.type_vars[0] <= Chem::Structure.resolve %}\n                  Chem::PDB::Reader.open(input) do |reader|\n                    {{ @type }}.new.tap do |ary|\n                      reader.each do |obj|\n                        ary << obj\n                      end\n                    end\n                  end\n                {% else %}\n                  raise ArgumentError.new(\"#{format} format cannot read #{self.class}\")\n                {% end %}\nwhen .xyz?\n  {% if @type.type_vars[0] <= Chem::Structure.resolve %}\n                  Chem::XYZ::Reader.open(input) do |reader|\n                    {{ @type }}.new.tap do |ary|\n                      reader.each do |obj|\n                        ary << obj\n                      end\n                    end\n                  end\n                {% else %}\n                  raise ArgumentError.new(\"#{format} format cannot read #{self.class}\")\n                {% end %}\nwhen .chgcar?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self.class}\"))\nwhen .locpot?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self.class}\"))\nwhen .poscar?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self.class}\"))\nelse\n  raise(ArgumentError.new(\"#{format} format is write only\"))\nend\n"}},{"html_id":"read(path:Path|String):self-class-method","name":"read","doc":"Returns the entries encoded in the specified file. The file format\nis chosen based on the filename (see `Chem::Format#from_filename`).\nRaises `ArgumentError` if the file format cannot be determined.","summary":"<p>Returns the entries encoded in the specified file.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"read","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"read(path, Chem::Format.from_filename(path))"}}],"instance_methods":[{"html_id":"sort(range:Range(Int,Int)):self-instance-method","name":"sort","doc":null,"summary":null,"abstract":false,"args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"args_string":"(range : Range(Int, Int)) : self","args_html":"(range : <a href=\"Range.html\">Range</a>(Int, Int)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core_ext/array.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/array.cr#L2"},"def":{"name":"sort","args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"dup.sort!(range)"}},{"html_id":"sort(range:Range(Int,Int),&block:T,T->Int32?):self-instance-method","name":"sort","doc":null,"summary":null,"abstract":false,"args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"args_string":"(range : Range(Int, Int), &block : T, T -> Int32?) : self","args_html":"(range : <a href=\"Range.html\">Range</a>(Int, Int), &block : T, T -> Int32?) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core_ext/array.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/array.cr#L6"},"def":{"name":"sort","args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T, T -> Int32 | ::Nil)"},"return_type":"self","visibility":"Public","body":"dup.sort!(range, &block)"}},{"html_id":"sort!(range:Range(Int,Int)):self-instance-method","name":"sort!","doc":null,"summary":null,"abstract":false,"args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"args_string":"(range : Range(Int, Int)) : self","args_html":"(range : <a href=\"Range.html\">Range</a>(Int, Int)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core_ext/array.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/array.cr#L10"},"def":{"name":"sort!","args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"start, count = (Indexable.range_to_index_and_count(range, size)) || (raise(IndexError.new))\nif start >= size\n  raise(IndexError.new)\nend\ncount = Math.min(count, size - start)\nif count > 1\n  (Slice.new(to_unsafe + start, count)).sort!\nend\nself\n"}},{"html_id":"sort!(range:Range(Int,Int),&block:T,T->Int32?):self-instance-method","name":"sort!","doc":null,"summary":null,"abstract":false,"args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"args_string":"(range : Range(Int, Int), &block : T, T -> Int32?) : self","args_html":"(range : <a href=\"Range.html\">Range</a>(Int, Int), &block : T, T -> Int32?) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core_ext/array.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/array.cr#L18"},"def":{"name":"sort!","args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T, T -> Int32 | ::Nil)"},"return_type":"self","visibility":"Public","body":"start, count = (Indexable.range_to_index_and_count(range, size)) || (raise(IndexError.new))\nif start >= size\n  raise(IndexError.new)\nend\ncount = Math.min(count, size - start)\nif count > 1\n  (Slice.new(to_unsafe + start, count)).sort!(&block)\nend\nself\n"}},{"html_id":"to_mol2(output:IO|Path|String):Nil-instance-method","name":"to_mol2","doc":"Writes the elements to *output* using the `Chem::Mol2` file\nformat. Arguments are fowarded to `Chem::Mol2::Writer.open`.","summary":"<p>Writes the elements to <em>output</em> using the <code><a href=\"Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_mol2","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"{% if (type = @type.type_vars[0]) <= Chem::AtomCollection %}{% else %}\n              {% raise(\"undefined method 'to_mol2' for #{@type}.class\") %}\n            {% end %}\nChem::Mol2::Writer.open(output, total_entries: size) do |writer|\n  each do |obj|\n    writer << obj\n  end\nend\n"}},{"html_id":"to_mol2:String-instance-method","name":"to_mol2","doc":"Returns a string representation of the elements encoded in\nthe `Chem::Mol2` file format. Arguments are fowarded to\n`Chem::Mol2::Writer.open`.","summary":"<p>Returns a string representation of the elements encoded in the <code><a href=\"Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_mol2","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"{% if (type = @type.type_vars[0]) <= Chem::AtomCollection %}{% else %}\n              {% raise(\"undefined method 'to_mol2' for #{@type}.class\") %}\n            {% end %}\nString.build do |io|\n  to_mol2(io)\nend\n"}},{"html_id":"to_pdb(bonds:PDB::Writer::BondOptions=PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true):String-instance-method","name":"to_pdb","doc":"Returns a string representation of the elements encoded in\nthe `Chem::PDB` file format. Arguments are fowarded to\n`Chem::PDB::Writer.open`.","summary":"<p>Returns a string representation of the elements encoded in the <code><a href=\"Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"}],"args_string":"(bonds : PDB::Writer::BondOptions = PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true) : String","args_html":"(bonds : PDB::Writer::BondOptions = <span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_pdb","args":[{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"{% if (type = @type.type_vars[0]) <= Chem::AtomCollection %}{% else %}\n              {% raise(\"undefined method 'to_pdb' for #{@type}.class\") %}\n            {% end %}\nString.build do |io|\n  to_pdb(io, bonds, renumber)\nend\n"}},{"html_id":"to_pdb(output:IO|Path|String,bonds:PDB::Writer::BondOptions=PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true):Nil-instance-method","name":"to_pdb","doc":"Writes the elements to *output* using the `Chem::PDB` file\nformat. Arguments are fowarded to `Chem::PDB::Writer.open`.","summary":"<p>Writes the elements to <em>output</em> using the <code><a href=\"Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"}],"args_string":"(output : IO | Path | String, bonds : PDB::Writer::BondOptions = PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true) : Nil","args_html":"(output : IO | Path | String, bonds : PDB::Writer::BondOptions = <span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_pdb","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"{% if (type = @type.type_vars[0]) <= Chem::AtomCollection %}{% else %}\n              {% raise(\"undefined method 'to_pdb' for #{@type}.class\") %}\n            {% end %}\nChem::PDB::Writer.open(output, bonds, renumber, total_entries: size) do |writer|\n  each do |obj|\n    writer << obj\n  end\nend\n"}},{"html_id":"to_xyz(output:IO|Path|String):Nil-instance-method","name":"to_xyz","doc":"Writes the elements to *output* using the `Chem::XYZ` file\nformat. Arguments are fowarded to `Chem::XYZ::Writer.open`.","summary":"<p>Writes the elements to <em>output</em> using the <code><a href=\"Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_xyz","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"{% if (type = @type.type_vars[0]) <= Chem::AtomCollection %}{% else %}\n              {% raise(\"undefined method 'to_xyz' for #{@type}.class\") %}\n            {% end %}\nChem::XYZ::Writer.open(output, total_entries: size) do |writer|\n  each do |obj|\n    writer << obj\n  end\nend\n"}},{"html_id":"to_xyz:String-instance-method","name":"to_xyz","doc":"Returns a string representation of the elements encoded in\nthe `Chem::XYZ` file format. Arguments are fowarded to\n`Chem::XYZ::Writer.open`.","summary":"<p>Returns a string representation of the elements encoded in the <code><a href=\"Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_xyz","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"{% if (type = @type.type_vars[0]) <= Chem::AtomCollection %}{% else %}\n              {% raise(\"undefined method 'to_xyz' for #{@type}.class\") %}\n            {% end %}\nString.build do |io|\n  to_xyz(io)\nend\n"}},{"html_id":"write(output:IO|Path|String,format:String):Nil-instance-method","name":"write","doc":"Writes the elements to *output* using *format*. Raises\n`ArgumentError` if *format* is invalid.","summary":"<p>Writes the elements to <em>output</em> using <em>format</em>.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"String"}],"args_string":"(output : IO | Path | String, format : String) : Nil","args_html":"(output : IO | Path | String, format : String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"write","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"write(output, Chem::Format.parse(format))"}},{"html_id":"write(output:IO|Path|String,format:Chem::Format):Nil-instance-method","name":"write","doc":"Writes the elements to *output* using *format*. Raises\n`ArgumentError` if *format* cannot write the element type or it is\nread only.","summary":"<p>Writes the elements to <em>output</em> using <em>format</em>.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"Chem::Format"}],"args_string":"(output : IO | Path | String, format : Chem::Format) : Nil","args_html":"(output : IO | Path | String, format : <a href=\"Chem/Format.html\">Chem::Format</a>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"write","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"Chem::Format"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"{% if ![Chem::AtomCollection].any? do |etype|\n  @type.type_vars[0] <= etype\nend %}\n        {% raise(\"undefined method 'write' for #{@type}\") %}\n      {% end %}\ncase format\nwhen .cube?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .dx?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .gen?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .mol2?\n  {% if @type.type_vars[0] <= Chem::AtomCollection.resolve %}\n                  Chem::Mol2::Writer.open(output, total_entries: size) do |writer|\n                    each do |obj|\n                      writer << obj\n                    end\n                  end\n                {% else %}\n                  raise ArgumentError.new(\"#{format} format cannot write #{self.class}\")\n                {% end %}\nwhen .pdb?\n  {% if @type.type_vars[0] <= Chem::AtomCollection.resolve %}\n                  Chem::PDB::Writer.open(output, total_entries: size) do |writer|\n                    each do |obj|\n                      writer << obj\n                    end\n                  end\n                {% else %}\n                  raise ArgumentError.new(\"#{format} format cannot write #{self.class}\")\n                {% end %}\nwhen .pymol?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .vmd?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .xyz?\n  {% if @type.type_vars[0] <= Chem::AtomCollection.resolve %}\n                  Chem::XYZ::Writer.open(output, total_entries: size) do |writer|\n                    each do |obj|\n                      writer << obj\n                    end\n                  end\n                {% else %}\n                  raise ArgumentError.new(\"#{format} format cannot write #{self.class}\")\n                {% end %}\nwhen .stride?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .chgcar?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .locpot?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .poscar?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nelse\n  raise(ArgumentError.new(\"#{format} format is read only\"))\nend\n"}},{"html_id":"write(path:Path|String):Nil-instance-method","name":"write","doc":"Writes the elements to the specified file. The file format is chosen\nbased on the filename (see `Chem::Format#from_filename`). Raises\n`ArgumentError` if the file format cannot be determined.","summary":"<p>Writes the elements to the specified file.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : Nil","args_html":"(path : Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"write","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"write(path, Chem::Format.from_filename(path))"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Char","path":"Char.html","kind":"struct","full_name":"Char","name":"Char","abstract":false,"superclass":{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"chem.cr/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core_ext/char.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/char.cr#L1"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `Char` represents a [Unicode](http://en.wikipedia.org/wiki/Unicode) [code point](http://en.wikipedia.org/wiki/Code_point).\nIt occupies 32 bits.\n\nIt is created by enclosing an UTF-8 character in single quotes.\n\n```\n'a'\n'z'\n'0'\n'_'\n'あ'\n```\n\nYou can use a backslash to denote some characters:\n\n```\n'\\'' # single quote\n'\\\\' # backslash\n'\\e' # escape\n'\\f' # form feed\n'\\n' # newline\n'\\r' # carriage return\n'\\t' # tab\n'\\v' # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n'\\u0041' # == 'A'\n```\n\nOr you can use curly braces and specify up to four hexadecimal numbers:\n\n```\n'\\u{41}' # == 'A'\n```\n\nSee [`Char` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/char.html) in the language reference.","summary":"<p>A <code><a href=\"Char.html\">Char</a></code> represents a <a href=\"http://en.wikipedia.org/wiki/Unicode\">Unicode</a> <a href=\"http://en.wikipedia.org/wiki/Code_point\">code point</a>.</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"presence-instance-method","name":"presence","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core_ext/char.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/char.cr#L2"},"def":{"name":"presence","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if ascii_whitespace?\nelse\n  self\nend"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem","path":"Chem.html","kind":"module","full_name":"Chem","name":"Chem","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem.cr","line_number":36,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem.cr#L36"},{"filename":"src/chem/core/array_view.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L1"},{"filename":"src/chem/core/atom.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L1"},{"filename":"src/chem/core/atom_collection.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_collection.cr#L1"},{"filename":"src/chem/core/atom_view.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L1"},{"filename":"src/chem/core/bias.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bias.cr#L1"},{"filename":"src/chem/core/bond.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L1"},{"filename":"src/chem/core/bond_array.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L1"},{"filename":"src/chem/core/chain.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L1"},{"filename":"src/chem/core/chain_collection.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_collection.cr#L1"},{"filename":"src/chem/core/chain_view.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L1"},{"filename":"src/chem/core/element.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/element.cr#L1"},{"filename":"src/chem/core/lattice.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L1"},{"filename":"src/chem/core/residue.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L1"},{"filename":"src/chem/core/residue_collection.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L1"},{"filename":"src/chem/core/residue_view.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L1"},{"filename":"src/chem/core/structure.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L1"},{"filename":"src/chem/core/structure/builder.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L3"},{"filename":"src/chem/format.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L1"},{"filename":"src/chem/format_reader.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L1"},{"filename":"src/chem/format_writer.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_writer.cr#L1"},{"filename":"src/chem/pull_parser.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L1"},{"filename":"src/chem/register_format.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L1"},{"filename":"src/chem/spatial/affine.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L1"},{"filename":"src/chem/version.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/version.cr#L1"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Log","name":"Log","value":"::Log.for(\"chem\")","doc":null,"summary":null},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\"","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/ArrayView","path":"Chem/ArrayView.html","kind":"module","full_name":"Chem::ArrayView(T)","name":"ArrayView","abstract":false,"superclass":null,"ancestors":[{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"locations":[{"filename":"src/chem/core/array_view.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"chem.cr/Chem/AtomView","kind":"struct","full_name":"Chem::AtomView","name":"AtomView"},{"html_id":"chem.cr/Chem/ChainView","kind":"struct","full_name":"Chem::ChainView","name":"ChainView"},{"html_id":"chem.cr/Chem/ResidueView","kind":"struct","full_name":"Chem::ResidueView","name":"ResidueView"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(items:Enumerable(T))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"items","doc":null,"default_value":"","external_name":"items","restriction":"Enumerable(T)"}],"args_string":"(items : Enumerable(T))","args_html":"(items : Enumerable(T))","location":{"filename":"src/chem/core/array_view.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L7"},"def":{"name":"new","args":[{"name":"items","doc":null,"default_value":"","external_name":"items","restriction":"Enumerable(T)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(items)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"&(rhs:Array(T)|self):self-instance-method","name":"&","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Array(T) | self"}],"args_string":"(rhs : Array(T) | self) : self","args_html":"(rhs : <a href=\"../Array.html\">Array</a>(T) | <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L13"},"def":{"name":"&","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Array(T) | self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items & rhs.to_a)"}},{"html_id":"+(rhs:Array(T)|self):self-instance-method","name":"+","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Array(T) | self"}],"args_string":"(rhs : Array(T) | self) : self","args_html":"(rhs : <a href=\"../Array.html\">Array</a>(T) | <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L13"},"def":{"name":"+","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Array(T) | self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items + rhs.to_a)"}},{"html_id":"-(rhs:Array(T)|self):self-instance-method","name":"-","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Array(T) | self"}],"args_string":"(rhs : Array(T) | self) : self","args_html":"(rhs : <a href=\"../Array.html\">Array</a>(T) | <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L13"},"def":{"name":"-","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Array(T) | self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items - rhs.to_a)"}},{"html_id":"[](start:Int,count:Int):self-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Int"},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"args_string":"(start : Int, count : Int) : self","args_html":"(start : Int, count : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":23,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L23"},"def":{"name":"[]","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Int"},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items[start, count])"}},{"html_id":"[](range:Range(Int,Int)):self-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"args_string":"(range : Range(Int, Int)) : self","args_html":"(range : <a href=\"../Range.html\">Range</a>(Int, Int)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L19"},"def":{"name":"[]","args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items[range])"}},{"html_id":"[]?(start:Int,count:Int):self?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Int"},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"args_string":"(start : Int, count : Int) : self?","args_html":"(start : Int, count : Int) : <span class=\"k\">self</span>?","location":{"filename":"src/chem/core/array_view.cr","line_number":31,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L31"},"def":{"name":"[]?","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Int"},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self | ::Nil","visibility":"Public","body":"wrap(@items[start, count]?)"}},{"html_id":"[]?(range:Range(Int,Int)):self?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"args_string":"(range : Range(Int, Int)) : self?","args_html":"(range : <a href=\"../Range.html\">Range</a>(Int, Int)) : <span class=\"k\">self</span>?","location":{"filename":"src/chem/core/array_view.cr","line_number":27,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L27"},"def":{"name":"[]?","args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Int, Int)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self | ::Nil","visibility":"Public","body":"wrap(@items[range]?)"}},{"html_id":"chunks(&:T->U):Array(Tuple(U,self))forallU-instance-method","name":"chunks","doc":"Enumerates over the items, chunking them together based on\nthe return value of the block.\n\nConsecutive elements which return the same block value are chunked together.\n\nFor example, consecutive even numbers and odd numbers can be chunked as follows.\n\n```\nary = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5].chunks { |n| n.even? }\nary # => [{false, [3, 1]}, {true, [4]}, {false, [1, 5, 9]}, {true, [2, 6]}, {false, [5, 3, 5]}]\n```\n\nThe following key values have special meaning:\n\n* `Enumerable::Chunk::Drop` specifies that the elements should be dropped\n* `Enumerable::Chunk::Alone` specifies that the element should be chunked by itself\n\nSee also: `Iterator#chunk`.","summary":"<p>Enumerates over the items, chunking them together based on the return value of the block.</p>","abstract":false,"args":[],"args_string":"(& : T -> U) : Array(Tuple(U, self)) forall U","args_html":"(& : T -> U) : <a href=\"../Array.html\">Array</a>(Tuple(U, <span class=\"k\">self</span>)) forall U","location":{"filename":"src/chem/core/array_view.cr","line_number":35,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L35"},"def":{"name":"chunks","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T -> U)"},"return_type":"Array(Tuple(U, self))","visibility":"Public","body":"@items.chunks do |ele|\n  yield ele\nend.map do |k, v|\n  {k, wrap(v)}\nend"}},{"html_id":"first(count:Int):self-instance-method","name":"first","doc":"Returns an `Array` with the first *count* elements in the collection.\n\nIf *count* is bigger than the number of elements in the collection,\nreturns as many as possible. This include the case of calling it over\nan empty collection, in which case it returns an empty array.","summary":"<p>Returns an <code><a href=\"../Array.html\">Array</a></code> with the first <em>count</em> elements in the collection.</p>","abstract":false,"args":[{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"args_string":"(count : Int) : self","args_html":"(count : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":40,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L40"},"def":{"name":"first","args":[{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items.first(count))"}},{"html_id":"group_by(&:T->U):Hash(U,self)forallU-instance-method","name":"group_by","doc":"Returns a `Hash` whose keys are each different value that the passed block\nreturned when run for each element in the collection, and which values are\nan `Array` of the elements for which the block returned that value.\n\n```\n[\"Alice\", \"Bob\", \"Ary\"].group_by { |name| name.size } # => {5 => [\"Alice\"], 3 => [\"Bob\", \"Ary\"]}\n```","summary":"<p>Returns a <code>Hash</code> whose keys are each different value that the passed block returned when run for each element in the collection, and which values are an <code><a href=\"../Array.html\">Array</a></code> of the elements for which the block returned that value.</p>","abstract":false,"args":[],"args_string":"(& : T -> U) : Hash(U, self) forall U","args_html":"(& : T -> U) : Hash(U, <span class=\"k\">self</span>) forall U","location":{"filename":"src/chem/core/array_view.cr","line_number":44,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L44"},"def":{"name":"group_by","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T -> U)"},"return_type":"Hash(U, self)","visibility":"Public","body":"@items.group_by do |ele|\n  yield ele\nend.transform_values do |ary|\n  wrap(ary)\nend"}},{"html_id":"last(count:Int):self-instance-method","name":"last","doc":null,"summary":null,"abstract":false,"args":[{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"args_string":"(count : Int) : self","args_html":"(count : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":49,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L49"},"def":{"name":"last","args":[{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items.last(count))"}},{"html_id":"partition(&:T->_):Tuple(self,self)-instance-method","name":"partition","doc":"Returns a `Tuple` with two arrays. The first one contains the elements\nin the collection for which the passed block returned `true`,\nand the second one those for which it returned `false`.\n\n```\n[1, 2, 3, 4, 5, 6].partition { |i| i % 2 == 0 } # => {[2, 4, 6], [1, 3, 5]}\n```","summary":"<p>Returns a <code>Tuple</code> with two arrays.</p>","abstract":false,"args":[],"args_string":"(& : T -> _) : Tuple(self, self)","args_html":"(& : T -> _) : Tuple(<span class=\"k\">self</span>, <span class=\"k\">self</span>)","location":{"filename":"src/chem/core/array_view.cr","line_number":53,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L53"},"def":{"name":"partition","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T -> _)"},"return_type":"Tuple(self, self)","visibility":"Public","body":"@items.partition do |ele|\n  yield ele\nend.map do |ary|\n  wrap(ary)\nend"}},{"html_id":"reject(&:T->_):self-instance-method","name":"reject","doc":"Returns an `Array` with all the elements in the collection for which\nthe passed block returns `false`.\n\n```\n[1, 2, 3, 4, 5, 6].reject { |i| i % 2 == 0 } # => [1, 3, 5]\n```","summary":"<p>Returns an <code><a href=\"../Array.html\">Array</a></code> with all the elements in the collection for which the passed block returns <code>false</code>.</p>","abstract":false,"args":[],"args_string":"(& : T -> _) : self","args_html":"(& : T -> _) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":58,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L58"},"def":{"name":"reject","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T -> _)"},"return_type":"self","visibility":"Public","body":"wrap(@items.reject do |ele|\n  yield ele\nend)"}},{"html_id":"reject(value):self-instance-method","name":"reject","doc":"Returns an `Array` with all the elements in the collection for which\n`pattern === element` is false.\n\n```\n[1, 3, 2, 5, 4, 6].reject(3..5) # => [1, 2, 6]\n```","summary":"<p>Returns an <code><a href=\"../Array.html\">Array</a></code> with all the elements in the collection for which <code>pattern === element</code> is false.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : self","args_html":"(value) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":62,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L62"},"def":{"name":"reject","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items.reject(value))"}},{"html_id":"reverse:self-instance-method","name":"reverse","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":66,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L66"},"def":{"name":"reverse","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items.reverse)"}},{"html_id":"reverse!:self-instance-method","name":"reverse!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":70,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L70"},"def":{"name":"reverse!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"@items.reverse!\nself\n"}},{"html_id":"rotate(n:Int=1):self-instance-method","name":"rotate","doc":null,"summary":null,"abstract":false,"args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":"Int"}],"args_string":"(n : Int = 1) : self","args_html":"(n : Int = <span class=\"n\">1</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":75,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L75"},"def":{"name":"rotate","args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items.rotate(n))"}},{"html_id":"rotate!(n:Int=1):self-instance-method","name":"rotate!","doc":null,"summary":null,"abstract":false,"args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":"Int"}],"args_string":"(n : Int = 1) : self","args_html":"(n : Int = <span class=\"n\">1</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":79,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L79"},"def":{"name":"rotate!","args":[{"name":"n","doc":null,"default_value":"1","external_name":"n","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"@items.rotate!(n)\nself\n"}},{"html_id":"sample(n:Int,random=Random::DEFAULT):self-instance-method","name":"sample","doc":":inherit:\n\nIf `self` is not empty and `n` is equal to 1, calls `sample(random)` exactly\nonce. Thus, *random* will be left in a different state compared to the\nimplementation in `Enumerable`.","summary":"<p>:inherit:</p>","abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int"},{"name":"random","doc":null,"default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"args_string":"(n : Int, random = Random::DEFAULT) : self","args_html":"(n : Int, random = <span class=\"t\">Random</span><span class=\"t\">::</span><span class=\"t\">DEFAULT</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":84,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L84"},"def":{"name":"sample","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int"},{"name":"random","doc":null,"default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items.sample(n, random))"}},{"html_id":"select(&:T->_):self-instance-method","name":"select","doc":"Returns an `Array` with all the elements in the collection for which\nthe passed block returns `true`.\n\n```\n[1, 2, 3, 4, 5, 6].select { |i| i % 2 == 0 } # => [2, 4, 6]\n```","summary":"<p>Returns an <code><a href=\"../Array.html\">Array</a></code> with all the elements in the collection for which the passed block returns <code>true</code>.</p>","abstract":false,"args":[],"args_string":"(& : T -> _) : self","args_html":"(& : T -> _) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":88,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L88"},"def":{"name":"select","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T -> _)"},"return_type":"self","visibility":"Public","body":"wrap(@items.select do |ele|\n  yield ele\nend)"}},{"html_id":"select(value):self-instance-method","name":"select","doc":"Returns an `Array` with all the elements in the collection for which\n`pattern === element`.\n\n```\n[1, 3, 2, 5, 4, 6].select(3..5) # => [3, 5, 4]\n[\"Alice\", \"Bob\"].select(/^A/)   # => [\"Alice\"]\n```","summary":"<p>Returns an <code><a href=\"../Array.html\">Array</a></code> with all the elements in the collection for which <code>pattern === element</code>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"args_string":"(value) : self","args_html":"(value) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":92,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L92"},"def":{"name":"select","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items.select(value))"}},{"html_id":"shuffle(random=Random::DEFAULT):self-instance-method","name":"shuffle","doc":null,"summary":null,"abstract":false,"args":[{"name":"random","doc":null,"default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"args_string":"(random = Random::DEFAULT) : self","args_html":"(random = <span class=\"t\">Random</span><span class=\"t\">::</span><span class=\"t\">DEFAULT</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":96,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L96"},"def":{"name":"shuffle","args":[{"name":"random","doc":null,"default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items.shuffle(random))"}},{"html_id":"shuffle!(random=Random::DEFAULT):self-instance-method","name":"shuffle!","doc":null,"summary":null,"abstract":false,"args":[{"name":"random","doc":null,"default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"args_string":"(random = Random::DEFAULT) : self","args_html":"(random = <span class=\"t\">Random</span><span class=\"t\">::</span><span class=\"t\">DEFAULT</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":100,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L100"},"def":{"name":"shuffle!","args":[{"name":"random","doc":null,"default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"@items.shuffle!(random)\nself\n"}},{"html_id":"size(*args,**options)-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/array_view.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L11"},"def":{"name":"size","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@items.size(*args, **options)"}},{"html_id":"size(*args,**options,&)-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/array_view.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L11"},"def":{"name":"size","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@items.size(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"skip(count:Int):self-instance-method","name":"skip","doc":"Returns an `Array` with the first *count* elements removed\nfrom the original collection.\n\nIf *count* is bigger than the number of elements in the collection, returns an empty array.\n\n```\n[1, 2, 3, 4, 5, 6].skip(3) # => [4, 5, 6]\n```","summary":"<p>Returns an <code><a href=\"../Array.html\">Array</a></code> with the first <em>count</em> elements removed from the original collection.</p>","abstract":false,"args":[{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"args_string":"(count : Int) : self","args_html":"(count : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":105,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L105"},"def":{"name":"skip","args":[{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items.skip(count))"}},{"html_id":"skip_while(&:T->_):self-instance-method","name":"skip_while","doc":"Skips elements up to, but not including, the first element for which\nthe block returns `nil` or `false` and returns an `Array`\ncontaining the remaining elements.\n\n```\n[1, 2, 3, 4, 5, 0].skip_while { |i| i < 3 } # => [3, 4, 5, 0]\n```","summary":"<p>Skips elements up to, but not including, the first element for which the block returns <code>nil</code> or <code>false</code> and returns an <code><a href=\"../Array.html\">Array</a></code> containing the remaining elements.</p>","abstract":false,"args":[],"args_string":"(& : T -> _) : self","args_html":"(& : T -> _) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":109,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L109"},"def":{"name":"skip_while","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T -> _)"},"return_type":"self","visibility":"Public","body":"wrap(@items.skip_while do |ele|\n  yield ele\nend)"}},{"html_id":"sort:self-instance-method","name":"sort","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":113,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L113"},"def":{"name":"sort","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items.sort)"}},{"html_id":"sort(&:T,T->Int):self-instance-method","name":"sort","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : T, T -> Int) : self","args_html":"(& : T, T -> Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":117,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L117"},"def":{"name":"sort","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T, T -> Int)"},"return_type":"self","visibility":"Public","body":"wrap(@items.sort do |a, b|\n  yield a, b\nend)"}},{"html_id":"sort!:self-instance-method","name":"sort!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":121,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L121"},"def":{"name":"sort!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"@items.sort!\nself\n"}},{"html_id":"sort!(&:T,T->Int):self-instance-method","name":"sort!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : T, T -> Int) : self","args_html":"(& : T, T -> Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":126,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L126"},"def":{"name":"sort!","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T, T -> Int)"},"return_type":"self","visibility":"Public","body":"@items.sort! do |a, b|\n  yield a, b\nend\nself\n"}},{"html_id":"sort_by(&:T->_):self-instance-method","name":"sort_by","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : T -> _) : self","args_html":"(& : T -> _) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":131,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L131"},"def":{"name":"sort_by","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T -> _)"},"return_type":"self","visibility":"Public","body":"wrap(@items.sort_by do |ele|\n  yield ele\nend)"}},{"html_id":"sort_by!(&:T->_):self-instance-method","name":"sort_by!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : T -> _) : self","args_html":"(& : T -> _) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":135,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L135"},"def":{"name":"sort_by!","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T -> _)"},"return_type":"self","visibility":"Public","body":"@items.sort_by! do |ele|\n  yield ele\nend\nself\n"}},{"html_id":"take_while(&:T->_):self-instance-method","name":"take_while","doc":"Passes elements to the block until the block returns `nil` or `false`,\nthen stops iterating and returns an `Array` of all prior elements.\n\n```\n[1, 2, 3, 4, 5, 0].take_while { |i| i < 3 } # => [1, 2]\n```","summary":"<p>Passes elements to the block until the block returns <code>nil</code> or <code>false</code>, then stops iterating and returns an <code><a href=\"../Array.html\">Array</a></code> of all prior elements.</p>","abstract":false,"args":[],"args_string":"(& : T -> _) : self","args_html":"(& : T -> _) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":140,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L140"},"def":{"name":"take_while","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T -> _)"},"return_type":"self","visibility":"Public","body":"wrap(@items.take_while do |ele|\n  yield ele\nend)"}},{"html_id":"to_a:Array(T)-instance-method","name":"to_a","doc":"Returns an `Array` with all the elements in the collection.\n\n```\n{1, 2, 3}.to_a # => [1, 2, 3]\n```","summary":"<p>Returns an <code><a href=\"../Array.html\">Array</a></code> with all the elements in the collection.</p>","abstract":false,"args":[],"args_string":" : Array(T)","args_html":" : <a href=\"../Array.html\">Array</a>(T)","location":{"filename":"src/chem/core/array_view.cr","line_number":144,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L144"},"def":{"name":"to_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(T)","visibility":"Public","body":"@items"}},{"html_id":"unsafe_fetch(*args,**options)-instance-method","name":"unsafe_fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/array_view.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L11"},"def":{"name":"unsafe_fetch","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@items.unsafe_fetch(*args, **options)"}},{"html_id":"unsafe_fetch(*args,**options,&)-instance-method","name":"unsafe_fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/array_view.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L11"},"def":{"name":"unsafe_fetch","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@items.unsafe_fetch(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"|(rhs:Array(T)|self):self-instance-method","name":"|","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Array(T) | self"}],"args_string":"(rhs : Array(T) | self) : self","args_html":"(rhs : <a href=\"../Array.html\">Array</a>(T) | <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/array_view.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/array_view.cr#L13"},"def":{"name":"|","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Array(T) | self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"wrap(@items | rhs.to_a)"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Atom","path":"Chem/Atom.html","kind":"class","full_name":"Chem::Atom","name":"Atom","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/atom.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L5"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L13"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L18"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L22"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":26,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L26"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":30,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L30"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":34,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L34"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":39,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L39"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":44,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L44"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":49,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L49"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":54,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L54"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":58,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L58"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":64,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L64"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":70,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L70"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":74,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L74"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":78,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L78"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":83,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L83"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":88,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L88"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":93,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L93"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":97,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L97"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":103,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L103"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":109,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L109"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":113,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L113"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":117,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L117"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":121,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L121"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":125,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L125"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":129,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L129"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":133,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L133"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":137,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L137"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":141,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L141"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":145,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L145"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":149,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L149"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":153,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L153"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":157,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L157"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":161,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L161"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":165,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L165"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":170,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L170"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":174,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L174"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":178,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L178"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":182,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L182"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":186,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L186"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":190,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L190"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":194,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L194"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":198,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L198"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":202,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L202"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":206,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L206"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":210,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L210"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":214,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L214"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":218,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L218"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":222,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L222"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":226,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L226"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":230,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L230"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":234,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L234"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":238,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L238"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":243,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L243"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":247,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L247"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":251,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L251"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":255,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L255"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":259,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L259"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":263,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L263"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":267,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L267"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":271,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L271"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":274,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L274"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":278,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L278"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":282,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L282"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":286,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L286"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":290,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L290"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":294,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L294"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":298,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L298"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":302,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L302"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":306,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L306"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":310,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L310"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":314,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L314"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":318,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L318"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":322,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L322"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":326,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L326"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":330,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L330"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":334,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L334"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":338,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L338"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":342,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L342"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":346,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L346"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":350,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L350"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":354,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L354"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":358,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L358"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":362,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L362"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":365,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L365"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":368,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L368"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":371,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L371"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":374,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L374"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":377,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L377"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":381,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L381"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":385,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L385"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":389,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L389"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":393,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L393"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":397,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L397"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":401,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L401"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":405,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L405"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":409,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L409"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":412,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L412"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":415,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L415"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":418,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L418"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":420,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L420"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":422,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L422"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":424,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L424"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":426,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L426"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":428,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L428"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":430,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L430"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":432,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L432"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":434,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L434"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":436,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L436"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":438,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L438"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":440,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L440"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":442,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L442"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":444,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L444"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":446,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L446"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":448,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L448"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":450,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L450"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":452,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L452"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":454,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L454"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"TODO rename `charge` to `formal_charge`\nTODO add `partial_charge : Float64 = 0.0`\nTODO add `residue_index` that starts from 0 and does not reset per chain","summary":"<p><span class=\"flag orange\">TODO</span>  rename <code>charge</code> to <code><a href=\"../Chem/Atom.html#formal_charge%3AInt32-instance-method\">#formal_charge</a></code> TODO add <code>partial_charge : Float64 = 0.0</code> TODO add <code>residue_index</code> that starts from 0 and does not reset per chain</p>","class_methods":[],"constructors":[{"html_id":"new(name:String,serial:Int32,coords:Spatial::Vec3,residue:Residue,element:Element?=nil,formal_charge:Int32=0,mass:Number?=nil,occupancy:Float64=1,partial_charge:Float64=0.0,temperature_factor:Float64=0,vdw_radius:Number?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int32"},{"name":"coords","doc":null,"default_value":"","external_name":"coords","restriction":"Spatial::Vec3"},{"name":"residue","doc":null,"default_value":"","external_name":"residue","restriction":"Residue"},{"name":"element","doc":null,"default_value":"nil","external_name":"element","restriction":"Element | ::Nil"},{"name":"formal_charge","doc":null,"default_value":"0","external_name":"formal_charge","restriction":"Int32"},{"name":"mass","doc":null,"default_value":"nil","external_name":"mass","restriction":"Number | ::Nil"},{"name":"occupancy","doc":null,"default_value":"1","external_name":"occupancy","restriction":"Float64"},{"name":"partial_charge","doc":null,"default_value":"0.0","external_name":"partial_charge","restriction":"Float64"},{"name":"temperature_factor","doc":null,"default_value":"0","external_name":"temperature_factor","restriction":"Float64"},{"name":"vdw_radius","doc":null,"default_value":"nil","external_name":"vdw_radius","restriction":"Number | ::Nil"}],"args_string":"(name : String, serial : Int32, coords : Spatial::Vec3, residue : Residue, element : Element? = nil, formal_charge : Int32 = 0, mass : Number? = nil, occupancy : Float64 = 1, partial_charge : Float64 = 0.0, temperature_factor : Float64 = 0, vdw_radius : Number? = nil)","args_html":"(name : String, serial : Int32, coords : <a href=\"../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, residue : <a href=\"../Chem/Residue.html\">Residue</a>, element : <a href=\"../Chem/Element.html\">Element</a>? = <span class=\"n\">nil</span>, formal_charge : Int32 = <span class=\"n\">0</span>, mass : <a href=\"../Number.html\">Number</a>? = <span class=\"n\">nil</span>, occupancy : Float64 = <span class=\"n\">1</span>, partial_charge : Float64 = <span class=\"n\">0.0</span>, temperature_factor : Float64 = <span class=\"n\">0</span>, vdw_radius : <a href=\"../Number.html\">Number</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/core/atom.cr","line_number":24,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L24"},"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int32"},{"name":"coords","doc":null,"default_value":"","external_name":"coords","restriction":"Spatial::Vec3"},{"name":"residue","doc":null,"default_value":"","external_name":"residue","restriction":"Residue"},{"name":"element","doc":null,"default_value":"nil","external_name":"element","restriction":"Element | ::Nil"},{"name":"formal_charge","doc":null,"default_value":"0","external_name":"formal_charge","restriction":"Int32"},{"name":"mass","doc":null,"default_value":"nil","external_name":"mass","restriction":"Number | ::Nil"},{"name":"occupancy","doc":null,"default_value":"1","external_name":"occupancy","restriction":"Float64"},{"name":"partial_charge","doc":null,"default_value":"0.0","external_name":"partial_charge","restriction":"Float64"},{"name":"temperature_factor","doc":null,"default_value":"0","external_name":"temperature_factor","restriction":"Float64"},{"name":"vdw_radius","doc":null,"default_value":"nil","external_name":"vdw_radius","restriction":"Number | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, serial, coords, residue, element, formal_charge, mass, occupancy, partial_charge, temperature_factor, vdw_radius)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<=>(rhs:self):Int32-instance-method","name":"<=>","doc":"The comparison operator.\n\nReturns `-1`, `0` or `1` depending on whether `self` precedes\n*rhs*, equals to *rhs* or comes after *rhs*. The comparison is\ndone based on atom serial.\n\n```\natoms = Structure.read(\"peptide.pdb\").atoms\n\natoms[0] <=> atoms[1] # => -1\natoms[1] <=> atoms[1] # => 0\natoms[2] <=> atoms[1] # => 1\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Int32","args_html":"(rhs : <span class=\"k\">self</span>) : Int32","location":{"filename":"src/chem/core/atom.cr","line_number":103,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L103"},"def":{"name":"<=>","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@serial <=> rhs.serial"}},{"html_id":"===(element:Element):Bool-instance-method","name":"===","doc":"Case equality. Returns true if atom's element is *element*,\notherwise false.\n\n```\nstructure = Structure.read \"peptide.pdb\"\ndesc = case structure.dig('A', 5, \"CK\")\n       when Topology::AtomType(\"C\")  then \"carbonyl carbon\"\n       when Topology::AtomType(\"CA\") then \"alpha carbon\"\n       when Topology::AtomType(\"CB\") then \"beta carbon\"\n       when Topology::AtomType(\"CG\") then \"gamma carbon\"\n       when Topology::AtomType(\"CD\") then \"delta carbon\"\n       when PeriodicTable::C         then \"carbon\"\n       else                               \"non-carbon\"\n       end\ndesc # => \"non-carbon\"\n```","summary":"<p>Case equality.</p>","abstract":false,"args":[{"name":"element","doc":null,"default_value":"","external_name":"element","restriction":"Element"}],"args_string":"(element : Element) : Bool","args_html":"(element : <a href=\"../Chem/Element.html\">Element</a>) : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":86,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L86"},"def":{"name":"===","args":[{"name":"element","doc":null,"default_value":"","external_name":"element","restriction":"Element"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@element == element"}},{"html_id":"===(atom_t:Topology::AtomType):Bool-instance-method","name":"===","doc":"Case equality. This is equivalent to `#match?`.\n\n```\nstructure = Structure.read \"peptide.pdb\"\ndesc = case structure.dig('A', 5, \"CA\")\n       when Topology::AtomType(\"C\")  then \"carbonyl carbon\"\n       when Topology::AtomType(\"CA\") then \"alpha carbon\"\n       when Topology::AtomType(\"CB\") then \"beta carbon\"\n       when Topology::AtomType(\"CG\") then \"gamma carbon\"\n       when Topology::AtomType(\"CD\") then \"delta carbon\"\n       when PeriodicTable::C         then \"carbon\"\n       else                               \"non-carbon\"\n       end\ndesc # => \"alpha carbon\"\n```","summary":"<p>Case equality.</p>","abstract":false,"args":[{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"Topology::AtomType"}],"args_string":"(atom_t : Topology::AtomType) : Bool","args_html":"(atom_t : <a href=\"../Chem/Topology/AtomType.html\">Topology::AtomType</a>) : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":66,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L66"},"def":{"name":"===","args":[{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"Topology::AtomType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"match?(atom_t)"}},{"html_id":"actinium?-instance-method","name":"actinium?","doc":"Returns `true` if the atom's element is Actinium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Actinium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":377,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L377"},"def":{"name":"actinium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.actinium?"}},{"html_id":"aluminum?-instance-method","name":"aluminum?","doc":"Returns `true` if the atom's element is Aluminum, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Aluminum, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":70,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L70"},"def":{"name":"aluminum?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.aluminum?"}},{"html_id":"americium?-instance-method","name":"americium?","doc":"Returns `true` if the atom's element is Americium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Americium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":401,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L401"},"def":{"name":"americium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.americium?"}},{"html_id":"antimony?-instance-method","name":"antimony?","doc":"Returns `true` if the atom's element is Antimony, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Antimony, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":230,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L230"},"def":{"name":"antimony?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.antimony?"}},{"html_id":"argon?-instance-method","name":"argon?","doc":"Returns `true` if the atom's element is Argon, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Argon, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":93,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L93"},"def":{"name":"argon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.argon?"}},{"html_id":"arsenic?-instance-method","name":"arsenic?","doc":"Returns `true` if the atom's element is Arsenic, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Arsenic, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":157,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L157"},"def":{"name":"arsenic?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.arsenic?"}},{"html_id":"astatine?-instance-method","name":"astatine?","doc":"Returns `true` if the atom's element is Astatine, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Astatine, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":365,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L365"},"def":{"name":"astatine?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.astatine?"}},{"html_id":"atomic_number(*args,**options)-instance-method","name":"atomic_number","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L22"},"def":{"name":"atomic_number","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.atomic_number(*args, **options)"}},{"html_id":"atomic_number(*args,**options,&)-instance-method","name":"atomic_number","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L22"},"def":{"name":"atomic_number","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.atomic_number(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"barium?-instance-method","name":"barium?","doc":"Returns `true` if the atom's element is Barium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Barium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":251,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L251"},"def":{"name":"barium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.barium?"}},{"html_id":"berkelium?-instance-method","name":"berkelium?","doc":"Returns `true` if the atom's element is Berkelium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Berkelium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":409,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L409"},"def":{"name":"berkelium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.berkelium?"}},{"html_id":"beryllium?-instance-method","name":"beryllium?","doc":"Returns `true` if the atom's element is Beryllium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Beryllium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":26,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L26"},"def":{"name":"beryllium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.beryllium?"}},{"html_id":"bismuth?-instance-method","name":"bismuth?","doc":"Returns `true` if the atom's element is Bismuth, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Bismuth, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":358,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L358"},"def":{"name":"bismuth?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.bismuth?"}},{"html_id":"bohrium?-instance-method","name":"bohrium?","doc":"Returns `true` if the atom's element is Bohrium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Bohrium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":432,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L432"},"def":{"name":"bohrium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.bohrium?"}},{"html_id":"bonded?(toother:self):Bool-instance-method","name":"bonded?","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"to","restriction":"self"}],"args_string":"(to other : self) : Bool","args_html":"(to other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":107,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L107"},"def":{"name":"bonded?","args":[{"name":"other","doc":null,"default_value":"","external_name":"to","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"bonds.any? do |__arg0|\n  (__arg0.other(self)) == other\nend"}},{"html_id":"bonded_atoms:Array(Atom)-instance-method","name":"bonded_atoms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Atom)","args_html":" : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/core/atom.cr","line_number":111,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L111"},"def":{"name":"bonded_atoms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Atom)","visibility":"Public","body":"bonds.map(&.other(self))"}},{"html_id":"bonds:BondArray-instance-method","name":"bonds","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BondArray","args_html":" : <a href=\"../Chem/BondArray.html\">BondArray</a>","location":{"filename":"src/chem/core/atom.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L6"},"def":{"name":"bonds","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BondArray","visibility":"Public","body":"if (value = @bonds).nil?\n  @bonds = (BondArray.new(self))\nelse\n  value\nend"}},{"html_id":"boron?-instance-method","name":"boron?","doc":"Returns `true` if the atom's element is Boron, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Boron, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":30,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L30"},"def":{"name":"boron?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.boron?"}},{"html_id":"bromine?-instance-method","name":"bromine?","doc":"Returns `true` if the atom's element is Bromine, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Bromine, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":165,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L165"},"def":{"name":"bromine?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.bromine?"}},{"html_id":"cadmium?-instance-method","name":"cadmium?","doc":"Returns `true` if the atom's element is Cadmium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Cadmium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":218,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L218"},"def":{"name":"cadmium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.cadmium?"}},{"html_id":"calcium?-instance-method","name":"calcium?","doc":"Returns `true` if the atom's element is Calcium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Calcium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":103,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L103"},"def":{"name":"calcium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.calcium?"}},{"html_id":"californium?-instance-method","name":"californium?","doc":"Returns `true` if the atom's element is Californium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Californium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":412,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L412"},"def":{"name":"californium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.californium?"}},{"html_id":"carbon?-instance-method","name":"carbon?","doc":"Returns `true` if the atom's element is Carbon, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Carbon, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":34,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L34"},"def":{"name":"carbon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.carbon?"}},{"html_id":"cerium?-instance-method","name":"cerium?","doc":"Returns `true` if the atom's element is Cerium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Cerium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":259,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L259"},"def":{"name":"cerium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.cerium?"}},{"html_id":"cesium?-instance-method","name":"cesium?","doc":"Returns `true` if the atom's element is Cesium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Cesium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":247,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L247"},"def":{"name":"cesium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.cesium?"}},{"html_id":"chain(*args,**options)-instance-method","name":"chain","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":21,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L21"},"def":{"name":"chain","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@residue.chain(*args, **options)"}},{"html_id":"chain(*args,**options,&)-instance-method","name":"chain","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":21,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L21"},"def":{"name":"chain","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@residue.chain(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"chlorine?-instance-method","name":"chlorine?","doc":"Returns `true` if the atom's element is Chlorine, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Chlorine, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":88,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L88"},"def":{"name":"chlorine?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.chlorine?"}},{"html_id":"chromium?-instance-method","name":"chromium?","doc":"Returns `true` if the atom's element is Chromium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Chromium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":121,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L121"},"def":{"name":"chromium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.chromium?"}},{"html_id":"cobalt?-instance-method","name":"cobalt?","doc":"Returns `true` if the atom's element is Cobalt, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Cobalt, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":133,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L133"},"def":{"name":"cobalt?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.cobalt?"}},{"html_id":"constraint:Constraint?-instance-method","name":"constraint","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Constraint?","args_html":" : <a href=\"../Chem/Constraint.html\">Constraint</a>?","location":{"filename":"src/chem/core/atom.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L7"},"def":{"name":"constraint","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Constraint | ::Nil","visibility":"Public","body":"@constraint"}},{"html_id":"constraint=(constraint:Constraint?)-instance-method","name":"constraint=","doc":null,"summary":null,"abstract":false,"args":[{"name":"constraint","doc":null,"default_value":"","external_name":"constraint","restriction":"Constraint | ::Nil"}],"args_string":"(constraint : Constraint?)","args_html":"(constraint : <a href=\"../Chem/Constraint.html\">Constraint</a>?)","location":{"filename":"src/chem/core/atom.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L7"},"def":{"name":"constraint=","args":[{"name":"constraint","doc":null,"default_value":"","external_name":"constraint","restriction":"Constraint | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@constraint = constraint"}},{"html_id":"coords:Spatial::Vec3-instance-method","name":"coords","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Spatial::Vec3","args_html":" : <a href=\"../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>","location":{"filename":"src/chem/core/atom.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L8"},"def":{"name":"coords","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Spatial::Vec3","visibility":"Public","body":"@coords"}},{"html_id":"coords=(coords:Spatial::Vec3)-instance-method","name":"coords=","doc":null,"summary":null,"abstract":false,"args":[{"name":"coords","doc":null,"default_value":"","external_name":"coords","restriction":"Spatial::Vec3"}],"args_string":"(coords : Spatial::Vec3)","args_html":"(coords : <a href=\"../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>)","location":{"filename":"src/chem/core/atom.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L8"},"def":{"name":"coords=","args":[{"name":"coords","doc":null,"default_value":"","external_name":"coords","restriction":"Spatial::Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@coords = coords"}},{"html_id":"copernicium?-instance-method","name":"copernicium?","doc":"Returns `true` if the atom's element is Copernicium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Copernicium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":442,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L442"},"def":{"name":"copernicium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.copernicium?"}},{"html_id":"copper?-instance-method","name":"copper?","doc":"Returns `true` if the atom's element is Copper, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Copper, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":141,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L141"},"def":{"name":"copper?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.copper?"}},{"html_id":"covalent_radius(*args,**options)-instance-method","name":"covalent_radius","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L22"},"def":{"name":"covalent_radius","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.covalent_radius(*args, **options)"}},{"html_id":"covalent_radius(*args,**options,&)-instance-method","name":"covalent_radius","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L22"},"def":{"name":"covalent_radius","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.covalent_radius(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"curium?-instance-method","name":"curium?","doc":"Returns `true` if the atom's element is Curium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Curium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":405,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L405"},"def":{"name":"curium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.curium?"}},{"html_id":"darmstadtium?-instance-method","name":"darmstadtium?","doc":"Returns `true` if the atom's element is Darmstadtium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Darmstadtium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":438,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L438"},"def":{"name":"darmstadtium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.darmstadtium?"}},{"html_id":"degree:Int32-instance-method","name":"degree","doc":"Returns the number of bonds.","summary":"<p>Returns the number of bonds.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/atom.cr","line_number":116,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L116"},"def":{"name":"degree","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"bonds.size"}},{"html_id":"dna?:Bool-instance-method","name":"dna?","doc":"Returns `true` if the atom belongs to a dna\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a dna residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":193,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L193"},"def":{"name":"dna?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@residue.dna?"}},{"html_id":"dubnium?-instance-method","name":"dubnium?","doc":"Returns `true` if the atom's element is Dubnium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Dubnium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":428,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L428"},"def":{"name":"dubnium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.dubnium?"}},{"html_id":"dysprosium?-instance-method","name":"dysprosium?","doc":"Returns `true` if the atom's element is Dysprosium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Dysprosium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":290,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L290"},"def":{"name":"dysprosium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.dysprosium?"}},{"html_id":"each_bonded_atom:Iterator(Atom)-instance-method","name":"each_bonded_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Atom)","args_html":" : Iterator(<a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/core/atom.cr","line_number":120,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L120"},"def":{"name":"each_bonded_atom","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Atom)","visibility":"Public","body":"bonds.each.map(&.other(self))"}},{"html_id":"each_bonded_atom(&:self->):Nil-instance-method","name":"each_bonded_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : self -> ) : Nil","args_html":"(& : <span class=\"k\">self</span> -> ) : Nil","location":{"filename":"src/chem/core/atom.cr","line_number":124,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L124"},"def":{"name":"each_bonded_atom","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"Nil","visibility":"Public","body":"bonds.each do |bond|\n  yield bond.other(self)\nend"}},{"html_id":"einsteinium?-instance-method","name":"einsteinium?","doc":"Returns `true` if the atom's element is Einsteinium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Einsteinium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":415,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L415"},"def":{"name":"einsteinium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.einsteinium?"}},{"html_id":"element:Element-instance-method","name":"element","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Element","args_html":" : <a href=\"../Chem/Element.html\">Element</a>","location":{"filename":"src/chem/core/atom.cr","line_number":9,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L9"},"def":{"name":"element","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Element","visibility":"Public","body":"@element"}},{"html_id":"element=(element:Element)-instance-method","name":"element=","doc":null,"summary":null,"abstract":false,"args":[{"name":"element","doc":null,"default_value":"","external_name":"element","restriction":"Element"}],"args_string":"(element : Element)","args_html":"(element : <a href=\"../Chem/Element.html\">Element</a>)","location":{"filename":"src/chem/core/atom.cr","line_number":9,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L9"},"def":{"name":"element=","args":[{"name":"element","doc":null,"default_value":"","external_name":"element","restriction":"Element"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element = element"}},{"html_id":"erbium?-instance-method","name":"erbium?","doc":"Returns `true` if the atom's element is Erbium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Erbium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":298,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L298"},"def":{"name":"erbium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.erbium?"}},{"html_id":"europium?-instance-method","name":"europium?","doc":"Returns `true` if the atom's element is Europium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Europium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":278,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L278"},"def":{"name":"europium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.europium?"}},{"html_id":"fermium?-instance-method","name":"fermium?","doc":"Returns `true` if the atom's element is Fermium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Fermium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":418,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L418"},"def":{"name":"fermium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.fermium?"}},{"html_id":"fluorine?-instance-method","name":"fluorine?","doc":"Returns `true` if the atom's element is Fluorine, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Fluorine, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":49,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L49"},"def":{"name":"fluorine?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.fluorine?"}},{"html_id":"formal_charge:Int32-instance-method","name":"formal_charge","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/atom.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L10"},"def":{"name":"formal_charge","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@formal_charge"}},{"html_id":"formal_charge=(formal_charge:Int32)-instance-method","name":"formal_charge=","doc":null,"summary":null,"abstract":false,"args":[{"name":"formal_charge","doc":null,"default_value":"","external_name":"formal_charge","restriction":"Int32"}],"args_string":"(formal_charge : Int32)","args_html":"(formal_charge : Int32)","location":{"filename":"src/chem/core/atom.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L10"},"def":{"name":"formal_charge=","args":[{"name":"formal_charge","doc":null,"default_value":"","external_name":"formal_charge","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@formal_charge = formal_charge"}},{"html_id":"francium?-instance-method","name":"francium?","doc":"Returns `true` if the atom's element is Francium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Francium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":371,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L371"},"def":{"name":"francium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.francium?"}},{"html_id":"gadolinium?-instance-method","name":"gadolinium?","doc":"Returns `true` if the atom's element is Gadolinium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Gadolinium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":282,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L282"},"def":{"name":"gadolinium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.gadolinium?"}},{"html_id":"gallium?-instance-method","name":"gallium?","doc":"Returns `true` if the atom's element is Gallium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Gallium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":149,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L149"},"def":{"name":"gallium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.gallium?"}},{"html_id":"germanium?-instance-method","name":"germanium?","doc":"Returns `true` if the atom's element is Germanium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Germanium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":153,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L153"},"def":{"name":"germanium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.germanium?"}},{"html_id":"gold?-instance-method","name":"gold?","doc":"Returns `true` if the atom's element is Gold, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Gold, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":342,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L342"},"def":{"name":"gold?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.gold?"}},{"html_id":"hafnium?-instance-method","name":"hafnium?","doc":"Returns `true` if the atom's element is Hafnium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Hafnium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":314,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L314"},"def":{"name":"hafnium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.hafnium?"}},{"html_id":"hassium?-instance-method","name":"hassium?","doc":"Returns `true` if the atom's element is Hassium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Hassium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":434,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L434"},"def":{"name":"hassium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.hassium?"}},{"html_id":"helium?-instance-method","name":"helium?","doc":"Returns `true` if the atom's element is Helium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Helium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L18"},"def":{"name":"helium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.helium?"}},{"html_id":"het?:Bool-instance-method","name":"het?","doc":"Returns `true` if the atom belongs to a non-standard (HET)\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a non-standard (HET) residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":132,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L132"},"def":{"name":"het?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@residue.het?"}},{"html_id":"holmium?-instance-method","name":"holmium?","doc":"Returns `true` if the atom's element is Holmium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Holmium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":294,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L294"},"def":{"name":"holmium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.holmium?"}},{"html_id":"hydrogen?-instance-method","name":"hydrogen?","doc":"Returns `true` if the atom's element is Hydrogen, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Hydrogen, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L13"},"def":{"name":"hydrogen?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.hydrogen?"}},{"html_id":"indium?-instance-method","name":"indium?","doc":"Returns `true` if the atom's element is Indium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Indium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":222,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L222"},"def":{"name":"indium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.indium?"}},{"html_id":"inspect(io:IO)-instance-method","name":"inspect","doc":"Appends a String representation of this object\nwhich includes its class name, its object address\nand the values of all instance variables.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).inspect # => #<Person:0x10fd31f20 @name=\"John\", @age=32>\n```","summary":"<p>Appends a String representation of this object which includes its class name, its object address and the values of all instance variables.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/core/atom.cr","line_number":136,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L136"},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << \"<Atom \"\nto_s(io)\nio << \">\"\n"}},{"html_id":"iodine?-instance-method","name":"iodine?","doc":"Returns `true` if the atom's element is Iodine, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Iodine, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":238,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L238"},"def":{"name":"iodine?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.iodine?"}},{"html_id":"ion?:Bool-instance-method","name":"ion?","doc":"Returns `true` if the atom belongs to a ion\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a ion residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":193,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L193"},"def":{"name":"ion?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@residue.ion?"}},{"html_id":"iridium?-instance-method","name":"iridium?","doc":"Returns `true` if the atom's element is Iridium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Iridium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":334,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L334"},"def":{"name":"iridium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.iridium?"}},{"html_id":"iron?-instance-method","name":"iron?","doc":"Returns `true` if the atom's element is Iron, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Iron, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":129,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L129"},"def":{"name":"iron?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.iron?"}},{"html_id":"krypton?-instance-method","name":"krypton?","doc":"Returns `true` if the atom's element is Krypton, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Krypton, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":170,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L170"},"def":{"name":"krypton?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.krypton?"}},{"html_id":"lanthanum?-instance-method","name":"lanthanum?","doc":"Returns `true` if the atom's element is Lanthanum, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Lanthanum, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":255,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L255"},"def":{"name":"lanthanum?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.lanthanum?"}},{"html_id":"lawrencium?-instance-method","name":"lawrencium?","doc":"Returns `true` if the atom's element is Lawrencium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Lawrencium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":424,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L424"},"def":{"name":"lawrencium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.lawrencium?"}},{"html_id":"lead?-instance-method","name":"lead?","doc":"Returns `true` if the atom's element is Lead, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Lead, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":354,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L354"},"def":{"name":"lead?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.lead?"}},{"html_id":"lithium?-instance-method","name":"lithium?","doc":"Returns `true` if the atom's element is Lithium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Lithium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L22"},"def":{"name":"lithium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.lithium?"}},{"html_id":"lutetium?-instance-method","name":"lutetium?","doc":"Returns `true` if the atom's element is Lutetium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Lutetium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":310,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L310"},"def":{"name":"lutetium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.lutetium?"}},{"html_id":"magnesium?-instance-method","name":"magnesium?","doc":"Returns `true` if the atom's element is Magnesium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Magnesium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":64,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L64"},"def":{"name":"magnesium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.magnesium?"}},{"html_id":"manganese?-instance-method","name":"manganese?","doc":"Returns `true` if the atom's element is Manganese, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Manganese, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":125,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L125"},"def":{"name":"manganese?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.manganese?"}},{"html_id":"mass:Float64-instance-method","name":"mass","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core/atom.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L12"},"def":{"name":"mass","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@mass"}},{"html_id":"mass=(mass:Float64)-instance-method","name":"mass=","doc":null,"summary":null,"abstract":false,"args":[{"name":"mass","doc":null,"default_value":"","external_name":"mass","restriction":"Float64"}],"args_string":"(mass : Float64)","args_html":"(mass : Float64)","location":{"filename":"src/chem/core/atom.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L12"},"def":{"name":"mass=","args":[{"name":"mass","doc":null,"default_value":"","external_name":"mass","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@mass = mass"}},{"html_id":"match?(atom_t:Topology::AtomType):Bool-instance-method","name":"match?","doc":"Matches *self* against *atom_t*.\n\nChecking for a match considers both atom name and element.\n\n```\natom = Structure.read(\"peptide.pdb\").dig 'A', 1, \"CA\"\natom.match?(Topology::AtomType.new(\"CA\"))               # => true\natom.match?(Topology::AtomType.new(\"CA\", element: \"N\")) # => false\natom.match?(Topology::AtomType.new(\"ND2\"))              # => false\n```","summary":"<p>Matches <em>self</em> against <em>atom_t</em>.</p>","abstract":false,"args":[{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"Topology::AtomType"}],"args_string":"(atom_t : Topology::AtomType) : Bool","args_html":"(atom_t : <a href=\"../Chem/Topology/AtomType.html\">Topology::AtomType</a>) : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":152,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L152"},"def":{"name":"match?","args":[{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"Topology::AtomType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(@name == atom_t.name) && (@element == atom_t.element)"}},{"html_id":"max_valency(*args,**options)-instance-method","name":"max_valency","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L22"},"def":{"name":"max_valency","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.max_valency(*args, **options)"}},{"html_id":"max_valency(*args,**options,&)-instance-method","name":"max_valency","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L22"},"def":{"name":"max_valency","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.max_valency(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"meitnerium?-instance-method","name":"meitnerium?","doc":"Returns `true` if the atom's element is Meitnerium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Meitnerium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":436,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L436"},"def":{"name":"meitnerium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.meitnerium?"}},{"html_id":"membrane?:Bool-instance-method","name":"membrane?","doc":"Returns `true` if the atom belongs to a membrane\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a membrane residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":193,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L193"},"def":{"name":"membrane?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@residue.membrane?"}},{"html_id":"mendelevium?-instance-method","name":"mendelevium?","doc":"Returns `true` if the atom's element is Mendelevium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Mendelevium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":420,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L420"},"def":{"name":"mendelevium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.mendelevium?"}},{"html_id":"mercury?-instance-method","name":"mercury?","doc":"Returns `true` if the atom's element is Mercury, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Mercury, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":346,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L346"},"def":{"name":"mercury?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.mercury?"}},{"html_id":"missing_valency:Int32-instance-method","name":"missing_valency","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/atom.cr","line_number":156,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L156"},"def":{"name":"missing_valency","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"(nominal_valency - valency).clamp(0..)"}},{"html_id":"molybdenum?-instance-method","name":"molybdenum?","doc":"Returns `true` if the atom's element is Molybdenum, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Molybdenum, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":194,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L194"},"def":{"name":"molybdenum?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.molybdenum?"}},{"html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/core/atom.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L11"},"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String)-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/chem/core/atom.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L11"},"def":{"name":"name=","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@name = name"}},{"html_id":"neodymium?-instance-method","name":"neodymium?","doc":"Returns `true` if the atom's element is Neodymium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Neodymium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":267,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L267"},"def":{"name":"neodymium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.neodymium?"}},{"html_id":"neon?-instance-method","name":"neon?","doc":"Returns `true` if the atom's element is Neon, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Neon, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":54,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L54"},"def":{"name":"neon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.neon?"}},{"html_id":"neptunium?-instance-method","name":"neptunium?","doc":"Returns `true` if the atom's element is Neptunium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Neptunium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":393,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L393"},"def":{"name":"neptunium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.neptunium?"}},{"html_id":"nickel?-instance-method","name":"nickel?","doc":"Returns `true` if the atom's element is Nickel, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Nickel, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":137,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L137"},"def":{"name":"nickel?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.nickel?"}},{"html_id":"niobium?-instance-method","name":"niobium?","doc":"Returns `true` if the atom's element is Niobium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Niobium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":190,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L190"},"def":{"name":"niobium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.niobium?"}},{"html_id":"nitrogen?-instance-method","name":"nitrogen?","doc":"Returns `true` if the atom's element is Nitrogen, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Nitrogen, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":39,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L39"},"def":{"name":"nitrogen?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.nitrogen?"}},{"html_id":"nobelium?-instance-method","name":"nobelium?","doc":"Returns `true` if the atom's element is Nobelium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Nobelium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":422,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L422"},"def":{"name":"nobelium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.nobelium?"}},{"html_id":"nominal_valency:Int32-instance-method","name":"nominal_valency","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/atom.cr","line_number":160,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L160"},"def":{"name":"nominal_valency","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@element.valencies.find(&.>=(valency)) || max_valency"}},{"html_id":"occupancy:Float64-instance-method","name":"occupancy","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core/atom.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L13"},"def":{"name":"occupancy","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@occupancy"}},{"html_id":"occupancy=(occupancy:Float64)-instance-method","name":"occupancy=","doc":null,"summary":null,"abstract":false,"args":[{"name":"occupancy","doc":null,"default_value":"","external_name":"occupancy","restriction":"Float64"}],"args_string":"(occupancy : Float64)","args_html":"(occupancy : Float64)","location":{"filename":"src/chem/core/atom.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L13"},"def":{"name":"occupancy=","args":[{"name":"occupancy","doc":null,"default_value":"","external_name":"occupancy","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@occupancy = occupancy"}},{"html_id":"osmium?-instance-method","name":"osmium?","doc":"Returns `true` if the atom's element is Osmium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Osmium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":330,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L330"},"def":{"name":"osmium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.osmium?"}},{"html_id":"other?:Bool-instance-method","name":"other?","doc":"Returns `true` if the atom belongs to a other\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a other residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":193,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L193"},"def":{"name":"other?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@residue.other?"}},{"html_id":"oxygen?-instance-method","name":"oxygen?","doc":"Returns `true` if the atom's element is Oxygen, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Oxygen, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":44,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L44"},"def":{"name":"oxygen?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.oxygen?"}},{"html_id":"palladium?-instance-method","name":"palladium?","doc":"Returns `true` if the atom's element is Palladium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Palladium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":210,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L210"},"def":{"name":"palladium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.palladium?"}},{"html_id":"partial_charge:Float64-instance-method","name":"partial_charge","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core/atom.cr","line_number":14,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L14"},"def":{"name":"partial_charge","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@partial_charge"}},{"html_id":"partial_charge=(partial_charge:Float64)-instance-method","name":"partial_charge=","doc":null,"summary":null,"abstract":false,"args":[{"name":"partial_charge","doc":null,"default_value":"","external_name":"partial_charge","restriction":"Float64"}],"args_string":"(partial_charge : Float64)","args_html":"(partial_charge : Float64)","location":{"filename":"src/chem/core/atom.cr","line_number":14,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L14"},"def":{"name":"partial_charge=","args":[{"name":"partial_charge","doc":null,"default_value":"","external_name":"partial_charge","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@partial_charge = partial_charge"}},{"html_id":"phosphorus?-instance-method","name":"phosphorus?","doc":"Returns `true` if the atom's element is Phosphorus, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Phosphorus, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":78,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L78"},"def":{"name":"phosphorus?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.phosphorus?"}},{"html_id":"platinum?-instance-method","name":"platinum?","doc":"Returns `true` if the atom's element is Platinum, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Platinum, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":338,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L338"},"def":{"name":"platinum?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.platinum?"}},{"html_id":"plutonium?-instance-method","name":"plutonium?","doc":"Returns `true` if the atom's element is Plutonium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Plutonium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":397,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L397"},"def":{"name":"plutonium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.plutonium?"}},{"html_id":"polonium?-instance-method","name":"polonium?","doc":"Returns `true` if the atom's element is Polonium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Polonium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":362,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L362"},"def":{"name":"polonium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.polonium?"}},{"html_id":"potassium?-instance-method","name":"potassium?","doc":"Returns `true` if the atom's element is Potassium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Potassium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":97,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L97"},"def":{"name":"potassium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.potassium?"}},{"html_id":"praseodymium?-instance-method","name":"praseodymium?","doc":"Returns `true` if the atom's element is Praseodymium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Praseodymium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":263,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L263"},"def":{"name":"praseodymium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.praseodymium?"}},{"html_id":"proactinium?-instance-method","name":"proactinium?","doc":"Returns `true` if the atom's element is Proactinium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Proactinium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":385,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L385"},"def":{"name":"proactinium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.proactinium?"}},{"html_id":"promethium?-instance-method","name":"promethium?","doc":"Returns `true` if the atom's element is Promethium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Promethium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":271,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L271"},"def":{"name":"promethium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.promethium?"}},{"html_id":"protein?:Bool-instance-method","name":"protein?","doc":"Returns `true` if the atom belongs to a protein\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a protein residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":193,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L193"},"def":{"name":"protein?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@residue.protein?"}},{"html_id":"radium?-instance-method","name":"radium?","doc":"Returns `true` if the atom's element is Radium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Radium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":374,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L374"},"def":{"name":"radium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.radium?"}},{"html_id":"radon?-instance-method","name":"radon?","doc":"Returns `true` if the atom's element is Radon, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Radon, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":368,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L368"},"def":{"name":"radon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.radon?"}},{"html_id":"residue:Residue-instance-method","name":"residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Residue","args_html":" : <a href=\"../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/atom.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L15"},"def":{"name":"residue","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue","visibility":"Public","body":"@residue"}},{"html_id":"residue=(new_res:Residue):Residue-instance-method","name":"residue=","doc":null,"summary":null,"abstract":false,"args":[{"name":"new_res","doc":null,"default_value":"","external_name":"new_res","restriction":"Residue"}],"args_string":"(new_res : Residue) : Residue","args_html":"(new_res : <a href=\"../Chem/Residue.html\">Residue</a>) : <a href=\"../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/atom.cr","line_number":164,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L164"},"def":{"name":"residue=","args":[{"name":"new_res","doc":null,"default_value":"","external_name":"new_res","restriction":"Residue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue","visibility":"Public","body":"@residue.delete(self)\n@residue = new_res\nnew_res << self\n"}},{"html_id":"rhenium?-instance-method","name":"rhenium?","doc":"Returns `true` if the atom's element is Rhenium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Rhenium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":326,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L326"},"def":{"name":"rhenium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.rhenium?"}},{"html_id":"rhodium?-instance-method","name":"rhodium?","doc":"Returns `true` if the atom's element is Rhodium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Rhodium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":206,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L206"},"def":{"name":"rhodium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.rhodium?"}},{"html_id":"roentgenium?-instance-method","name":"roentgenium?","doc":"Returns `true` if the atom's element is Roentgenium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Roentgenium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":440,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L440"},"def":{"name":"roentgenium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.roentgenium?"}},{"html_id":"rubidium?-instance-method","name":"rubidium?","doc":"Returns `true` if the atom's element is Rubidium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Rubidium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":174,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L174"},"def":{"name":"rubidium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.rubidium?"}},{"html_id":"ruthenium?-instance-method","name":"ruthenium?","doc":"Returns `true` if the atom's element is Ruthenium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Ruthenium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":202,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L202"},"def":{"name":"ruthenium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.ruthenium?"}},{"html_id":"rutherfordium?-instance-method","name":"rutherfordium?","doc":"Returns `true` if the atom's element is Rutherfordium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Rutherfordium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":426,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L426"},"def":{"name":"rutherfordium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.rutherfordium?"}},{"html_id":"samarium?-instance-method","name":"samarium?","doc":"Returns `true` if the atom's element is Samarium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Samarium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":274,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L274"},"def":{"name":"samarium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.samarium?"}},{"html_id":"scandium?-instance-method","name":"scandium?","doc":"Returns `true` if the atom's element is Scandium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Scandium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":109,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L109"},"def":{"name":"scandium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.scandium?"}},{"html_id":"seaborgium?-instance-method","name":"seaborgium?","doc":"Returns `true` if the atom's element is Seaborgium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Seaborgium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":430,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L430"},"def":{"name":"seaborgium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.seaborgium?"}},{"html_id":"selenium?-instance-method","name":"selenium?","doc":"Returns `true` if the atom's element is Selenium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Selenium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":161,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L161"},"def":{"name":"selenium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.selenium?"}},{"html_id":"serial:Int32-instance-method","name":"serial","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/atom.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L16"},"def":{"name":"serial","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@serial"}},{"html_id":"serial=(serial:Int32)-instance-method","name":"serial=","doc":null,"summary":null,"abstract":false,"args":[{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int32"}],"args_string":"(serial : Int32)","args_html":"(serial : Int32)","location":{"filename":"src/chem/core/atom.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L16"},"def":{"name":"serial=","args":[{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@serial = serial"}},{"html_id":"silicon?-instance-method","name":"silicon?","doc":"Returns `true` if the atom's element is Silicon, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Silicon, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":74,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L74"},"def":{"name":"silicon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.silicon?"}},{"html_id":"silver?-instance-method","name":"silver?","doc":"Returns `true` if the atom's element is Silver, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Silver, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":214,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L214"},"def":{"name":"silver?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.silver?"}},{"html_id":"sodium?-instance-method","name":"sodium?","doc":"Returns `true` if the atom's element is Sodium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Sodium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":58,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L58"},"def":{"name":"sodium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.sodium?"}},{"html_id":"solvent?:Bool-instance-method","name":"solvent?","doc":"Returns `true` if the atom belongs to a solvent\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a solvent residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":193,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L193"},"def":{"name":"solvent?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@residue.solvent?"}},{"html_id":"strontium?-instance-method","name":"strontium?","doc":"Returns `true` if the atom's element is Strontium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Strontium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":178,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L178"},"def":{"name":"strontium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.strontium?"}},{"html_id":"sulfur?-instance-method","name":"sulfur?","doc":"Returns `true` if the atom's element is Sulfur, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Sulfur, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":83,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L83"},"def":{"name":"sulfur?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.sulfur?"}},{"html_id":"tantalum?-instance-method","name":"tantalum?","doc":"Returns `true` if the atom's element is Tantalum, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Tantalum, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":318,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L318"},"def":{"name":"tantalum?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.tantalum?"}},{"html_id":"technetium?-instance-method","name":"technetium?","doc":"Returns `true` if the atom's element is Technetium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Technetium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":198,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L198"},"def":{"name":"technetium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.technetium?"}},{"html_id":"tellurium?-instance-method","name":"tellurium?","doc":"Returns `true` if the atom's element is Tellurium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Tellurium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":234,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L234"},"def":{"name":"tellurium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.tellurium?"}},{"html_id":"temperature_factor:Float64-instance-method","name":"temperature_factor","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core/atom.cr","line_number":17,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L17"},"def":{"name":"temperature_factor","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@temperature_factor"}},{"html_id":"temperature_factor=(temperature_factor:Float64)-instance-method","name":"temperature_factor=","doc":null,"summary":null,"abstract":false,"args":[{"name":"temperature_factor","doc":null,"default_value":"","external_name":"temperature_factor","restriction":"Float64"}],"args_string":"(temperature_factor : Float64)","args_html":"(temperature_factor : Float64)","location":{"filename":"src/chem/core/atom.cr","line_number":17,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L17"},"def":{"name":"temperature_factor=","args":[{"name":"temperature_factor","doc":null,"default_value":"","external_name":"temperature_factor","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@temperature_factor = temperature_factor"}},{"html_id":"terbium?-instance-method","name":"terbium?","doc":"Returns `true` if the atom's element is Terbium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Terbium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":286,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L286"},"def":{"name":"terbium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.terbium?"}},{"html_id":"thallium?-instance-method","name":"thallium?","doc":"Returns `true` if the atom's element is Thallium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Thallium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":350,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L350"},"def":{"name":"thallium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.thallium?"}},{"html_id":"thorium?-instance-method","name":"thorium?","doc":"Returns `true` if the atom's element is Thorium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Thorium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":381,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L381"},"def":{"name":"thorium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.thorium?"}},{"html_id":"thulium?-instance-method","name":"thulium?","doc":"Returns `true` if the atom's element is Thulium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Thulium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":302,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L302"},"def":{"name":"thulium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.thulium?"}},{"html_id":"tin?-instance-method","name":"tin?","doc":"Returns `true` if the atom's element is Tin, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Tin, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":226,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L226"},"def":{"name":"tin?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.tin?"}},{"html_id":"titanium?-instance-method","name":"titanium?","doc":"Returns `true` if the atom's element is Titanium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Titanium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":113,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L113"},"def":{"name":"titanium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.titanium?"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/core/atom.cr","line_number":170,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L170"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << @residue\n((((io << ':') << @name) << '(') << @serial) << ')'\n"}},{"html_id":"tungsten?-instance-method","name":"tungsten?","doc":"Returns `true` if the atom's element is Tungsten, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Tungsten, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":322,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L322"},"def":{"name":"tungsten?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.tungsten?"}},{"html_id":"ununhexium?-instance-method","name":"ununhexium?","doc":"Returns `true` if the atom's element is Ununhexium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Ununhexium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":450,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L450"},"def":{"name":"ununhexium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.ununhexium?"}},{"html_id":"ununoctium?-instance-method","name":"ununoctium?","doc":"Returns `true` if the atom's element is Ununoctium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Ununoctium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":454,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L454"},"def":{"name":"ununoctium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.ununoctium?"}},{"html_id":"ununpentium?-instance-method","name":"ununpentium?","doc":"Returns `true` if the atom's element is Ununpentium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Ununpentium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":448,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L448"},"def":{"name":"ununpentium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.ununpentium?"}},{"html_id":"ununquadium?-instance-method","name":"ununquadium?","doc":"Returns `true` if the atom's element is Ununquadium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Ununquadium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":446,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L446"},"def":{"name":"ununquadium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.ununquadium?"}},{"html_id":"ununseptium?-instance-method","name":"ununseptium?","doc":"Returns `true` if the atom's element is Ununseptium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Ununseptium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":452,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L452"},"def":{"name":"ununseptium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.ununseptium?"}},{"html_id":"ununtrium?-instance-method","name":"ununtrium?","doc":"Returns `true` if the atom's element is Ununtrium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Ununtrium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":444,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L444"},"def":{"name":"ununtrium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.ununtrium?"}},{"html_id":"uranium?-instance-method","name":"uranium?","doc":"Returns `true` if the atom's element is Uranium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Uranium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":389,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L389"},"def":{"name":"uranium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.uranium?"}},{"html_id":"valency:Int32-instance-method","name":"valency","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/atom.cr","line_number":175,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L175"},"def":{"name":"valency","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"if element.ionic?\n  @element.max_valency\nelse\n  bonds.sum(&.order) - @formal_charge\nend"}},{"html_id":"vanadium?-instance-method","name":"vanadium?","doc":"Returns `true` if the atom's element is Vanadium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Vanadium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":117,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L117"},"def":{"name":"vanadium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.vanadium?"}},{"html_id":"vdw_radius:Float64-instance-method","name":"vdw_radius","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core/atom.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L18"},"def":{"name":"vdw_radius","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@vdw_radius"}},{"html_id":"vdw_radius=(vdw_radius:Float64)-instance-method","name":"vdw_radius=","doc":null,"summary":null,"abstract":false,"args":[{"name":"vdw_radius","doc":null,"default_value":"","external_name":"vdw_radius","restriction":"Float64"}],"args_string":"(vdw_radius : Float64)","args_html":"(vdw_radius : Float64)","location":{"filename":"src/chem/core/atom.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L18"},"def":{"name":"vdw_radius=","args":[{"name":"vdw_radius","doc":null,"default_value":"","external_name":"vdw_radius","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@vdw_radius = vdw_radius"}},{"html_id":"water?:Bool-instance-method","name":"water?","doc":"Returns `true` if the atom belongs to a water residue, else\n`false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a water residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":185,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L185"},"def":{"name":"water?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@residue.water?"}},{"html_id":"within_covalent_distance?(rhs:self):Bool-instance-method","name":"within_covalent_distance?","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Bool","args_html":"(rhs : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":189,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L189"},"def":{"name":"within_covalent_distance?","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(Spatial.squared_distance(self, rhs)) <= (PeriodicTable.covalent_cutoff(self, rhs))"}},{"html_id":"x(*args,**options)-instance-method","name":"x","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L20"},"def":{"name":"x","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@coords.x(*args, **options)"}},{"html_id":"x(*args,**options,&)-instance-method","name":"x","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L20"},"def":{"name":"x","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@coords.x(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"xenon?-instance-method","name":"xenon?","doc":"Returns `true` if the atom's element is Xenon, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Xenon, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":243,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L243"},"def":{"name":"xenon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.xenon?"}},{"html_id":"y(*args,**options)-instance-method","name":"y","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L20"},"def":{"name":"y","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@coords.y(*args, **options)"}},{"html_id":"y(*args,**options,&)-instance-method","name":"y","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L20"},"def":{"name":"y","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@coords.y(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"ytterbium?-instance-method","name":"ytterbium?","doc":"Returns `true` if the atom's element is Ytterbium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Ytterbium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":306,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L306"},"def":{"name":"ytterbium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.ytterbium?"}},{"html_id":"yttrium?-instance-method","name":"yttrium?","doc":"Returns `true` if the atom's element is Yttrium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Yttrium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":182,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L182"},"def":{"name":"yttrium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.yttrium?"}},{"html_id":"z(*args,**options)-instance-method","name":"z","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L20"},"def":{"name":"z","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@coords.z(*args, **options)"}},{"html_id":"z(*args,**options,&)-instance-method","name":"z","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom.cr#L20"},"def":{"name":"z","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@coords.z(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"zinc?-instance-method","name":"zinc?","doc":"Returns `true` if the atom's element is Zinc, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Zinc, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":145,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L145"},"def":{"name":"zinc?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.zinc?"}},{"html_id":"zirconium?-instance-method","name":"zirconium?","doc":"Returns `true` if the atom's element is Zirconium, else `false`.","summary":"<p>Returns <code>true</code> if the atom's element is Zirconium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":186,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L186"},"def":{"name":"zirconium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@element.zirconium?"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/AtomCollection","path":"Chem/AtomCollection.html","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/core/atom_collection.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_collection.cr#L2"},{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"chem.cr/Chem/AtomView","kind":"struct","full_name":"Chem::AtomView","name":"AtomView"},{"html_id":"chem.cr/Chem/Chain","kind":"class","full_name":"Chem::Chain","name":"Chain"},{"html_id":"chem.cr/Chem/ChainView","kind":"struct","full_name":"Chem::ChainView","name":"ChainView"},{"html_id":"chem.cr/Chem/Residue","kind":"class","full_name":"Chem::Residue","name":"Residue"},{"html_id":"chem.cr/Chem/ResidueView","kind":"struct","full_name":"Chem::ResidueView","name":"ResidueView"},{"html_id":"chem.cr/Chem/Structure","kind":"class","full_name":"Chem::Structure","name":"Structure"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"atoms:AtomView-instance-method","name":"atoms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : AtomView","args_html":" : <a href=\"../Chem/AtomView.html\">AtomView</a>","location":{"filename":"src/chem/core/atom_collection.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_collection.cr#L7"},"def":{"name":"atoms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AtomView","visibility":"Public","body":"atoms = Array(Atom).new(n_atoms)\neach_atom do |atom|\n  atoms << atom\nend\nAtomView.new(atoms)\n"}},{"html_id":"bonds:Array(Bond)-instance-method","name":"bonds","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Bond)","args_html":" : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Bond.html\">Bond</a>)","location":{"filename":"src/chem/core/atom_collection.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_collection.cr#L13"},"def":{"name":"bonds","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Bond)","visibility":"Public","body":"bonds = Set(Bond).new\neach_atom do |atom|\n  bonds.concat(atom.bonds)\nend\nbonds.to_a\n"}},{"html_id":"coords:Spatial::CoordinatesProxy-instance-method","name":"coords","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Spatial::CoordinatesProxy","args_html":" : <a href=\"../Chem/Spatial/CoordinatesProxy.html\">Spatial::CoordinatesProxy</a>","location":{"filename":"src/chem/core/atom_collection.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_collection.cr#L19"},"def":{"name":"coords","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Spatial::CoordinatesProxy","visibility":"Public","body":"Spatial::CoordinatesProxy.new(self)"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Iterator(Atom)","args_html":" : Iterator(<a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/core/atom_collection.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_collection.cr#L3"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Atom)","visibility":"Public","body":""}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":true,"args":[],"args_string":"(&block : Atom -> )","args_html":"(&block : <a href=\"../Chem/Atom.html\">Atom</a> -> )","location":{"filename":"src/chem/core/atom_collection.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_collection.cr#L4"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Atom ->)"},"return_type":"","visibility":"Public","body":""}},{"html_id":"each_fragment(&:AtomView->):Nil-instance-method","name":"each_fragment","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : AtomView -> ) : Nil","args_html":"(& : <a href=\"../Chem/AtomView.html\">AtomView</a> -> ) : Nil","location":{"filename":"src/chem/core/atom_collection.cr","line_number":23,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_collection.cr#L23"},"def":{"name":"each_fragment","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(AtomView ->)"},"return_type":"Nil","visibility":"Public","body":"atoms = (Set(Atom).new(n_atoms)).concat(each_atom)\neach_atom do |atom|\n  if atom.in?(atoms)\n  else\n    next\n  end\n  atoms.delete(atom)\n  fragment = [atom]\n  fragment.each do |a|\n    a.each_bonded_atom do |b|\n      if b.in?(atoms)\n      else\n        next\n      end\n      fragment << b\n      atoms.delete(b)\n    end\n  end\n  yield (AtomView.new(fragment)).sort_by!(&.serial)\nend\n"}},{"html_id":"formal_charge:Int32-instance-method","name":"formal_charge","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/atom_collection.cr","line_number":40,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_collection.cr#L40"},"def":{"name":"formal_charge","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"each_atom.sum(&.formal_charge)"}},{"html_id":"formal_charges:Array(Int32)-instance-method","name":"formal_charges","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Int32)","args_html":" : <a href=\"../Array.html\">Array</a>(Int32)","location":{"filename":"src/chem/core/atom_collection.cr","line_number":44,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_collection.cr#L44"},"def":{"name":"formal_charges","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Int32)","visibility":"Public","body":"each_atom.map(&.formal_charge).to_a"}},{"html_id":"fragments:Array(AtomView)-instance-method","name":"fragments","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(AtomView)","args_html":" : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/AtomView.html\">AtomView</a>)","location":{"filename":"src/chem/core/atom_collection.cr","line_number":48,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_collection.cr#L48"},"def":{"name":"fragments","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(AtomView)","visibility":"Public","body":"fragments = [] of AtomView\neach_fragment do |fragment|\n  fragments << fragment\nend\nfragments\n"}},{"html_id":"has_hydrogens?:Bool-instance-method","name":"has_hydrogens?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/atom_collection.cr","line_number":54,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_collection.cr#L54"},"def":{"name":"has_hydrogens?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"each_atom.any? do |__arg3|\n  __arg3.element.hydrogen?\nend"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/atom_collection.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_collection.cr#L5"},"def":{"name":"n_atoms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":""}},{"html_id":"to_gen(fractional:Bool=false):String-instance-method","name":"to_gen","doc":"Returns a string representation of the atom collection using\nthe `Chem::Gen` file format. Arguments are fowarded to\n`Chem::Gen::Writer.open`.","summary":"<p>Returns a string representation of the atom collection using the <code><a href=\"../Chem/Gen.html\">Chem::Gen</a></code> file format.</p>","abstract":false,"args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false) : String","args_html":"(fractional : Bool = <span class=\"n\">false</span>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_gen","args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_gen(io, fractional)\nend"}},{"html_id":"to_gen(output:IO|Path|String,fractional:Bool=false):Nil-instance-method","name":"to_gen","doc":"Writes the atom collection to *output* using the `Chem::Gen`\nfile format. Arguments are fowarded to `Chem::Gen::Writer.open`.","summary":"<p>Writes the atom collection to <em>output</em> using the <code><a href=\"../Chem/Gen.html\">Chem::Gen</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(output : IO | Path | String, fractional : Bool = false) : Nil","args_html":"(output : IO | Path | String, fractional : Bool = <span class=\"n\">false</span>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_gen","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::Gen::Writer.open(output, fractional) do |writer|\n  writer << self\nend"}},{"html_id":"to_mol2(output:IO|Path|String):Nil-instance-method","name":"to_mol2","doc":"Writes the atom collection to *output* using the `Chem::Mol2`\nfile format. Arguments are fowarded to `Chem::Mol2::Writer.open`.","summary":"<p>Writes the atom collection to <em>output</em> using the <code><a href=\"../Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_mol2","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::Mol2::Writer.open(output, total_entries: 1) do |writer|\n  writer << self\nend"}},{"html_id":"to_mol2:String-instance-method","name":"to_mol2","doc":"Returns a string representation of the atom collection using\nthe `Chem::Mol2` file format. Arguments are fowarded to\n`Chem::Mol2::Writer.open`.","summary":"<p>Returns a string representation of the atom collection using the <code><a href=\"../Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_mol2","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_mol2(io)\nend"}},{"html_id":"to_pdb(bonds:PDB::Writer::BondOptions=PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true):String-instance-method","name":"to_pdb","doc":"Returns a string representation of the atom collection using\nthe `Chem::PDB` file format. Arguments are fowarded to\n`Chem::PDB::Writer.open`.","summary":"<p>Returns a string representation of the atom collection using the <code><a href=\"../Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"}],"args_string":"(bonds : PDB::Writer::BondOptions = PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true) : String","args_html":"(bonds : <a href=\"../Chem/PDB/Writer/BondOptions.html\">PDB::Writer::BondOptions</a> = <span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_pdb","args":[{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_pdb(io, bonds, renumber)\nend"}},{"html_id":"to_pdb(output:IO|Path|String,bonds:PDB::Writer::BondOptions=PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true):Nil-instance-method","name":"to_pdb","doc":"Writes the atom collection to *output* using the `Chem::PDB`\nfile format. Arguments are fowarded to `Chem::PDB::Writer.open`.","summary":"<p>Writes the atom collection to <em>output</em> using the <code><a href=\"../Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"}],"args_string":"(output : IO | Path | String, bonds : PDB::Writer::BondOptions = PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true) : Nil","args_html":"(output : IO | Path | String, bonds : <a href=\"../Chem/PDB/Writer/BondOptions.html\">PDB::Writer::BondOptions</a> = <span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_pdb","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::PDB::Writer.open(output, bonds, renumber, total_entries: 1) do |writer|\n  writer << self\nend"}},{"html_id":"to_xyz(output:IO|Path|String):Nil-instance-method","name":"to_xyz","doc":"Writes the atom collection to *output* using the `Chem::XYZ`\nfile format. Arguments are fowarded to `Chem::XYZ::Writer.open`.","summary":"<p>Writes the atom collection to <em>output</em> using the <code><a href=\"../Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_xyz","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::XYZ::Writer.open(output, total_entries: 1) do |writer|\n  writer << self\nend"}},{"html_id":"to_xyz:String-instance-method","name":"to_xyz","doc":"Returns a string representation of the atom collection using\nthe `Chem::XYZ` file format. Arguments are fowarded to\n`Chem::XYZ::Writer.open`.","summary":"<p>Returns a string representation of the atom collection using the <code><a href=\"../Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_xyz","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_xyz(io)\nend"}},{"html_id":"write(output:IO|Path|String,format:Chem::Format|String):Nil-instance-method","name":"write","doc":"Writes the atom collection to *output* using *format*. Raises\n`ArgumentError` if *format* has required arguments or cannot\nwrite `Chem::AtomCollection`.\n\nThe supported file formats are `Chem::Gen`, `Chem::Mol2`, `Chem::PDB`, `Chem::XYZ`. Use the\n`#to_*` methods to customize how the object is written in the\ncorresponding file format if possible.","summary":"<p>Writes the atom collection to <em>output</em> using <em>format</em>.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(output : IO | Path | String, format : Chem::Format | String) : Nil","args_html":"(output : IO | Path | String, format : <a href=\"../Chem/Format.html\">Chem::Format</a> | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"write","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .gen?\n  to_gen(output)\nwhen .mol2?\n  to_mol2(output)\nwhen .pdb?\n  to_pdb(output)\nwhen .xyz?\n  to_xyz(output)\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::AtomCollection\"))\nend\n"}},{"html_id":"write(path:Path|String):Nil-instance-method","name":"write","doc":"Writes the atom collection to the specified file. The file\nformat is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nThe supported file formats are the following:\n\n- `Chem::Gen` (.gen)\n- `Chem::Mol2` (.mol2)\n- `Chem::PDB` (.ent, .pdb)\n- `Chem::XYZ` (.xyz)\n\nUse the `#to_*` methods to customize how the object is written\nin the corresponding file format if possible.","summary":"<p>Writes the atom collection to the specified file.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : Nil","args_html":"(path : Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"write","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"write(path, ::Chem::Format.from_filename(path))"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/AtomView","path":"Chem/AtomView.html","kind":"struct","full_name":"Chem::AtomView","name":"AtomView","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ArrayView","kind":"module","full_name":"Chem::ArrayView","name":"ArrayView"},{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/atom_view.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/ArrayView","kind":"module","full_name":"Chem::ArrayView","name":"ArrayView"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"[](name:String):Atom?-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom?","args_html":"(name : String) : <a href=\"../Chem/Atom.html\">Atom</a>?","location":{"filename":"src/chem/core/atom_view.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L12"},"def":{"name":"[]","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom | ::Nil","visibility":"Public","body":"(self[name: name]?) || (raise(KeyError.new))"}},{"html_id":"[](*,serial:Int):Atom-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int"}],"args_string":"(*, serial : Int) : Atom","args_html":"(*, serial : Int) : <a href=\"../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/atom_view.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L8"},"def":{"name":"[]","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Atom","visibility":"Public","body":"(self[serial: serial]?) || (raise(IndexError.new))"}},{"html_id":"[]?(name:String):Atom?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom?","args_html":"(name : String) : <a href=\"../Chem/Atom.html\">Atom</a>?","location":{"filename":"src/chem/core/atom_view.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L20"},"def":{"name":"[]?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom | ::Nil","visibility":"Public","body":"find do |__arg1|\n  __arg1.name == name\nend"}},{"html_id":"[]?(*,serial:Int):Atom?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int"}],"args_string":"(*, serial : Int) : Atom?","args_html":"(*, serial : Int) : <a href=\"../Chem/Atom.html\">Atom</a>?","location":{"filename":"src/chem/core/atom_view.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L16"},"def":{"name":"[]?","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Atom | ::Nil","visibility":"Public","body":"find do |__arg0|\n  __arg0.serial == serial\nend"}},{"html_id":"atoms:self-instance-method","name":"atoms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/atom_view.cr","line_number":24,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L24"},"def":{"name":"atoms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"self"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Atom)","args_html":" : Iterator(<a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/core/atom_view.cr","line_number":28,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L28"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Atom)","visibility":"Public","body":"each"}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Atom -> )","args_html":"(&block : <a href=\"../Chem/Atom.html\">Atom</a> -> )","location":{"filename":"src/chem/core/atom_view.cr","line_number":32,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L32"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Atom ->)"},"return_type":"","visibility":"Public","body":"each do |atom|\n  yield atom\nend"}},{"html_id":"each_chain:Iterator(Chain)-instance-method","name":"each_chain","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Chain)","args_html":" : Iterator(<a href=\"../Chem/Chain.html\">Chain</a>)","location":{"filename":"src/chem/core/atom_view.cr","line_number":38,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L38"},"def":{"name":"each_chain","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Chain)","visibility":"Public","body":"each.map(&.chain).uniq"}},{"html_id":"each_chain(&block:Chain->)-instance-method","name":"each_chain","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Chain -> )","args_html":"(&block : <a href=\"../Chem/Chain.html\">Chain</a> -> )","location":{"filename":"src/chem/core/atom_view.cr","line_number":42,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L42"},"def":{"name":"each_chain","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Chain ->)"},"return_type":"","visibility":"Public","body":"chains = Set(Chain).new\neach do |atom|\n  if atom.chain.in?(chains)\n  else\n    yield atom.chain\n  end\n  chains << atom.chain\nend\n"}},{"html_id":"each_residue:Iterator(Residue)-instance-method","name":"each_residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Residue)","args_html":" : Iterator(<a href=\"../Chem/Residue.html\">Residue</a>)","location":{"filename":"src/chem/core/atom_view.cr","line_number":50,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L50"},"def":{"name":"each_residue","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Residue)","visibility":"Public","body":"each.map(&.residue).uniq"}},{"html_id":"each_residue(&block:Residue->)-instance-method","name":"each_residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Residue -> )","args_html":"(&block : <a href=\"../Chem/Residue.html\">Residue</a> -> )","location":{"filename":"src/chem/core/atom_view.cr","line_number":54,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L54"},"def":{"name":"each_residue","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Residue ->)"},"return_type":"","visibility":"Public","body":"residues = Set(Residue).new\neach do |atom|\n  if atom.residue.in?(residues)\n  else\n    yield atom.residue\n  end\n  residues << atom.residue\nend\n"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/atom_view.cr","line_number":62,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L62"},"def":{"name":"n_atoms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"size"}},{"html_id":"n_chains:Int32-instance-method","name":"n_chains","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/atom_view.cr","line_number":66,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L66"},"def":{"name":"n_chains","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"each_chain.sum do\n  1\nend"}},{"html_id":"n_residues:Int32-instance-method","name":"n_residues","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/atom_view.cr","line_number":70,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/atom_view.cr#L70"},"def":{"name":"n_residues","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"each_residue.sum do\n  1\nend"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Bias","path":"Chem/Bias.html","kind":"struct","full_name":"Chem::Bias","name":"Bias","abstract":true,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/bias.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bias.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bias.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bias.cr#L2"},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Bond","path":"Chem/Bond.html","kind":"class","full_name":"Chem::Bond","name":"Bond","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/bond.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(first,second,kind:Kind=:single)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"first","doc":null,"default_value":"","external_name":"first","restriction":""},{"name":"second","doc":null,"default_value":"","external_name":"second","restriction":""},{"name":"kind","doc":null,"default_value":":single","external_name":"kind","restriction":"Kind"}],"args_string":"(first, second, kind : Kind = :single)","args_html":"(first, second, kind : <a href=\"../Chem/Bond/Kind.html\">Kind</a> = <span class=\"n\">:single</span>)","location":{"filename":"src/chem/core/bond.cr","line_number":17,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L17"},"def":{"name":"new","args":[{"name":"first","doc":null,"default_value":"","external_name":"first","restriction":""},{"name":"second","doc":null,"default_value":"","external_name":"second","restriction":""},{"name":"kind","doc":null,"default_value":":single","external_name":"kind","restriction":"Kind"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(first, second, kind)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(first,second,order:Int32)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"first","doc":null,"default_value":"","external_name":"first","restriction":""},{"name":"second","doc":null,"default_value":"","external_name":"second","restriction":""},{"name":"order","doc":null,"default_value":"","external_name":"order","restriction":"Int32"}],"args_string":"(first, second, order : Int32)","args_html":"(first, second, order : Int32)","location":{"filename":"src/chem/core/bond.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L20"},"def":{"name":"new","args":[{"name":"first","doc":null,"default_value":"","external_name":"first","restriction":""},{"name":"second","doc":null,"default_value":"","external_name":"second","restriction":""},{"name":"order","doc":null,"default_value":"","external_name":"order","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(first, second, order)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(other:self)-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : self)","args_html":"(other : <span class=\"k\">self</span>)","location":{"filename":"src/chem/core/bond.cr","line_number":32,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L32"},"def":{"name":"==","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if (@first == other.first) && (@second == other.second)\n  return true\nend\n(@first == other.second) && (@second == other.first)\n"}},{"html_id":"[](index:Int32):Atom-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : Atom","args_html":"(index : Int32) : <a href=\"../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/bond.cr","line_number":24,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L24"},"def":{"name":"[]","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom","visibility":"Public","body":"case index\nwhen 0\n  @first\nwhen 1\n  @second\nelse\n  raise(IndexError.new)\nend"}},{"html_id":"bonded?(other:self):Bool-instance-method","name":"bonded?","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/core/bond.cr","line_number":37,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L37"},"def":{"name":"bonded?","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(@first.in?(other)) || (@second.in?(other))"}},{"html_id":"dative?(*args,**options)-instance-method","name":"dative?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/bond.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L15"},"def":{"name":"dative?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind.dative?(*args, **options)"}},{"html_id":"dative?(*args,**options,&)-instance-method","name":"dative?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/bond.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L15"},"def":{"name":"dative?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind.dative?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"distance:Float64-instance-method","name":"distance","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core/bond.cr","line_number":41,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L41"},"def":{"name":"distance","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Math.sqrt(squared_distance)"}},{"html_id":"double?(*args,**options)-instance-method","name":"double?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/bond.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L15"},"def":{"name":"double?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind.double?(*args, **options)"}},{"html_id":"double?(*args,**options,&)-instance-method","name":"double?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/bond.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L15"},"def":{"name":"double?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind.double?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"first:Atom-instance-method","name":"first","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Atom","args_html":" : <a href=\"../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/bond.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L11"},"def":{"name":"first","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom","visibility":"Public","body":"@first"}},{"html_id":"includes?(atom:Atom):Bool-instance-method","name":"includes?","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"}],"args_string":"(atom : Atom) : Bool","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>) : Bool","location":{"filename":"src/chem/core/bond.cr","line_number":45,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L45"},"def":{"name":"includes?","args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(@first == atom) || (@second == atom)"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Appends a String representation of this object\nwhich includes its class name, its object address\nand the values of all instance variables.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).inspect # => #<Person:0x10fd31f20 @name=\"John\", @age=32>\n```","summary":"<p>Appends a String representation of this object which includes its class name, its object address and the values of all instance variables.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/core/bond.cr","line_number":49,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L49"},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"io << \"<Bond \"\n@first.to_s(io)\nio << to_char\n@second.to_s(io)\nio << '>'\n"}},{"html_id":"kind:Kind-instance-method","name":"kind","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Kind","args_html":" : <a href=\"../Chem/Bond/Kind.html\">Kind</a>","location":{"filename":"src/chem/core/bond.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L13"},"def":{"name":"kind","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Kind","visibility":"Public","body":"@kind"}},{"html_id":"kind=(kind:Kind)-instance-method","name":"kind=","doc":null,"summary":null,"abstract":false,"args":[{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Kind"}],"args_string":"(kind : Kind)","args_html":"(kind : <a href=\"../Chem/Bond/Kind.html\">Kind</a>)","location":{"filename":"src/chem/core/bond.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L13"},"def":{"name":"kind=","args":[{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Kind"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind = kind"}},{"html_id":"order:Int32-instance-method","name":"order","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/bond.cr","line_number":57,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L57"},"def":{"name":"order","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"case @kind\nwhen .dative?\n  1\nelse\n  @kind.to_i\nend"}},{"html_id":"order=(order:Int32)-instance-method","name":"order=","doc":null,"summary":null,"abstract":false,"args":[{"name":"order","doc":null,"default_value":"","external_name":"order","restriction":"Int32"}],"args_string":"(order : Int32)","args_html":"(order : Int32)","location":{"filename":"src/chem/core/bond.cr","line_number":66,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L66"},"def":{"name":"order=","args":[{"name":"order","doc":null,"default_value":"","external_name":"order","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if order < 0 || order > 3\n  raise(Error.new(\"Bond order (#{order}) is invalid\"))\nend\n@kind = Kind.from_value(order)\n"}},{"html_id":"other(atom:Atom):Atom-instance-method","name":"other","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"}],"args_string":"(atom : Atom) : Atom","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>) : <a href=\"../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/bond.cr","line_number":71,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L71"},"def":{"name":"other","args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom","visibility":"Public","body":"case atom\nwhen @first\n  @second\nwhen @second\n  @first\nelse\n  raise(Error.new(\"Bond doesn't include atom #{atom.serial}\"))\nend"}},{"html_id":"second:Atom-instance-method","name":"second","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Atom","args_html":" : <a href=\"../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/bond.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L12"},"def":{"name":"second","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom","visibility":"Public","body":"@second"}},{"html_id":"single?(*args,**options)-instance-method","name":"single?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/bond.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L15"},"def":{"name":"single?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind.single?(*args, **options)"}},{"html_id":"single?(*args,**options,&)-instance-method","name":"single?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/bond.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L15"},"def":{"name":"single?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind.single?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"squared_distance:Float64-instance-method","name":"squared_distance","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core/bond.cr","line_number":82,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L82"},"def":{"name":"squared_distance","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Spatial.squared_distance(@first, @second)"}},{"html_id":"to_char:Char-instance-method","name":"to_char","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Char","args_html":" : <a href=\"../Char.html\">Char</a>","location":{"filename":"src/chem/core/bond.cr","line_number":86,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L86"},"def":{"name":"to_char","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char","visibility":"Public","body":"case order\nwhen 0\n  '·'\nwhen 1\n  '-'\nwhen 2\n  '='\nwhen 3\n  '#'\nelse\n  raise(\"BUG: unreachable\")\nend"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/core/bond.cr","line_number":96,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L96"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"((io << @first.name) << to_char) << @second.name"}},{"html_id":"triple?(*args,**options)-instance-method","name":"triple?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/bond.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L15"},"def":{"name":"triple?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind.triple?(*args, **options)"}},{"html_id":"triple?(*args,**options,&)-instance-method","name":"triple?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/bond.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L15"},"def":{"name":"triple?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind.triple?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"zero?(*args,**options)-instance-method","name":"zero?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/bond.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L15"},"def":{"name":"zero?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind.zero?(*args, **options)"}},{"html_id":"zero?(*args,**options,&)-instance-method","name":"zero?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/bond.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L15"},"def":{"name":"zero?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind.zero?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/Bond/Kind","path":"Chem/Bond/Kind.html","kind":"enum","full_name":"Chem::Bond::Kind","name":"Kind","abstract":false,"superclass":null,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/bond.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Dative","name":"Dative","value":"-1","doc":null,"summary":null},{"id":"Zero","name":"Zero","value":"0","doc":null,"summary":null},{"id":"Single","name":"Single","value":"1","doc":null,"summary":null},{"id":"Double","name":"Double","value":"2","doc":null,"summary":null},{"id":"Triple","name":"Triple","value":"3","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Bond","kind":"class","full_name":"Chem::Bond","name":"Bond"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"dative?-instance-method","name":"dative?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bond.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L4"},"def":{"name":"dative?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Dative"}},{"html_id":"double?-instance-method","name":"double?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bond.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L7"},"def":{"name":"double?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Double"}},{"html_id":"single?-instance-method","name":"single?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bond.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L6"},"def":{"name":"single?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Single"}},{"html_id":"triple?-instance-method","name":"triple?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bond.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L8"},"def":{"name":"triple?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Triple"}},{"html_id":"zero?-instance-method","name":"zero?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bond.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond.cr#L5"},"def":{"name":"zero?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Zero"}}],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/BondArray","path":"Chem/BondArray.html","kind":"class","full_name":"Chem::BondArray","name":"BondArray","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/bond_array.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(atom:Atom)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"}],"args_string":"(atom : Atom)","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/core/bond_array.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L10"},"def":{"name":"new","args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(atom)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<<(bond:Bond)-instance-method","name":"<<","doc":null,"summary":null,"abstract":false,"args":[{"name":"bond","doc":null,"default_value":"","external_name":"bond","restriction":"Bond"}],"args_string":"(bond : Bond)","args_html":"(bond : <a href=\"../Chem/Bond.html\">Bond</a>)","location":{"filename":"src/chem/core/bond_array.cr","line_number":23,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L23"},"def":{"name":"<<","args":[{"name":"bond","doc":null,"default_value":"","external_name":"bond","restriction":"Bond"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"add(bond)"}},{"html_id":"[](atom:Atom):Bond-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"}],"args_string":"(atom : Atom) : Bond","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>) : <a href=\"../Chem/Bond.html\">Bond</a>","location":{"filename":"src/chem/core/bond_array.cr","line_number":14,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L14"},"def":{"name":"[]","args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bond","visibility":"Public","body":"self[atom]? || (raise(Error.new(\"Atom #{@atom.serial} is not bonded to atom #{atom.serial}\")))"}},{"html_id":"[]?(atom:Atom):Bond?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"}],"args_string":"(atom : Atom) : Bond?","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>) : <a href=\"../Chem/Bond.html\">Bond</a>?","location":{"filename":"src/chem/core/bond_array.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L19"},"def":{"name":"[]?","args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bond | ::Nil","visibility":"Public","body":"find(&.includes?(atom))"}},{"html_id":"add(other:Atom,order:Int32):Bond-instance-method","name":"add","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Atom"},{"name":"order","doc":null,"default_value":"","external_name":"order","restriction":"Int32"}],"args_string":"(other : Atom, order : Int32) : Bond","args_html":"(other : <a href=\"../Chem/Atom.html\">Atom</a>, order : Int32) : <a href=\"../Chem/Bond.html\">Bond</a>","location":{"filename":"src/chem/core/bond_array.cr","line_number":46,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L46"},"def":{"name":"add","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Atom"},{"name":"order","doc":null,"default_value":"","external_name":"order","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bond","visibility":"Public","body":"add(other, Bond::Kind.from_value(order))"}},{"html_id":"add(bond:Bond):Bond-instance-method","name":"add","doc":null,"summary":null,"abstract":false,"args":[{"name":"bond","doc":null,"default_value":"","external_name":"bond","restriction":"Bond"}],"args_string":"(bond : Bond) : Bond","args_html":"(bond : <a href=\"../Chem/Bond.html\">Bond</a>) : <a href=\"../Chem/Bond.html\">Bond</a>","location":{"filename":"src/chem/core/bond_array.cr","line_number":27,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L27"},"def":{"name":"add","args":[{"name":"bond","doc":null,"default_value":"","external_name":"bond","restriction":"Bond"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bond","visibility":"Public","body":"if bond.in?(@bonds)\nelse\n  other_bonds = (bond.other(@atom)).bonds\n  push(bond)\n  other_bonds.push(bond)\nend\nbond\n"}},{"html_id":"add(other:Atom,kind:Bond::Kind=:single):Bond-instance-method","name":"add","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Atom"},{"name":"kind","doc":null,"default_value":":single","external_name":"kind","restriction":"Bond::Kind"}],"args_string":"(other : Atom, kind : Bond::Kind = :single) : Bond","args_html":"(other : <a href=\"../Chem/Atom.html\">Atom</a>, kind : <a href=\"../Chem/Bond/Kind.html\">Bond::Kind</a> = <span class=\"n\">:single</span>) : <a href=\"../Chem/Bond.html\">Bond</a>","location":{"filename":"src/chem/core/bond_array.cr","line_number":38,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L38"},"def":{"name":"add","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Atom"},{"name":"kind","doc":null,"default_value":":single","external_name":"kind","restriction":"Bond::Kind"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bond","visibility":"Public","body":"if bond = @bonds.find(&.includes?(other))\n  bond\nelse\n  add(Bond.new(@atom, other, kind))\nend"}},{"html_id":"delete(bond:Bond)-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"bond","doc":null,"default_value":"","external_name":"bond","restriction":"Bond"}],"args_string":"(bond : Bond)","args_html":"(bond : <a href=\"../Chem/Bond.html\">Bond</a>)","location":{"filename":"src/chem/core/bond_array.cr","line_number":56,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L56"},"def":{"name":"delete","args":[{"name":"bond","doc":null,"default_value":"","external_name":"bond","restriction":"Bond"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if bond.in?(@bonds)\nelse\n  return\nend\n@bonds.delete(bond)\n(bond.other(@atom)).bonds.delete(bond)\n"}},{"html_id":"delete(other:Atom)-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Atom"}],"args_string":"(other : Atom)","args_html":"(other : <a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/core/bond_array.cr","line_number":50,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L50"},"def":{"name":"delete","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Atom"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if bond = self[other]?\n  delete(bond)\nend"}},{"html_id":"full?:Bool-instance-method","name":"full?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/bond_array.cr","line_number":62,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L62"},"def":{"name":"full?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"missing_bonds.zero?"}},{"html_id":"size(*args,**options)-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/bond_array.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L8"},"def":{"name":"size","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@bonds.size(*args, **options)"}},{"html_id":"size(*args,**options,&)-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/bond_array.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L8"},"def":{"name":"size","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@bonds.size(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"unsafe_fetch(*args,**options)-instance-method","name":"unsafe_fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/bond_array.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L8"},"def":{"name":"unsafe_fetch","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@bonds.unsafe_fetch(*args, **options)"}},{"html_id":"unsafe_fetch(*args,**options,&)-instance-method","name":"unsafe_fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/bond_array.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bond_array.cr#L8"},"def":{"name":"unsafe_fetch","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@bonds.unsafe_fetch(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Chain","path":"Chem/Chain.html","kind":"class","full_name":"Chem::Chain","name":"Chain","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/chain.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(id:Char,structure:Structure)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(id : Char, structure : Structure)","args_html":"(id : <a href=\"../Char.html\">Char</a>, structure : <a href=\"../Chem/Structure.html\">Structure</a>)","location":{"filename":"src/chem/core/chain.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L12"},"def":{"name":"new","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(id, structure)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<=>(rhs:self):Int32-instance-method","name":"<=>","doc":"The comparison operator.\n\nReturns `-1`, `0` or `1` depending on whether `self` precedes\n*rhs*, equals to *rhs* or comes after *rhs*. The comparison is\ndone based on chain identifier.\n\n```\nchains = Structure.read(\"peptide.pdb\").chains\n\nchains[0] <=> chains[1] # => -1\nchains[1] <=> chains[1] # => 0\nchains[2] <=> chains[1] # => 1\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Int32","args_html":"(rhs : <span class=\"k\">self</span>) : Int32","location":{"filename":"src/chem/core/chain.cr","line_number":36,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L36"},"def":{"name":"<=>","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@id <=> rhs.id"}},{"html_id":"[](number:Int32,insertion_code:Char?=nil):Residue-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"nil","external_name":"insertion_code","restriction":"Char | ::Nil"}],"args_string":"(number : Int32, insertion_code : Char? = nil) : Residue","args_html":"(number : Int32, insertion_code : <a href=\"../Char.html\">Char</a>? = <span class=\"n\">nil</span>) : <a href=\"../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/chain.cr","line_number":40,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L40"},"def":{"name":"[]","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"nil","external_name":"insertion_code","restriction":"Char | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue","visibility":"Public","body":"@residue_table[{number, insertion_code}]"}},{"html_id":"[]?(number:Int32,insertion_code:Char?=nil):Residue?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"nil","external_name":"insertion_code","restriction":"Char | ::Nil"}],"args_string":"(number : Int32, insertion_code : Char? = nil) : Residue?","args_html":"(number : Int32, insertion_code : <a href=\"../Char.html\">Char</a>? = <span class=\"n\">nil</span>) : <a href=\"../Chem/Residue.html\">Residue</a>?","location":{"filename":"src/chem/core/chain.cr","line_number":44,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L44"},"def":{"name":"[]?","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"nil","external_name":"insertion_code","restriction":"Char | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue | ::Nil","visibility":"Public","body":"@residue_table[{number, insertion_code}]?"}},{"html_id":"clear:self-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/chain.cr","line_number":48,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L48"},"def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"@residue_table.clear\n@residues.clear\nself\n"}},{"html_id":"delete(residue:Residue):Residue?-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"residue","doc":null,"default_value":"","external_name":"residue","restriction":"Residue"}],"args_string":"(residue : Residue) : Residue?","args_html":"(residue : <a href=\"../Chem/Residue.html\">Residue</a>) : <a href=\"../Chem/Residue.html\">Residue</a>?","location":{"filename":"src/chem/core/chain.cr","line_number":54,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L54"},"def":{"name":"delete","args":[{"name":"residue","doc":null,"default_value":"","external_name":"residue","restriction":"Residue"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue | ::Nil","visibility":"Public","body":"residue = @residues.delete(residue)\nif residue\n  resid = {residue.number, residue.insertion_code}\n  if @residue_table[resid]?.same?(residue)\n    @residue_table.delete(resid)\n  end\nend\nresidue\n"}},{"html_id":"dig(number:Int32,insertion_code:Char?):Residue-instance-method","name":"dig","doc":null,"summary":null,"abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"","external_name":"insertion_code","restriction":"Char | ::Nil"}],"args_string":"(number : Int32, insertion_code : Char?) : Residue","args_html":"(number : Int32, insertion_code : <a href=\"../Char.html\">Char</a>?) : <a href=\"../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/chain.cr","line_number":71,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L71"},"def":{"name":"dig","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"","external_name":"insertion_code","restriction":"Char | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue","visibility":"Public","body":"self[number, insertion_code]"}},{"html_id":"dig(number:Int32,insertion_code:Char?,*subindexes)-instance-method","name":"dig","doc":null,"summary":null,"abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"","external_name":"insertion_code","restriction":"Char | ::Nil"},{"name":"subindexes","doc":null,"default_value":"","external_name":"subindexes","restriction":""}],"args_string":"(number : Int32, insertion_code : Char?, *subindexes)","args_html":"(number : Int32, insertion_code : <a href=\"../Char.html\">Char</a>?, *subindexes)","location":{"filename":"src/chem/core/chain.cr","line_number":75,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L75"},"def":{"name":"dig","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"","external_name":"insertion_code","restriction":"Char | ::Nil"},{"name":"subindexes","doc":null,"default_value":"","external_name":"subindexes","restriction":""}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[number, insertion_code].dig(*subindexes)"}},{"html_id":"dig(number:Int32):Residue-instance-method","name":"dig","doc":null,"summary":null,"abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"}],"args_string":"(number : Int32) : Residue","args_html":"(number : Int32) : <a href=\"../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/chain.cr","line_number":63,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L63"},"def":{"name":"dig","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue","visibility":"Public","body":"self[number]"}},{"html_id":"dig(number:Int32,*subindexes)-instance-method","name":"dig","doc":null,"summary":null,"abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"subindexes","doc":null,"default_value":"","external_name":"subindexes","restriction":""}],"args_string":"(number : Int32, *subindexes)","args_html":"(number : Int32, *subindexes)","location":{"filename":"src/chem/core/chain.cr","line_number":67,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L67"},"def":{"name":"dig","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"subindexes","doc":null,"default_value":"","external_name":"subindexes","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[number].dig(*subindexes)"}},{"html_id":"dig?(number:Int32,insertion_code:Char?):Residue?-instance-method","name":"dig?","doc":null,"summary":null,"abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"","external_name":"insertion_code","restriction":"Char | ::Nil"}],"args_string":"(number : Int32, insertion_code : Char?) : Residue?","args_html":"(number : Int32, insertion_code : <a href=\"../Char.html\">Char</a>?) : <a href=\"../Chem/Residue.html\">Residue</a>?","location":{"filename":"src/chem/core/chain.cr","line_number":89,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L89"},"def":{"name":"dig?","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"","external_name":"insertion_code","restriction":"Char | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue | ::Nil","visibility":"Public","body":"self[number, insertion_code]?"}},{"html_id":"dig?(number:Int32,insertion_code:Char?,*subindexes)-instance-method","name":"dig?","doc":null,"summary":null,"abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"","external_name":"insertion_code","restriction":"Char | ::Nil"},{"name":"subindexes","doc":null,"default_value":"","external_name":"subindexes","restriction":""}],"args_string":"(number : Int32, insertion_code : Char?, *subindexes)","args_html":"(number : Int32, insertion_code : <a href=\"../Char.html\">Char</a>?, *subindexes)","location":{"filename":"src/chem/core/chain.cr","line_number":93,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L93"},"def":{"name":"dig?","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"","external_name":"insertion_code","restriction":"Char | ::Nil"},{"name":"subindexes","doc":null,"default_value":"","external_name":"subindexes","restriction":""}],"double_splat":null,"splat_index":2,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if residue = self[number, insertion_code]?\n  residue.dig?(*subindexes)\nend"}},{"html_id":"dig?(number:Int32):Residue?-instance-method","name":"dig?","doc":null,"summary":null,"abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"}],"args_string":"(number : Int32) : Residue?","args_html":"(number : Int32) : <a href=\"../Chem/Residue.html\">Residue</a>?","location":{"filename":"src/chem/core/chain.cr","line_number":79,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L79"},"def":{"name":"dig?","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue | ::Nil","visibility":"Public","body":"self[number]?"}},{"html_id":"dig?(number:Int32,*subindexes)-instance-method","name":"dig?","doc":null,"summary":null,"abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"subindexes","doc":null,"default_value":"","external_name":"subindexes","restriction":""}],"args_string":"(number : Int32, *subindexes)","args_html":"(number : Int32, *subindexes)","location":{"filename":"src/chem/core/chain.cr","line_number":83,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L83"},"def":{"name":"dig?","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"subindexes","doc":null,"default_value":"","external_name":"subindexes","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if residue = self[number]?\n  residue.dig?(*subindexes)\nend"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Atom)","args_html":" : Iterator(<a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/core/chain.cr","line_number":99,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L99"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Atom)","visibility":"Public","body":"Iterator.chain(each_residue.map(&.each_atom).to_a)"}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Atom -> )","args_html":"(&block : <a href=\"../Chem/Atom.html\">Atom</a> -> )","location":{"filename":"src/chem/core/chain.cr","line_number":103,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L103"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Atom ->)"},"return_type":"","visibility":"Public","body":"each_residue do |residue|\n  residue.each_atom do |atom|\n    yield atom\n  end\nend"}},{"html_id":"each_residue:Iterator(Residue)-instance-method","name":"each_residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Residue)","args_html":" : Iterator(<a href=\"../Chem/Residue.html\">Residue</a>)","location":{"filename":"src/chem/core/chain.cr","line_number":111,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L111"},"def":{"name":"each_residue","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Residue)","visibility":"Public","body":"@residues.each"}},{"html_id":"each_residue(&block:Residue->)-instance-method","name":"each_residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Residue -> )","args_html":"(&block : <a href=\"../Chem/Residue.html\">Residue</a> -> )","location":{"filename":"src/chem/core/chain.cr","line_number":115,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L115"},"def":{"name":"each_residue","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Residue ->)"},"return_type":"","visibility":"Public","body":"@residues.each do |residue|\n  yield residue\nend"}},{"html_id":"id:Char-instance-method","name":"id","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Char","args_html":" : <a href=\"../Char.html\">Char</a>","location":{"filename":"src/chem/core/chain.cr","line_number":9,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L9"},"def":{"name":"id","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char","visibility":"Public","body":"@id"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Appends a String representation of this object\nwhich includes its class name, its object address\nand the values of all instance variables.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).inspect # => #<Person:0x10fd31f20 @name=\"John\", @age=32>\n```","summary":"<p>Appends a String representation of this object which includes its class name, its object address and the values of all instance variables.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/core/chain.cr","line_number":121,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L121"},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"((io << \"<Chain \") << @id) << '>'"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/chain.cr","line_number":129,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L129"},"def":{"name":"n_atoms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"each_residue.map(&.n_atoms).sum"}},{"html_id":"n_residues:Int32-instance-method","name":"n_residues","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/chain.cr","line_number":133,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L133"},"def":{"name":"n_residues","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@residues.size"}},{"html_id":"polymer?:Bool-instance-method","name":"polymer?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/chain.cr","line_number":125,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L125"},"def":{"name":"polymer?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@residues.any?(&.polymer?)"}},{"html_id":"renumber_by_connectivity:Nil-instance-method","name":"renumber_by_connectivity","doc":"Renumber residues based on bond information. Residue ordering is\ncomputed based on the link bond if available.","summary":"<p>Renumber residues based on bond information.</p>","abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/core/chain.cr","line_number":139,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L139"},"def":{"name":"renumber_by_connectivity","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"num = 0\nresidues = @residues.to_set\nwhile residue = residues.find do |__arg3|\n  __arg3.pred(strict: false, use_numbering: false).nil?\nend || residues.first?\n  while residue && (residue.in?(residues))\n    residue.number = (    num = num + 1)\n    residues.delete(residue)\n    residue = residue.succ(strict: false, use_numbering: false) || residue.bonded_residues.find(&.in?(residues))\n  end\nend\nreset_cache\n"}},{"html_id":"reset_cache:Nil-instance-method","name":"reset_cache","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/core/chain.cr","line_number":170,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L170"},"def":{"name":"reset_cache","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@residues.sort!\n@residue_table.clear\n@residues.each do |residue|\n  @residue_table[{residue.number, residue.insertion_code}] = residue\nend\n"}},{"html_id":"structure:Structure-instance-method","name":"structure","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Structure","args_html":" : <a href=\"../Chem/Structure.html\">Structure</a>","location":{"filename":"src/chem/core/chain.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L10"},"def":{"name":"structure","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Structure","visibility":"Public","body":"@structure"}},{"html_id":"structure=(new_structure:Structure):Structure-instance-method","name":"structure=","doc":null,"summary":null,"abstract":false,"args":[{"name":"new_structure","doc":null,"default_value":"","external_name":"new_structure","restriction":"Structure"}],"args_string":"(new_structure : Structure) : Structure","args_html":"(new_structure : <a href=\"../Chem/Structure.html\">Structure</a>) : <a href=\"../Chem/Structure.html\">Structure</a>","location":{"filename":"src/chem/core/chain.cr","line_number":154,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain.cr#L154"},"def":{"name":"structure=","args":[{"name":"new_structure","doc":null,"default_value":"","external_name":"new_structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Structure","visibility":"Public","body":"@structure.delete(self)\n@structure = new_structure\nnew_structure << self\n"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/ChainCollection","path":"Chem/ChainCollection.html","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/core/chain_collection.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_collection.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"chem.cr/Chem/AtomView","kind":"struct","full_name":"Chem::AtomView","name":"AtomView"},{"html_id":"chem.cr/Chem/ChainView","kind":"struct","full_name":"Chem::ChainView","name":"ChainView"},{"html_id":"chem.cr/Chem/ResidueView","kind":"struct","full_name":"Chem::ResidueView","name":"ResidueView"},{"html_id":"chem.cr/Chem/Structure","kind":"class","full_name":"Chem::Structure","name":"Structure"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"chains:ChainView-instance-method","name":"chains","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ChainView","args_html":" : <a href=\"../Chem/ChainView.html\">ChainView</a>","location":{"filename":"src/chem/core/chain_collection.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_collection.cr#L7"},"def":{"name":"chains","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ChainView","visibility":"Public","body":"chains = Array(Chain).new(n_chains)\neach_chain do |chain|\n  chains << chain\nend\nChainView.new(chains)\n"}},{"html_id":"each_chain:Iterator(Chain)-instance-method","name":"each_chain","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Iterator(Chain)","args_html":" : Iterator(<a href=\"../Chem/Chain.html\">Chain</a>)","location":{"filename":"src/chem/core/chain_collection.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_collection.cr#L3"},"def":{"name":"each_chain","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Chain)","visibility":"Public","body":""}},{"html_id":"each_chain(&block:Chain->)-instance-method","name":"each_chain","doc":null,"summary":null,"abstract":true,"args":[],"args_string":"(&block : Chain -> )","args_html":"(&block : <a href=\"../Chem/Chain.html\">Chain</a> -> )","location":{"filename":"src/chem/core/chain_collection.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_collection.cr#L4"},"def":{"name":"each_chain","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Chain ->)"},"return_type":"","visibility":"Public","body":""}},{"html_id":"n_chains:Int32-instance-method","name":"n_chains","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/chain_collection.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_collection.cr#L5"},"def":{"name":"n_chains","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/ChainView","path":"Chem/ChainView.html","kind":"struct","full_name":"Chem::ChainView","name":"ChainView","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ArrayView","kind":"module","full_name":"Chem::ArrayView","name":"ArrayView"},{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/chain_view.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/ArrayView","kind":"module","full_name":"Chem::ArrayView","name":"ArrayView"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"[](id:Char):Chain-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"}],"args_string":"(id : Char) : Chain","args_html":"(id : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Chain.html\">Chain</a>","location":{"filename":"src/chem/core/chain_view.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L8"},"def":{"name":"[]","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Chain","visibility":"Public","body":"self[id]? || (raise(IndexError.new))"}},{"html_id":"[]?(id:Char):Chain?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"}],"args_string":"(id : Char) : Chain?","args_html":"(id : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Chain.html\">Chain</a>?","location":{"filename":"src/chem/core/chain_view.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L12"},"def":{"name":"[]?","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Chain | ::Nil","visibility":"Public","body":"find do |__arg0|\n  __arg0.id == id\nend"}},{"html_id":"chains:self-instance-method","name":"chains","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/chain_view.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L16"},"def":{"name":"chains","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"self"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Atom)","args_html":" : Iterator(<a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/core/chain_view.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L20"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Atom)","visibility":"Public","body":"iterators = [] of Iterator(Atom)\neach do |chain|\n  chain.each_residue do |residue|\n    iterators << residue.each_atom\n  end\nend\nIterator.chain(iterators)\n"}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Atom -> )","args_html":"(&block : <a href=\"../Chem/Atom.html\">Atom</a> -> )","location":{"filename":"src/chem/core/chain_view.cr","line_number":30,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L30"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Atom ->)"},"return_type":"","visibility":"Public","body":"each do |chain|\n  chain.each_atom do |atom|\n    yield atom\n  end\nend"}},{"html_id":"each_chain:Iterator(Chain)-instance-method","name":"each_chain","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Chain)","args_html":" : Iterator(<a href=\"../Chem/Chain.html\">Chain</a>)","location":{"filename":"src/chem/core/chain_view.cr","line_number":38,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L38"},"def":{"name":"each_chain","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Chain)","visibility":"Public","body":"each"}},{"html_id":"each_chain(&block:Chain->)-instance-method","name":"each_chain","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Chain -> )","args_html":"(&block : <a href=\"../Chem/Chain.html\">Chain</a> -> )","location":{"filename":"src/chem/core/chain_view.cr","line_number":42,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L42"},"def":{"name":"each_chain","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Chain ->)"},"return_type":"","visibility":"Public","body":"each do |chain|\n  yield chain\nend"}},{"html_id":"each_residue:Iterator(Residue)-instance-method","name":"each_residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Residue)","args_html":" : Iterator(<a href=\"../Chem/Residue.html\">Residue</a>)","location":{"filename":"src/chem/core/chain_view.cr","line_number":48,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L48"},"def":{"name":"each_residue","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Residue)","visibility":"Public","body":"Iterator.chain(each.map(&.each_residue).to_a)"}},{"html_id":"each_residue(&block:Residue->)-instance-method","name":"each_residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Residue -> )","args_html":"(&block : <a href=\"../Chem/Residue.html\">Residue</a> -> )","location":{"filename":"src/chem/core/chain_view.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L52"},"def":{"name":"each_residue","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Residue ->)"},"return_type":"","visibility":"Public","body":"each do |chain|\n  chain.each_residue do |residue|\n    yield residue\n  end\nend"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/chain_view.cr","line_number":60,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L60"},"def":{"name":"n_atoms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"sum(&.n_atoms)"}},{"html_id":"n_chains:Int32-instance-method","name":"n_chains","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/chain_view.cr","line_number":64,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L64"},"def":{"name":"n_chains","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"size"}},{"html_id":"n_residues:Int32-instance-method","name":"n_residues","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/chain_view.cr","line_number":68,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/chain_view.cr#L68"},"def":{"name":"n_residues","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"sum(&.n_residues)"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Constraint","path":"Chem/Constraint.html","kind":"enum","full_name":"Chem::Constraint","name":"Constraint","abstract":false,"superclass":null,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/bias.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bias.cr#L4"}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"None","name":"None","value":"0","doc":null,"summary":null},{"id":"X","name":"X","value":"1","doc":null,"summary":null},{"id":"Y","name":"Y","value":"2","doc":null,"summary":null},{"id":"Z","name":"Z","value":"3","doc":null,"summary":null},{"id":"XY","name":"XY","value":"4","doc":null,"summary":null},{"id":"XZ","name":"XZ","value":"5","doc":null,"summary":null},{"id":"YZ","name":"YZ","value":"6","doc":null,"summary":null},{"id":"XYZ","name":"XYZ","value":"7","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"includes?(axis:Symbol):Bool-instance-method","name":"includes?","doc":null,"summary":null,"abstract":false,"args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Symbol"}],"args_string":"(axis : Symbol) : Bool","args_html":"(axis : Symbol) : Bool","location":{"filename":"src/chem/core/bias.cr","line_number":14,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bias.cr#L14"},"def":{"name":"includes?","args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Symbol"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"case axis\nwhen :x\n  ((xyz? || x?) || xy?) || xz?\nwhen :y\n  ((xyz? || y?) || xy?) || yz?\nwhen :z\n  ((xyz? || z?) || xz?) || yz?\nelse\n  false\nend"}},{"html_id":"none?-instance-method","name":"none?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bias.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bias.cr#L5"},"def":{"name":"none?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == None"}},{"html_id":"x?-instance-method","name":"x?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bias.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bias.cr#L6"},"def":{"name":"x?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == X"}},{"html_id":"xy?-instance-method","name":"xy?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bias.cr","line_number":9,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bias.cr#L9"},"def":{"name":"xy?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == XY"}},{"html_id":"xyz?-instance-method","name":"xyz?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bias.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bias.cr#L12"},"def":{"name":"xyz?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == XYZ"}},{"html_id":"xz?-instance-method","name":"xz?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bias.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bias.cr#L10"},"def":{"name":"xz?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == XZ"}},{"html_id":"y?-instance-method","name":"y?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bias.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bias.cr#L7"},"def":{"name":"y?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Y"}},{"html_id":"yz?-instance-method","name":"yz?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bias.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bias.cr#L11"},"def":{"name":"yz?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == YZ"}},{"html_id":"z?-instance-method","name":"z?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/bias.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/bias.cr#L8"},"def":{"name":"z?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Z"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Cube","path":"Chem/Cube.html","kind":"module","full_name":"Chem::Cube","name":"Cube","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/cube.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/cube.cr#L2"},{"filename":"src/chem/register_format.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L172"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/Cube/Reader","path":"Chem/Cube/Reader.html","kind":"class","full_name":"Chem::Cube::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader/Attached","kind":"module","full_name":"Chem::FormatReader::Attached","name":"Attached"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/cube.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/cube.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"BOHR_TO_ANGS","name":"BOHR_TO_ANGS","value":"0.529177210859","doc":null,"summary":null}],"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/Attached","kind":"module","full_name":"Chem::FormatReader::Attached","name":"Attached"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Cube","kind":"module","full_name":"Chem::Cube","name":"Cube"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/cube.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/cube.cr#L12"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}],"instance_methods":[{"html_id":"read_attached:Structure-instance-method","name":"read_attached","doc":"Reads the attached object from the IO. Raises `IO::Error` if the\nreader is closed or `ParseException` if the object cannot be\ndecoded.","summary":"<p>Reads the attached object from the IO.</p>","abstract":false,"args":[],"args_string":" : Structure","args_html":" : <a href=\"../../Chem/Structure.html\">Structure</a>","location":{"filename":"src/chem/formats/cube.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/cube.cr#L16"},"def":{"name":"read_attached","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Structure","visibility":"Public","body":"read_header\n@attached || (raise(\"BUG: @attached is nil after reading header\"))\n"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Cube/Writer","path":"Chem/Cube/Writer.html","kind":"class","full_name":"Chem::Cube::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/cube.cr","line_number":76,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/cube.cr#L76"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"ANGS_TO_BOHR","name":"ANGS_TO_BOHR","value":"1.88972612478289694072","doc":null,"summary":null}],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Cube","kind":"module","full_name":"Chem::Cube","name":"Cube"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,atoms:AtomCollection,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, atoms : AtomCollection, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, atoms, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,atoms:AtomCollection,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"}],"args_string":"(path : Path | String, atoms : AtomCollection, & : self -> )","args_html":"(path : Path | String, atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path, atoms)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,atoms:AtomCollection,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, atoms : AtomCollection, sync_close : Bool = false)","args_html":"(io : IO, atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/cube.cr","line_number":81,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/cube.cr#L81"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, atoms, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,atoms:AtomCollection):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"}],"args_string":"(path : Path | String, atoms : AtomCollection) : self","args_html":"(path : Path | String, atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), atoms, sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/DX","path":"Chem/DX.html","kind":"module","full_name":"Chem::DX","name":"DX","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/dx.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/dx.cr#L2"},{"filename":"src/chem/register_format.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L172"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/DX/Reader","path":"Chem/DX/Reader.html","kind":"class","full_name":"Chem::DX::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/dx.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/dx.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/DX","kind":"module","full_name":"Chem::DX","name":"DX"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/dx.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/dx.cr#L7"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/DX/Writer","path":"Chem/DX/Writer.html","kind":"class","full_name":"Chem::DX::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/dx.cr","line_number":51,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/dx.cr#L51"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/DX","kind":"module","full_name":"Chem::DX","name":"DX"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","doc":"Creates a new object from the given *io*.","summary":"<p>Creates a new object from the given <em>io</em>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":null,"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/Element","path":"Chem/Element.html","kind":"class","full_name":"Chem::Element","name":"Element","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/element.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/element.cr#L2"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L13"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L18"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L22"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":26,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L26"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":30,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L30"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":34,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L34"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":39,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L39"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":44,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L44"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":49,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L49"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":54,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L54"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":58,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L58"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":64,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L64"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":70,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L70"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":74,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L74"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":78,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L78"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":83,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L83"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":88,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L88"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":93,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L93"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":97,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L97"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":103,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L103"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":109,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L109"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":113,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L113"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":117,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L117"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":121,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L121"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":125,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L125"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":129,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L129"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":133,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L133"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":137,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L137"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":141,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L141"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":145,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L145"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":149,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L149"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":153,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L153"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":157,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L157"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":161,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L161"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":165,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L165"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":170,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L170"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":174,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L174"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":178,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L178"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":182,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L182"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":186,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L186"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":190,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L190"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":194,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L194"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":198,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L198"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":202,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L202"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":206,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L206"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":210,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L210"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":214,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L214"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":218,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L218"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":222,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L222"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":226,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L226"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":230,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L230"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":234,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L234"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":238,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L238"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":243,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L243"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":247,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L247"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":251,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L251"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":255,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L255"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":259,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L259"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":263,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L263"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":267,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L267"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":271,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L271"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":274,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L274"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":278,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L278"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":282,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L282"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":286,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L286"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":290,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L290"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":294,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L294"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":298,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L298"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":302,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L302"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":306,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L306"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":310,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L310"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":314,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L314"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":318,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L318"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":322,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L322"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":326,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L326"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":330,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L330"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":334,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L334"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":338,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L338"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":342,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L342"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":346,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L346"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":350,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L350"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":354,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L354"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":358,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L358"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":362,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L362"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":365,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L365"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":368,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L368"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":371,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L371"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":374,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L374"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":377,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L377"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":381,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L381"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":385,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L385"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":389,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L389"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":393,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L393"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":397,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L397"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":401,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L401"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":405,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L405"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":409,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L409"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":412,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L412"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":415,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L415"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":418,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L418"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":420,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L420"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":422,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L422"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":424,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L424"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":426,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L426"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":428,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L428"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":430,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L430"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":432,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L432"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":434,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L434"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":436,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L436"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":438,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L438"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":440,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L440"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":442,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L442"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":444,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L444"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":446,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L446"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":448,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L448"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":450,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L450"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":452,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L452"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":454,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L454"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(atomic_number:Int32,name:String,symbol:String,*,mass:Float64,covalent_radius:Float64=1.5,ionic:Bool=false,valencies:Array(Int32)=[]ofInt32,vdw_radius:Float64?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"atomic_number","doc":null,"default_value":"","external_name":"atomic_number","restriction":"Int32"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"mass","doc":null,"default_value":"","external_name":"mass","restriction":"Float64"},{"name":"covalent_radius","doc":null,"default_value":"1.5","external_name":"covalent_radius","restriction":"Float64"},{"name":"ionic","doc":null,"default_value":"false","external_name":"ionic","restriction":"Bool"},{"name":"valencies","doc":null,"default_value":"[] of Int32","external_name":"valencies","restriction":"Array(Int32)"},{"name":"vdw_radius","doc":null,"default_value":"nil","external_name":"vdw_radius","restriction":"Float64 | ::Nil"}],"args_string":"(atomic_number : Int32, name : String, symbol : String, *, mass : Float64, covalent_radius : Float64 = 1.5, ionic : Bool = false, valencies : Array(Int32) = [] of Int32, vdw_radius : Float64? = nil)","args_html":"(atomic_number : Int32, name : String, symbol : String, *, mass : Float64, covalent_radius : Float64 = <span class=\"n\">1.5</span>, ionic : Bool = <span class=\"n\">false</span>, valencies : <a href=\"../Array.html\">Array</a>(Int32) = <span class=\"o\">[]</span> <span class=\"k\">of</span> <span class=\"t\">Int32</span>, vdw_radius : Float64? = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/core/element.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/element.cr#L12"},"def":{"name":"new","args":[{"name":"atomic_number","doc":null,"default_value":"","external_name":"atomic_number","restriction":"Int32"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":"String"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"mass","doc":null,"default_value":"","external_name":"mass","restriction":"Float64"},{"name":"covalent_radius","doc":null,"default_value":"1.5","external_name":"covalent_radius","restriction":"Float64"},{"name":"ionic","doc":null,"default_value":"false","external_name":"ionic","restriction":"Bool"},{"name":"valencies","doc":null,"default_value":"[] of Int32","external_name":"valencies","restriction":"Array(Int32)"},{"name":"vdw_radius","doc":null,"default_value":"nil","external_name":"vdw_radius","restriction":"Float64 | ::Nil"}],"double_splat":null,"splat_index":3,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(atomic_number, name, symbol, mass: mass, covalent_radius: covalent_radius, ionic: ionic, valencies: valencies, vdw_radius: vdw_radius)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"actinium?-instance-method","name":"actinium?","doc":"Returns `true` if the element is Actinium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Actinium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":377,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L377"},"def":{"name":"actinium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ac)"}},{"html_id":"aluminum?-instance-method","name":"aluminum?","doc":"Returns `true` if the element is Aluminum, else `false`.","summary":"<p>Returns <code>true</code> if the element is Aluminum, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":70,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L70"},"def":{"name":"aluminum?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Al)"}},{"html_id":"americium?-instance-method","name":"americium?","doc":"Returns `true` if the element is Americium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Americium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":401,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L401"},"def":{"name":"americium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Am)"}},{"html_id":"antimony?-instance-method","name":"antimony?","doc":"Returns `true` if the element is Antimony, else `false`.","summary":"<p>Returns <code>true</code> if the element is Antimony, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":230,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L230"},"def":{"name":"antimony?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Sb)"}},{"html_id":"argon?-instance-method","name":"argon?","doc":"Returns `true` if the element is Argon, else `false`.","summary":"<p>Returns <code>true</code> if the element is Argon, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":93,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L93"},"def":{"name":"argon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ar)"}},{"html_id":"arsenic?-instance-method","name":"arsenic?","doc":"Returns `true` if the element is Arsenic, else `false`.","summary":"<p>Returns <code>true</code> if the element is Arsenic, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":157,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L157"},"def":{"name":"arsenic?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::As)"}},{"html_id":"astatine?-instance-method","name":"astatine?","doc":"Returns `true` if the element is Astatine, else `false`.","summary":"<p>Returns <code>true</code> if the element is Astatine, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":365,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L365"},"def":{"name":"astatine?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::At)"}},{"html_id":"atomic_number:Int32-instance-method","name":"atomic_number","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/element.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/element.cr#L3"},"def":{"name":"atomic_number","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@atomic_number"}},{"html_id":"barium?-instance-method","name":"barium?","doc":"Returns `true` if the element is Barium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Barium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":251,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L251"},"def":{"name":"barium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ba)"}},{"html_id":"berkelium?-instance-method","name":"berkelium?","doc":"Returns `true` if the element is Berkelium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Berkelium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":409,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L409"},"def":{"name":"berkelium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Bk)"}},{"html_id":"beryllium?-instance-method","name":"beryllium?","doc":"Returns `true` if the element is Beryllium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Beryllium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":26,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L26"},"def":{"name":"beryllium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Be)"}},{"html_id":"bismuth?-instance-method","name":"bismuth?","doc":"Returns `true` if the element is Bismuth, else `false`.","summary":"<p>Returns <code>true</code> if the element is Bismuth, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":358,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L358"},"def":{"name":"bismuth?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Bi)"}},{"html_id":"bohrium?-instance-method","name":"bohrium?","doc":"Returns `true` if the element is Bohrium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Bohrium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":432,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L432"},"def":{"name":"bohrium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Bh)"}},{"html_id":"boron?-instance-method","name":"boron?","doc":"Returns `true` if the element is Boron, else `false`.","summary":"<p>Returns <code>true</code> if the element is Boron, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":30,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L30"},"def":{"name":"boron?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::B)"}},{"html_id":"bromine?-instance-method","name":"bromine?","doc":"Returns `true` if the element is Bromine, else `false`.","summary":"<p>Returns <code>true</code> if the element is Bromine, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":165,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L165"},"def":{"name":"bromine?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Br)"}},{"html_id":"cadmium?-instance-method","name":"cadmium?","doc":"Returns `true` if the element is Cadmium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Cadmium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":218,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L218"},"def":{"name":"cadmium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Cd)"}},{"html_id":"calcium?-instance-method","name":"calcium?","doc":"Returns `true` if the element is Calcium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Calcium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":103,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L103"},"def":{"name":"calcium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ca)"}},{"html_id":"californium?-instance-method","name":"californium?","doc":"Returns `true` if the element is Californium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Californium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":412,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L412"},"def":{"name":"californium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Cf)"}},{"html_id":"carbon?-instance-method","name":"carbon?","doc":"Returns `true` if the element is Carbon, else `false`.","summary":"<p>Returns <code>true</code> if the element is Carbon, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":34,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L34"},"def":{"name":"carbon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::C)"}},{"html_id":"cerium?-instance-method","name":"cerium?","doc":"Returns `true` if the element is Cerium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Cerium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":259,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L259"},"def":{"name":"cerium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ce)"}},{"html_id":"cesium?-instance-method","name":"cesium?","doc":"Returns `true` if the element is Cesium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Cesium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":247,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L247"},"def":{"name":"cesium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Cs)"}},{"html_id":"chlorine?-instance-method","name":"chlorine?","doc":"Returns `true` if the element is Chlorine, else `false`.","summary":"<p>Returns <code>true</code> if the element is Chlorine, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":88,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L88"},"def":{"name":"chlorine?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Cl)"}},{"html_id":"chromium?-instance-method","name":"chromium?","doc":"Returns `true` if the element is Chromium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Chromium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":121,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L121"},"def":{"name":"chromium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Cr)"}},{"html_id":"cobalt?-instance-method","name":"cobalt?","doc":"Returns `true` if the element is Cobalt, else `false`.","summary":"<p>Returns <code>true</code> if the element is Cobalt, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":133,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L133"},"def":{"name":"cobalt?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Co)"}},{"html_id":"copernicium?-instance-method","name":"copernicium?","doc":"Returns `true` if the element is Copernicium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Copernicium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":442,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L442"},"def":{"name":"copernicium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Cn)"}},{"html_id":"copper?-instance-method","name":"copper?","doc":"Returns `true` if the element is Copper, else `false`.","summary":"<p>Returns <code>true</code> if the element is Copper, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":141,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L141"},"def":{"name":"copper?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Cu)"}},{"html_id":"covalent_radius:Float64-instance-method","name":"covalent_radius","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core/element.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/element.cr#L4"},"def":{"name":"covalent_radius","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@covalent_radius"}},{"html_id":"curium?-instance-method","name":"curium?","doc":"Returns `true` if the element is Curium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Curium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":405,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L405"},"def":{"name":"curium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Cm)"}},{"html_id":"darmstadtium?-instance-method","name":"darmstadtium?","doc":"Returns `true` if the element is Darmstadtium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Darmstadtium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":438,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L438"},"def":{"name":"darmstadtium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ds)"}},{"html_id":"dubnium?-instance-method","name":"dubnium?","doc":"Returns `true` if the element is Dubnium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Dubnium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":428,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L428"},"def":{"name":"dubnium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Db)"}},{"html_id":"dysprosium?-instance-method","name":"dysprosium?","doc":"Returns `true` if the element is Dysprosium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Dysprosium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":290,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L290"},"def":{"name":"dysprosium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Dy)"}},{"html_id":"einsteinium?-instance-method","name":"einsteinium?","doc":"Returns `true` if the element is Einsteinium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Einsteinium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":415,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L415"},"def":{"name":"einsteinium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Es)"}},{"html_id":"erbium?-instance-method","name":"erbium?","doc":"Returns `true` if the element is Erbium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Erbium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":298,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L298"},"def":{"name":"erbium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Er)"}},{"html_id":"europium?-instance-method","name":"europium?","doc":"Returns `true` if the element is Europium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Europium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":278,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L278"},"def":{"name":"europium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Eu)"}},{"html_id":"fermium?-instance-method","name":"fermium?","doc":"Returns `true` if the element is Fermium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Fermium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":418,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L418"},"def":{"name":"fermium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Fm)"}},{"html_id":"fluorine?-instance-method","name":"fluorine?","doc":"Returns `true` if the element is Fluorine, else `false`.","summary":"<p>Returns <code>true</code> if the element is Fluorine, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":49,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L49"},"def":{"name":"fluorine?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::F)"}},{"html_id":"francium?-instance-method","name":"francium?","doc":"Returns `true` if the element is Francium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Francium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":371,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L371"},"def":{"name":"francium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Fr)"}},{"html_id":"gadolinium?-instance-method","name":"gadolinium?","doc":"Returns `true` if the element is Gadolinium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Gadolinium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":282,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L282"},"def":{"name":"gadolinium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Gd)"}},{"html_id":"gallium?-instance-method","name":"gallium?","doc":"Returns `true` if the element is Gallium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Gallium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":149,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L149"},"def":{"name":"gallium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ga)"}},{"html_id":"germanium?-instance-method","name":"germanium?","doc":"Returns `true` if the element is Germanium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Germanium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":153,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L153"},"def":{"name":"germanium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ge)"}},{"html_id":"gold?-instance-method","name":"gold?","doc":"Returns `true` if the element is Gold, else `false`.","summary":"<p>Returns <code>true</code> if the element is Gold, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":342,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L342"},"def":{"name":"gold?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Au)"}},{"html_id":"hafnium?-instance-method","name":"hafnium?","doc":"Returns `true` if the element is Hafnium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Hafnium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":314,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L314"},"def":{"name":"hafnium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Hf)"}},{"html_id":"hassium?-instance-method","name":"hassium?","doc":"Returns `true` if the element is Hassium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Hassium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":434,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L434"},"def":{"name":"hassium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Hs)"}},{"html_id":"helium?-instance-method","name":"helium?","doc":"Returns `true` if the element is Helium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Helium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L18"},"def":{"name":"helium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::He)"}},{"html_id":"holmium?-instance-method","name":"holmium?","doc":"Returns `true` if the element is Holmium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Holmium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":294,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L294"},"def":{"name":"holmium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ho)"}},{"html_id":"hydrogen?-instance-method","name":"hydrogen?","doc":"Returns `true` if the element is Hydrogen, else `false`.","summary":"<p>Returns <code>true</code> if the element is Hydrogen, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L13"},"def":{"name":"hydrogen?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::H)"}},{"html_id":"indium?-instance-method","name":"indium?","doc":"Returns `true` if the element is Indium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Indium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":222,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L222"},"def":{"name":"indium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::In)"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Appends a String representation of this object\nwhich includes its class name, its object address\nand the values of all instance variables.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).inspect # => #<Person:0x10fd31f20 @name=\"John\", @age=32>\n```","summary":"<p>Appends a String representation of this object which includes its class name, its object address and the values of all instance variables.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/core/element.cr","line_number":24,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/element.cr#L24"},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"((((io << \"<Element \") << @symbol) << '(') << @atomic_number) << \")>\""}},{"html_id":"iodine?-instance-method","name":"iodine?","doc":"Returns `true` if the element is Iodine, else `false`.","summary":"<p>Returns <code>true</code> if the element is Iodine, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":238,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L238"},"def":{"name":"iodine?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::I)"}},{"html_id":"ionic?:Bool-instance-method","name":"ionic?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/element.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/element.cr#L5"},"def":{"name":"ionic?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@ionic"}},{"html_id":"iridium?-instance-method","name":"iridium?","doc":"Returns `true` if the element is Iridium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Iridium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":334,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L334"},"def":{"name":"iridium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ir)"}},{"html_id":"iron?-instance-method","name":"iron?","doc":"Returns `true` if the element is Iron, else `false`.","summary":"<p>Returns <code>true</code> if the element is Iron, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":129,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L129"},"def":{"name":"iron?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Fe)"}},{"html_id":"krypton?-instance-method","name":"krypton?","doc":"Returns `true` if the element is Krypton, else `false`.","summary":"<p>Returns <code>true</code> if the element is Krypton, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":170,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L170"},"def":{"name":"krypton?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Kr)"}},{"html_id":"lanthanum?-instance-method","name":"lanthanum?","doc":"Returns `true` if the element is Lanthanum, else `false`.","summary":"<p>Returns <code>true</code> if the element is Lanthanum, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":255,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L255"},"def":{"name":"lanthanum?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::La)"}},{"html_id":"lawrencium?-instance-method","name":"lawrencium?","doc":"Returns `true` if the element is Lawrencium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Lawrencium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":424,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L424"},"def":{"name":"lawrencium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Lr)"}},{"html_id":"lead?-instance-method","name":"lead?","doc":"Returns `true` if the element is Lead, else `false`.","summary":"<p>Returns <code>true</code> if the element is Lead, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":354,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L354"},"def":{"name":"lead?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Pb)"}},{"html_id":"lithium?-instance-method","name":"lithium?","doc":"Returns `true` if the element is Lithium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Lithium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L22"},"def":{"name":"lithium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Li)"}},{"html_id":"lutetium?-instance-method","name":"lutetium?","doc":"Returns `true` if the element is Lutetium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Lutetium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":310,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L310"},"def":{"name":"lutetium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Lu)"}},{"html_id":"magnesium?-instance-method","name":"magnesium?","doc":"Returns `true` if the element is Magnesium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Magnesium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":64,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L64"},"def":{"name":"magnesium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Mg)"}},{"html_id":"manganese?-instance-method","name":"manganese?","doc":"Returns `true` if the element is Manganese, else `false`.","summary":"<p>Returns <code>true</code> if the element is Manganese, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":125,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L125"},"def":{"name":"manganese?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Mn)"}},{"html_id":"mass:Float64-instance-method","name":"mass","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core/element.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/element.cr#L6"},"def":{"name":"mass","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@mass"}},{"html_id":"max_valency:Int32-instance-method","name":"max_valency","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/element.cr","line_number":28,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/element.cr#L28"},"def":{"name":"max_valency","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@valencies.last? || 0"}},{"html_id":"meitnerium?-instance-method","name":"meitnerium?","doc":"Returns `true` if the element is Meitnerium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Meitnerium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":436,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L436"},"def":{"name":"meitnerium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Mt)"}},{"html_id":"mendelevium?-instance-method","name":"mendelevium?","doc":"Returns `true` if the element is Mendelevium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Mendelevium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":420,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L420"},"def":{"name":"mendelevium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Md)"}},{"html_id":"mercury?-instance-method","name":"mercury?","doc":"Returns `true` if the element is Mercury, else `false`.","summary":"<p>Returns <code>true</code> if the element is Mercury, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":346,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L346"},"def":{"name":"mercury?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Hg)"}},{"html_id":"molybdenum?-instance-method","name":"molybdenum?","doc":"Returns `true` if the element is Molybdenum, else `false`.","summary":"<p>Returns <code>true</code> if the element is Molybdenum, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":194,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L194"},"def":{"name":"molybdenum?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Mo)"}},{"html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/core/element.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/element.cr#L7"},"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"neodymium?-instance-method","name":"neodymium?","doc":"Returns `true` if the element is Neodymium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Neodymium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":267,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L267"},"def":{"name":"neodymium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Nd)"}},{"html_id":"neon?-instance-method","name":"neon?","doc":"Returns `true` if the element is Neon, else `false`.","summary":"<p>Returns <code>true</code> if the element is Neon, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":54,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L54"},"def":{"name":"neon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ne)"}},{"html_id":"neptunium?-instance-method","name":"neptunium?","doc":"Returns `true` if the element is Neptunium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Neptunium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":393,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L393"},"def":{"name":"neptunium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Np)"}},{"html_id":"nickel?-instance-method","name":"nickel?","doc":"Returns `true` if the element is Nickel, else `false`.","summary":"<p>Returns <code>true</code> if the element is Nickel, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":137,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L137"},"def":{"name":"nickel?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ni)"}},{"html_id":"niobium?-instance-method","name":"niobium?","doc":"Returns `true` if the element is Niobium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Niobium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":190,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L190"},"def":{"name":"niobium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Nb)"}},{"html_id":"nitrogen?-instance-method","name":"nitrogen?","doc":"Returns `true` if the element is Nitrogen, else `false`.","summary":"<p>Returns <code>true</code> if the element is Nitrogen, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":39,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L39"},"def":{"name":"nitrogen?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::N)"}},{"html_id":"nobelium?-instance-method","name":"nobelium?","doc":"Returns `true` if the element is Nobelium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Nobelium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":422,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L422"},"def":{"name":"nobelium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::No)"}},{"html_id":"osmium?-instance-method","name":"osmium?","doc":"Returns `true` if the element is Osmium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Osmium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":330,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L330"},"def":{"name":"osmium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Os)"}},{"html_id":"oxygen?-instance-method","name":"oxygen?","doc":"Returns `true` if the element is Oxygen, else `false`.","summary":"<p>Returns <code>true</code> if the element is Oxygen, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":44,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L44"},"def":{"name":"oxygen?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::O)"}},{"html_id":"palladium?-instance-method","name":"palladium?","doc":"Returns `true` if the element is Palladium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Palladium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":210,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L210"},"def":{"name":"palladium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Pd)"}},{"html_id":"phosphorus?-instance-method","name":"phosphorus?","doc":"Returns `true` if the element is Phosphorus, else `false`.","summary":"<p>Returns <code>true</code> if the element is Phosphorus, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":78,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L78"},"def":{"name":"phosphorus?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::P)"}},{"html_id":"platinum?-instance-method","name":"platinum?","doc":"Returns `true` if the element is Platinum, else `false`.","summary":"<p>Returns <code>true</code> if the element is Platinum, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":338,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L338"},"def":{"name":"platinum?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Pt)"}},{"html_id":"plutonium?-instance-method","name":"plutonium?","doc":"Returns `true` if the element is Plutonium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Plutonium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":397,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L397"},"def":{"name":"plutonium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Pu)"}},{"html_id":"polonium?-instance-method","name":"polonium?","doc":"Returns `true` if the element is Polonium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Polonium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":362,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L362"},"def":{"name":"polonium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Po)"}},{"html_id":"potassium?-instance-method","name":"potassium?","doc":"Returns `true` if the element is Potassium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Potassium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":97,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L97"},"def":{"name":"potassium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::K)"}},{"html_id":"praseodymium?-instance-method","name":"praseodymium?","doc":"Returns `true` if the element is Praseodymium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Praseodymium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":263,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L263"},"def":{"name":"praseodymium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Pr)"}},{"html_id":"proactinium?-instance-method","name":"proactinium?","doc":"Returns `true` if the element is Proactinium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Proactinium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":385,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L385"},"def":{"name":"proactinium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Pa)"}},{"html_id":"promethium?-instance-method","name":"promethium?","doc":"Returns `true` if the element is Promethium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Promethium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":271,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L271"},"def":{"name":"promethium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Pm)"}},{"html_id":"radium?-instance-method","name":"radium?","doc":"Returns `true` if the element is Radium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Radium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":374,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L374"},"def":{"name":"radium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ra)"}},{"html_id":"radon?-instance-method","name":"radon?","doc":"Returns `true` if the element is Radon, else `false`.","summary":"<p>Returns <code>true</code> if the element is Radon, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":368,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L368"},"def":{"name":"radon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Rn)"}},{"html_id":"rhenium?-instance-method","name":"rhenium?","doc":"Returns `true` if the element is Rhenium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Rhenium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":326,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L326"},"def":{"name":"rhenium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Re)"}},{"html_id":"rhodium?-instance-method","name":"rhodium?","doc":"Returns `true` if the element is Rhodium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Rhodium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":206,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L206"},"def":{"name":"rhodium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Rh)"}},{"html_id":"roentgenium?-instance-method","name":"roentgenium?","doc":"Returns `true` if the element is Roentgenium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Roentgenium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":440,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L440"},"def":{"name":"roentgenium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Rg)"}},{"html_id":"rubidium?-instance-method","name":"rubidium?","doc":"Returns `true` if the element is Rubidium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Rubidium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":174,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L174"},"def":{"name":"rubidium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Rb)"}},{"html_id":"ruthenium?-instance-method","name":"ruthenium?","doc":"Returns `true` if the element is Ruthenium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Ruthenium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":202,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L202"},"def":{"name":"ruthenium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ru)"}},{"html_id":"rutherfordium?-instance-method","name":"rutherfordium?","doc":"Returns `true` if the element is Rutherfordium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Rutherfordium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":426,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L426"},"def":{"name":"rutherfordium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Rf)"}},{"html_id":"samarium?-instance-method","name":"samarium?","doc":"Returns `true` if the element is Samarium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Samarium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":274,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L274"},"def":{"name":"samarium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Sm)"}},{"html_id":"scandium?-instance-method","name":"scandium?","doc":"Returns `true` if the element is Scandium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Scandium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":109,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L109"},"def":{"name":"scandium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Sc)"}},{"html_id":"seaborgium?-instance-method","name":"seaborgium?","doc":"Returns `true` if the element is Seaborgium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Seaborgium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":430,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L430"},"def":{"name":"seaborgium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Sg)"}},{"html_id":"selenium?-instance-method","name":"selenium?","doc":"Returns `true` if the element is Selenium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Selenium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":161,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L161"},"def":{"name":"selenium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Se)"}},{"html_id":"silicon?-instance-method","name":"silicon?","doc":"Returns `true` if the element is Silicon, else `false`.","summary":"<p>Returns <code>true</code> if the element is Silicon, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":74,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L74"},"def":{"name":"silicon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Si)"}},{"html_id":"silver?-instance-method","name":"silver?","doc":"Returns `true` if the element is Silver, else `false`.","summary":"<p>Returns <code>true</code> if the element is Silver, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":214,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L214"},"def":{"name":"silver?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ag)"}},{"html_id":"sodium?-instance-method","name":"sodium?","doc":"Returns `true` if the element is Sodium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Sodium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":58,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L58"},"def":{"name":"sodium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Na)"}},{"html_id":"strontium?-instance-method","name":"strontium?","doc":"Returns `true` if the element is Strontium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Strontium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":178,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L178"},"def":{"name":"strontium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Sr)"}},{"html_id":"sulfur?-instance-method","name":"sulfur?","doc":"Returns `true` if the element is Sulfur, else `false`.","summary":"<p>Returns <code>true</code> if the element is Sulfur, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":83,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L83"},"def":{"name":"sulfur?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::S)"}},{"html_id":"symbol:String-instance-method","name":"symbol","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/core/element.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/element.cr#L8"},"def":{"name":"symbol","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@symbol"}},{"html_id":"tantalum?-instance-method","name":"tantalum?","doc":"Returns `true` if the element is Tantalum, else `false`.","summary":"<p>Returns <code>true</code> if the element is Tantalum, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":318,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L318"},"def":{"name":"tantalum?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ta)"}},{"html_id":"technetium?-instance-method","name":"technetium?","doc":"Returns `true` if the element is Technetium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Technetium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":198,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L198"},"def":{"name":"technetium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Tc)"}},{"html_id":"tellurium?-instance-method","name":"tellurium?","doc":"Returns `true` if the element is Tellurium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Tellurium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":234,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L234"},"def":{"name":"tellurium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Te)"}},{"html_id":"terbium?-instance-method","name":"terbium?","doc":"Returns `true` if the element is Terbium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Terbium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":286,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L286"},"def":{"name":"terbium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Tb)"}},{"html_id":"thallium?-instance-method","name":"thallium?","doc":"Returns `true` if the element is Thallium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Thallium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":350,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L350"},"def":{"name":"thallium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Tl)"}},{"html_id":"thorium?-instance-method","name":"thorium?","doc":"Returns `true` if the element is Thorium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Thorium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":381,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L381"},"def":{"name":"thorium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Th)"}},{"html_id":"thulium?-instance-method","name":"thulium?","doc":"Returns `true` if the element is Thulium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Thulium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":302,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L302"},"def":{"name":"thulium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Tm)"}},{"html_id":"tin?-instance-method","name":"tin?","doc":"Returns `true` if the element is Tin, else `false`.","summary":"<p>Returns <code>true</code> if the element is Tin, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":226,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L226"},"def":{"name":"tin?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Sn)"}},{"html_id":"titanium?-instance-method","name":"titanium?","doc":"Returns `true` if the element is Titanium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Titanium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":113,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L113"},"def":{"name":"titanium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Ti)"}},{"html_id":"tungsten?-instance-method","name":"tungsten?","doc":"Returns `true` if the element is Tungsten, else `false`.","summary":"<p>Returns <code>true</code> if the element is Tungsten, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":322,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L322"},"def":{"name":"tungsten?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::W)"}},{"html_id":"ununhexium?-instance-method","name":"ununhexium?","doc":"Returns `true` if the element is Ununhexium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Ununhexium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":450,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L450"},"def":{"name":"ununhexium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Uuh)"}},{"html_id":"ununoctium?-instance-method","name":"ununoctium?","doc":"Returns `true` if the element is Ununoctium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Ununoctium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":454,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L454"},"def":{"name":"ununoctium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Uuo)"}},{"html_id":"ununpentium?-instance-method","name":"ununpentium?","doc":"Returns `true` if the element is Ununpentium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Ununpentium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":448,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L448"},"def":{"name":"ununpentium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Uup)"}},{"html_id":"ununquadium?-instance-method","name":"ununquadium?","doc":"Returns `true` if the element is Ununquadium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Ununquadium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":446,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L446"},"def":{"name":"ununquadium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Uuq)"}},{"html_id":"ununseptium?-instance-method","name":"ununseptium?","doc":"Returns `true` if the element is Ununseptium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Ununseptium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":452,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L452"},"def":{"name":"ununseptium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Uus)"}},{"html_id":"ununtrium?-instance-method","name":"ununtrium?","doc":"Returns `true` if the element is Ununtrium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Ununtrium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":444,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L444"},"def":{"name":"ununtrium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Uut)"}},{"html_id":"uranium?-instance-method","name":"uranium?","doc":"Returns `true` if the element is Uranium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Uranium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":389,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L389"},"def":{"name":"uranium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::U)"}},{"html_id":"valencies:Array(Int32)-instance-method","name":"valencies","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Int32)","args_html":" : <a href=\"../Array.html\">Array</a>(Int32)","location":{"filename":"src/chem/core/element.cr","line_number":9,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/element.cr#L9"},"def":{"name":"valencies","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Int32)","visibility":"Public","body":"@valencies"}},{"html_id":"vanadium?-instance-method","name":"vanadium?","doc":"Returns `true` if the element is Vanadium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Vanadium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":117,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L117"},"def":{"name":"vanadium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::V)"}},{"html_id":"vdw_radius:Float64-instance-method","name":"vdw_radius","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core/element.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/element.cr#L10"},"def":{"name":"vdw_radius","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@vdw_radius"}},{"html_id":"xenon?-instance-method","name":"xenon?","doc":"Returns `true` if the element is Xenon, else `false`.","summary":"<p>Returns <code>true</code> if the element is Xenon, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":243,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L243"},"def":{"name":"xenon?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Xe)"}},{"html_id":"ytterbium?-instance-method","name":"ytterbium?","doc":"Returns `true` if the element is Ytterbium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Ytterbium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":306,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L306"},"def":{"name":"ytterbium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Yb)"}},{"html_id":"yttrium?-instance-method","name":"yttrium?","doc":"Returns `true` if the element is Yttrium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Yttrium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":182,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L182"},"def":{"name":"yttrium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Y)"}},{"html_id":"zinc?-instance-method","name":"zinc?","doc":"Returns `true` if the element is Zinc, else `false`.","summary":"<p>Returns <code>true</code> if the element is Zinc, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":145,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L145"},"def":{"name":"zinc?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Zn)"}},{"html_id":"zirconium?-instance-method","name":"zirconium?","doc":"Returns `true` if the element is Zirconium, else `false`.","summary":"<p>Returns <code>true</code> if the element is Zirconium, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/periodic_table/elements.cr","line_number":186,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L186"},"def":{"name":"zirconium?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"same?(Chem::PeriodicTable::Zr)"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Error","path":"Chem/Error.html","kind":"class","full_name":"Chem::Error","name":"Error","abstract":false,"superclass":{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem.cr","line_number":40,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem.cr#L40"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"chem.cr/Chem/ParseException","kind":"class","full_name":"Chem::ParseException","name":"ParseException"}],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"Base class for Chem errors.","summary":"<p>Base class for Chem errors.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Format","path":"Chem/Format.html","kind":"enum","full_name":"Chem::Format","name":"Format","abstract":false,"superclass":null,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Chgcar","name":"Chgcar","value":"0","doc":"The Chgcar format implemented by `Chem::VASP::Chgcar`.","summary":"<p>The Chgcar format implemented by <code><a href=\"../Chem/VASP/Chgcar.html\">Chem::VASP::Chgcar</a></code>.</p>"},{"id":"Cube","name":"Cube","value":"1","doc":"The Cube format implemented by `Chem::Cube`.","summary":"<p>The Cube format implemented by <code><a href=\"../Chem/Cube.html\">Chem::Cube</a></code>.</p>"},{"id":"DX","name":"DX","value":"2","doc":"The DX format implemented by `Chem::DX`.","summary":"<p>The DX format implemented by <code><a href=\"../Chem/DX.html\">Chem::DX</a></code>.</p>"},{"id":"Gen","name":"Gen","value":"3","doc":"The Gen format implemented by `Chem::Gen`.","summary":"<p>The Gen format implemented by <code><a href=\"../Chem/Gen.html\">Chem::Gen</a></code>.</p>"},{"id":"Locpot","name":"Locpot","value":"4","doc":"The Locpot format implemented by `Chem::VASP::Locpot`.","summary":"<p>The Locpot format implemented by <code><a href=\"../Chem/VASP/Locpot.html\">Chem::VASP::Locpot</a></code>.</p>"},{"id":"Mol2","name":"Mol2","value":"5","doc":"The Mol2 format implemented by `Chem::Mol2`.","summary":"<p>The Mol2 format implemented by <code><a href=\"../Chem/Mol2.html\">Chem::Mol2</a></code>.</p>"},{"id":"PDB","name":"PDB","value":"6","doc":"The PDB format implemented by `Chem::PDB`.","summary":"<p>The PDB format implemented by <code><a href=\"../Chem/PDB.html\">Chem::PDB</a></code>.</p>"},{"id":"Poscar","name":"Poscar","value":"7","doc":"The Poscar format implemented by `Chem::VASP::Poscar`.","summary":"<p>The Poscar format implemented by <code><a href=\"../Chem/VASP/Poscar.html\">Chem::VASP::Poscar</a></code>.</p>"},{"id":"PyMOL","name":"PyMOL","value":"8","doc":"The PyMOL format implemented by `Chem::PyMOL`.","summary":"<p>The PyMOL format implemented by <code><a href=\"../Chem/PyMOL.html\">Chem::PyMOL</a></code>.</p>"},{"id":"Stride","name":"Stride","value":"9","doc":"The Stride format implemented by `Chem::Protein::Stride`.","summary":"<p>The Stride format implemented by <code><a href=\"../Chem/Protein/Stride.html\">Chem::Protein::Stride</a></code>.</p>"},{"id":"VMD","name":"VMD","value":"10","doc":"The VMD format implemented by `Chem::VMD`.","summary":"<p>The VMD format implemented by <code><a href=\"../Chem/VMD.html\">Chem::VMD</a></code>.</p>"},{"id":"XYZ","name":"XYZ","value":"11","doc":"The XYZ format implemented by `Chem::XYZ`.","summary":"<p>The XYZ format implemented by <code><a href=\"../Chem/XYZ.html\">Chem::XYZ</a></code>.</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"List of the registered file formats.\n\nThis enum is populated based on the `RegisterFormat` annotation.\nMethods that deals with extensions and file patterns uses the\ninformation declared in the annotations.\n\n```\n@[Chem::RegisterFormat(ext: %w(.jpg .jpeg .jpe)), names: %w(IMG*)]\nmodule JPEG; end\n\n@[Chem::RegisterFormat(ext: %w(.tiff .tif))]\nmodule TIFF; end\n\nChem::Format.names                 # => [\"JPEG\", \"TIFF\"]\nChem::Format::JPEG                 # => JPEG\nChem::Format::JPEG.extnames        # => [\".jpg\", \".jpeg\", \".jpe\"]\nChem::Format::JPEG.file_patterns   # => [\"IMG*\"]\nChem::Format::TIFF.extnames        # => [\".tiff\", \".tif\"]\nChem::Format::TIFF.file_patterns   # => []\n\nChem::Format.from_ext(\"foo.jpg\")   # => JPEG\nChem::Format.from_ext(\"foo.tiff\")  # => TIFF\nChem::Format.from_stem(\"IMG_2015\") # => JPEG\n```","summary":"<p>List of the registered file formats.</p>","class_methods":[],"constructors":[{"html_id":"from_ext(extname:String):self-class-method","name":"from_ext","doc":"Returns the file format registered to the file extension, or\nraises `ArgumentError` otherwise.\n\n```\n@[Chem::RegisterFormat(ext: %w(.jpg .jpeg .jpe))]\nmodule JPEG; end\n\nChem::Format.from_ext(\".jpg\")  # => JPEG\nChem::Format.from_ext(\".JPG\")  # => JPEG\nChem::Format.from_ext(\".jpeg\") # => JPEG\nChem::Format.from_ext(\".jpe\")  # => JPEG\nChem::Format.from_ext(\".txt\")  # raises ArgumentError\n```\n\nNOTE: It performs a case-insensitive search so .jpg and .JPG\nreturn the same.","summary":"<p>Returns the file format registered to the file extension, or raises <code>ArgumentError</code> otherwise.</p>","abstract":false,"args":[{"name":"extname","doc":null,"default_value":"","external_name":"extname","restriction":"String"}],"args_string":"(extname : String) : self","args_html":"(extname : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"from_ext","args":[{"name":"extname","doc":null,"default_value":"","external_name":"extname","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"(from_ext?(extname)) || (raise(ArgumentError.new(\"File format not found for #{extname}\")))"}},{"html_id":"from_ext?(extname:String):self?-class-method","name":"from_ext?","doc":"Returns the file format registered to the file extension, or\n`nil` otherwise.\n\n```\n@[Chem::RegisterFormat(ext: %w(.jpg .jpeg .jpe))]\nmodule JPEG; end\n\nChem::Format.from_ext?(\".jpg\")  # => JPEG\nChem::Format.from_ext?(\".JPG\")  # => JPEG\nChem::Format.from_ext?(\".jpeg\") # => JPEG\nChem::Format.from_ext?(\".jpe\")  # => JPEG\nChem::Format.from_ext?(\".txt\")  # => nil\n```\n\nNOTE: It performs a case-insensitive search so .jpg and .JPG\nreturn the same.","summary":"<p>Returns the file format registered to the file extension, or <code>nil</code> otherwise.</p>","abstract":false,"args":[{"name":"extname","doc":null,"default_value":"","external_name":"extname","restriction":"String"}],"args_string":"(extname : String) : self?","args_html":"(extname : String) : <span class=\"k\">self</span>?","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"from_ext?","args":[{"name":"extname","doc":null,"default_value":"","external_name":"extname","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self | ::Nil","visibility":"Public","body":"case extname.downcase\nwhen \".cube\"\n  Cube\nwhen \".dx\"\n  DX\nwhen \".gen\"\n  Gen\nwhen \".mol2\"\n  Mol2\nwhen \".ent\", \".pdb\"\n  PDB\nwhen \".pml\"\n  PyMOL\nwhen \".vmd\"\n  VMD\nwhen \".xyz\"\n  XYZ\nwhen \".stride\"\n  Stride\nwhen \".poscar\"\n  Poscar\nend"}},{"html_id":"from_filename(filename:Path|String):self-class-method","name":"from_filename","doc":"Returns the file format associated with *filename*, or raises\n`ArgumentError` otherwise.\n\nIt first looks up the file format associated with the extension\nof *filename* via the `.from_ext?` method. If the latter returns\n`nil`, then it executes a case-insensitive search with the stem\nof *filename* via `.from_stem?`.\n\n```\n@[Chem::RegisterFormat(ext: %w(.jpg .jpeg .jpe), names: %w(IMG*))]\nmodule JPEG; end\n\nChem::Format.from_filename(\"foo.jpg\")      # => JPEG\nChem::Format.from_filename(\"foo.JPG\")      # => JPEG\nChem::Format.from_filename(\"IMG_2314.jpg\") # => JPEG\nChem::Format.from_filename(\"IMG_2314.png\") # => JPEG\nChem::Format.from_filename(\"IMG_2314\")     # => JPEG\nChem::Format.from_filename(\"img_2314\")     # => JPEG\nChem::Format.from_filename(\"img2314\")      # => JPEG\nChem::Format.from_filename(\"foo\")          # raises ArgumentError\n```","summary":"<p>Returns the file format associated with <em>filename</em>, or raises <code>ArgumentError</code> otherwise.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"Path | String"}],"args_string":"(filename : Path | String) : self","args_html":"(filename : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"from_filename","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"format = from_filename?(filename)\nformat || (raise(ArgumentError.new(\"File format not found for #{filename}\")))\n"}},{"html_id":"from_filename?(filename:Path|String):self?-class-method","name":"from_filename?","doc":"Returns the file format associated with *filename*, or `nil`\notherwise.\n\nIt first looks up the file format associated with the extension\nof *filename* via the `.from_ext?` method. If the latter returns\n`nil`, then it executes a case-insensitive search with the stem\nof *filename* via `.from_stem?`.\n\n```\n@[Chem::RegisterFormat(ext: %w(.jpg .jpeg .jpe), names: %w(IMG*))]\nmodule JPEG; end\n\nChem::Format.from_filename?(\"foo.jpg\")      # => JPEG\nChem::Format.from_filename?(\"foo.JPG\")      # => JPEG\nChem::Format.from_filename?(\"IMG_2314.jpg\") # => JPEG\nChem::Format.from_filename?(\"IMG_2314.png\") # => JPEG\nChem::Format.from_filename?(\"IMG_2314\")     # => JPEG\nChem::Format.from_filename?(\"img_2314\")     # => JPEG\nChem::Format.from_filename?(\"img2314\")      # => JPEG\nChem::Format.from_filename?(\"foo\")          # => nil\n```","summary":"<p>Returns the file format associated with <em>filename</em>, or <code>nil</code> otherwise.</p>","abstract":false,"args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"Path | String"}],"args_string":"(filename : Path | String) : self?","args_html":"(filename : Path | String) : <span class=\"k\">self</span>?","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"from_filename?","args":[{"name":"filename","doc":null,"default_value":"","external_name":"filename","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self | ::Nil","visibility":"Public","body":"if filename.is_a?(Path)\nelse\n  filename = Path[filename]\nend\nextname = filename.extension\n(from_ext?(extname)) || (from_stem?(filename.basename(extname)))\n"}},{"html_id":"from_stem(stem:Path|String):self-class-method","name":"from_stem","doc":"Returns the file format that matches the file stem, or raises\n`ArgumentError` otherwise.\n\nThe file stem is matched against the file patterns registered by\nthe file formats until one match is found. File patterns can\ncontain valid filename characters and the `*` wildcard, which\nmatches an unlimited number of arbitrary characters:\n\n- `\"c*\"` matches file stems beginning with `c`.\n- `\"*c\"` matches file stems ending with `c`.\n- `\"*c*\"` matches file stems that have `c` in them (including at\n  the beginning or end).\n\n```\n@[Chem::RegisterFormat(names: %w(IMG*))]\nmodule JPEG; end\n\nChem::Format.from_stem(\"IMG_2314\") # => JPEG\nChem::Format.from_stem(\"img_2314\") # => JPEG\nChem::Format.from_stem(\"img2314\")  # => JPEG\nChem::Format.from_stem(\"himg\")     # raises ArgumentError\nChem::Format.from_stem(\"foo\")      # raises ArgumentError\n```\n\nNOTE: The comparison is made using `String#camelcase` and\n`String#downcase`, so the file pattern `FooBar` will match\n`FOOBAR`, `FooBar`, `foobar`, `FOO_BAR` and `foo_bar`.","summary":"<p>Returns the file format that matches the file stem, or raises <code>ArgumentError</code> otherwise.</p>","abstract":false,"args":[{"name":"stem","doc":null,"default_value":"","external_name":"stem","restriction":"Path | String"}],"args_string":"(stem : Path | String) : self","args_html":"(stem : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"from_stem","args":[{"name":"stem","doc":null,"default_value":"","external_name":"stem","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"(from_stem?(stem)) || (raise(ArgumentError.new(\"File format not found for #{stem}\")))"}},{"html_id":"from_stem?(stem:String):self?-class-method","name":"from_stem?","doc":"Returns the file format that matches the file stem, or `nil`\notherwise.\n\nThe file stem is matched against the file patterns registered by\nthe file formats until one match is found. File patterns can\ncontain valid filename characters and the `*` wildcard, which\nmatches an unlimited number of arbitrary characters:\n\n- `\"c*\"` matches file stems beginning with `c`.\n- `\"*c\"` matches file stems ending with `c`.\n- `\"*c*\"` matches file stems that have `c` in them (including at\n  the beginning or end).\n\n```\n@[Chem::RegisterFormat(names: %w(IMG*))]\nmodule JPEG; end\n\nChem::Format.from_stem?(\"IMG_2314\") # => JPEG\nChem::Format.from_stem?(\"img_2314\") # => JPEG\nChem::Format.from_stem?(\"img2314\")  # => JPEG\nChem::Format.from_stem?(\"himg\")     # => nil\nChem::Format.from_stem?(\"foo\")      # => nil\n```\n\nNOTE: The comparison is made using `String#camelcase` and\n`String#downcase`, so the file pattern `FooBar` will match\n`FOOBAR`, `FooBar`, `foobar`, `FOO_BAR` and `foo_bar`.","summary":"<p>Returns the file format that matches the file stem, or <code>nil</code> otherwise.</p>","abstract":false,"args":[{"name":"stem","doc":null,"default_value":"","external_name":"stem","restriction":"String"}],"args_string":"(stem : String) : self?","args_html":"(stem : String) : <span class=\"k\">self</span>?","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"from_stem?","args":[{"name":"stem","doc":null,"default_value":"","external_name":"stem","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self | ::Nil","visibility":"Public","body":"case stem.camelcase.downcase\nwhen .starts_with?(\"chgcar\")\n  Chgcar\nwhen .starts_with?(\"locpot\")\n  Locpot\nwhen .starts_with?(\"contcar\")\n  Poscar\nwhen .starts_with?(\"poscar\")\n  Poscar\nend"}}],"instance_methods":[{"html_id":"chgcar?:Bool-instance-method","name":"chgcar?","doc":"Returns `true` if the member is the `Chgcar` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Chgcar\">Chgcar</a></code> format.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"chgcar?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self == Chgcar"}},{"html_id":"cube?:Bool-instance-method","name":"cube?","doc":"Returns `true` if the member is the `Cube` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Cube\">Cube</a></code> format.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"cube?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self == Cube"}},{"html_id":"dx?:Bool-instance-method","name":"dx?","doc":"Returns `true` if the member is the `DX` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#DX\">DX</a></code> format.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"dx?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self == DX"}},{"html_id":"encodes?(type:Array(T).class):BoolforallT-instance-method","name":"encodes?","doc":"Returns `true` if the format can write an instance of *type*.\n\n```\nChem::Format::XYZ.encodes?(Chem::AtomCollection)      # => true\nChem::Format::XYZ.encodes?(Chem::Structure)           # => true\nChem::Format::XYZ.encodes?(Array(Chem::Structure))    # => true\nChem::Format::Poscar.encodes?(Chem::AtomCollection)   # => false\nChem::Format::Poscar.encodes?(Chem::Structure)        # => true\nChem::Format::Poscar.encodes?(Array(Chem::Structure)) # => false\nChem::Format::XYZ.encodes?(Int32)                     # => false\nChem::Format::XYZ.encodes?(Array(Int32))              # => false\n```","summary":"<p>Returns <code>true</code> if the format can write an instance of <em>type</em>.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Array(T).class"}],"args_string":"(type : Array(T).class) : Bool forall T","args_html":"(type : <span class=\"t\">Array</span>(<span class=\"t\">T</span>).<span class=\"k\">class</span>) : Bool forall T","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"encodes?","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Array(T).class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"case self\nin Cube\n  T <= Chem::Spatial::Grid && false\nin DX\n  T <= Chem::Spatial::Grid && false\nin Gen\n  T <= Chem::AtomCollection && false\nin Mol2\n  T <= Chem::AtomCollection && true\nin PDB\n  T <= Chem::AtomCollection && true\nin PyMOL\n  T <= Chem::Structure && false\nin VMD\n  T <= Chem::Structure && false\nin XYZ\n  T <= Chem::AtomCollection && true\nin Stride\n  T <= Chem::Structure && false\nin Chgcar\n  T <= Chem::Spatial::Grid && false\nin Locpot\n  T <= Chem::Spatial::Grid && false\nin Poscar\n  T <= Chem::Structure && false\nend"}},{"html_id":"encodes?(type:T.class):BoolforallT-instance-method","name":"encodes?","doc":"Returns `true` if the format can write an instance of *type*.\n\n```\nChem::Format::XYZ.encodes?(Chem::AtomCollection)      # => true\nChem::Format::XYZ.encodes?(Chem::Structure)           # => true\nChem::Format::XYZ.encodes?(Array(Chem::Structure))    # => true\nChem::Format::Poscar.encodes?(Chem::AtomCollection)   # => false\nChem::Format::Poscar.encodes?(Chem::Structure)        # => true\nChem::Format::Poscar.encodes?(Array(Chem::Structure)) # => false\nChem::Format::XYZ.encodes?(Int32)                     # => false\nChem::Format::XYZ.encodes?(Array(Int32))              # => false\n```","summary":"<p>Returns <code>true</code> if the format can write an instance of <em>type</em>.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"T.class"}],"args_string":"(type : T.class) : Bool forall T","args_html":"(type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) : Bool forall T","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"encodes?","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"T.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"case self\nin Cube\n  type <= Chem::Spatial::Grid\nin DX\n  type <= Chem::Spatial::Grid\nin Gen\n  type <= Chem::AtomCollection\nin Mol2\n  type <= Chem::AtomCollection\nin PDB\n  type <= Chem::AtomCollection\nin PyMOL\n  type <= Chem::Structure\nin VMD\n  type <= Chem::Structure\nin XYZ\n  type <= Chem::AtomCollection\nin Stride\n  type <= Chem::Structure\nin Chgcar\n  type <= Chem::Spatial::Grid\nin Locpot\n  type <= Chem::Spatial::Grid\nin Poscar\n  type <= Chem::Structure\nend"}},{"html_id":"extnames:Array(String)-instance-method","name":"extnames","doc":"Returns the file extensions associated with the file format.\n\n```\n@[Chem::RegisterFormat(ext: %w(.jpg .jpeg .jpe))]\nmodule JPEG; end\n\nChem::Format::JPEG.extnames # => [\".jpg\", \".jpeg\", \".jpe\"]\n```","summary":"<p>Returns the file extensions associated with the file format.</p>","abstract":false,"args":[],"args_string":" : Array(String)","args_html":" : <a href=\"../Array.html\">Array</a>(String)","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"extnames","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"case self\nwhen Cube\n  [\".cube\"] of ::String\nwhen DX\n  [\".dx\"] of ::String\nwhen Gen\n  [\".gen\"] of ::String\nwhen Mol2\n  [\".mol2\"] of ::String\nwhen PDB\n  [\".ent\", \".pdb\"] of ::String\nwhen PyMOL\n  [\".pml\"] of ::String\nwhen VMD\n  [\".vmd\"] of ::String\nwhen XYZ\n  [\".xyz\"] of ::String\nwhen Stride\n  [\".stride\"] of ::String\nwhen Poscar\n  [\".poscar\"] of ::String\nelse\n  [] of String\nend"}},{"html_id":"file_patterns:Array(String)-instance-method","name":"file_patterns","doc":"Returns the file patterns associated with the file format.\n\n```\n@[Chem::RegisterFormat(names: %w(IMG*))]\nmodule JPEG; end\n\nChem::Format::JPEG.file_patterns # => [\"IMG*\"]\n```","summary":"<p>Returns the file patterns associated with the file format.</p>","abstract":false,"args":[],"args_string":" : Array(String)","args_html":" : <a href=\"../Array.html\">Array</a>(String)","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"file_patterns","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"case self\nwhen Chgcar\n  [\"CHGCAR*\"] of ::String\nwhen Locpot\n  [\"LOCPOT*\"] of ::String\nwhen Poscar\n  [\"POSCAR*\", \"CONTCAR*\"] of ::String\nelse\n  [] of String\nend"}},{"html_id":"gen?:Bool-instance-method","name":"gen?","doc":"Returns `true` if the member is the `Gen` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Gen\">Gen</a></code> format.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"gen?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self == Gen"}},{"html_id":"locpot?:Bool-instance-method","name":"locpot?","doc":"Returns `true` if the member is the `Locpot` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Locpot\">Locpot</a></code> format.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"locpot?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self == Locpot"}},{"html_id":"mol2?:Bool-instance-method","name":"mol2?","doc":"Returns `true` if the member is the `Mol2` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Mol2\">Mol2</a></code> format.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"mol2?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self == Mol2"}},{"html_id":"pdb?:Bool-instance-method","name":"pdb?","doc":"Returns `true` if the member is the `PDB` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#PDB\">PDB</a></code> format.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"pdb?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self == PDB"}},{"html_id":"poscar?:Bool-instance-method","name":"poscar?","doc":"Returns `true` if the member is the `Poscar` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Poscar\">Poscar</a></code> format.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"poscar?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self == Poscar"}},{"html_id":"py_mol?-instance-method","name":"py_mol?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"py_mol?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == PyMOL"}},{"html_id":"pymol?:Bool-instance-method","name":"pymol?","doc":"Returns `true` if the member is the `PyMOL` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#PyMOL\">PyMOL</a></code> format.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"pymol?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self == PyMOL"}},{"html_id":"reader(type:Chem::Spatial::Grid.class)-instance-method","name":"reader","doc":"Returns the reader associated with the format. Raises\n`ArgumentError` if the format does not decode *type* or it is\nwrite only.\n\n```\nChem::Format::XYZ.reader(Chem::Structure)           # => Chem::XYZ::Reader\nChem::Format::DX.reader(Chem::Spatial::Grid)        # => Chem::DX::Reader\nChem::Format::XYZ.reader(Array(Chem::Structure))    # => Chem::XYZ::Reader\nChem::Format::DX.reader(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::VMD.reader(Chem::Structure)           # raises ArgumentError\nChem::Format::XYZ.reader(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the reader associated with the format.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Chem::Spatial::Grid.class"}],"args_string":"(type : Chem::Spatial::Grid.class)","args_html":"(type : <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">Spatial</span><span class=\"t\">::</span><span class=\"t\">Grid</span>.<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"reader","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Chem::Spatial::Grid.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case self\nwhen Cube\n  ::Chem::Cube::Reader\nwhen DX\n  ::Chem::DX::Reader\nwhen Gen\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Mol2\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen PDB\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen XYZ\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Chgcar\n  ::Chem::VASP::Chgcar::Reader\nwhen Locpot\n  ::Chem::VASP::Locpot::Reader\nwhen Poscar\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nelse\n  raise(ArgumentError.new(\"#{self} format is write only\"))\nend"}},{"html_id":"reader(type:Chem::Structure.class)-instance-method","name":"reader","doc":"Returns the reader associated with the format. Raises\n`ArgumentError` if the format does not decode *type* or it is\nwrite only.\n\n```\nChem::Format::XYZ.reader(Chem::Structure)           # => Chem::XYZ::Reader\nChem::Format::DX.reader(Chem::Spatial::Grid)        # => Chem::DX::Reader\nChem::Format::XYZ.reader(Array(Chem::Structure))    # => Chem::XYZ::Reader\nChem::Format::DX.reader(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::VMD.reader(Chem::Structure)           # raises ArgumentError\nChem::Format::XYZ.reader(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the reader associated with the format.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Chem::Structure.class"}],"args_string":"(type : Chem::Structure.class)","args_html":"(type : <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">Structure</span>.<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"reader","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Chem::Structure.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case self\nwhen Cube\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen DX\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Gen\n  ::Chem::Gen::Reader\nwhen Mol2\n  ::Chem::Mol2::Reader\nwhen PDB\n  ::Chem::PDB::Reader\nwhen XYZ\n  ::Chem::XYZ::Reader\nwhen Chgcar\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Locpot\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Poscar\n  ::Chem::VASP::Poscar::Reader\nelse\n  raise(ArgumentError.new(\"#{self} format is write only\"))\nend"}},{"html_id":"reader(type:Array(Chem::Structure).class)-instance-method","name":"reader","doc":"Returns the reader associated with the format. Raises\n`ArgumentError` if the format does not decode *type* or it is\nwrite only.\n\n```\nChem::Format::XYZ.reader(Chem::Structure)           # => Chem::XYZ::Reader\nChem::Format::DX.reader(Chem::Spatial::Grid)        # => Chem::DX::Reader\nChem::Format::XYZ.reader(Array(Chem::Structure))    # => Chem::XYZ::Reader\nChem::Format::DX.reader(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::VMD.reader(Chem::Structure)           # raises ArgumentError\nChem::Format::XYZ.reader(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the reader associated with the format.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Array(Chem::Structure).class"}],"args_string":"(type : Array(Chem::Structure).class)","args_html":"(type : <span class=\"t\">Array</span>(<span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">Structure</span>).<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"reader","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Array(Chem::Structure).class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case self\nwhen Cube\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen DX\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Gen\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Mol2\n  ::Chem::Mol2::Reader\nwhen PDB\n  ::Chem::PDB::Reader\nwhen XYZ\n  ::Chem::XYZ::Reader\nwhen Chgcar\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Locpot\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Poscar\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nelse\n  raise(ArgumentError.new(\"#{self} format is write only\"))\nend"}},{"html_id":"stride?:Bool-instance-method","name":"stride?","doc":"Returns `true` if the member is the `Stride` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Stride\">Stride</a></code> format.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"stride?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self == Stride"}},{"html_id":"vmd?:Bool-instance-method","name":"vmd?","doc":"Returns `true` if the member is the `VMD` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#VMD\">VMD</a></code> format.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"vmd?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self == VMD"}},{"html_id":"writer(type:Chem::Spatial::Grid.class)-instance-method","name":"writer","doc":"Returns the writer associated with the format. Raises\n`ArgumentError` if the format does not encode *type* or it is\nread only.\n\n```\nChem::Format::XYZ.writer(Chem::Structure)           # => Chem::XYZ::Writer\nChem::Format::DX.writer(Chem::Spatial::Grid)        # => Chem::DX::Writer\nChem::Format::XYZ.writer(Array(Chem::Structure))    # => Chem::XYZ::Writer\nChem::Format::DX.writer(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::XYZ.writer(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the writer associated with the format.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Chem::Spatial::Grid.class"}],"args_string":"(type : Chem::Spatial::Grid.class)","args_html":"(type : <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">Spatial</span><span class=\"t\">::</span><span class=\"t\">Grid</span>.<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"writer","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Chem::Spatial::Grid.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case self\nwhen Cube\n  ::Chem::Cube::Writer\nwhen DX\n  ::Chem::DX::Writer\nwhen Gen\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Mol2\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen PDB\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen PyMOL\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen VMD\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen XYZ\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Stride\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Chgcar\n  ::Chem::VASP::Chgcar::Writer\nwhen Locpot\n  ::Chem::VASP::Locpot::Writer\nwhen Poscar\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nelse\n  raise(ArgumentError.new(\"#{self} format is read only\"))\nend"}},{"html_id":"writer(type:Chem::Structure.class)-instance-method","name":"writer","doc":"Returns the writer associated with the format. Raises\n`ArgumentError` if the format does not encode *type* or it is\nread only.\n\n```\nChem::Format::XYZ.writer(Chem::Structure)           # => Chem::XYZ::Writer\nChem::Format::DX.writer(Chem::Spatial::Grid)        # => Chem::DX::Writer\nChem::Format::XYZ.writer(Array(Chem::Structure))    # => Chem::XYZ::Writer\nChem::Format::DX.writer(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::XYZ.writer(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the writer associated with the format.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Chem::Structure.class"}],"args_string":"(type : Chem::Structure.class)","args_html":"(type : <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">Structure</span>.<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"writer","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Chem::Structure.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case self\nwhen Cube\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen DX\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Gen\n  ::Chem::Gen::Writer\nwhen Mol2\n  ::Chem::Mol2::Writer\nwhen PDB\n  ::Chem::PDB::Writer\nwhen PyMOL\n  ::Chem::PyMOL::Writer\nwhen VMD\n  ::Chem::VMD::Writer\nwhen XYZ\n  ::Chem::XYZ::Writer\nwhen Stride\n  ::Chem::Protein::Stride::Writer\nwhen Chgcar\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Locpot\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Poscar\n  ::Chem::VASP::Poscar::Writer\nelse\n  raise(ArgumentError.new(\"#{self} format is read only\"))\nend"}},{"html_id":"writer(type:Chem::AtomCollection.class)-instance-method","name":"writer","doc":"Returns the writer associated with the format. Raises\n`ArgumentError` if the format does not encode *type* or it is\nread only.\n\n```\nChem::Format::XYZ.writer(Chem::Structure)           # => Chem::XYZ::Writer\nChem::Format::DX.writer(Chem::Spatial::Grid)        # => Chem::DX::Writer\nChem::Format::XYZ.writer(Array(Chem::Structure))    # => Chem::XYZ::Writer\nChem::Format::DX.writer(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::XYZ.writer(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the writer associated with the format.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Chem::AtomCollection.class"}],"args_string":"(type : Chem::AtomCollection.class)","args_html":"(type : <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">AtomCollection</span>.<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"writer","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Chem::AtomCollection.class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case self\nwhen Cube\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen DX\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Gen\n  ::Chem::Gen::Writer\nwhen Mol2\n  ::Chem::Mol2::Writer\nwhen PDB\n  ::Chem::PDB::Writer\nwhen PyMOL\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen VMD\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen XYZ\n  ::Chem::XYZ::Writer\nwhen Stride\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Chgcar\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Locpot\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Poscar\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nelse\n  raise(ArgumentError.new(\"#{self} format is read only\"))\nend"}},{"html_id":"writer(type:Array(Chem::AtomCollection).class)-instance-method","name":"writer","doc":"Returns the writer associated with the format. Raises\n`ArgumentError` if the format does not encode *type* or it is\nread only.\n\n```\nChem::Format::XYZ.writer(Chem::Structure)           # => Chem::XYZ::Writer\nChem::Format::DX.writer(Chem::Spatial::Grid)        # => Chem::DX::Writer\nChem::Format::XYZ.writer(Array(Chem::Structure))    # => Chem::XYZ::Writer\nChem::Format::DX.writer(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::XYZ.writer(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the writer associated with the format.</p>","abstract":false,"args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Array(Chem::AtomCollection).class"}],"args_string":"(type : Array(Chem::AtomCollection).class)","args_html":"(type : <span class=\"t\">Array</span>(<span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">AtomCollection</span>).<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"writer","args":[{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Array(Chem::AtomCollection).class"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"case self\nwhen Cube\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen DX\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Gen\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Mol2\n  ::Chem::Mol2::Writer\nwhen PDB\n  ::Chem::PDB::Writer\nwhen PyMOL\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen VMD\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen XYZ\n  ::Chem::XYZ::Writer\nwhen Stride\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Chgcar\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Locpot\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Poscar\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nelse\n  raise(ArgumentError.new(\"#{self} format is read only\"))\nend"}},{"html_id":"xyz?:Bool-instance-method","name":"xyz?","doc":"Returns `true` if the member is the `XYZ` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#XYZ\">XYZ</a></code> format.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format.cr#L2"},"def":{"name":"xyz?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"self == XYZ"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/FormatReader","path":"Chem/FormatReader.html","kind":"module","full_name":"Chem::FormatReader(T)","name":"FormatReader","abstract":false,"superclass":null,"ancestors":[{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"}],"locations":[{"filename":"src/chem/format_reader.cr","line_number":43,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L43"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"chem.cr/Chem/Cube/Reader","kind":"class","full_name":"Chem::Cube::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/DX/Reader","kind":"class","full_name":"Chem::DX::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/Gen/Reader","kind":"class","full_name":"Chem::Gen::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/Mol2/Reader","kind":"class","full_name":"Chem::Mol2::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/PDB/Reader","kind":"class","full_name":"Chem::PDB::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Chgcar/Reader","kind":"class","full_name":"Chem::VASP::Chgcar::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Locpot/Reader","kind":"class","full_name":"Chem::VASP::Locpot::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Poscar/Reader","kind":"class","full_name":"Chem::VASP::Poscar::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/XYZ/Reader","kind":"class","full_name":"Chem::XYZ::Reader","name":"Reader"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"Declares a common interface for reading an object encoded in a file\nformat.\n\nIncluding types must implement the `#decode_entry : T` protected\nmethod, where the type variable `T` indicates the encoded type. Upon\nparsing issues, including types are expected to raise a\n`ParseException` exception.\n\nIncluding types will behave like an IO wrapper via the `IO::Wrapper`\nmixin, which provides convenience constructors. Initialization\narguments are gathered from the designated `#initialize` method\nlooked up on concrete types at compilation time. The underlying IO\ncan be accessed through the `@io` instance variable.\n\n```\nstruct Foo\n  getter num : Int32\n  getter str : String\n\n  def initialize(@num : Int32, @str : String); end\nend\n\nclass Foo::Reader\n  include Chem::FormatReader(Foo)\n\n  def decode_entry : Foo\n    Foo.new num: @io.read_line.to_i, str: @io.read_line\n  end\nend\n\nio = IO::Memory.new \"123\\nbar\\n\"\nreader = Foo::Reader.new io\nreader.read? # => false\nobj = reader.read_entry\nobj.num           # => 123\nobj.str           # => \"bar\"\nreader.read?      # => true\nreader.read_entry # raises IO::Error (entry was already read)\nreader.close\nreader.read_entry # raises IO::Error (closed IO)\n```","summary":"<p>Declares a common interface for reading an object encoded in a file format.</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"read?:Bool-instance-method","name":"read?","doc":"Returns `true` if this encoded object was already read.","summary":"<p>Returns <code>true</code> if this encoded object was already read.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format_reader.cr","line_number":47,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L47"},"def":{"name":"read?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@read"}},{"html_id":"read_entry:T-instance-method","name":"read_entry","doc":"Reads the encoded object of type `T` from the IO. Raises\n`IO::Error` if the reader is closed or the encoded object has been\nalready read, or `ParseException` if an object cannot be read.","summary":"<p>Reads the encoded object of type <code>T</code> from the IO.</p>","abstract":false,"args":[],"args_string":" : T","args_html":" : T","location":{"filename":"src/chem/format_reader.cr","line_number":59,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L59"},"def":{"name":"read_entry","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"check_open\ncheck_read\nobj = decode_entry\n@read = true\nobj\n"}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/FormatReader/Attached","path":"Chem/FormatReader/Attached.html","kind":"module","full_name":"Chem::FormatReader::Attached(T)","name":"Attached","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/format_reader.cr","line_number":117,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L117"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"chem.cr/Chem/Cube/Reader","kind":"class","full_name":"Chem::Cube::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Chgcar/Reader","kind":"class","full_name":"Chem::VASP::Chgcar::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Locpot/Reader","kind":"class","full_name":"Chem::VASP::Locpot::Reader","name":"Reader"}],"namespace":{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader(T)","name":"FormatReader"},"doc":"Declares a common interface for reading the attached object encoded\nin a file format. This is useful for cases when a file format also\nencodes an additional object but it is not part of the main content\n(e.g., some volumetric data file formats used in computational\nchemistry also include information of the molecule structure).\n\nIncluding types must implement the `#decode_attached : T` protected\nmethod, where the type variable `T` indicates the attached object\ntype. Upon parsing issues, including types are expected to raise a\n`ParseException` exception.","summary":"<p>Declares a common interface for reading the attached object encoded in a file format.</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"read_attached:T-instance-method","name":"read_attached","doc":"Reads the attached object from the IO. Raises `IO::Error` if the\nreader is closed or `ParseException` if the object cannot be\ndecoded.","summary":"<p>Reads the attached object from the IO.</p>","abstract":false,"args":[],"args_string":" : T","args_html":" : T","location":{"filename":"src/chem/format_reader.cr","line_number":130,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L130"},"def":{"name":"read_attached","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"@attached || (@attached = (begin\n  check_open\n  decode_attached\nend))"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/FormatReader/Headed","path":"Chem/FormatReader/Headed.html","kind":"module","full_name":"Chem::FormatReader::Headed(T)","name":"Headed","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/format_reader.cr","line_number":86,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L86"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"chem.cr/Chem/Cube/Reader","kind":"class","full_name":"Chem::Cube::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/DX/Reader","kind":"class","full_name":"Chem::DX::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/PDB/Reader","kind":"class","full_name":"Chem::PDB::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Chgcar/Reader","kind":"class","full_name":"Chem::VASP::Chgcar::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Locpot/Reader","kind":"class","full_name":"Chem::VASP::Locpot::Reader","name":"Reader"}],"namespace":{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader(T)","name":"FormatReader"},"doc":"Declares a common interface for reading the header information\nencoded in a file format. This is useful for cases when a file\nformat includes valuable information (by itself) in the header.\n\nIncluding types must implement the `#decode_header : T` protected\nmethod, where the type variable `T` indicates the header type. Upon\nparsing issues, including types are expected to raise a\n`ParseException` exception.","summary":"<p>Declares a common interface for reading the header information encoded in a file format.</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"read_header:T-instance-method","name":"read_header","doc":"Reads the header object from the IO. Raises `IO::Error` if the\nreader is closed or `ParseException` if the header cannot be\ndecoded.","summary":"<p>Reads the header object from the IO.</p>","abstract":false,"args":[],"args_string":" : T","args_html":" : T","location":{"filename":"src/chem/format_reader.cr","line_number":99,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L99"},"def":{"name":"read_header","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"@header || (@header = (begin\n  check_open\n  decode_header\nend))"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","path":"Chem/FormatReader/MultiEntry.html","kind":"module","full_name":"Chem::FormatReader::MultiEntry(T)","name":"MultiEntry","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/format_reader.cr","line_number":143,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L143"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"chem.cr/Chem/Mol2/Reader","kind":"class","full_name":"Chem::Mol2::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/PDB/Reader","kind":"class","full_name":"Chem::PDB::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/XYZ/Reader","kind":"class","full_name":"Chem::XYZ::Reader","name":"Reader"}],"namespace":{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader(T)","name":"FormatReader"},"doc":"Declares a common interface for reading a variable number of objects\nencoded in a file format.\n\nIncluding types must implement the `#skip_entry` method to discard\nthe next entry in the IO.","summary":"<p>Declares a common interface for reading a variable number of objects encoded in a file format.</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"each(indexes:Enumerable(Int),&:T->)-instance-method","name":"each","doc":"Yields entries at the specified *indexes* in the IO to the given\nblock. Raises `IndexError` when an index is out of bounds.","summary":"<p>Yields entries at the specified <em>indexes</em> in the IO to the given block.</p>","abstract":false,"args":[{"name":"indexes","doc":null,"default_value":"","external_name":"indexes","restriction":"Enumerable(Int)"}],"args_string":"(indexes : Enumerable(Int), & : T -> )","args_html":"(indexes : Enumerable(Int), & : T -> )","location":{"filename":"src/chem/format_reader.cr","line_number":156,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L156"},"def":{"name":"each","args":[{"name":"indexes","doc":null,"default_value":"","external_name":"indexes","restriction":"Enumerable(Int)"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T ->)"},"return_type":"","visibility":"Public","body":"prev_i = -1\nindexes.each do |i|\n  ((i - prev_i) - 1).times do\n    skip_entry\n  end\n  obj = next_entry\n  if obj\n  else\n    raise(IndexError.new)\n  end\n  yield obj\n  prev_i = i\nend\n"}},{"html_id":"each(&:T->):Nil-instance-method","name":"each","doc":"Yields each entry in the IO to the given block.","summary":"<p>Yields each entry in the IO to the given block.</p>","abstract":false,"args":[],"args_string":"(& : T -> ) : Nil","args_html":"(& : T -> ) : Nil","location":{"filename":"src/chem/format_reader.cr","line_number":148,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L148"},"def":{"name":"each","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T ->)"},"return_type":"Nil","visibility":"Public","body":"while obj = next_entry\n  yield obj\nend"}},{"html_id":"next_entry:T?-instance-method","name":"next_entry","doc":"Returns the next entry in the IO, or `nil` if there are no more\nentries.","summary":"<p>Returns the next entry in the IO, or <code>nil</code> if there are no more entries.</p>","abstract":false,"args":[],"args_string":" : T?","args_html":" : T?","location":{"filename":"src/chem/format_reader.cr","line_number":169,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L169"},"def":{"name":"next_entry","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T | ::Nil","visibility":"Public","body":"begin\n  check_open\n  obj = decode_entry\n  @read = true\n  obj\nrescue IO::EOFError\n  nil\nend"}},{"html_id":"read_entry:T-instance-method","name":"read_entry","doc":"Returns the next entry in the IO. Raises `ParseException` if there\nare no more entries.","summary":"<p>Returns the next entry in the IO.</p>","abstract":false,"args":[],"args_string":" : T","args_html":" : T","location":{"filename":"src/chem/format_reader.cr","line_number":180,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L180"},"def":{"name":"read_entry","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"T","visibility":"Public","body":"next_entry || (parse_exception((@read ? \"No more entries\" : \"Empty content\")))"}},{"html_id":"skip_entry:Nil-instance-method","name":"skip_entry","doc":"Discards the next entry in the IO without fully parsing it.","summary":"<p>Discards the next entry in the IO without fully parsing it.</p>","abstract":true,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/format_reader.cr","line_number":145,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_reader.cr#L145"},"def":{"name":"skip_entry","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":""}}],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/FormatWriter","path":"Chem/FormatWriter.html","kind":"module","full_name":"Chem::FormatWriter(T)","name":"FormatWriter","abstract":false,"superclass":null,"ancestors":[{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"}],"locations":[{"filename":"src/chem/format_writer.cr","line_number":41,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_writer.cr#L41"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"FILE_MODE","name":"FILE_MODE","value":"\"w\"","doc":"File open mode. May be overriden by including types.","summary":"<p>File open mode.</p>"}],"included_modules":[{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"chem.cr/Chem/Cube/Writer","kind":"class","full_name":"Chem::Cube::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/DX/Writer","kind":"class","full_name":"Chem::DX::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/Gen/Writer","kind":"class","full_name":"Chem::Gen::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/Mol2/Writer","kind":"class","full_name":"Chem::Mol2::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/PDB/Writer","kind":"class","full_name":"Chem::PDB::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/Protein/Stride/Writer","kind":"class","full_name":"Chem::Protein::Stride::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/PyMOL/Writer","kind":"class","full_name":"Chem::PyMOL::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/VASP/Chgcar/Writer","kind":"class","full_name":"Chem::VASP::Chgcar::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/VASP/Locpot/Writer","kind":"class","full_name":"Chem::VASP::Locpot::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/VASP/Poscar/Writer","kind":"class","full_name":"Chem::VASP::Poscar::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/VMD/Writer","kind":"class","full_name":"Chem::VMD::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/XYZ/Writer","kind":"class","full_name":"Chem::XYZ::Writer","name":"Writer"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"Declares a common interface for writing an object encoded in a file\nformat.\n\nIncluding types must implement the `#encode_entry(T)` protected\nmethod, where the type variable `T` indicates the encoded type.\n\nIncluding types will behave like an IO wrapper via the `IO::Wrapper`\nmixin, which provides convenience constructors. Initialization\narguments are gathered from the designated `#initialize` method\nlooked up on concrete types at compilation time. The underlying IO\ncan be accessed through the `@io` instance variable.\n\n```\nstruct Foo\n  getter num : Int32\n  getter str : String\n\n  def initialize(@num : Int32, @str : String); end\nend\n\nclass Foo::Writer\n  include Chem::FormatWriter(Foo)\n\n  def encode_entry(foo : Foo) : Nil\n    @io.puts foo.num\n    @io.puts foo.str\n  end\nend\n\nio = IO::Memory.new\nwriter = Foo::Writer.new io\nwriter.written? # => false\nwriter << Foo.new(123, \"bar\")\nio.to_s                       # => \"123\\nbar\\n\"\nwriter.written?               # => true\nwriter << Foo.new(456, \"baz\") # raises IO::Error (an entry was already written)\nwriter.close\nwriter << Foo.new(789, \"foo\") # raises IO::Error (closed IO)\n```","summary":"<p>Declares a common interface for writing an object encoded in a file format.</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"<<(obj:T):Nil-instance-method","name":"<<","doc":"Writes the given object into the `IO`. Raises `IO::Error` if the\n`IO` is closed or if an entry was already written.","summary":"<p>Writes the given object into the <code>IO</code>.</p>","abstract":false,"args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":"T"}],"args_string":"(obj : T) : Nil","args_html":"(obj : T) : Nil","location":{"filename":"src/chem/format_writer.cr","line_number":57,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_writer.cr#L57"},"def":{"name":"<<","args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"check_open\ncheck_write\nencode_entry(obj)\n@written = true\n"}},{"html_id":"format(str:String,*args,**options):Nil-instance-method","name":"format","doc":"Writes a formatted string to the enclosed `IO`. For details on the\nformat string, see top-level `sprintf`.","summary":"<p>Writes a formatted string to the enclosed <code>IO</code>.</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(str : String, *args, **options) : Nil","args_html":"(str : String, *args, **options) : Nil","location":{"filename":"src/chem/format_writer.cr","line_number":66,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_writer.cr#L66"},"def":{"name":"format","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":1,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@io.printf(str, *args, **options)"}},{"html_id":"formatl(str:String,*args,**options):Nil-instance-method","name":"formatl","doc":"Writes a formatted string followed by a newline to the enclosed\n`IO`. For details on the format string, see top-level `sprintf`.","summary":"<p>Writes a formatted string followed by a newline to the enclosed <code>IO</code>.</p>","abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(str : String, *args, **options) : Nil","args_html":"(str : String, *args, **options) : Nil","location":{"filename":"src/chem/format_writer.cr","line_number":72,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_writer.cr#L72"},"def":{"name":"formatl","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":1,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"format(str, *args, **options)\n@io << '\\n'\n"}},{"html_id":"written?:Bool-instance-method","name":"written?","doc":"Returns `true` if an object was already written.","summary":"<p>Returns <code>true</code> if an object was already written.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format_writer.cr","line_number":45,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_writer.cr#L45"},"def":{"name":"written?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@written"}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","path":"Chem/FormatWriter/MultiEntry.html","kind":"module","full_name":"Chem::FormatWriter::MultiEntry(T)","name":"MultiEntry","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/format_writer.cr","line_number":90,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_writer.cr#L90"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"chem.cr/Chem/Mol2/Writer","kind":"class","full_name":"Chem::Mol2::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/PDB/Writer","kind":"class","full_name":"Chem::PDB::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/XYZ/Writer","kind":"class","full_name":"Chem::XYZ::Writer","name":"Writer"}],"namespace":{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter(T)","name":"FormatWriter"},"doc":"The `MultiEntry` mixin provides an interface for writing in a file\nformat that can hold a variable number of objects.\n\nIt holds the total number of entries (`#total_entries`) and\nreimplements the `<<` operator to track how many of them has been\nwritten so far.","summary":"<p>The <code><a href=\"../../Chem/FormatWriter/MultiEntry.html\">MultiEntry</a></code> mixin provides an interface for writing in a file format that can hold a variable number of objects.</p>","class_methods":[],"constructors":[{"html_id":"new(io:IO,total_entries:Int32?=nil,sync_close:Bool=false)-class-method","name":"new","doc":"Creates a new object from the given *io*. If the number of entries\nto be written is known, pass *total_entries*, otherwise set it to\n`nil`.","summary":"<p>Creates a new object from the given <em>io</em>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, total_entries : Int32? = nil, sync_close : Bool = false)","args_html":"(io : IO, total_entries : Int32? = <span class=\"n\">nil</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/format_writer.cr","line_number":100,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_writer.cr#L100"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, total_entries, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<<(obj:T):self-instance-method","name":"<<","doc":"Writes *obj* to the `IO`. It keeps count of the number of entries\nwritten to the `IO`.","summary":"<p>Writes <em>obj</em> to the <code>IO</code>.</p>","abstract":false,"args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":"T"}],"args_string":"(obj : T) : self","args_html":"(obj : T) : <span class=\"k\">self</span>","location":{"filename":"src/chem/format_writer.cr","line_number":106,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_writer.cr#L106"},"def":{"name":"<<","args":[{"name":"obj","doc":null,"default_value":"","external_name":"obj","restriction":"T"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"check_open\nencode_entry(obj)\n@entry_index = @entry_index + 1\n@written = true\nself\n"}},{"html_id":"multi?:Bool-instance-method","name":"multi?","doc":"Returns `true` if multiple entries or an indeterminate number of\nentries are to be written, else `false`.","summary":"<p>Returns <code>true</code> if multiple entries or an indeterminate number of entries are to be written, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/format_writer.cr","line_number":116,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/format_writer.cr#L116"},"def":{"name":"multi?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(@total_entries || Int32::MAX) > 1"}}],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/Gen","path":"Chem/Gen.html","kind":"module","full_name":"Chem::Gen","name":"Gen","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/gen.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/gen.cr#L2"},{"filename":"src/chem/register_format.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L172"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/Gen/Reader","path":"Chem/Gen/Reader.html","kind":"class","full_name":"Chem::Gen::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/gen.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/gen.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Gen","kind":"module","full_name":"Chem::Gen","name":"Gen"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,guess_topology:Bool=false,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, guess_topology : Bool = false, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, guess_topology : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, guess_topology, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,guess_topology:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"args_string":"(path : Path | String, guess_topology : Bool = false, & : self -> )","args_html":"(path : Path | String, guess_topology : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path, guess_topology)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,guess_topology:Bool=false,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, guess_topology : Bool = false, sync_close : Bool = false)","args_html":"(io : IO, guess_topology : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/gen.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/gen.cr#L6"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, guess_topology, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,guess_topology:Bool=false):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"args_string":"(path : Path | String, guess_topology : Bool = false) : self","args_html":"(path : Path | String, guess_topology : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), guess_topology, sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Gen/Writer","path":"Chem/Gen/Writer.html","kind":"class","full_name":"Chem::Gen::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/gen.cr","line_number":60,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/gen.cr#L60"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Gen","kind":"module","full_name":"Chem::Gen","name":"Gen"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,fractional:Bool=false,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, fractional : Bool = false, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, fractional : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, fractional, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,fractional:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(path : Path | String, fractional : Bool = false, & : self -> )","args_html":"(path : Path | String, fractional : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path, fractional)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,fractional:Bool=false,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, fractional : Bool = false, sync_close : Bool = false)","args_html":"(io : IO, fractional : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/gen.cr","line_number":63,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/gen.cr#L63"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, fractional, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,fractional:Bool=false):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(path : Path | String, fractional : Bool = false) : self","args_html":"(path : Path | String, fractional : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), fractional, sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/Lattice","path":"Chem/Lattice.html","kind":"class","full_name":"Chem::Lattice","name":"Lattice","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/lattice.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(basis:Spatial::Basis)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"basis","doc":null,"default_value":"","external_name":"basis","restriction":"Spatial::Basis"}],"args_string":"(basis : Spatial::Basis)","args_html":"(basis : <a href=\"../Chem/Spatial/Basis.html\">Spatial::Basis</a>)","location":{"filename":"src/chem/core/lattice.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L7"},"def":{"name":"new","args":[{"name":"basis","doc":null,"default_value":"","external_name":"basis","restriction":"Spatial::Basis"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(basis)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(*args,**options):self-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options) : self","args_html":"(*args, **options) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/lattice.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L10"},"def":{"name":"new","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(Spatial::Basis.new(*args, **options))"}}],"instance_methods":[{"html_id":"*(value:Number):self-instance-method","name":"*","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number"}],"args_string":"(value : Number) : self","args_html":"(value : <a href=\"../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/lattice.cr","line_number":14,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L14"},"def":{"name":"*","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Lattice.new(i * value, j * value, k * value)"}},{"html_id":"a(*args,**options)-instance-method","name":"a","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"a","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.a(*args, **options)"}},{"html_id":"a(*args,**options,&)-instance-method","name":"a","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"a","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.a(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"a=(value:Float64):Float64-instance-method","name":"a=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float64"}],"args_string":"(value : Float64) : Float64","args_html":"(value : Float64) : Float64","location":{"filename":"src/chem/core/lattice.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L18"},"def":{"name":"a=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@basis = Spatial::Basis.new(i.resize(value), j, k)\nvalue\n"}},{"html_id":"alpha(*args,**options)-instance-method","name":"alpha","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"alpha","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.alpha(*args, **options)"}},{"html_id":"alpha(*args,**options,&)-instance-method","name":"alpha","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"alpha","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.alpha(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"b(*args,**options)-instance-method","name":"b","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"b","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.b(*args, **options)"}},{"html_id":"b(*args,**options,&)-instance-method","name":"b","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"b","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.b(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"b=(value:Float64):Float64-instance-method","name":"b=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float64"}],"args_string":"(value : Float64) : Float64","args_html":"(value : Float64) : Float64","location":{"filename":"src/chem/core/lattice.cr","line_number":23,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L23"},"def":{"name":"b=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@basis = Spatial::Basis.new(i, j.resize(value), k)\nvalue\n"}},{"html_id":"basis:Spatial::Basis-instance-method","name":"basis","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Spatial::Basis","args_html":" : <a href=\"../Chem/Spatial/Basis.html\">Spatial::Basis</a>","location":{"filename":"src/chem/core/lattice.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L3"},"def":{"name":"basis","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Spatial::Basis","visibility":"Public","body":"@basis"}},{"html_id":"beta(*args,**options)-instance-method","name":"beta","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"beta","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.beta(*args, **options)"}},{"html_id":"beta(*args,**options,&)-instance-method","name":"beta","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"beta","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.beta(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"bounds:Spatial::Bounds-instance-method","name":"bounds","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Spatial::Bounds","args_html":" : <a href=\"../Chem/Spatial/Bounds.html\">Spatial::Bounds</a>","location":{"filename":"src/chem/core/lattice.cr","line_number":28,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L28"},"def":{"name":"bounds","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Spatial::Bounds","visibility":"Public","body":"Spatial::Bounds.new(Spatial::Vec3.origin, @basis)"}},{"html_id":"c(*args,**options)-instance-method","name":"c","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"c","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.c(*args, **options)"}},{"html_id":"c(*args,**options,&)-instance-method","name":"c","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"c","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.c(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"c=(value:Float64):Float64-instance-method","name":"c=","doc":null,"summary":null,"abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float64"}],"args_string":"(value : Float64) : Float64","args_html":"(value : Float64) : Float64","location":{"filename":"src/chem/core/lattice.cr","line_number":32,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L32"},"def":{"name":"c=","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@basis = Spatial::Basis.new(i, j, k.resize(value))\nvalue\n"}},{"html_id":"cubic?:Bool-instance-method","name":"cubic?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/lattice.cr","line_number":37,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L37"},"def":{"name":"cubic?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((a == b) && (b == c)) && cuboid?"}},{"html_id":"cuboid?:Bool-instance-method","name":"cuboid?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/lattice.cr","line_number":41,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L41"},"def":{"name":"cuboid?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((alpha == 90) && (beta == 90)) && (gamma == 90)"}},{"html_id":"gamma(*args,**options)-instance-method","name":"gamma","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"gamma","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.gamma(*args, **options)"}},{"html_id":"gamma(*args,**options,&)-instance-method","name":"gamma","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"gamma","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.gamma(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"hexagonal?:Bool-instance-method","name":"hexagonal?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/lattice.cr","line_number":45,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L45"},"def":{"name":"hexagonal?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(((a == b) && (alpha == 90)) && (beta == 90)) && (gamma == 120)"}},{"html_id":"i(*args,**options)-instance-method","name":"i","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"i","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.i(*args, **options)"}},{"html_id":"i(*args,**options,&)-instance-method","name":"i","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"i","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.i(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"i=(vec:Spatial::Vec3):Spatial::Vec3-instance-method","name":"i=","doc":null,"summary":null,"abstract":false,"args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Spatial::Vec3"}],"args_string":"(vec : Spatial::Vec3) : Spatial::Vec3","args_html":"(vec : <a href=\"../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>) : <a href=\"../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>","location":{"filename":"src/chem/core/lattice.cr","line_number":49,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L49"},"def":{"name":"i=","args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Spatial::Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Spatial::Vec3","visibility":"Public","body":"@basis = Spatial::Basis.new(vec, j, k)\nvec\n"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Appends a String representation of this object\nwhich includes its class name, its object address\nand the values of all instance variables.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).inspect # => #<Person:0x10fd31f20 @name=\"John\", @age=32>\n```","summary":"<p>Appends a String representation of this object which includes its class name, its object address and the values of all instance variables.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/core/lattice.cr","line_number":54,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L54"},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"io << \"<Lattice \"\ni.to_s(io)\nio << \", \"\nj.to_s(io)\nio << \", \"\nk.to_s(io)\nio << '>'\n"}},{"html_id":"j(*args,**options)-instance-method","name":"j","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"j","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.j(*args, **options)"}},{"html_id":"j(*args,**options,&)-instance-method","name":"j","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"j","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.j(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"j=(vec:Spatial::Vec3):Spatial::Vec3-instance-method","name":"j=","doc":null,"summary":null,"abstract":false,"args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Spatial::Vec3"}],"args_string":"(vec : Spatial::Vec3) : Spatial::Vec3","args_html":"(vec : <a href=\"../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>) : <a href=\"../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>","location":{"filename":"src/chem/core/lattice.cr","line_number":64,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L64"},"def":{"name":"j=","args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Spatial::Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Spatial::Vec3","visibility":"Public","body":"@basis = Spatial::Basis.new(i, vec, k)\nvec\n"}},{"html_id":"k(*args,**options)-instance-method","name":"k","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"k","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.k(*args, **options)"}},{"html_id":"k(*args,**options,&)-instance-method","name":"k","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"k","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.k(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"k=(vec:Spatial::Vec3):Spatial::Vec3-instance-method","name":"k=","doc":null,"summary":null,"abstract":false,"args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Spatial::Vec3"}],"args_string":"(vec : Spatial::Vec3) : Spatial::Vec3","args_html":"(vec : <a href=\"../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>) : <a href=\"../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>","location":{"filename":"src/chem/core/lattice.cr","line_number":69,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L69"},"def":{"name":"k=","args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Spatial::Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Spatial::Vec3","visibility":"Public","body":"@basis = Spatial::Basis.new(i, j, vec)\nvec\n"}},{"html_id":"monoclinic?:Bool-instance-method","name":"monoclinic?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/lattice.cr","line_number":74,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L74"},"def":{"name":"monoclinic?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(((a != c) && (alpha == 90)) && (beta != 90)) && (gamma == 90)"}},{"html_id":"orthorhombic?:Bool-instance-method","name":"orthorhombic?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/lattice.cr","line_number":78,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L78"},"def":{"name":"orthorhombic?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(((a != b) && (a != c)) && (b != c)) && cuboid?"}},{"html_id":"size(*args,**options)-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"size","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.size(*args, **options)"}},{"html_id":"size(*args,**options,&)-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/lattice.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L5"},"def":{"name":"size","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.size(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"tetragonal?:Bool-instance-method","name":"tetragonal?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/lattice.cr","line_number":82,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L82"},"def":{"name":"tetragonal?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((a == b) && (b != c)) && cuboid?"}},{"html_id":"triclinic?:Bool-instance-method","name":"triclinic?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/lattice.cr","line_number":86,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/lattice.cr#L86"},"def":{"name":"triclinic?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((!cuboid?) && (!monoclinic?)) && (!hexagonal?)"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Mol2","path":"Chem/Mol2.html","kind":"module","full_name":"Chem::Mol2","name":"Mol2","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/mol2.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/mol2.cr#L2"},{"filename":"src/chem/register_format.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L172"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/Mol2/Reader","path":"Chem/Mol2/Reader.html","kind":"class","full_name":"Chem::Mol2::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/mol2.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/mol2.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Mol2","kind":"module","full_name":"Chem::Mol2","name":"Mol2"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/mol2.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/mol2.cr#L7"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}],"instance_methods":[{"html_id":"skip_entry:Nil-instance-method","name":"skip_entry","doc":"Discards the next entry in the IO without fully parsing it.","summary":"<p>Discards the next entry in the IO without fully parsing it.</p>","abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/formats/mol2.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/mol2.cr#L11"},"def":{"name":"skip_entry","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if @pull.next_s == \"@<TRIPOS>MOLECULE\"\n  @pull.next_line\nend\nskip_to_tag(\"@<TRIPOS>MOLECULE\")\n"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Mol2/Writer","path":"Chem/Mol2/Writer.html","kind":"class","full_name":"Chem::Mol2::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","kind":"module","full_name":"Chem::FormatWriter::MultiEntry","name":"MultiEntry"},{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/mol2.cr","line_number":89,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/mol2.cr#L89"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","kind":"module","full_name":"Chem::FormatWriter::MultiEntry","name":"MultiEntry"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Mol2","kind":"module","full_name":"Chem::Mol2","name":"Mol2"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,total_entries:Int32?=nil,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, total_entries : Int32? = nil, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, total_entries : Int32? = <span class=\"n\">nil</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, total_entries, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,total_entries:Int32?=nil,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"args_string":"(path : Path | String, total_entries : Int32? = nil, & : self -> )","args_html":"(path : Path | String, total_entries : Int32? = <span class=\"n\">nil</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path, total_entries)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(path:Path|String,total_entries:Int32?=nil):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"args_string":"(path : Path | String, total_entries : Int32? = nil) : self","args_html":"(path : Path | String, total_entries : Int32? = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), total_entries, sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/ParseException","path":"Chem/ParseException.html","kind":"class","full_name":"Chem::ParseException","name":"ParseException","abstract":false,"superclass":{"html_id":"chem.cr/Chem/Error","kind":"class","full_name":"Chem::Error","name":"Error"},"ancestors":[{"html_id":"chem.cr/Chem/Error","kind":"class","full_name":"Chem::Error","name":"Error"},{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem.cr","line_number":67,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem.cr#L67"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"Exception thrown upon parsing issues. Primarly used by `PullParser`.\n\nIt can hold the location of the issue found in a text document. Call\n`#inspect_with_location` to print a human-friendly error showing\nsuch information.\n\n```\nex = ParseException.new(\n  message: \"Invalid letters\",\n  path: \"path/to/file\",\n  line: \"abc def 123456 ABC DEF\",\n  location: {247, 8, 6}\n)\nputs ex.inspect_with_location\n```\n\nPrints out:\n\n```text\nFound a parsing issue in path/to/file:\n\n 247 | abc def 123456 ABC DEF\n               ^^^^^^\nError: Invalid letters\n```","summary":"<p>Exception thrown upon parsing issues.</p>","class_methods":[],"constructors":[{"html_id":"new(message:String,source_file:String?,line:String,location:Tuple(Int32,Int32,Int32))-class-method","name":"new","doc":"Creates a new exception with location, which is a triplet\ncontaining line number, column number (starting at zero), and\ncursor size. The latter may be zero to represent the beginning\n(column number = 0) or end of line.","summary":"<p>Creates a new exception with location, which is a triplet containing line number, column number (starting at zero), and cursor size.</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"},{"name":"source_file","doc":null,"default_value":"","external_name":"source_file","restriction":"String | ::Nil"},{"name":"line","doc":null,"default_value":"","external_name":"line","restriction":"String"},{"name":"location","doc":null,"default_value":"","external_name":"location","restriction":"Tuple(Int32, Int32, Int32)"}],"args_string":"(message : String, source_file : String?, line : String, location : Tuple(Int32, Int32, Int32))","args_html":"(message : String, source_file : String?, line : String, location : Tuple(Int32, Int32, Int32))","location":{"filename":"src/chem.cr","line_number":83,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem.cr#L83"},"def":{"name":"new","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"},{"name":"source_file","doc":null,"default_value":"","external_name":"source_file","restriction":"String | ::Nil"},{"name":"line","doc":null,"default_value":"","external_name":"line","restriction":"String"},{"name":"location","doc":null,"default_value":"","external_name":"location","restriction":"Tuple(Int32, Int32, Int32)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(message, source_file, line, location)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(message:String)-class-method","name":"new","doc":"Creates a new exception without location.","summary":"<p>Creates a new exception without location.</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/chem.cr","line_number":77,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem.cr#L77"},"def":{"name":"new","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"inspect_with_location(io:IO):Nil-instance-method","name":"inspect_with_location","doc":"Writes a string representation of the error including the location\nto *io*.","summary":"<p>Writes a string representation of the error including the location to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem.cr","line_number":99,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem.cr#L99"},"def":{"name":"inspect_with_location","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"io << \"Found a parsing issue\"\nif @source_file\n  (io << \" in \") << @source_file\nend\n((io << ':') << '\\n') << '\\n'\nif location = @location\n  line_number, column_number, cursor_size = location\n  if cursor_size == 0\n    if column_number == 0\n      column_number = column_number - 1\n    end\n    cursor_size = 1\n  end\n  ((((io << ' ') << line_number) << \" | \") << @line) << '\\n'\n  ((column_number + line_number.to_s.bytesize) + 4).times do\n    io << ' '\n  end\n  cursor_size.times do\n    io << '^'\n  end\n  io << '\\n'\nend\n(io << \"Error: \") << @message\nio.flush\n"}},{"html_id":"inspect_with_location:String-instance-method","name":"inspect_with_location","doc":"Returns a string representation of the error including the\nlocation.","summary":"<p>Returns a string representation of the error including the location.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem.cr","line_number":91,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem.cr#L91"},"def":{"name":"inspect_with_location","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  inspect_with_location(io)\nend"}},{"html_id":"line:String?-instance-method","name":"line","doc":"Line (if any) where the issue was found.","summary":"<p>Line (if any) where the issue was found.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/chem.cr","line_number":69,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem.cr#L69"},"def":{"name":"line","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@line"}},{"html_id":"location:Tuple(Int32,Int32,Int32)?-instance-method","name":"location","doc":"Error location (if any). It is a triplet containing line number,\ncolumn number, and cursor size where the issue is located.","summary":"<p>Error location (if any).</p>","abstract":false,"args":[],"args_string":" : Tuple(Int32, Int32, Int32)?","args_html":" : Tuple(Int32, Int32, Int32)?","location":{"filename":"src/chem.cr","line_number":72,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem.cr#L72"},"def":{"name":"location","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(Int32, Int32, Int32) | ::Nil","visibility":"Public","body":"@location"}},{"html_id":"source_file:String?-instance-method","name":"source_file","doc":"Path to file (if any) that produced the error.","summary":"<p>Path to file (if any) that produced the error.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/chem.cr","line_number":74,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem.cr#L74"},"def":{"name":"source_file","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@source_file"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/PDB","path":"Chem/PDB.html","kind":"module","full_name":"Chem::PDB","name":"PDB","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/pdb.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L2"},{"filename":"src/chem/register_format.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L172"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/PDB/Hybrid36","path":"Chem/PDB/Hybrid36.html","kind":"module","full_name":"Chem::PDB::Hybrid36","name":"Hybrid36","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/pdb.cr","line_number":589,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L589"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"chem.cr/Chem/PDB/Hybrid36","kind":"module","full_name":"Chem::PDB::Hybrid36","name":"Hybrid36"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/PDB","kind":"module","full_name":"Chem::PDB","name":"PDB"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"decode(str:String,width:Int):Int32-instance-method","name":"decode","doc":null,"summary":null,"abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int"}],"args_string":"(str : String, width : Int) : Int32","args_html":"(str : String, width : Int) : Int32","location":{"filename":"src/chem/formats/pdb.cr","line_number":596,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L596"},"def":{"name":"decode","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"(decode?(str, width)) || (invalid_literal(str))"}},{"html_id":"decode(str:String):Int32?-instance-method","name":"decode","doc":null,"summary":null,"abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"args_string":"(str : String) : Int32?","args_html":"(str : String) : Int32?","location":{"filename":"src/chem/formats/pdb.cr","line_number":592,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L592"},"def":{"name":"decode","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"decode(str, str.size)"}},{"html_id":"decode?(str:String,width:Int):Int32?-instance-method","name":"decode?","doc":null,"summary":null,"abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int"}],"args_string":"(str : String, width : Int) : Int32?","args_html":"(str : String, width : Int) : Int32?","location":{"filename":"src/chem/formats/pdb.cr","line_number":604,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L604"},"def":{"name":"decode?","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"if str.size == width\nelse\n  return\nend\nif str.blank?\n  return 0\nend\nchr = str[0]\nif ((chr == '-') || (chr == ' ')) || chr.ascii_number?\n  return str.to_i?\nend\nif num = str.to_i?(base: 36)\nelse\n  return\nend\ncase chr\nwhen .ascii_uppercase?\n  (num - (10 * (36 ** (width - 1)))) + (10 ** width)\nwhen .ascii_lowercase?\n  (num + (16 * (36 ** (width - 1)))) + (10 ** width)\nend\n"}},{"html_id":"decode?(str:String):Int32?-instance-method","name":"decode?","doc":null,"summary":null,"abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"args_string":"(str : String) : Int32?","args_html":"(str : String) : Int32?","location":{"filename":"src/chem/formats/pdb.cr","line_number":600,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L600"},"def":{"name":"decode?","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"decode?(str, str.size)"}},{"html_id":"encode(io:IO,num:Int,width:Int):Nil-instance-method","name":"encode","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":"Int"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int"}],"args_string":"(io : IO, num : Int, width : Int) : Nil","args_html":"(io : IO, num : Int, width : Int) : Nil","location":{"filename":"src/chem/formats/pdb.cr","line_number":624,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L624"},"def":{"name":"encode","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":"Int"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if num < (1 - (10 ** (width - 1)))\n  out_of_range(num)\nend\nif num < (10 ** width)\n  return io.printf(\"%#{width}d\", num)\nend\nnum = num - (10 ** width)\nif num < (26 * (36 ** (width - 1)))\n  return (num + (10 * (36 ** (width - 1)))).to_s(io, base: 36, upcase: true)\nend\nnum = num - (26 * (36 ** (width - 1)))\nif num < (26 * (36 ** (width - 1)))\n  return (num + (10 * (36 ** (width - 1)))).to_s(io, base: 36)\nend\nout_of_range(num)\n"}},{"html_id":"encode(num:Int,width:Int):String-instance-method","name":"encode","doc":null,"summary":null,"abstract":false,"args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":"Int"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int"}],"args_string":"(num : Int, width : Int) : String","args_html":"(num : Int, width : Int) : String","location":{"filename":"src/chem/formats/pdb.cr","line_number":618,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L618"},"def":{"name":"encode","args":[{"name":"num","doc":null,"default_value":"","external_name":"num","restriction":"Int"},{"name":"width","doc":null,"default_value":"","external_name":"width","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  encode(io, num, width)\nend"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/PDB/Reader","path":"Chem/PDB/Reader.html","kind":"class","full_name":"Chem::PDB::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/pdb.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"HELIX_TYPES","name":"HELIX_TYPES","value":"{1 => Sec::RightHandedHelixAlpha, 3 => Sec::RightHandedHelixPi, 5 => Sec::RightHandedHelix3_10}","doc":null,"summary":null}],"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/PDB","kind":"module","full_name":"Chem::PDB","name":"PDB"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,alt_loc:Char?=nil,chains:Enumerable(Char)|String|Nil=nil,het:Bool=true,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, alt_loc : Char? = nil, chains : Enumerable(Char) | String | Nil = nil, het : Bool = true, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, alt_loc : <a href=\"../../Char.html\">Char</a>? = <span class=\"n\">nil</span>, chains : Enumerable(<a href=\"../../Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, het : Bool = <span class=\"n\">true</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, alt_loc, chains, het, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,alt_loc:Char?=nil,chains:Enumerable(Char)|String|Nil=nil,het:Bool=true,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"}],"args_string":"(path : Path | String, alt_loc : Char? = nil, chains : Enumerable(Char) | String | Nil = nil, het : Bool = true, & : self -> )","args_html":"(path : Path | String, alt_loc : <a href=\"../../Char.html\">Char</a>? = <span class=\"n\">nil</span>, chains : Enumerable(<a href=\"../../Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, het : Bool = <span class=\"n\">true</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path, alt_loc, chains, het)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,alt_loc:Char?=nil,chains:Enumerable(Char)|String|Nil=nil,het:Bool=true,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, alt_loc : Char? = nil, chains : Enumerable(Char) | String | Nil = nil, het : Bool = true, sync_close : Bool = false)","args_html":"(io : IO, alt_loc : <a href=\"../../Char.html\">Char</a>? = <span class=\"n\">nil</span>, chains : Enumerable(<a href=\"../../Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, het : Bool = <span class=\"n\">true</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/pdb.cr","line_number":28,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L28"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, alt_loc, chains, het, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,alt_loc:Char?=nil,chains:Enumerable(Char)|String|Nil=nil,het:Bool=true):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"}],"args_string":"(path : Path | String, alt_loc : Char? = nil, chains : Enumerable(Char) | String | Nil = nil, het : Bool = true) : self","args_html":"(path : Path | String, alt_loc : <a href=\"../../Char.html\">Char</a>? = <span class=\"n\">nil</span>, chains : Enumerable(<a href=\"../../Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, het : Bool = <span class=\"n\">true</span>) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), alt_loc, chains, het, sync_close: true)"}}],"instance_methods":[{"html_id":"next_entry:Structure?-instance-method","name":"next_entry","doc":"Returns the next entry in the IO, or `nil` if there are no more\nentries.","summary":"<p>Returns the next entry in the IO, or <code>nil</code> if there are no more entries.</p>","abstract":false,"args":[],"args_string":" : Structure?","args_html":" : <a href=\"../../Chem/Structure.html\">Structure</a>?","location":{"filename":"src/chem/formats/pdb.cr","line_number":37,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L37"},"def":{"name":"next_entry","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Structure | ::Nil","visibility":"Public","body":"if @header_decoded\nelse\n  decode_header\nend\n@pull.each_line do\n  case (@pull.at(0, 6)).str\n  when \"ATOM  \", \"HETATM\", \"MODEL \"\n    obj = decode_entry\n    @read = true\n    return obj\n  when \"END   \", \"MASTER\"\n    break\n  end\nend\n"}},{"html_id":"read_header:Structure::Experiment-instance-method","name":"read_header","doc":"Reads the header object from the IO. Raises `IO::Error` if the\nreader is closed or `ParseException` if the header cannot be\ndecoded.","summary":"<p>Reads the header object from the IO.</p>","abstract":false,"args":[],"args_string":" : Structure::Experiment","args_html":" : <a href=\"../../Chem/Structure/Experiment.html\">Structure::Experiment</a>","location":{"filename":"src/chem/formats/pdb.cr","line_number":65,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L65"},"def":{"name":"read_header","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Structure::Experiment","visibility":"Public","body":"if @header_decoded\nelse\n  decode_header\nend\n@header || (@pull.error(\"Empty header\"))\n"}},{"html_id":"skip_entry:Nil-instance-method","name":"skip_entry","doc":"Discards the next entry in the IO without fully parsing it.","summary":"<p>Discards the next entry in the IO without fully parsing it.</p>","abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/formats/pdb.cr","line_number":51,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L51"},"def":{"name":"skip_entry","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if @header_decoded\nelse\n  decode_header\nend\nif (@pull.at(0, 6)).str == \"MODEL \"\n  @pull.next_line\nend\n@pull.each_line do\n  case (@pull.at(0, 6)).str\n  when \"ENDMDL\"\n    @pull.next_line\n    break\n  when \"MODEL \", \"END   \", \"MASTER\"\n    break\n  end\nend\n"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/PDB/Writer","path":"Chem/PDB/Writer.html","kind":"class","full_name":"Chem::PDB::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","kind":"module","full_name":"Chem::FormatWriter::MultiEntry","name":"MultiEntry"},{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/pdb.cr","line_number":317,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L317"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"LINE_WIDTH","name":"LINE_WIDTH","value":"80","doc":null,"summary":null},{"id":"PDB_VERSION","name":"PDB_VERSION","value":"\"3.30\"","doc":null,"summary":null},{"id":"PDB_VERSION_DATE","name":"PDB_VERSION_DATE","value":"Time.local(2011, 7, 13)","doc":null,"summary":null},{"id":"WHITESPACE","name":"WHITESPACE","value":"' '","doc":null,"summary":null}],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","kind":"module","full_name":"Chem::FormatWriter::MultiEntry","name":"MultiEntry"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/PDB","kind":"module","full_name":"Chem::PDB","name":"PDB"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,bonds:PDB::Writer::BondOptions=PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,total_entries:Int32?=nil,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, bonds : PDB::Writer::BondOptions = PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, total_entries : Int32? = nil, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, bonds : <a href=\"../../Chem/PDB/Writer/BondOptions.html\">PDB::Writer::BondOptions</a> = <span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, total_entries : Int32? = <span class=\"n\">nil</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, bonds, renumber, total_entries, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,bonds:PDB::Writer::BondOptions=PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,total_entries:Int32?=nil,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"args_string":"(path : Path | String, bonds : PDB::Writer::BondOptions = PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, total_entries : Int32? = nil, & : self -> )","args_html":"(path : Path | String, bonds : <a href=\"../../Chem/PDB/Writer/BondOptions.html\">PDB::Writer::BondOptions</a> = <span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, total_entries : Int32? = <span class=\"n\">nil</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path, bonds, renumber, total_entries)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,bonds:PDB::Writer::BondOptions=PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,total_entries:Int32?=nil,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, bonds : PDB::Writer::BondOptions = PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, total_entries : Int32? = nil, sync_close : Bool = false)","args_html":"(io : IO, bonds : <a href=\"../../Chem/PDB/Writer/BondOptions.html\">PDB::Writer::BondOptions</a> = <span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, total_entries : Int32? = <span class=\"n\">nil</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/pdb.cr","line_number":341,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L341"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, bonds, renumber, total_entries, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,bonds:PDB::Writer::BondOptions=PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,total_entries:Int32?=nil):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"args_string":"(path : Path | String, bonds : PDB::Writer::BondOptions = PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, total_entries : Int32? = nil) : self","args_html":"(path : Path | String, bonds : <a href=\"../../Chem/PDB/Writer/BondOptions.html\">PDB::Writer::BondOptions</a> = <span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, total_entries : Int32? = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), bonds, renumber, total_entries, sync_close: true)"}}],"instance_methods":[{"html_id":"close:Nil-instance-method","name":"close","doc":"Closes this object. If *sync_close* is true, it will also close the\nenclosed `IO`.","summary":"<p>Closes this object.</p>","abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/formats/pdb.cr","line_number":349,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L349"},"def":{"name":"close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@io.printf(\"%-#{LINE_WIDTH}s\\n\", \"END\")\nsuper()\n"}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/PDB/Writer/BondOptions","path":"Chem/PDB/Writer/BondOptions.html","kind":"enum","full_name":"Chem::PDB::Writer::BondOptions","name":"BondOptions","abstract":false,"superclass":null,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/pdb.cr","line_number":328,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L328"}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Standard","name":"Standard","value":"1","doc":"Write CONECT records for standard residues (including water)","summary":"<p>Write CONECT records for standard residues (including water)</p>"},{"id":"Disulfide","name":"Disulfide","value":"2","doc":"Write CONECT records for disulfide bridges","summary":"<p>Write CONECT records for disulfide bridges</p>"},{"id":"Het","name":"Het","value":"4","doc":"Write CONECT records for non-standard (HET) groups excluding\nwater (both intra- and inter-residue bonds)","summary":"<p>Write CONECT records for non-standard (HET) groups excluding water (both intra- and inter-residue bonds)</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/PDB/Writer","kind":"class","full_name":"Chem::PDB::Writer","name":"Writer"},"doc":"Controls which bonds are written to a PDB.","summary":"<p>Controls which bonds are written to a PDB.</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"disulfide?-instance-method","name":"disulfide?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/formats/pdb.cr","line_number":332,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L332"},"def":{"name":"disulfide?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Disulfide)"}},{"html_id":"het?-instance-method","name":"het?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/formats/pdb.cr","line_number":335,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L335"},"def":{"name":"het?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Het)"}},{"html_id":"none?-instance-method","name":"none?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/formats/pdb.cr","line_number":328,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L328"},"def":{"name":"none?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"value == 0"}},{"html_id":"standard?-instance-method","name":"standard?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/formats/pdb.cr","line_number":330,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pdb.cr#L330"},"def":{"name":"standard?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.includes?(Standard)"}}],"macros":[],"types":[]}]}]},{"html_id":"chem.cr/Chem/PeriodicTable","path":"Chem/PeriodicTable.html","kind":"module","full_name":"Chem::PeriodicTable","name":"PeriodicTable","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/core/periodic_table.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table.cr#L4"},{"filename":"src/chem/core/periodic_table/elements.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/elements.cr#L12"},{"filename":"src/chem/core/periodic_table/macros.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/macros.cr#L1"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Ac","name":"Ac","value":"::Chem::Element.new(covalent_radius: 2.15, mass: 227, vdw_radius: 2.8, atomic_number: 89, name: \"Actinium\", symbol: \"Ac\")","doc":null,"summary":null},{"id":"Ag","name":"Ag","value":"::Chem::Element.new(covalent_radius: 1.45, mass: 107.8682, vdw_radius: 2.53, atomic_number: 47, name: \"Silver\", symbol: \"Ag\")","doc":null,"summary":null},{"id":"Al","name":"Al","value":"::Chem::Element.new(covalent_radius: 1.21, mass: 26.9815, vdw_radius: 2.25, atomic_number: 13, name: \"Aluminum\", symbol: \"Al\")","doc":null,"summary":null},{"id":"Am","name":"Am","value":"::Chem::Element.new(covalent_radius: 1.80, mass: 243, vdw_radius: 2.83, atomic_number: 95, name: \"Americium\", symbol: \"Am\")","doc":null,"summary":null},{"id":"Ar","name":"Ar","value":"::Chem::Element.new(covalent_radius: 1.06, mass: 39.948, vdw_radius: 1.83, atomic_number: 18, name: \"Argon\", symbol: \"Ar\")","doc":null,"summary":null},{"id":"As","name":"As","value":"::Chem::Element.new(covalent_radius: 1.19, mass: 74.9216, vdw_radius: 1.88, atomic_number: 33, name: \"Arsenic\", symbol: \"As\")","doc":null,"summary":null},{"id":"At","name":"At","value":"::Chem::Element.new(covalent_radius: 1.5, mass: 210, atomic_number: 85, name: \"Astatine\", symbol: \"At\")","doc":null,"summary":null},{"id":"Au","name":"Au","value":"::Chem::Element.new(covalent_radius: 1.36, mass: 196.9666, vdw_radius: 2.32, atomic_number: 79, name: \"Gold\", symbol: \"Au\")","doc":null,"summary":null},{"id":"B","name":"B","value":"::Chem::Element.new(covalent_radius: 0.84, mass: 10.811, vdw_radius: 1.91, atomic_number: 5, name: \"Boron\", symbol: \"B\")","doc":null,"summary":null},{"id":"Ba","name":"Ba","value":"::Chem::Element.new(covalent_radius: 2.15, mass: 137.327, vdw_radius: 3.03, atomic_number: 56, name: \"Barium\", symbol: \"Ba\")","doc":null,"summary":null},{"id":"Be","name":"Be","value":"::Chem::Element.new(covalent_radius: 0.96, mass: 9.0122, vdw_radius: 1.98, atomic_number: 4, name: \"Beryllium\", symbol: \"Be\")","doc":null,"summary":null},{"id":"Bh","name":"Bh","value":"::Chem::Element.new(mass: 264, atomic_number: 107, name: \"Bohrium\", symbol: \"Bh\")","doc":null,"summary":null},{"id":"Bi","name":"Bi","value":"::Chem::Element.new(covalent_radius: 1.48, mass: 208.9804, vdw_radius: 2.54, atomic_number: 83, name: \"Bismuth\", symbol: \"Bi\")","doc":null,"summary":null},{"id":"Bk","name":"Bk","value":"::Chem::Element.new(mass: 247, vdw_radius: 3.4, atomic_number: 97, name: \"Berkelium\", symbol: \"Bk\")","doc":null,"summary":null},{"id":"Br","name":"Br","value":"::Chem::Element.new(covalent_radius: 1.20, mass: 79.904, valencies: [1], vdw_radius: 1.86, atomic_number: 35, name: \"Bromine\", symbol: \"Br\")","doc":null,"summary":null},{"id":"C","name":"C","value":"::Chem::Element.new(covalent_radius: 0.76, mass: 12.0107, valencies: [4], vdw_radius: 1.77, atomic_number: 6, name: \"Carbon\", symbol: \"C\")","doc":null,"summary":null},{"id":"Ca","name":"Ca","value":"::Chem::Element.new(covalent_radius: 1.76, mass: 40.078, ionic: true, valencies: [2], vdw_radius: 2.62, atomic_number: 20, name: \"Calcium\", symbol: \"Ca\")","doc":null,"summary":null},{"id":"Cd","name":"Cd","value":"::Chem::Element.new(covalent_radius: 1.44, mass: 112.411, vdw_radius: 2.49, atomic_number: 48, name: \"Cadmium\", symbol: \"Cd\")","doc":null,"summary":null},{"id":"Ce","name":"Ce","value":"::Chem::Element.new(covalent_radius: 2.04, mass: 140.116, vdw_radius: 2.88, atomic_number: 58, name: \"Cerium\", symbol: \"Ce\")","doc":null,"summary":null},{"id":"Cf","name":"Cf","value":"::Chem::Element.new(mass: 251, vdw_radius: 3.05, atomic_number: 98, name: \"Californium\", symbol: \"Cf\")","doc":null,"summary":null},{"id":"Cl","name":"Cl","value":"::Chem::Element.new(covalent_radius: 1.02, mass: 35.453, valencies: [1], vdw_radius: 1.82, atomic_number: 17, name: \"Chlorine\", symbol: \"Cl\")","doc":null,"summary":null},{"id":"Cm","name":"Cm","value":"::Chem::Element.new(covalent_radius: 1.69, mass: 247, vdw_radius: 3.05, atomic_number: 96, name: \"Curium\", symbol: \"Cm\")","doc":null,"summary":null},{"id":"Cn","name":"Cn","value":"::Chem::Element.new(mass: 285, atomic_number: 112, name: \"Copernicium\", symbol: \"Cn\")","doc":null,"summary":null},{"id":"Co","name":"Co","value":"::Chem::Element.new(covalent_radius: 1.50, mass: 58.9331, vdw_radius: 2.4, atomic_number: 27, name: \"Cobalt\", symbol: \"Co\")","doc":null,"summary":null},{"id":"Cr","name":"Cr","value":"::Chem::Element.new(covalent_radius: 1.39, mass: 51.9961, vdw_radius: 2.45, atomic_number: 24, name: \"Chromium\", symbol: \"Cr\")","doc":null,"summary":null},{"id":"Cs","name":"Cs","value":"::Chem::Element.new(covalent_radius: 2.44, mass: 132.9055, vdw_radius: 3.48, atomic_number: 55, name: \"Cesium\", symbol: \"Cs\")","doc":null,"summary":null},{"id":"Cu","name":"Cu","value":"::Chem::Element.new(covalent_radius: 1.32, mass: 63.546, vdw_radius: 2.38, atomic_number: 29, name: \"Copper\", symbol: \"Cu\")","doc":null,"summary":null},{"id":"Db","name":"Db","value":"::Chem::Element.new(mass: 262, atomic_number: 105, name: \"Dubnium\", symbol: \"Db\")","doc":null,"summary":null},{"id":"Ds","name":"Ds","value":"::Chem::Element.new(mass: 281, atomic_number: 110, name: \"Darmstadtium\", symbol: \"Ds\")","doc":null,"summary":null},{"id":"Dy","name":"Dy","value":"::Chem::Element.new(covalent_radius: 1.92, mass: 162.5, vdw_radius: 2.87, atomic_number: 66, name: \"Dysprosium\", symbol: \"Dy\")","doc":null,"summary":null},{"id":"Er","name":"Er","value":"::Chem::Element.new(covalent_radius: 1.89, mass: 167.259, vdw_radius: 2.83, atomic_number: 68, name: \"Erbium\", symbol: \"Er\")","doc":null,"summary":null},{"id":"Es","name":"Es","value":"::Chem::Element.new(mass: 252, vdw_radius: 2.7, atomic_number: 99, name: \"Einsteinium\", symbol: \"Es\")","doc":null,"summary":null},{"id":"Eu","name":"Eu","value":"::Chem::Element.new(covalent_radius: 1.98, mass: 151.964, vdw_radius: 2.87, atomic_number: 63, name: \"Europium\", symbol: \"Eu\")","doc":null,"summary":null},{"id":"F","name":"F","value":"::Chem::Element.new(covalent_radius: 0.57, mass: 18.9984, valencies: [1], vdw_radius: 1.46, atomic_number: 9, name: \"Fluorine\", symbol: \"F\")","doc":null,"summary":null},{"id":"Fe","name":"Fe","value":"::Chem::Element.new(covalent_radius: 1.52, mass: 55.845, vdw_radius: 2.44, atomic_number: 26, name: \"Iron\", symbol: \"Fe\")","doc":null,"summary":null},{"id":"Fm","name":"Fm","value":"::Chem::Element.new(mass: 257, atomic_number: 100, name: \"Fermium\", symbol: \"Fm\")","doc":null,"summary":null},{"id":"Fr","name":"Fr","value":"::Chem::Element.new(covalent_radius: 2.6, mass: 223, atomic_number: 87, name: \"Francium\", symbol: \"Fr\")","doc":null,"summary":null},{"id":"Ga","name":"Ga","value":"::Chem::Element.new(covalent_radius: 1.22, mass: 69.723, vdw_radius: 2.32, atomic_number: 31, name: \"Gallium\", symbol: \"Ga\")","doc":null,"summary":null},{"id":"Gd","name":"Gd","value":"::Chem::Element.new(covalent_radius: 1.96, mass: 157.25, vdw_radius: 2.83, atomic_number: 64, name: \"Gadolinium\", symbol: \"Gd\")","doc":null,"summary":null},{"id":"Ge","name":"Ge","value":"::Chem::Element.new(covalent_radius: 1.20, mass: 72.64, vdw_radius: 2.29, atomic_number: 32, name: \"Germanium\", symbol: \"Ge\")","doc":null,"summary":null},{"id":"H","name":"H","value":"::Chem::Element.new(covalent_radius: 0.31, mass: 1.0079, valencies: [1], vdw_radius: 1.2, atomic_number: 1, name: \"Hydrogen\", symbol: \"H\")","doc":null,"summary":null},{"id":"He","name":"He","value":"::Chem::Element.new(covalent_radius: 0.2, mass: 4.0026, vdw_radius: 1.43, atomic_number: 2, name: \"Helium\", symbol: \"He\")","doc":null,"summary":null},{"id":"Hf","name":"Hf","value":"::Chem::Element.new(covalent_radius: 1.75, mass: 178.49, vdw_radius: 2.63, atomic_number: 72, name: \"Hafnium\", symbol: \"Hf\")","doc":null,"summary":null},{"id":"Hg","name":"Hg","value":"::Chem::Element.new(covalent_radius: 1.32, mass: 200.59, vdw_radius: 2.45, atomic_number: 80, name: \"Mercury\", symbol: \"Hg\")","doc":null,"summary":null},{"id":"Ho","name":"Ho","value":"::Chem::Element.new(covalent_radius: 1.92, mass: 164.9303, vdw_radius: 2.81, atomic_number: 67, name: \"Holmium\", symbol: \"Ho\")","doc":null,"summary":null},{"id":"Hs","name":"Hs","value":"::Chem::Element.new(mass: 277, atomic_number: 108, name: \"Hassium\", symbol: \"Hs\")","doc":null,"summary":null},{"id":"I","name":"I","value":"::Chem::Element.new(covalent_radius: 1.39, mass: 126.9045, valencies: [1], vdw_radius: 2.04, atomic_number: 53, name: \"Iodine\", symbol: \"I\")","doc":null,"summary":null},{"id":"In","name":"In","value":"::Chem::Element.new(covalent_radius: 1.42, mass: 114.818, vdw_radius: 2.43, atomic_number: 49, name: \"Indium\", symbol: \"In\")","doc":null,"summary":null},{"id":"Ir","name":"Ir","value":"::Chem::Element.new(covalent_radius: 1.41, mass: 192.217, vdw_radius: 2.41, atomic_number: 77, name: \"Iridium\", symbol: \"Ir\")","doc":null,"summary":null},{"id":"K","name":"K","value":"::Chem::Element.new(covalent_radius: 2.03, mass: 39.0983, ionic: true, valencies: [1], vdw_radius: 2.73, atomic_number: 19, name: \"Potassium\", symbol: \"K\")","doc":null,"summary":null},{"id":"Kr","name":"Kr","value":"::Chem::Element.new(covalent_radius: 1.16, mass: 83.798, vdw_radius: 2.25, atomic_number: 36, name: \"Krypton\", symbol: \"Kr\")","doc":null,"summary":null},{"id":"La","name":"La","value":"::Chem::Element.new(covalent_radius: 2.07, mass: 138.9055, vdw_radius: 2.98, atomic_number: 57, name: \"Lanthanum\", symbol: \"La\")","doc":null,"summary":null},{"id":"Li","name":"Li","value":"::Chem::Element.new(covalent_radius: 1.28, mass: 6.941, vdw_radius: 2.12, atomic_number: 3, name: \"Lithium\", symbol: \"Li\")","doc":null,"summary":null},{"id":"Lr","name":"Lr","value":"::Chem::Element.new(mass: 262, atomic_number: 103, name: \"Lawrencium\", symbol: \"Lr\")","doc":null,"summary":null},{"id":"Lu","name":"Lu","value":"::Chem::Element.new(covalent_radius: 1.87, mass: 174.967, vdw_radius: 2.74, atomic_number: 71, name: \"Lutetium\", symbol: \"Lu\")","doc":null,"summary":null},{"id":"Md","name":"Md","value":"::Chem::Element.new(mass: 258, atomic_number: 101, name: \"Mendelevium\", symbol: \"Md\")","doc":null,"summary":null},{"id":"Mg","name":"Mg","value":"::Chem::Element.new(covalent_radius: 1.41, mass: 24.305, ionic: true, valencies: [2], vdw_radius: 2.51, atomic_number: 12, name: \"Magnesium\", symbol: \"Mg\")","doc":null,"summary":null},{"id":"Mn","name":"Mn","value":"::Chem::Element.new(covalent_radius: 1.61, mass: 54.938, vdw_radius: 2.45, atomic_number: 25, name: \"Manganese\", symbol: \"Mn\")","doc":null,"summary":null},{"id":"Mo","name":"Mo","value":"::Chem::Element.new(covalent_radius: 1.54, mass: 95.94, vdw_radius: 2.45, atomic_number: 42, name: \"Molybdenum\", symbol: \"Mo\")","doc":null,"summary":null},{"id":"Mt","name":"Mt","value":"::Chem::Element.new(mass: 268, atomic_number: 109, name: \"Meitnerium\", symbol: \"Mt\")","doc":null,"summary":null},{"id":"N","name":"N","value":"::Chem::Element.new(covalent_radius: 0.71, mass: 14.0067, valencies: [3], vdw_radius: 1.66, atomic_number: 7, name: \"Nitrogen\", symbol: \"N\")","doc":null,"summary":null},{"id":"Na","name":"Na","value":"::Chem::Element.new(covalent_radius: 1.66, mass: 22.9898, ionic: true, valencies: [1], vdw_radius: 2.5, atomic_number: 11, name: \"Sodium\", symbol: \"Na\")","doc":null,"summary":null},{"id":"Nb","name":"Nb","value":"::Chem::Element.new(covalent_radius: 1.64, mass: 92.9064, vdw_radius: 2.56, atomic_number: 41, name: \"Niobium\", symbol: \"Nb\")","doc":null,"summary":null},{"id":"Nd","name":"Nd","value":"::Chem::Element.new(covalent_radius: 2.01, mass: 144.242, vdw_radius: 2.95, atomic_number: 60, name: \"Neodymium\", symbol: \"Nd\")","doc":null,"summary":null},{"id":"Ne","name":"Ne","value":"::Chem::Element.new(covalent_radius: 0.5, mass: 20.1797, vdw_radius: 1.58, atomic_number: 10, name: \"Neon\", symbol: \"Ne\")","doc":null,"summary":null},{"id":"Ni","name":"Ni","value":"::Chem::Element.new(covalent_radius: 1.24, mass: 58.6934, vdw_radius: 2.4, atomic_number: 28, name: \"Nickel\", symbol: \"Ni\")","doc":null,"summary":null},{"id":"No","name":"No","value":"::Chem::Element.new(mass: 259, atomic_number: 102, name: \"Nobelium\", symbol: \"No\")","doc":null,"summary":null},{"id":"Np","name":"Np","value":"::Chem::Element.new(covalent_radius: 1.90, mass: 237, vdw_radius: 2.82, atomic_number: 93, name: \"Neptunium\", symbol: \"Np\")","doc":null,"summary":null},{"id":"O","name":"O","value":"::Chem::Element.new(covalent_radius: 0.66, mass: 15.9994, valencies: [2], vdw_radius: 1.5, atomic_number: 8, name: \"Oxygen\", symbol: \"O\")","doc":null,"summary":null},{"id":"Os","name":"Os","value":"::Chem::Element.new(covalent_radius: 1.44, mass: 190.23, vdw_radius: 2.48, atomic_number: 76, name: \"Osmium\", symbol: \"Os\")","doc":null,"summary":null},{"id":"P","name":"P","value":"::Chem::Element.new(covalent_radius: 1.07, mass: 30.9738, valencies: [3, 5], vdw_radius: 1.9, atomic_number: 15, name: \"Phosphorus\", symbol: \"P\")","doc":null,"summary":null},{"id":"Pa","name":"Pa","value":"::Chem::Element.new(covalent_radius: 2.00, mass: 231.0359, vdw_radius: 2.88, atomic_number: 91, name: \"Proactinium\", symbol: \"Pa\")","doc":null,"summary":null},{"id":"Pb","name":"Pb","value":"::Chem::Element.new(covalent_radius: 1.46, mass: 207.2, vdw_radius: 2.6, atomic_number: 82, name: \"Lead\", symbol: \"Pb\")","doc":null,"summary":null},{"id":"Pd","name":"Pd","value":"::Chem::Element.new(covalent_radius: 1.39, mass: 106.42, vdw_radius: 2.15, atomic_number: 46, name: \"Palladium\", symbol: \"Pd\")","doc":null,"summary":null},{"id":"Pm","name":"Pm","value":"::Chem::Element.new(covalent_radius: 1.9, mass: 145, atomic_number: 61, name: \"Promethium\", symbol: \"Pm\")","doc":null,"summary":null},{"id":"Po","name":"Po","value":"::Chem::Element.new(covalent_radius: 1.40, mass: 209, atomic_number: 84, name: \"Polonium\", symbol: \"Po\")","doc":null,"summary":null},{"id":"Pr","name":"Pr","value":"::Chem::Element.new(covalent_radius: 2.03, mass: 140.9077, vdw_radius: 2.92, atomic_number: 59, name: \"Praseodymium\", symbol: \"Pr\")","doc":null,"summary":null},{"id":"Pt","name":"Pt","value":"::Chem::Element.new(covalent_radius: 1.36, mass: 195.084, vdw_radius: 2.29, atomic_number: 78, name: \"Platinum\", symbol: \"Pt\")","doc":null,"summary":null},{"id":"Pu","name":"Pu","value":"::Chem::Element.new(covalent_radius: 1.87, mass: 244, vdw_radius: 2.81, atomic_number: 94, name: \"Plutonium\", symbol: \"Pu\")","doc":null,"summary":null},{"id":"Ra","name":"Ra","value":"::Chem::Element.new(covalent_radius: 2.21, mass: 226, atomic_number: 88, name: \"Radium\", symbol: \"Ra\")","doc":null,"summary":null},{"id":"Rb","name":"Rb","value":"::Chem::Element.new(covalent_radius: 2.20, mass: 85.4678, vdw_radius: 3.21, atomic_number: 37, name: \"Rubidium\", symbol: \"Rb\")","doc":null,"summary":null},{"id":"Re","name":"Re","value":"::Chem::Element.new(covalent_radius: 1.51, mass: 186.207, vdw_radius: 2.49, atomic_number: 75, name: \"Rhenium\", symbol: \"Re\")","doc":null,"summary":null},{"id":"Rf","name":"Rf","value":"::Chem::Element.new(mass: 261, atomic_number: 104, name: \"Rutherfordium\", symbol: \"Rf\")","doc":null,"summary":null},{"id":"Rg","name":"Rg","value":"::Chem::Element.new(mass: 272, atomic_number: 111, name: \"Roentgenium\", symbol: \"Rg\")","doc":null,"summary":null},{"id":"Rh","name":"Rh","value":"::Chem::Element.new(covalent_radius: 1.42, mass: 102.9055, vdw_radius: 2.44, atomic_number: 45, name: \"Rhodium\", symbol: \"Rh\")","doc":null,"summary":null},{"id":"Rn","name":"Rn","value":"::Chem::Element.new(covalent_radius: 1.5, mass: 222, atomic_number: 86, name: \"Radon\", symbol: \"Rn\")","doc":null,"summary":null},{"id":"Ru","name":"Ru","value":"::Chem::Element.new(covalent_radius: 1.46, mass: 101.07, vdw_radius: 2.46, atomic_number: 44, name: \"Ruthenium\", symbol: \"Ru\")","doc":null,"summary":null},{"id":"S","name":"S","value":"::Chem::Element.new(covalent_radius: 1.05, mass: 32.065, valencies: [2, 6], vdw_radius: 1.89, atomic_number: 16, name: \"Sulfur\", symbol: \"S\")","doc":null,"summary":null},{"id":"Sb","name":"Sb","value":"::Chem::Element.new(covalent_radius: 1.39, mass: 121.76, vdw_radius: 2.47, atomic_number: 51, name: \"Antimony\", symbol: \"Sb\")","doc":null,"summary":null},{"id":"Sc","name":"Sc","value":"::Chem::Element.new(covalent_radius: 1.70, mass: 44.9559, vdw_radius: 2.58, atomic_number: 21, name: \"Scandium\", symbol: \"Sc\")","doc":null,"summary":null},{"id":"Se","name":"Se","value":"::Chem::Element.new(covalent_radius: 1.20, mass: 78.96, vdw_radius: 1.82, atomic_number: 34, name: \"Selenium\", symbol: \"Se\")","doc":null,"summary":null},{"id":"Sg","name":"Sg","value":"::Chem::Element.new(mass: 266, atomic_number: 106, name: \"Seaborgium\", symbol: \"Sg\")","doc":null,"summary":null},{"id":"Si","name":"Si","value":"::Chem::Element.new(covalent_radius: 1.11, mass: 28.0855, vdw_radius: 2.19, atomic_number: 14, name: \"Silicon\", symbol: \"Si\")","doc":null,"summary":null},{"id":"Sm","name":"Sm","value":"::Chem::Element.new(covalent_radius: 1.98, mass: 150.36, vdw_radius: 2.9, atomic_number: 62, name: \"Samarium\", symbol: \"Sm\")","doc":null,"summary":null},{"id":"Sn","name":"Sn","value":"::Chem::Element.new(covalent_radius: 1.39, mass: 118.71, vdw_radius: 2.42, atomic_number: 50, name: \"Tin\", symbol: \"Sn\")","doc":null,"summary":null},{"id":"Sr","name":"Sr","value":"::Chem::Element.new(covalent_radius: 1.95, mass: 87.62, vdw_radius: 2.84, atomic_number: 38, name: \"Strontium\", symbol: \"Sr\")","doc":null,"summary":null},{"id":"Ta","name":"Ta","value":"::Chem::Element.new(covalent_radius: 1.70, mass: 180.9479, vdw_radius: 2.53, atomic_number: 73, name: \"Tantalum\", symbol: \"Ta\")","doc":null,"summary":null},{"id":"Tb","name":"Tb","value":"::Chem::Element.new(covalent_radius: 1.94, mass: 158.9254, vdw_radius: 2.79, atomic_number: 65, name: \"Terbium\", symbol: \"Tb\")","doc":null,"summary":null},{"id":"Tc","name":"Tc","value":"::Chem::Element.new(covalent_radius: 1.47, mass: 98, vdw_radius: 2.44, atomic_number: 43, name: \"Technetium\", symbol: \"Tc\")","doc":null,"summary":null},{"id":"Te","name":"Te","value":"::Chem::Element.new(covalent_radius: 1.38, mass: 127.6, vdw_radius: 1.99, atomic_number: 52, name: \"Tellurium\", symbol: \"Te\")","doc":null,"summary":null},{"id":"Th","name":"Th","value":"::Chem::Element.new(covalent_radius: 2.06, mass: 232.0381, vdw_radius: 2.93, atomic_number: 90, name: \"Thorium\", symbol: \"Th\")","doc":null,"summary":null},{"id":"Ti","name":"Ti","value":"::Chem::Element.new(covalent_radius: 1.60, mass: 47.867, vdw_radius: 2.46, atomic_number: 22, name: \"Titanium\", symbol: \"Ti\")","doc":null,"summary":null},{"id":"Tl","name":"Tl","value":"::Chem::Element.new(covalent_radius: 1.45, mass: 204.3833, vdw_radius: 2.47, atomic_number: 81, name: \"Thallium\", symbol: \"Tl\")","doc":null,"summary":null},{"id":"Tm","name":"Tm","value":"::Chem::Element.new(covalent_radius: 1.90, mass: 168.9342, vdw_radius: 2.79, atomic_number: 69, name: \"Thulium\", symbol: \"Tm\")","doc":null,"summary":null},{"id":"U","name":"U","value":"::Chem::Element.new(covalent_radius: 1.96, mass: 238.0289, vdw_radius: 2.71, atomic_number: 92, name: \"Uranium\", symbol: \"U\")","doc":null,"summary":null},{"id":"Uuh","name":"Uuh","value":"::Chem::Element.new(mass: 292, atomic_number: 116, name: \"Ununhexium\", symbol: \"Uuh\")","doc":null,"summary":null},{"id":"Uuo","name":"Uuo","value":"::Chem::Element.new(mass: 294, atomic_number: 118, name: \"Ununoctium\", symbol: \"Uuo\")","doc":null,"summary":null},{"id":"Uup","name":"Uup","value":"::Chem::Element.new(mass: 288, atomic_number: 115, name: \"Ununpentium\", symbol: \"Uup\")","doc":null,"summary":null},{"id":"Uuq","name":"Uuq","value":"::Chem::Element.new(mass: 289, atomic_number: 114, name: \"Ununquadium\", symbol: \"Uuq\")","doc":null,"summary":null},{"id":"Uus","name":"Uus","value":"::Chem::Element.new(mass: 291, atomic_number: 117, name: \"Ununseptium\", symbol: \"Uus\")","doc":null,"summary":null},{"id":"Uut","name":"Uut","value":"::Chem::Element.new(mass: 284, atomic_number: 113, name: \"Ununtrium\", symbol: \"Uut\")","doc":null,"summary":null},{"id":"V","name":"V","value":"::Chem::Element.new(covalent_radius: 1.53, mass: 50.9415, vdw_radius: 2.42, atomic_number: 23, name: \"Vanadium\", symbol: \"V\")","doc":null,"summary":null},{"id":"W","name":"W","value":"::Chem::Element.new(covalent_radius: 1.62, mass: 183.84, vdw_radius: 2.57, atomic_number: 74, name: \"Tungsten\", symbol: \"W\")","doc":null,"summary":null},{"id":"Xe","name":"Xe","value":"::Chem::Element.new(covalent_radius: 1.40, mass: 131.293, vdw_radius: 2.06, atomic_number: 54, name: \"Xenon\", symbol: \"Xe\")","doc":null,"summary":null},{"id":"Y","name":"Y","value":"::Chem::Element.new(covalent_radius: 1.90, mass: 88.9059, vdw_radius: 2.75, atomic_number: 39, name: \"Yttrium\", symbol: \"Y\")","doc":null,"summary":null},{"id":"Yb","name":"Yb","value":"::Chem::Element.new(covalent_radius: 1.87, mass: 173.04, vdw_radius: 2.8, atomic_number: 70, name: \"Ytterbium\", symbol: \"Yb\")","doc":null,"summary":null},{"id":"Zn","name":"Zn","value":"::Chem::Element.new(covalent_radius: 1.22, mass: 65.409, vdw_radius: 2.39, atomic_number: 30, name: \"Zinc\", symbol: \"Zn\")","doc":null,"summary":null},{"id":"Zr","name":"Zr","value":"::Chem::Element.new(covalent_radius: 1.75, mass: 91.224, vdw_radius: 2.52, atomic_number: 40, name: \"Zirconium\", symbol: \"Zr\")","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"chem.cr/Chem/PeriodicTable","kind":"module","full_name":"Chem::PeriodicTable","name":"PeriodicTable"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"NOTE: Standard atom weights (in Da) are taken from Meija, J., et al., Pure Appl.\nChem., 2016, 88 (3), pp 265-291,\ndoi:[10.1515/pac-2015-0305](https://dx.doi.org/10.1515/pac-2015-0305)\n\nNOTE: Covalent radii (in Å) are taken from Cordero, B., et al., Dalton Trans., 2008,\n21, pp 2832-2838, doi:[10.1039/b801115j](https://dx.doi.org/10.1039/b801115j). Missing\nvalues are set to 1.5 Å\n\nNOTE: vdW radii (in Å) are taken from Alvarez, S., Dalton Trans., 2013, 42, pp\n8617-8636, doi:[10.1039/c3dt50599e](https://dx.doi.org/10.1039/c3dt50599e). Missing\nvalues are set to covalent radius + 0.9 Å","summary":"<p><span class=\"flag purple\">NOTE</span>  Standard atom weights (in Da) are taken from Meija, J., et al., Pure Appl.</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"[](*args,**options):Element-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options) : Element","args_html":"(*args, **options) : <a href=\"../Chem/Element.html\">Element</a>","location":{"filename":"src/chem/core/periodic_table.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table.cr#L7"},"def":{"name":"[]","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Element","visibility":"Public","body":"self[*args, **options]? || (unknown_element(*args, **options))"}},{"html_id":"[]?(number:Int32):Element?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"}],"args_string":"(number : Int32) : Element?","args_html":"(number : Int32) : <a href=\"../Chem/Element.html\">Element</a>?","location":{"filename":"src/chem/core/periodic_table.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table.cr#L11"},"def":{"name":"[]?","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Element | ::Nil","visibility":"Public","body":"{% if true %}\n      case number\n      {% for name, i in @type.constants.select do |c|\n  @type.constant(c).is_a?(Call)\nend %}\n        {% if i < 118 %}\n          when {{ i + 1 }}\n            {{ @type }}::{{ name }}\n        {% end %}\n      {% end %}\n      end\n    {% end %}"}},{"html_id":"[]?(symbol:String|Char):Element?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":"String | Char"}],"args_string":"(symbol : String | Char) : Element?","args_html":"(symbol : String | <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Element.html\">Element</a>?","location":{"filename":"src/chem/core/periodic_table.cr","line_number":24,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table.cr#L24"},"def":{"name":"[]?","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":"String | Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Element | ::Nil","visibility":"Public","body":"{% if true %}\n      case symbol.to_s.capitalize\n      {% for name, i in @type.constants.select do |c|\n  @type.constant(c).is_a?(Call)\nend %}\n        {% if i < 118 %}\n          when {{ name.stringify }}\n            {{ @type }}::{{ name }}\n        {% end %}\n      {% end %}\n      end\n    {% end %}"}},{"html_id":"[]?(*,name:String):Element?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(*, name : String) : Element?","args_html":"(*, name : String) : <a href=\"../Chem/Element.html\">Element</a>?","location":{"filename":"src/chem/core/periodic_table.cr","line_number":37,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table.cr#L37"},"def":{"name":"[]?","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Element | ::Nil","visibility":"Public","body":"{% if true %}\n      case name\n      {% for name, i in @type.constants.select do |c|\n  @type.constant(c).is_a?(Call)\nend %}\n        {% if i < 118 %}\n          when {{ @type }}::{{ name }}.name\n            {{ @type }}::{{ name }}\n        {% end %}\n      {% end %}\n      end\n    {% end %}"}},{"html_id":"[]?(*,atom_name:String):Element?-instance-method","name":"[]?","doc":"TODO rename to guess_element?\nTODO test different atom names","summary":"<p><span class=\"flag orange\">TODO</span>  rename to guess_element? TODO test different atom names</p>","abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"atom_name","doc":null,"default_value":"","external_name":"atom_name","restriction":"String"}],"args_string":"(*, atom_name : String) : Element?","args_html":"(*, atom_name : String) : <a href=\"../Chem/Element.html\">Element</a>?","location":{"filename":"src/chem/core/periodic_table.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table.cr#L52"},"def":{"name":"[]?","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"atom_name","doc":null,"default_value":"","external_name":"atom_name","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Element | ::Nil","visibility":"Public","body":"atom_name = (atom_name.lstrip(\"123456789\")).capitalize\nself[atom_name[0]]? || self[atom_name]?\n"}},{"html_id":"covalent_cutoff(atom:Atom,other:Atom):Float64-instance-method","name":"covalent_cutoff","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"},{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Atom"}],"args_string":"(atom : Atom, other : Atom) : Float64","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>, other : <a href=\"../Chem/Atom.html\">Atom</a>) : Float64","location":{"filename":"src/chem/core/periodic_table.cr","line_number":57,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table.cr#L57"},"def":{"name":"covalent_cutoff","args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"},{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Atom"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"covalent_cutoff(atom.element, other.element)"}},{"html_id":"covalent_cutoff(ele:Element,other:Element):Float64-instance-method","name":"covalent_cutoff","doc":"NOTE: The additional term (0.3 Å) is taken from the covalent radii reference,\nwhich states that about 96% of the surveyed bonds are within three standard\ndeviations of the sum of the radii, where the found average standard deviation is\nabout 0.1 Å.","summary":"<p><span class=\"flag purple\">NOTE</span>  The additional term (0.3 Å) is taken from the covalent radii reference, which states that about 96% of the surveyed bonds are within three standard deviations of the sum of the radii, where the found average standard deviation is about 0.1 Å.</p>","abstract":false,"args":[{"name":"ele","doc":null,"default_value":"","external_name":"ele","restriction":"Element"},{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Element"}],"args_string":"(ele : Element, other : Element) : Float64","args_html":"(ele : <a href=\"../Chem/Element.html\">Element</a>, other : <a href=\"../Chem/Element.html\">Element</a>) : Float64","location":{"filename":"src/chem/core/periodic_table.cr","line_number":65,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table.cr#L65"},"def":{"name":"covalent_cutoff","args":[{"name":"ele","doc":null,"default_value":"","external_name":"ele","restriction":"Element"},{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Element"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"__temp_52 = {ele, other}\n__temp_53 = covalent_pair_dist_table\n__temp_53[__temp_52]? || (__temp_53[__temp_52] = ((ele.covalent_radius + other.covalent_radius) + 0.3) ** 2)\n"}},{"html_id":"elements:Tuple-instance-method","name":"elements","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Tuple","args_html":" : Tuple","location":{"filename":"src/chem/core/periodic_table.cr","line_number":70,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table.cr#L70"},"def":{"name":"elements","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple","visibility":"Public","body":"{% if true %}\n      {\n        {% for name, i in @type.constants.select do |c|\n  @type.constant(c).is_a?(Call)\nend %}\n          {% if i < 118 %}\n            {{ @type }}::{{ name }},\n          {% end %}\n        {% end %}\n      }\n    {% end %}"}}],"macros":[{"html_id":"element(symbol,name,**options)-macro","name":"element","doc":null,"summary":null,"abstract":false,"args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"args_string":"(symbol, name, **options)","args_html":"(symbol, name, **options)","location":{"filename":"src/chem/core/periodic_table/macros.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/periodic_table/macros.cr#L2"},"def":{"name":"element","args":[{"name":"symbol","doc":null,"default_value":"","external_name":"symbol","restriction":""},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"block_arg":null,"visibility":"Public","body":"    \n{% elements = @type.constants.reject do |c|\n  @type.constant(c).is_a?(TypeNode)\nend %}\n\n    \n{% unless options[:atomic_number]\n  options[:atomic_number] = elements.size + 1\nend %}\n\n    \n{% options[:name] = name.stringify %}\n\n    \n{% options[:symbol] = symbol.stringify %}\n\n\n    \n{{ @type }}\n::\n{{ symbol.id }}\n = ::Chem::Element.new \n{{ options.double_splat }}\n\n\n    class ::Chem::Element\n      \n# Returns `true` if the element is \n{{ name }}\n, else `false`.\n\n      def \n{{ name.id.underscore.id }}\n?\n        same? \n{{ @type }}\n::\n{{ symbol.id }}\n\n      \nend\n    \nend\n\n    class ::Chem::Atom\n      \n# Returns `true` if the atom's element is \n{{ name }}\n, else `false`.\n\n      def \n{{ name.id.underscore.id }}\n?\n        @element.\n{{ name.id.underscore.id }}\n?\n      \nend\n    \nend\n  \n"}}],"types":[]},{"html_id":"chem.cr/Chem/Protein","path":"Chem/Protein.html","kind":"module","full_name":"Chem::Protein","name":"Protein","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/protein/dssp.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/dssp.cr#L1"},{"filename":"src/chem/protein/psique.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L1"},{"filename":"src/chem/protein/secondary_structure.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L1"},{"filename":"src/chem/protein/stride.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/stride.cr#L1"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/Protein/DSSP","path":"Chem/Protein/DSSP.html","kind":"class","full_name":"Chem::Protein::DSSP","name":"DSSP","abstract":false,"superclass":{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator"},"ancestors":[{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/protein/dssp.cr","line_number":34,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/dssp.cr#L34"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"HBOND_COUPLING_FACTOR","name":"HBOND_COUPLING_FACTOR","value":"-27.888","doc":null,"summary":null},{"id":"HBOND_ENERGY_CUTOFF","name":"HBOND_ENERGY_CUTOFF","value":"-0.5","doc":null,"summary":null},{"id":"HBOND_MIN_ENERGY","name":"HBOND_MIN_ENERGY","value":"-9.9","doc":null,"summary":null},{"id":"MIN_CA_SQUARED_DIST","name":"MIN_CA_SQUARED_DIST","value":"81","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Protein","kind":"module","full_name":"Chem::Protein","name":"Protein"},"doc":"Pure Crystal implementation of the Dictionary of Protein Secondary Structure (DSSP)\nalgorithm (Kabsch, W.; Sander, C. *Biopolymers* **1983**, *22* (12), 2577–2637.\n[doi:10.1002/bip.360221211][1]).\n\nThis implementation is based on the `mkdssp` program, version 3.0.5, written by\nMaarten L. Hekkelman, currently maintained by Coos Baakman, Jon Black, and Wouter\nTouw, and distributed under the Boost Software license at the\n[github.com/cmbi/xssp][2] repository.\n\nConsider that, according to the algorithm, residues that do not contain backbone\natoms, namely, \"N\", \"CA\", \"C\", and \"O\", are ignored. Therefore, non-standard amino\nacids are considered during the assignment as long as they contain such atoms.\nOtherwise, they will be considered as protein gaps, which may alter the secondary\nstructure of surrounding residues.\n\nNote that some differences may be expected with the output of `mkdssp` due to:\n\n- `mkdssp` does not handle well alternate conformations in PDB files, sometimes\n  discarding entire aminoacids.\n- `mkdssp` detects chain breaks by checking non-consecutive numbers of neighboring\n  residues. This may fail when residues *i* and *i + 1* are not actually bonded, or\n  when residue numbers are not consecutive. This implementation instead uses atom\n  connectivity to check whether C(*i*)–N(*i*+1) are bonded.\n\nFIXME: it does not work correctly for periodic structures that have\nbonds between atoms at opposite ends.\n\nNOTE: This implementation of DSSP is currently 50% slower than pure C++ solutions, so\nkeep this in mind when assigning the secondary structure of many structures.\n\n[1]: http://dx.doi.org/10.1002/bip.360221211\n[2]: http://github.com/cmbi/xssp","summary":"<p>Pure Crystal implementation of the Dictionary of Protein Secondary Structure (DSSP) algorithm (Kabsch, W.; Sander, C.</p>","class_methods":[],"constructors":[{"html_id":"new(structure:Structure)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure)","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>)","location":{"filename":"src/chem/protein/dssp.cr","line_number":46,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/dssp.cr#L46"},"def":{"name":"new","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(structure)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"assign:Nil-instance-method","name":"assign","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/protein/dssp.cr","line_number":51,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/dssp.cr#L51"},"def":{"name":"assign","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"reset_secondary_structure\ncalculate_hbonds\nif @residues.size > 4\n  assign_beta_sheets\nend\nassign_helices\nassign_bends_and_turns\n"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Protein/PSIQUE","path":"Chem/Protein/PSIQUE.html","kind":"class","full_name":"Chem::Protein::PSIQUE","name":"PSIQUE","abstract":false,"superclass":{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator"},"ancestors":[{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/protein/psique.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"CURVATURE_CUTOFF","name":"CURVATURE_CUTOFF","value":"60","doc":null,"summary":null},{"id":"HBOND_DISTANCE","name":"HBOND_DISTANCE","value":"1.5..2.6","doc":null,"summary":null},{"id":"HBOND_MIN_ANGLE","name":"HBOND_MIN_ANGLE","value":"120","doc":"hydrogen---acceptor","summary":"<p>hydrogen---acceptor</p>"},{"id":"MIN_RESIDUE_DISTANCE","name":"MIN_RESIDUE_DISTANCE","value":"3","doc":"donor-hydrogen---acceptor","summary":"<p>donor-hydrogen---acceptor</p>"}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Protein","kind":"module","full_name":"Chem::Protein","name":"Protein"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(structure:Structure,blend_elements:Bool=true)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"blend_elements","doc":null,"default_value":"true","external_name":"blend_elements","restriction":"Bool"}],"args_string":"(structure : Structure, blend_elements : Bool = true)","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>, blend_elements : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/chem/protein/psique.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L13"},"def":{"name":"new","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"blend_elements","doc":null,"default_value":"true","external_name":"blend_elements","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(structure, blend_elements)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"assign:Nil-instance-method","name":"assign","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/protein/psique.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L20"},"def":{"name":"assign","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"reset_secondary_structure\nupdate_bridged_residues\nassign_secondary_structure\nextend_elements\nreassign_enclosed_elements\nnormalize_regular_elements\n"}},{"html_id":"blend_elements?:Bool-instance-method","name":"blend_elements?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/protein/psique.cr","line_number":9,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L9"},"def":{"name":"blend_elements?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@blend_elements"}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/Protein/PSIQUE/SecondaryStructureBlender","path":"Chem/Protein/PSIQUE/SecondaryStructureBlender.html","kind":"class","full_name":"Chem::Protein::PSIQUE::SecondaryStructureBlender","name":"SecondaryStructureBlender","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/protein/psique.cr","line_number":374,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L374"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Protein/PSIQUE","kind":"class","full_name":"Chem::Protein::PSIQUE","name":"PSIQUE"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(residues:ResidueView)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"residues","doc":null,"default_value":"","external_name":"residues","restriction":"ResidueView"}],"args_string":"(residues : ResidueView)","args_html":"(residues : <a href=\"../../../Chem/ResidueView.html\">ResidueView</a>)","location":{"filename":"src/chem/protein/psique.cr","line_number":375,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L375"},"def":{"name":"new","args":[{"name":"residues","doc":null,"default_value":"","external_name":"residues","restriction":"ResidueView"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(residues)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](i:Int32,offset:Int32=0):SecondaryStructure?-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"},{"name":"offset","doc":null,"default_value":"0","external_name":"offset","restriction":"Int32"}],"args_string":"(i : Int32, offset : Int32 = 0) : SecondaryStructure?","args_html":"(i : Int32, offset : Int32 = <span class=\"n\">0</span>) : <a href=\"../../../Chem/Protein/SecondaryStructure.html\">SecondaryStructure</a>?","location":{"filename":"src/chem/protein/psique.cr","line_number":379,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L379"},"def":{"name":"[]","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"},{"name":"offset","doc":null,"default_value":"0","external_name":"offset","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"SecondaryStructure | ::Nil","visibility":"Public","body":"i = i + offset\nif 0 <= i && i < @residues.size\n  (@residues.unsafe_fetch(i)).sec\nend\n"}},{"html_id":"beginning_of_sec_at?(i:Int32):Bool-instance-method","name":"beginning_of_sec_at?","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : Bool","args_html":"(i : Int32) : Bool","location":{"filename":"src/chem/protein/psique.cr","line_number":384,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L384"},"def":{"name":"beginning_of_sec_at?","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((self[i] != self[i, -1]) && (self[i] == self[i, 1])) && (self[i] == self[i, 2])"}},{"html_id":"blend:Nil-instance-method","name":"blend","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/protein/psique.cr","line_number":388,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L388"},"def":{"name":"blend","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if @residues.size > 2\n  while !next_patches.empty?\n    @patches.each do |i, sec|\n      @residues[i].sec = sec\n    end\n  end\nelse\n  @residues.sec = @residues[0].sec\nend"}},{"html_id":"end_of_sec_at?(i:Int32):Bool-instance-method","name":"end_of_sec_at?","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : Bool","args_html":"(i : Int32) : Bool","location":{"filename":"src/chem/protein/psique.cr","line_number":400,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L400"},"def":{"name":"end_of_sec_at?","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((self[i] == self[i, -2]) && (self[i] == self[i, -1])) && (self[i] != self[i, 1])"}},{"html_id":"middle_of_sec_at?(i:Int32):Bool-instance-method","name":"middle_of_sec_at?","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : Bool","args_html":"(i : Int32) : Bool","location":{"filename":"src/chem/protein/psique.cr","line_number":404,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L404"},"def":{"name":"middle_of_sec_at?","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(self[i] == self[i, -1]) && (self[i] == self[i, 1])"}},{"html_id":"mutable?(i:Int32):Bool-instance-method","name":"mutable?","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : Bool","args_html":"(i : Int32) : Bool","location":{"filename":"src/chem/protein/psique.cr","line_number":408,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L408"},"def":{"name":"mutable?","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((!(beginning_of_sec_at?(i))) && (!(middle_of_sec_at?(i)))) && (!(end_of_sec_at?(i)))"}},{"html_id":"next_patches:Hash(Int32,SecondaryStructure)-instance-method","name":"next_patches","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(Int32, SecondaryStructure)","args_html":" : Hash(Int32, <a href=\"../../../Chem/Protein/SecondaryStructure.html\">SecondaryStructure</a>)","location":{"filename":"src/chem/protein/psique.cr","line_number":414,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L414"},"def":{"name":"next_patches","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(Int32, SecondaryStructure)","visibility":"Public","body":"max_score = 0\n@patches.clear\n@residues.each_with_index do |res, i|\n  if mutable?(i)\n  else\n    next\n  end\n  (score_table(i)).each do |sec, score|\n    if score > max_score\n      @patches.clear\n      max_score = score\n    end\n    if score == max_score\n      @patches[i] = sec\n    end\n  end\nend\n@patches.reject! do |i, sec|\n  (@patches[i + 1]? == self[i]) && (sec == self[i + 1])\nend\n@patches\n"}},{"html_id":"score(i:Int32,sec:SecondaryStructure):Int32-instance-method","name":"score","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"},{"name":"sec","doc":null,"default_value":"","external_name":"sec","restriction":"SecondaryStructure"}],"args_string":"(i : Int32, sec : SecondaryStructure) : Int32","args_html":"(i : Int32, sec : <a href=\"../../../Chem/Protein/SecondaryStructure.html\">SecondaryStructure</a>) : Int32","location":{"filename":"src/chem/protein/psique.cr","line_number":433,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L433"},"def":{"name":"score","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"},{"name":"sec","doc":null,"default_value":"","external_name":"sec","restriction":"SecondaryStructure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"score = (-2..2).sum do |offset|\n  if offset == 0\n    0\n  else\n    if other = self[i, offset]\n      other == sec ? 10 ** (3 - offset.abs) : 0\n    else\n      1\n    end\n  end\nend\nif @residues[i].sec == self[i, 3]\n  score = score - 5\nend\nscore\n"}},{"html_id":"score_table(i:Int32):Hash(SecondaryStructure,Int32)-instance-method","name":"score_table","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : Hash(SecondaryStructure, Int32)","args_html":"(i : Int32) : Hash(<a href=\"../../../Chem/Protein/SecondaryStructure.html\">SecondaryStructure</a>, Int32)","location":{"filename":"src/chem/protein/psique.cr","line_number":447,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/psique.cr#L447"},"def":{"name":"score_table","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(SecondaryStructure, Int32)","visibility":"Public","body":"(-2..2).compact_map do |offset|\n  if offset != 0\n    self[i, offset]\n  end\nend.uniq!.reject!(&.==((@residues.unsafe_fetch(i)).sec)).to_h do |sec|\n  {sec, score(i, sec)}\nend"}}],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/Protein/SecondaryStructure","path":"Chem/Protein/SecondaryStructure.html","kind":"enum","full_name":"Chem::Protein::SecondaryStructure","name":"SecondaryStructure","abstract":false,"superclass":null,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/protein/secondary_structure.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Bend","name":"Bend","value":"0","doc":null,"summary":null},{"id":"BetaBridge","name":"BetaBridge","value":"1","doc":null,"summary":null},{"id":"BetaStrand","name":"BetaStrand","value":"2","doc":null,"summary":null},{"id":"LeftHandedHelix3_10","name":"LeftHandedHelix3_10","value":"3","doc":null,"summary":null},{"id":"LeftHandedHelixAlpha","name":"LeftHandedHelixAlpha","value":"4","doc":null,"summary":null},{"id":"LeftHandedHelixGamma","name":"LeftHandedHelixGamma","value":"5","doc":null,"summary":null},{"id":"LeftHandedHelixPi","name":"LeftHandedHelixPi","value":"6","doc":null,"summary":null},{"id":"None","name":"None","value":"7","doc":null,"summary":null},{"id":"Polyproline","name":"Polyproline","value":"8","doc":null,"summary":null},{"id":"RightHandedHelix3_10","name":"RightHandedHelix3_10","value":"9","doc":null,"summary":null},{"id":"RightHandedHelixAlpha","name":"RightHandedHelixAlpha","value":"10","doc":null,"summary":null},{"id":"RightHandedHelixGamma","name":"RightHandedHelixGamma","value":"11","doc":null,"summary":null},{"id":"RightHandedHelixPi","name":"RightHandedHelixPi","value":"12","doc":null,"summary":null},{"id":"Turn","name":"Turn","value":"13","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Protein","kind":"module","full_name":"Chem::Protein","name":"Protein"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"[](code:Char):self-class-method","name":"[]","doc":"Returns the secondary structure by one-letter code.\n\nRaises IndexError if `code` is invalid. See `#code` for a list of\ncodes.\n\n```\nSecondaryStructure['H'] # => SecondaryStructure::RightHandedHelixAlpha\nSecondaryStructure['h'] # => SecondaryStructure::LeftHandedHelixAlpha\nSecondaryStructure['E'] # => SecondaryStructure::BetaStrand\nSecondaryStructure['e'] # => SecondaryStructure::BetaStrand\nSecondaryStructure['X'] # raises IndexError\n```","summary":"<p>Returns the secondary structure by one-letter code.</p>","abstract":false,"args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"Char"}],"args_string":"(code : Char) : self","args_html":"(code : <a href=\"../../Char.html\">Char</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":30,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L30"},"def":{"name":"[]","args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"self[code]? || (raise(IndexError.new(\"Invalid secondary structure code: #{code}\")))"}},{"html_id":"[]?(code:Char):self?-class-method","name":"[]?","doc":"Returns the secondary structure by one-letter code.\n\nReturns `nil` if `code` is invalid. See `#code` for a list of\ncodes.\n\n```\nSecondaryStructure['H']? # => SecondaryStructure::RightHandedHelixAlpha\nSecondaryStructure['h']? # => SecondaryStructure::LeftHandedHelixAlpha\nSecondaryStructure['E']? # => SecondaryStructure::BetaStrand\nSecondaryStructure['e']? # => SecondaryStructure::BetaStrand\nSecondaryStructure['X']? # => nil\n```","summary":"<p>Returns the secondary structure by one-letter code.</p>","abstract":false,"args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"Char"}],"args_string":"(code : Char) : self?","args_html":"(code : <a href=\"../../Char.html\">Char</a>) : <span class=\"k\">self</span>?","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":46,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L46"},"def":{"name":"[]?","args":[{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self | ::Nil","visibility":"Public","body":"case code\nwhen 'S', 's'\n  Bend\nwhen 'B', 'b'\n  BetaBridge\nwhen 'E', 'e'\n  BetaStrand\nwhen 'g'\n  LeftHandedHelix3_10\nwhen 'h'\n  LeftHandedHelixAlpha\nwhen 'f'\n  LeftHandedHelixGamma\nwhen 'i'\n  LeftHandedHelixPi\nwhen '0', 'C', 'c'\n  None\nwhen 'P', 'p'\n  Polyproline\nwhen 'G'\n  RightHandedHelix3_10\nwhen 'H'\n  RightHandedHelixAlpha\nwhen 'F'\n  RightHandedHelixGamma\nwhen 'I'\n  RightHandedHelixPi\nwhen 'T', 't'\n  Turn\nend"}}],"instance_methods":[{"html_id":"bend?-instance-method","name":"bend?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L3"},"def":{"name":"bend?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Bend"}},{"html_id":"beta_bridge?-instance-method","name":"beta_bridge?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L4"},"def":{"name":"beta_bridge?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == BetaBridge"}},{"html_id":"beta_strand?-instance-method","name":"beta_strand?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L5"},"def":{"name":"beta_strand?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == BetaStrand"}},{"html_id":"code:Char-instance-method","name":"code","doc":"Returns one-letter secondary structure code.\n\nCodes are a superset of those defined by DSSP:\n\n- `'I'` : Right-handed π-helix (5-turn)\n- `'H'` : Right-handed α-helix (4-turn)\n- `'G'` : Right-handed 3₁₀-helix (3-turn)\n- `'F'` : Right-handed 2.2₇ (2-turn)\n- `'i'` : Left-handed π-helix (5-turn)\n- `'h'` : Left-handed α-helix (4-turn)\n- `'g'` : Left-handed 3₁₀-helix (3-turn)\n- `'f'` : Left-handed 2.2₇ (2-turn)\n- `'P'` : Polyproline\n- `'E'` : β-strand\n- `'B'` : β-bridge\n- `'T'` : Turn\n- `'S'` : Bend\n- `'0'` : None","summary":"<p>Returns one-letter secondary structure code.</p>","abstract":false,"args":[],"args_string":" : Char","args_html":" : <a href=\"../../Char.html\">Char</a>","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":83,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L83"},"def":{"name":"code","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char","visibility":"Public","body":"case self\nin .bend?\n  'S'\nin .beta_bridge?\n  'B'\nin .beta_strand?\n  'E'\nin .left_handed_helix3_10?\n  'g'\nin .left_handed_helix_alpha?\n  'h'\nin .left_handed_helix_gamma?\n  'f'\nin .left_handed_helix_pi?\n  'i'\nin .none?\n  '0'\nin .polyproline?\n  'P'\nin .right_handed_helix3_10?\n  'G'\nin .right_handed_helix_alpha?\n  'H'\nin .right_handed_helix_gamma?\n  'F'\nin .right_handed_helix_pi?\n  'I'\nin .turn?\n  'T'\nend"}},{"html_id":"color:Colorize::ColorRGB-instance-method","name":"color","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Colorize::ColorRGB","args_html":" : <a href=\"../../Colorize/ColorRGB.html\">Colorize::ColorRGB</a>","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":102,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L102"},"def":{"name":"color","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Colorize::ColorRGB","visibility":"Public","body":"Colorize::ColorRGB.from_hex(case self\nin .left_handed_helix3_10?, .right_handed_helix3_10?\n  \"#E88BC4\"\nin .left_handed_helix_alpha?, .right_handed_helix_alpha?\n  \"#E41A1C\"\nin .left_handed_helix_pi?, .right_handed_helix_pi?\n  \"#6A3D9B\"\nin .left_handed_helix_gamma?, .right_handed_helix_gamma?\n  \"#F4A261\"\nin .beta_strand?\n  \"#2A9D8F\"\nin .polyproline?\n  \"#E9C46A\"\nin .bend?, .beta_bridge?, .none?, .turn?\n  \"#C8C8C8\"\nend)"}},{"html_id":"equals?(rhs:self,strict:Bool=true,handedness:Bool=true):Bool-instance-method","name":"equals?","doc":"Returns `true` if secondary structures are equal.\n\nIf `strict` is `true`, secondary structures are compared by their\nidentity, otherwise they're compared by their computed type.\n\n```\nSecondaryStructure::RightHandedHelixAlpha.equals?(:right_handed_helix_alpha) # => true\nSecondaryStructure::RightHandedHelixAlpha.equals?(:right_handed_helix_pi)    # => false\nSecondaryStructure::RightHandedHelixAlpha.equals?(:left_handed_helix_alpha)  # => false\nSecondaryStructure::BetaStrand.equals?(:polyproline)                         # => true\nSecondaryStructure::BetaStrand.equals?(:bend)                                # => false\n\nSecondaryStructure::RightHandedHelixAlpha.equals?(:right_handed_helix_pi, strict: false) # => true\nSecondaryStructure::BetaStrand.equals?(:polyproline, strict: false)                      # => true\nSecondaryStructure::BetaStrand.equals?(:bend, strict: false)                             # => false\n```","summary":"<p>Returns <code>true</code> if secondary structures are equal.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","doc":null,"default_value":"true","external_name":"handedness","restriction":"Bool"}],"args_string":"(rhs : self, strict : Bool = true, handedness : Bool = true) : Bool","args_html":"(rhs : <span class=\"k\">self</span>, strict : Bool = <span class=\"n\">true</span>, handedness : Bool = <span class=\"n\">true</span>) : Bool","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":130,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L130"},"def":{"name":"equals?","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","doc":null,"default_value":"true","external_name":"handedness","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if strict\n  self == rhs\nelse\n  if handedness\n    (type == rhs.type) && (self.handedness == rhs.handedness)\n  else\n    type == rhs.type\n  end\nend"}},{"html_id":"handedness:Symbol?-instance-method","name":"handedness","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Symbol?","args_html":" : Symbol?","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":140,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L140"},"def":{"name":"handedness","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Symbol | ::Nil","visibility":"Public","body":"case self\nin .left_handed_helix3_10?, .left_handed_helix_alpha?, .left_handed_helix_gamma?, .left_handed_helix_pi?\n  :left\nin .right_handed_helix3_10?, .right_handed_helix_alpha?, .right_handed_helix_gamma?, .right_handed_helix_pi?\n  :right\nin .bend?, .beta_bridge?, .beta_strand?, .none?, .polyproline?, .turn?, nil\nend"}},{"html_id":"helix3_10?-instance-method","name":"helix3_10?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":213,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L213"},"def":{"name":"helix3_10?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"left_handed_helix3_10? || right_handed_helix3_10?"}},{"html_id":"helix_alpha?-instance-method","name":"helix_alpha?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":213,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L213"},"def":{"name":"helix_alpha?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"left_handed_helix_alpha? || right_handed_helix_alpha?"}},{"html_id":"helix_gamma?-instance-method","name":"helix_gamma?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":213,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L213"},"def":{"name":"helix_gamma?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"left_handed_helix_gamma? || right_handed_helix_gamma?"}},{"html_id":"helix_pi?-instance-method","name":"helix_pi?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":213,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L213"},"def":{"name":"helix_pi?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"left_handed_helix_pi? || right_handed_helix_pi?"}},{"html_id":"left_handed_helix3_10?-instance-method","name":"left_handed_helix3_10?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L6"},"def":{"name":"left_handed_helix3_10?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LeftHandedHelix3_10"}},{"html_id":"left_handed_helix_alpha?-instance-method","name":"left_handed_helix_alpha?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L7"},"def":{"name":"left_handed_helix_alpha?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LeftHandedHelixAlpha"}},{"html_id":"left_handed_helix_gamma?-instance-method","name":"left_handed_helix_gamma?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L8"},"def":{"name":"left_handed_helix_gamma?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LeftHandedHelixGamma"}},{"html_id":"left_handed_helix_pi?-instance-method","name":"left_handed_helix_pi?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":9,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L9"},"def":{"name":"left_handed_helix_pi?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == LeftHandedHelixPi"}},{"html_id":"min_size:Int32-instance-method","name":"min_size","doc":"Returns nominal secondary structure's minimum size.","summary":"<p>Returns nominal secondary structure's minimum size.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":163,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L163"},"def":{"name":"min_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"case self\nwhen .beta_strand?\n  2\nwhen .helix3_10?\n  3\nwhen .helix_alpha?\n  4\nwhen .helix_gamma?\n  3\nwhen .helix_pi?\n  5\nwhen .polyproline?\n  3\nelse\n  1\nend"}},{"html_id":"none?-instance-method","name":"none?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L10"},"def":{"name":"none?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == None"}},{"html_id":"polyproline?-instance-method","name":"polyproline?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L11"},"def":{"name":"polyproline?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Polyproline"}},{"html_id":"regular?:Bool-instance-method","name":"regular?","doc":"Returns `true` if it's a regular secondary structure, otherwise\n`false`.\n\nSee also `SecondaryStructureType#regular?`.\n\n```\nSecondaryStructure::RightHandedHelixAlpha.regular? # => true\nSecondaryStructure::LeftHandedHelixAlpha.regular?  # => true\nSecondaryStructure::BetaStrand.regular?            # => true\nSecondaryStructure::Turn.regular?                  # => false\nSecondaryStructure::Bend.regular?                  # => false\n```","summary":"<p>Returns <code>true</code> if it's a regular secondary structure, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":187,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L187"},"def":{"name":"regular?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"type.regular?"}},{"html_id":"right_handed_helix3_10?-instance-method","name":"right_handed_helix3_10?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L12"},"def":{"name":"right_handed_helix3_10?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RightHandedHelix3_10"}},{"html_id":"right_handed_helix_alpha?-instance-method","name":"right_handed_helix_alpha?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L13"},"def":{"name":"right_handed_helix_alpha?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RightHandedHelixAlpha"}},{"html_id":"right_handed_helix_gamma?-instance-method","name":"right_handed_helix_gamma?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":14,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L14"},"def":{"name":"right_handed_helix_gamma?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RightHandedHelixGamma"}},{"html_id":"right_handed_helix_pi?-instance-method","name":"right_handed_helix_pi?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L15"},"def":{"name":"right_handed_helix_pi?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == RightHandedHelixPi"}},{"html_id":"turn?-instance-method","name":"turn?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L16"},"def":{"name":"turn?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Turn"}},{"html_id":"type:SecondaryStructureType-instance-method","name":"type","doc":"Returns secondary structure type.\n\n```\nSecondaryStructure::RightHandedHelixAlpha.type # => Helical\nSecondaryStructure::LeftHandedHelixAlpha.type  # => Helical\nSecondaryStructure::BetaStrand.type            # => Extended\nSecondaryStructure::Turn.type                  # => Coil\nSecondaryStructure::Bend.type                  # => Coil\n```","summary":"<p>Returns secondary structure type.</p>","abstract":false,"args":[],"args_string":" : SecondaryStructureType","args_html":" : <a href=\"../../Chem/Protein/SecondaryStructureType.html\">SecondaryStructureType</a>","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":200,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L200"},"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"SecondaryStructureType","visibility":"Public","body":"case self\nin .left_handed_helix3_10?, .left_handed_helix_alpha?, .left_handed_helix_pi?, .right_handed_helix3_10?, .right_handed_helix_alpha?, .right_handed_helix_pi?\n  SecondaryStructureType::Helical\nin .beta_bridge?, .beta_strand?, .left_handed_helix_gamma?, .polyproline?, .right_handed_helix_gamma?\n  SecondaryStructureType::Extended\nin .bend?, .none?, .turn?\n  SecondaryStructureType::Coil\nend"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","path":"Chem/Protein/SecondaryStructureCalculator.html","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator","abstract":true,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/protein/secondary_structure.cr","line_number":268,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L268"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"chem.cr/Chem/Protein/DSSP","kind":"class","full_name":"Chem::Protein::DSSP","name":"DSSP"},{"html_id":"chem.cr/Chem/Protein/PSIQUE","kind":"class","full_name":"Chem::Protein::PSIQUE","name":"PSIQUE"},{"html_id":"chem.cr/Chem/Protein/Stride","kind":"class","full_name":"Chem::Protein::Stride","name":"Stride"}],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Protein","kind":"module","full_name":"Chem::Protein","name":"Protein"},"doc":null,"summary":null,"class_methods":[{"html_id":"assign(structure:Structure,**options):Nil-class-method","name":"assign","doc":null,"summary":null,"abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure, **options) : Nil","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>, **options) : Nil","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":274,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L274"},"def":{"name":"assign","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"(new(structure, **options)).assign"}}],"constructors":[{"html_id":"new(structure:Structure)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure)","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>)","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":269,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L269"},"def":{"name":"new","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(structure)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"assign:Nil-instance-method","name":"assign","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":272,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L272"},"def":{"name":"assign","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":""}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Protein/SecondaryStructureType","path":"Chem/Protein/SecondaryStructureType.html","kind":"enum","full_name":"Chem::Protein::SecondaryStructureType","name":"SecondaryStructureType","abstract":false,"superclass":null,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/protein/secondary_structure.cr","line_number":226,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L226"}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Coil","name":"Coil","value":"0","doc":null,"summary":null},{"id":"Extended","name":"Extended","value":"1","doc":null,"summary":null},{"id":"Helical","name":"Helical","value":"2","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Protein","kind":"module","full_name":"Chem::Protein","name":"Protein"},"doc":"Members are similar to simplified or reduced secondary structure\nclassification:\n\n- Helical (α-helix, π-helix, etc.)\n- Extended (β-strand, polyproline, 2.2_7-helix, etc.)\n- Coil (Bend, turn, etc.)","summary":"<p>Members are similar to simplified or reduced secondary structure classification:</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"code:Char-instance-method","name":"code","doc":"Returns one-letter secondary structure type code.\n\nAssignment codes are similar to those of simplified DSSP:\n\n- `'H'` : Helical\n- `'E'` : Extended\n- `'C'` : Coil","summary":"<p>Returns one-letter secondary structure type code.</p>","abstract":false,"args":[],"args_string":" : Char","args_html":" : <a href=\"../../Char.html\">Char</a>","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":238,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L238"},"def":{"name":"code","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char","visibility":"Public","body":"case self\nin .extended?\n  'E'\nin .helical?\n  'H'\nin .coil?\n  'C'\nend"}},{"html_id":"coil?-instance-method","name":"coil?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":227,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L227"},"def":{"name":"coil?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Coil"}},{"html_id":"extended?-instance-method","name":"extended?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":228,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L228"},"def":{"name":"extended?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Extended"}},{"html_id":"helical?-instance-method","name":"helical?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":229,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L229"},"def":{"name":"helical?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Helical"}},{"html_id":"min_size:Int32-instance-method","name":"min_size","doc":"Returns nominal secondary structure type's minimum size.","summary":"<p>Returns nominal secondary structure type's minimum size.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":247,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L247"},"def":{"name":"min_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"case self\nin .extended?\n  2\nin .helical?\n  3\nin .coil?\n  1\nend"}},{"html_id":"regular?:Bool-instance-method","name":"regular?","doc":"Returns `true` if it's a regular secondary structure type,\notherwise `false`.\n\n```\nSecondaryStructureType::Helical.regular?  # => true\nSecondaryStructureType::Extended.regular? # => true\nSecondaryStructureType::Coil.regular?     # => false\n```","summary":"<p>Returns <code>true</code> if it's a regular secondary structure type, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":263,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/secondary_structure.cr#L263"},"def":{"name":"regular?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!coil?"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Protein/Stride","path":"Chem/Protein/Stride.html","kind":"class","full_name":"Chem::Protein::Stride","name":"Stride","abstract":false,"superclass":{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator"},"ancestors":[{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/stride.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/stride.cr#L2"},{"filename":"src/chem/protein/stride.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/stride.cr#L2"},{"filename":"src/chem/register_format.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L172"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Protein","kind":"module","full_name":"Chem::Protein","name":"Protein"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(structure:Structure)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure)","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>)","location":{"filename":"src/chem/protein/stride.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/stride.cr#L3"},"def":{"name":"new","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(structure)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"assign:Nil-instance-method","name":"assign","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/protein/stride.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/protein/stride.cr#L7"},"def":{"name":"assign","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"run_stride\n@output.each_line do |line|\n  if line.starts_with?(\"ASG\")\n  else\n    next\n  end\n  chain = (chr = line[9]) != '-' ? chr : '-'\n  inscode = line[14]\n  if inscode.letter?\n  else\n    inscode = nil\n  end\n  resnum = line[inscode.nil? ? 10..14 : 10..13].to_i\n  (@structure.dig(chain, resnum, inscode)).sec = SecondaryStructure[line[24]]\nend\n"}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/Protein/Stride/Writer","path":"Chem/Protein/Stride/Writer.html","kind":"class","full_name":"Chem::Protein::Stride::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/stride.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/stride.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Protein/Stride","kind":"class","full_name":"Chem::Protein::Stride","name":"Stride"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","doc":"Creates a new object from the given *io*.","summary":"<p>Creates a new object from the given <em>io</em>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":null,"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"chem.cr/Chem/PullParser","path":"Chem/PullParser.html","kind":"class","full_name":"Chem::PullParser","name":"PullParser","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/pull_parser.cr","line_number":72,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L72"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"A pull parser to read a text (ASCII) document by consuming one token\nat a time.\n\nThe parser reads line by line, which is set to an internal buffer.\nSubsequent tokens (consecutive non-whitespace characters) can be\nconsumed via the `#next_token` method (although only from the\ncurrent line). The string representation of the current token can be\nobtained via the `#str` methods or it can be interpreted as a\nprimitive type via the specialized  `#float` and `#int` methods. It\ncan be also interpreted as a custom type via the `#parse` method.\nUpon parsing issues, these methods may return `nil` or raise a\n`ParseException` exception.\n\nWhen creating an instance, the parser must be positioned in the\nfirst line before consuming a token by calling `#next_line`, using\nthe yielding method `#each_line`, or checking for end of file via\n`#eof?`. Upon reading a new line, the cursor is reset and the\ncurrent token is set to `nil`, so `#next_token` must be called\nbefore parsing. If the current token is not set, the parsing methods\nmay return `nil` or raise an exception. Alternatively, use the\nconvenience `#next_f`, `#next_i`, or `#next_s` methods that consume\nthe next token and return the interpreted value.\n\nThe `#next_*` methods always move forward into the IO or line, so\ncare must be taken when calling them as invoking `#next_s?` twice\nwill return the next two strings (if possible), not twice the same.\nFor instance, calling `#next_i?` after `#next_f?` returns `nil` will\nread the next token instead of re-interpreting the current one as an\ninteger. In such cases, consider using the non-advancing methods\n(`#int` instead of `#next_i`).\n\nExample:\n\n```\npull = PullParser.new IO::Memory.new(\"abc def\\n1234 5.6 abc\\n\")\npull.next_token                # => nil (line not read)\npull.next_line                 # place the parser at the first line\npull.str?                      # => nil (current token is nil)\npull.next_s?                   # => \"abc\"\npull.str?                      # => \"abc\" (current token was set by #next_s?)\npull.next_s?                   # => \"def\"\npull.next_s?                   # => nil (end of line)\npull.next_s                    # raises ParseException (no token can be consumed)\npull.next_line                 # place the parser at the second line\npull.next_i                    # => 1234\npull.next_f                    # => 5.6\npull.next_token                # => Bytes[55, 56, 57] (current token is \"abc\")\npull.int?                      # => nil\npull.float?                    # => nil\npull.parse &.sum(&.+('a'.ord)) # => 3\npull.next_token                # => nil (end of line)\npull.next_line                 # => nil (place the parser at the end of IO)\npull.next_token                # => nil (current line is nil)\n```\n\nAdditionally, the cursor can be manually placed on the current line\nvia the `#at` methods. This is useful for parsing fixed-column\nformats such as `#PDB`. The non-question variants will raise if the\ncursor is out of bounds.\n\n```\npull = PullParser.new IO::Memory.new(\"abc123.45def\\nABCDEF 5.16\\n\")\npull.next_line\npull.at(3, 6)     # returns the parser itself\npull.str          # => \"123.45\"\npull.float        # => 123.45\npull.at(9).str    # => \"d\"\npull.at(0, 3).str # => \"abc\"\npull.at(100, 5)   # raises ParseException\n```","summary":"<p>A pull parser to read a text (ASCII) document by consuming one token at a time.</p>","class_methods":[],"constructors":[{"html_id":"new(io:IO)-class-method","name":"new","doc":"Creates a PullParser which will consume the contents of *io*.","summary":"<p>Creates a PullParser which will consume the contents of <em>io</em>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/pull_parser.cr","line_number":79,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L79"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"at(start:Int,count:Int):self-instance-method","name":"at","doc":"Sets the cursor at *start* spanning *count* or less (if there\naren't enough) characters in the current line. Raises\n`ParseException` if *start* is out of bounds.","summary":"<p>Sets the cursor at <em>start</em> spanning <em>count</em> or less (if there aren't enough) characters in the current line.</p>","abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Int"},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"args_string":"(start : Int, count : Int) : self","args_html":"(start : Int, count : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/pull_parser.cr","line_number":90,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L90"},"def":{"name":"at","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Int"},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"set_cursor(start, count) do\n  error(\"Cursor out of current line\")\nend\nself\n"}},{"html_id":"at(index:Int):self-instance-method","name":"at","doc":"Sets the cursor to the character at *index* in the current line.\nRaises `ParseException` if *index* is out of bounds.","summary":"<p>Sets the cursor to the character at <em>index</em> in the current line.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : self","args_html":"(index : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/pull_parser.cr","line_number":83,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L83"},"def":{"name":"at","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"at(index, 1)"}},{"html_id":"at?(start:Int,count:Int):self-instance-method","name":"at?","doc":"Sets the cursor at *start* spanning *count* or less (if there\naren't enough) characters in the current line. If *start* is out\nof bounds, the current token will be set to `nil`.","summary":"<p>Sets the cursor at <em>start</em> spanning <em>count</em> or less (if there aren't enough) characters in the current line.</p>","abstract":false,"args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Int"},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"args_string":"(start : Int, count : Int) : self","args_html":"(start : Int, count : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/pull_parser.cr","line_number":105,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L105"},"def":{"name":"at?","args":[{"name":"start","doc":null,"default_value":"","external_name":"start","restriction":"Int"},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"set_cursor(start, count) do\n  return self\nend\nself\n"}},{"html_id":"at?(index:Int):self-instance-method","name":"at?","doc":"Sets the cursor to the character at *index* in the current line.\nIf *index* is out of bounds, the current token will be set to\n`nil`.","summary":"<p>Sets the cursor to the character at <em>index</em> in the current line.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : self","args_html":"(index : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/pull_parser.cr","line_number":98,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L98"},"def":{"name":"at?","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"at?(index, 1)"}},{"html_id":"char:Char-instance-method","name":"char","doc":"Returns the first character of the curren token. Raises\n`ParseException` if the token is not set.","summary":"<p>Returns the first character of the curren token.</p>","abstract":false,"args":[],"args_string":" : Char","args_html":" : <a href=\"../Char.html\">Char</a>","location":{"filename":"src/chem/pull_parser.cr","line_number":112,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L112"},"def":{"name":"char","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char","visibility":"Public","body":"char? || (error(\"Empty token\"))"}},{"html_id":"char?:Char?-instance-method","name":"char?","doc":"Returns the first character of the curren token, or `nil` if it is\nnot set.","summary":"<p>Returns the first character of the curren token, or <code>nil</code> if it is not set.</p>","abstract":false,"args":[],"args_string":" : Char?","args_html":" : <a href=\"../Char.html\">Char</a>?","location":{"filename":"src/chem/pull_parser.cr","line_number":118,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L118"},"def":{"name":"char?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char | ::Nil","visibility":"Public","body":"if token = current_token\n  token[0].unsafe_chr\nend"}},{"html_id":"current_line:String?-instance-method","name":"current_line","doc":"Returns the current line, or `nil` if it is not set.","summary":"<p>Returns the current line, or <code>nil</code> if it is not set.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/chem/pull_parser.cr","line_number":125,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L125"},"def":{"name":"current_line","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@line"}},{"html_id":"each_line(&:String->):Nil-instance-method","name":"each_line","doc":"Yields each line in the enclosed IO.\n\n```\npull = PullParser.new IO::Memory.new(\"123 456\\n789\\n\")\npull.each_line { |line| puts line }\n```\n\nPrints out:\n\n```text\n123 456\n789\n```\n\nNote that the current line will be also yielded if it is set.\n\n```\npull = PullParser.new IO::Memory.new(\"123 456\\n789\\n\")\npull.next_line    # reads and sets the current line\npull.current_line # => \"123 456\"\npull.each_line { |line| puts line }\n```\n\nPrints out:\n\n```text\n123 456\n789\n```","summary":"<p>Yields each line in the enclosed IO.</p>","abstract":false,"args":[],"args_string":"(& : String -> ) : Nil","args_html":"(& : String -> ) : Nil","location":{"filename":"src/chem/pull_parser.cr","line_number":158,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L158"},"def":{"name":"each_line","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(String ->)"},"return_type":"Nil","visibility":"Public","body":"if line = @line\n  yield line\nend\nwhile line = next_line\n  yield line\nend\n"}},{"html_id":"eof?:Bool-instance-method","name":"eof?","doc":"Returns `true` at the end of file, otherwise `false`.\n\nNOTE: This method attempts to read a line from the enclosed IO if\nthe current line is not set, so calling `#next_line` after this\ncould inadvertently discard a line.","summary":"<p>Returns <code>true</code> at the end of file, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/pull_parser.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L172"},"def":{"name":"eof?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@line.nil? && next_line.nil?"}},{"html_id":"error(message:String):NoReturn-instance-method","name":"error","doc":"Raises `ParseException` with the given message. The exception will\nhold the location of the current line and token if set.","summary":"<p>Raises <code><a href=\"../Chem/ParseException.html\">ParseException</a></code> with the given message.</p>","abstract":false,"args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(message : String) : NoReturn","args_html":"(message : String) : NoReturn","location":{"filename":"src/chem/pull_parser.cr","line_number":178,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L178"},"def":{"name":"error","args":[{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"NoReturn","visibility":"Public","body":"raise(ParseException.new(message, (io = @io).is_a?(File) ? io.path : nil, @line || \"\", location))"}},{"html_id":"float(if_blankdefault:Float64):Float64-instance-method","name":"float","doc":"Parses and returns the floating-point number represented by the\ncurrent token. Returns the given default value if the token is\nblank. Raises `ParseException` if the token is not set or it is\nnot a valid float representation.","summary":"<p>Parses and returns the floating-point number represented by the current token.</p>","abstract":false,"args":[{"name":"default","doc":null,"default_value":"","external_name":"if_blank","restriction":"Float64"}],"args_string":"(if_blank default : Float64) : Float64","args_html":"(if_blank default : Float64) : Float64","location":{"filename":"src/chem/pull_parser.cr","line_number":198,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L198"},"def":{"name":"float","args":[{"name":"default","doc":null,"default_value":"","external_name":"if_blank","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"if (token = current_token) && token.all? do |__arg0|\n  __arg0.unsafe_chr.ascii_whitespace?\nend\n  default\nelse\n  float\nend"}},{"html_id":"float:Float64-instance-method","name":"float","doc":"Parses and returns the floating-point number represented by the\ncurrent token. Raises `ParseException` if the token is not set or\nit is not a valid float representation.","summary":"<p>Parses and returns the floating-point number represented by the current token.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/pull_parser.cr","line_number":190,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L190"},"def":{"name":"float","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"float? || (error(\"Invalid real number\"))"}},{"html_id":"float?:Float64?-instance-method","name":"float?","doc":"Parses and returns the floating-point number represented by the\ncurrent token, or `nil` if the token is not set or it is not a\nvalid float representation.","summary":"<p>Parses and returns the floating-point number represented by the current token, or <code>nil</code> if the token is not set or it is not a valid float representation.</p>","abstract":false,"args":[],"args_string":" : Float64?","args_html":" : Float64?","location":{"filename":"src/chem/pull_parser.cr","line_number":209,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L209"},"def":{"name":"float?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"parse do |bytes|\n  endptr = bytes.to_unsafe + bytes.size\n  old_value = endptr.value\n  endptr.value = 0\n  value = LibC.strtod(bytes, out ptr)\n  endptr.value = old_value\n  if ptr == bytes.to_unsafe\n    return\n  end\n  while (ptr != endptr) && ptr.value.unsafe_chr.ascii_whitespace?\n    ptr = ptr + 1\n  end\n  if ptr == endptr\n    value\n  end\nend"}},{"html_id":"int(if_blankdefault:Int32):Int32-instance-method","name":"int","doc":"Parses and returns the integer represented by the current token.\nReturns the given default value if the token is blank. Raises\n`ParseException` if the token is not set or it is not a valid\nnumber.","summary":"<p>Parses and returns the integer represented by the current token.</p>","abstract":false,"args":[{"name":"default","doc":null,"default_value":"","external_name":"if_blank","restriction":"Int32"}],"args_string":"(if_blank default : Int32) : Int32","args_html":"(if_blank default : Int32) : Int32","location":{"filename":"src/chem/pull_parser.cr","line_number":237,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L237"},"def":{"name":"int","args":[{"name":"default","doc":null,"default_value":"","external_name":"if_blank","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"if (token = current_token) && token.all? do |__arg1|\n  __arg1.unsafe_chr.ascii_whitespace?\nend\n  default\nelse\n  int\nend"}},{"html_id":"int:Int32-instance-method","name":"int","doc":"Parses and returns the integer represented by the current token.\nRaises `ParseException` if the token is not set or it is not a\nvalid number.","summary":"<p>Parses and returns the integer represented by the current token.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/pull_parser.cr","line_number":229,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L229"},"def":{"name":"int","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"int? || (error(\"Invalid integer\"))"}},{"html_id":"int?:Int32?-instance-method","name":"int?","doc":"Parses and returns the integer represented by the current token,\nor `nil` if the token is not set or it is not a valid number.","summary":"<p>Parses and returns the integer represented by the current token, or <code>nil</code> if the token is not set or it is not a valid number.</p>","abstract":false,"args":[],"args_string":" : Int32?","args_html":" : Int32?","location":{"filename":"src/chem/pull_parser.cr","line_number":247,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L247"},"def":{"name":"int?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"parse do |bytes|\n  ptr = bytes.to_unsafe\n  endptr = ptr + bytes.size\n  while (ptr != endptr) && ptr.value.unsafe_chr.ascii_whitespace?\n    ptr = ptr + 1\n  end\n  sign = 1\n  case ptr.value.unsafe_chr\n  when '-'\n    sign = -1\n    ptr = ptr + 1\n  when '+'\n    ptr = ptr + 1\n  end\n  digits = 0\n  value = 0\n  while ptr != endptr\n    char = ptr.value.unsafe_chr\n    if '0' <= char && char <= '9'\n    else\n      return\n    end\n    value = value * 10\n    old = value\n    value = value &+ (char - '0')\n    if value < old\n      return\n    end\n    digits = digits + 1\n    ptr = ptr + 1\n  end\n  while (ptr != endptr) && ptr.value.unsafe_chr.ascii_whitespace?\n    ptr = ptr + 1\n  end\n  if (ptr == endptr) && digits > 0\n    value * sign\n  end\nend"}},{"html_id":"line:String-instance-method","name":"line","doc":"Returns the current line starting at the current token if set. An\nempty string is returned at the end of line. Raises\n`ParseException` at end of file.\n\n```\npull = PullParser.new IO::Memory.new(\"123 456\\n789\\n\")\npull.next_line\n# token is not set, returns entire line\npull.line # => \"123 456\"\npull.next_token\n# token is \"123\", returns line starting at \"123\"\npull.line # => \"123 456\"\npull.next_token\n# token is \"456\", returns line starting at \"456\"\npull.line # => \"456\"\n```","summary":"<p>Returns the current line starting at the current token if set.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/pull_parser.cr","line_number":302,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L302"},"def":{"name":"line","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"if @line\n  line = String.new(@buffer)\n  @buffer = Bytes.empty\n  @token_size = 0\n  line\nelse\n  error(\"End of file\")\nend"}},{"html_id":"next_f:Float64-instance-method","name":"next_f","doc":"Reads the next token in the current line, and interprets it via\n`#float`, which raises `ParseException` at the end of\nline or if the token is an invalid representation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#float%3AFloat64-instance-method\">#float</a></code>, which raises <code><a href=\"../Chem/ParseException.html\">ParseException</a></code> at the end of line or if the token is an invalid representation.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/pull_parser.cr","line_number":323,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L323"},"def":{"name":"next_f","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"next_token\nfloat\n"}},{"html_id":"next_f?:Float64?-instance-method","name":"next_f?","doc":"Reads the next token in the current line, and interprets it via\n`#float?`, which returns `nil` at the end of line or if\nthe token is an invalid representation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#float%3F%3AFloat64%3F-instance-method\">#float?</a></code>, which returns <code>nil</code> at the end of line or if the token is an invalid representation.</p>","abstract":false,"args":[],"args_string":" : Float64?","args_html":" : Float64?","location":{"filename":"src/chem/pull_parser.cr","line_number":323,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L323"},"def":{"name":"next_f?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"next_token\nfloat?\n"}},{"html_id":"next_i:Int32-instance-method","name":"next_i","doc":"Reads the next token in the current line, and interprets it via\n`#int`, which raises `ParseException` at the end of\nline or if the token is an invalid representation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#int%3AInt32-instance-method\">#int</a></code>, which raises <code><a href=\"../Chem/ParseException.html\">ParseException</a></code> at the end of line or if the token is an invalid representation.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/pull_parser.cr","line_number":323,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L323"},"def":{"name":"next_i","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"next_token\nint\n"}},{"html_id":"next_i?:Int32?-instance-method","name":"next_i?","doc":"Reads the next token in the current line, and interprets it via\n`#int?`, which returns `nil` at the end of line or if\nthe token is an invalid representation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#int%3F%3AInt32%3F-instance-method\">#int?</a></code>, which returns <code>nil</code> at the end of line or if the token is an invalid representation.</p>","abstract":false,"args":[],"args_string":" : Int32?","args_html":" : Int32?","location":{"filename":"src/chem/pull_parser.cr","line_number":323,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L323"},"def":{"name":"next_i?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"next_token\nint?\n"}},{"html_id":"next_line:String?-instance-method","name":"next_line","doc":"Reads and returns the next line from the enclosed IO, or `nil` if\ncalled at the end of the IO.","summary":"<p>Reads and returns the next line from the enclosed IO, or <code>nil</code> if called at the end of the IO.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/chem/pull_parser.cr","line_number":315,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L315"},"def":{"name":"next_line","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@line = @io.gets\n@buffer = @line.try(&.to_slice) || Bytes.empty\n@token_size = 0\n@line_number = @line_number + 1\n@line\n"}},{"html_id":"next_s:String-instance-method","name":"next_s","doc":"Reads the next token in the current line, and interprets it via\n`#str`, which raises `ParseException` at the end of\nline or if the token is an invalid representation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#str%3AString-instance-method\">#str</a></code>, which raises <code><a href=\"../Chem/ParseException.html\">ParseException</a></code> at the end of line or if the token is an invalid representation.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/pull_parser.cr","line_number":323,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L323"},"def":{"name":"next_s","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"next_token\nstr\n"}},{"html_id":"next_s?:String?-instance-method","name":"next_s?","doc":"Reads the next token in the current line, and interprets it via\n`#str?`, which returns `nil` at the end of line or if\nthe token is an invalid representation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#str%3F%3AString%3F-instance-method\">#str?</a></code>, which returns <code>nil</code> at the end of line or if the token is an invalid representation.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/chem/pull_parser.cr","line_number":323,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L323"},"def":{"name":"next_s?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"next_token\nstr?\n"}},{"html_id":"next_token:Bytes?-instance-method","name":"next_token","doc":"Reads the next collection of consecutive non-whitespace characters\nin the current line and returns the corresponding bytes, or `nil`\nif called at the end of line.\n\n```\npull = PullParser.new IO::Memory.new(\"abc def\\n1234 56 789\\n\")\npull.next_token             # => nil\npull.next_line              # place the parser at the first line\nString.new(pull.next_token) # => \"abc\"\nString.new(pull.next_token) # => \"def\"\npull.next_token             # => nil\npull.next_line              # place the parser at the second line\nString.new(pull.next_token) # => \"1234\"\nString.new(pull.next_token) # => \"56\"\nString.new(pull.next_token) # => \"789\"\npull.next_token             # => nil\npull.next_line              # place the parser at the end of IO\npull.next_token             # => nil\n```","summary":"<p>Reads the next collection of consecutive non-whitespace characters in the current line and returns the corresponding bytes, or <code>nil</code> if called at the end of line.</p>","abstract":false,"args":[],"args_string":" : Bytes?","args_html":" : Bytes?","location":{"filename":"src/chem/pull_parser.cr","line_number":363,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L363"},"def":{"name":"next_token","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bytes | ::Nil","visibility":"Public","body":"if @buffer.empty?\n  return\nend\n@buffer = @buffer + @token_size\n@token_size = 0\nptr = @buffer.to_unsafe\nwhile ptr.value.unsafe_chr.ascii_whitespace?\n  ptr = ptr + 1\nend\n@buffer = @buffer + (ptr - @buffer.to_unsafe)\nwhile !((ptr.value == 0) || ptr.value.unsafe_chr.ascii_whitespace?)\n  ptr = ptr + 1\nend\n@token_size = (ptr - @buffer.to_unsafe).to_i\ncurrent_token\n"}},{"html_id":"parse(&:Bytes->T?):T?forallT-instance-method","name":"parse","doc":"Yields the current token if set and returns the parsed value.","summary":"<p>Yields the current token if set and returns the parsed value.</p>","abstract":false,"args":[],"args_string":"(& : Bytes -> T?) : T? forall T","args_html":"(& : Bytes -> T?) : T? forall T","location":{"filename":"src/chem/pull_parser.cr","line_number":382,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L382"},"def":{"name":"parse","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Bytes -> T | ::Nil)"},"return_type":"T | ::Nil","visibility":"Public","body":"if token = current_token\n  yield token\nend"}},{"html_id":"str:String-instance-method","name":"str","doc":"Returns the current token as a string. Raises `ParseException` if\nthe token is not set.","summary":"<p>Returns the current token as a string.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/pull_parser.cr","line_number":390,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L390"},"def":{"name":"str","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"str? || (error(\"Empty token\"))"}},{"html_id":"str?:String?-instance-method","name":"str?","doc":"Returns the current token as a string, or `nil` if it is not set.","summary":"<p>Returns the current token as a string, or <code>nil</code> if it is not set.</p>","abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/chem/pull_parser.cr","line_number":395,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/pull_parser.cr#L395"},"def":{"name":"str?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"parse do |bytes|\n  String.new(bytes)\nend"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/PyMOL","path":"Chem/PyMOL.html","kind":"module","full_name":"Chem::PyMOL","name":"PyMOL","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/pymol.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pymol.cr#L2"},{"filename":"src/chem/register_format.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L172"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/PyMOL/Writer","path":"Chem/PyMOL/Writer.html","kind":"class","full_name":"Chem::PyMOL::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/pymol.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/pymol.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"CODES","name":"CODES","value":"{Protein::SecondaryStructure::BetaStrand => 'S', Protein::SecondaryStructure::LeftHandedHelix3_10 => 'H', Protein::SecondaryStructure::LeftHandedHelixAlpha => 'H', Protein::SecondaryStructure::LeftHandedHelixGamma => 'H', Protein::SecondaryStructure::LeftHandedHelixPi => 'H', Protein::SecondaryStructure::RightHandedHelix3_10 => 'H', Protein::SecondaryStructure::RightHandedHelixAlpha => 'H', Protein::SecondaryStructure::RightHandedHelixGamma => 'H', Protein::SecondaryStructure::RightHandedHelixPi => 'H', Protein::SecondaryStructure::Polyproline => 'H'}","doc":null,"summary":null},{"id":"SHORT_NAMES","name":"SHORT_NAMES","value":"{Protein::SecondaryStructure::BetaStrand => \"strand\", Protein::SecondaryStructure::LeftHandedHelix3_10 => \"310\", Protein::SecondaryStructure::LeftHandedHelixAlpha => \"alpha\", Protein::SecondaryStructure::LeftHandedHelixGamma => \"gamma\", Protein::SecondaryStructure::LeftHandedHelixPi => \"pi\", Protein::SecondaryStructure::RightHandedHelix3_10 => \"310\", Protein::SecondaryStructure::RightHandedHelixAlpha => \"alpha\", Protein::SecondaryStructure::RightHandedHelixGamma => \"gamma\", Protein::SecondaryStructure::RightHandedHelixPi => \"pi\", Protein::SecondaryStructure::Polyproline => \"pp\"}","doc":null,"summary":null}],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/PyMOL","kind":"module","full_name":"Chem::PyMOL","name":"PyMOL"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","doc":"Creates a new object from the given *io*.","summary":"<p>Creates a new object from the given <em>io</em>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":null,"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/RegisterFormat","path":"Chem/RegisterFormat.html","kind":"annotation","full_name":"Chem::RegisterFormat","name":"RegisterFormat","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/register_format.cr","line_number":166,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L166"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"Registers a file format.\n\nThe annotated type provides the implementation of a *file format*\nthat encodes an *encoded type*. The *file format* is determined from\nthe annotated type's name, where the last component of the fully\nqualified name is used (e.g., `Baz` for `Foo::Bar::Baz`). An entry\nof the same name will be added to the `Format` enum, where the\ndeclared extensions and file patterns will be associated with the\ncorresponding file format. This annotation accepts the following\nnamed arguments:\n\n- **ext**: an array of extensions (including leading dot).\n- **names**: an array of file patterns. File patterns can include\n  wildcards (`\"*\"`) to denote either prefix (e.g., `\"Foo*\"`), suffix\n  (e.g., `\"*Bar\"`), or both (e.g., `\"*Baz*\"`). Refer to\n  `Format#from_stem` for details.\n- **reader**: reader class name. Defaults to \"Reader\".\n- **writer**: writer class name. Defaults to \"Writer\".\n\nThe ability to read or write is determined by the declaration of\nreader and writer classes, respectively, which must include the\n`FormatReader`, `FormatWriter` and other related mixins when\nappropiate. The *encoded type* is dictated by the type variable of\nthe included mixins. The `FormatReader::Headed` and\n`FormatReader::Attached` provides interfaces to read additional\ninformation into custom objects.\n\nConvenience read (`.from_*` and `.read`) and write (`#to_*` and\n`#write`) methods will be generated on the *encoded types* during\ncompilation time using the type information of the included mixins\nin the reader and writer classes. Types declared by the\n`FormatReader::Headed` and `FormatReader::Attached` are also\nconsidered *encoded types*. Additionally, convenience read and write\nmethods will be generated on `Array` for file formats that can hold\nmultiple entries, which are declared via the\n`FormatReader::MultiEntry` and `FormatWriter::MultiEntry` mixins.\n\n### Example\n\nThe following code registers the `Foo` format associated with the\n`Chem::Foo` module, which provides read and write capabilities of\n`A` via the `Reader` and `Writer` classes, respectively. Both\ndeclare that the `Foo` format can hold multiple entries via the\ncorresponding `MultiEntry` mixins. The reader class also provides\nsupport for reading the header information into a `B` instance and\nreading secondary information into a `C` instance.\n\n```\nrecord A\nrecord B\nrecord C\n\n@[Chem::RegisterFormat(ext: %w(.foo), names: %w(foo_*))]\nmodule Foo\n  class Reader\n    include FormatReader(A)\n    include FormatReader::MultiEntry(A)\n    include FormatReader::Headed(B)\n    include FormatReader::Attached(C)\n\n    protected def decode_attached : C\n      C.new\n    end\n\n    protected def decode_entry : A\n      A.new\n    end\n\n    protected def decode_headed : B\n      B.new\n    end\n  end\n\n  class Writer\n    include FormatWriter(A)\n    include FormatWriter::MultiEntry(A)\n\n    def encode_entry(frame : A) : Nil; end\n  end\nend\n```\n\nA member named `Foo` is added to the `Format` enum, which can be\nused to query the format during runtime using the `.from_*` methods.\n\n```\nChem::Format::Foo                      # => Foo\nChem::Format::Foo.extnames             # => [\".foo\"]\nChem::Format::Foo.file_patterns        # => [\"foo_*\"]\nChem::Format.from_filename(\"file.foo\") # => Foo\nChem::Format.from_filename(\"foo_1\")    # => Foo\n```\n\nThe convenience `A.from_foo` and `A.read` methods are generated\nduring compilation time to create an `A` instance from an IO or file\nusing the `Foo` file format. The latter can be specified via the\ncorresponding member of the `Format` enum or as a string.\nAdditionally, the file format can be guessed from the filename.\n\n```\n# static read methods (can forward arguments to Foo::Reader)\nA.from_foo(IO::Memory.new) # => A()\nA.from_foo(\"a.foo\")        # => A()\n\n# dynamic read methods (format is detected on runtime; no arguments)\nA.read(IO::Memory.new, Chem::Format::Foo) # => A()\nA.read(IO::Memory.new, \"foo\")             # => A()\nA.read(\"a.foo\", Chem::Format::Foo)        # => A()\nA.read(\"a.foo\", \"foo\")                    # => A()\nA.read(\"a.foo\")                           # => A()\n```\n\nThe above methods are also created on the types representing the\nheader (`B`) and attached (`C`) types. This is convenient since one\ndoes not to worry about if `X` is either the encoded type, header or\nattached type to be read from a `Foo` file.\n\nSimilar to the read methods, `A.to_foo` and `A.write` are generated\nto write an `A` instance to an IO or file using the `Foo` file\nformat.\n\n```\n# static read methods (can forward arguments to Foo::Writer)\nA.new.to_foo                 # returns a string representation\nA.new.to_foo(IO::Memory.new) # writes to an IO\nA.new.to_foo(\"a.foo\")        # writes to a file\n\n# dynamic read methods (format is detected on runtime; no arguments)\nA.new.write(IO::Memory.new, Chem::Format::A)\nA.new.write(IO::Memory.new, \"foo\")\nA.new.write(\"a.foo\", Chem::Format::A)\nA.new.write(\"a.foo\", \"foo\")\nA.new.write(\"a.foo\")\n```\n\nThese methods are not generated for header (`B`) and attached (`C`)\ntypes however, because these cannot produce a valid `Foo` file by\nthemselves. If a header/attached object is required to write a valid\nfile, it should be declared as a required argument in the writer\n(see `Cube::Writer` or `VASP::Chgcar::Writer`).\n\nSince `Foo::Reader` and `Foo::Writer` reads and writes multiple\nentries (indicated by the corresponding `MultiEntry` mixins), the\n`.from_foo`, `.read`, `#to_foo`, and `#write` methods are also\ngenerated in `Array` during compilation time.\n\n```\nArray(A).from_foo(IO::Memory.new)   # => [Foo(), ...]\nArray(A).from_foo(\"a.foo\")          # => [Foo(), ...]\nArray(A).read(IO::Memory.new, :foo) # => [Foo(), ...]\n# and other overloads\n\nArray(A).new.to_foo                     # returns a string representation\nArray(A).new.to_foo(IO::Memory.new)     # writes to an IO\nArray(A).new.to_foo(\"a.foo\")            # writes to a file\nArray(A).new.write IO::Memory.new, :foo # writes to an IO\n# and other overloads\n```\n\nCalling any of these methods on an array of unsupported types will\nproduce a missing method error during compilation.\n\nRefer to the implementations of the supported file formats (e.g.,\n`PDB` and `XYZ`) for real examples.","summary":"<p>Registers a file format.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Residue","path":"Chem/Residue.html","kind":"class","full_name":"Chem::Residue","name":"Residue","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/residue.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(name:String,number:Int32,insertion_code:Char?,chain:Chain)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"","external_name":"insertion_code","restriction":"Char | ::Nil"},{"name":"chain","doc":null,"default_value":"","external_name":"chain","restriction":"Chain"}],"args_string":"(name : String, number : Int32, insertion_code : Char?, chain : Chain)","args_html":"(name : String, number : Int32, insertion_code : <a href=\"../Char.html\">Char</a>?, chain : <a href=\"../Chem/Chain.html\">Chain</a>)","location":{"filename":"src/chem/core/residue.cr","line_number":32,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L32"},"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"insertion_code","doc":null,"default_value":"","external_name":"insertion_code","restriction":"Char | ::Nil"},{"name":"chain","doc":null,"default_value":"","external_name":"chain","restriction":"Chain"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, number, insertion_code, chain)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(name:String,number:Int32,chain:Chain)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"chain","doc":null,"default_value":"","external_name":"chain","restriction":"Chain"}],"args_string":"(name : String, number : Int32, chain : Chain)","args_html":"(name : String, number : Int32, chain : <a href=\"../Chem/Chain.html\">Chain</a>)","location":{"filename":"src/chem/core/residue.cr","line_number":28,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L28"},"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"chain","doc":null,"default_value":"","external_name":"chain","restriction":"Chain"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, number, chain)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<=>(rhs:self):Int32-instance-method","name":"<=>","doc":"The comparison operator.\n\nReturns `-1`, `0` or `1` depending on whether `self` precedes\n*rhs*, equals to *rhs* or comes after *rhs*. The comparison is\ndone based on chain id, residue number, and insertion code if\npresent.\n\n```\nresidues = Structure.read \"peptide.pdb\"\nresidues[0] # => <Residue A:TRP1>\nresidues[1] # => <Residue A:GLY1A>\nresidues[2] # => <Residue A:SER1B>\nresidues[3] # => <Residue A:ASN1C>\nresidues[4] # => <Residue A:VAL2>\nresidues[5] # => <Residue B:THR1>\nresidues[6] # => <Residue B:ASN2>\n\nresidues[0] <=> residues[1] # => -1\nresidues[1] <=> residues[1] # => 0\nresidues[2] <=> residues[1] # => 1\nresidues[0] <=> residues[5] # => -1\nresidues[5] <=> residues[6] # => -1\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Int32","args_html":"(rhs : <span class=\"k\">self</span>) : Int32","location":{"filename":"src/chem/core/residue.cr","line_number":63,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L63"},"def":{"name":"<=>","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"c = chain.id <=> rhs.chain.id\nif c.zero?\nelse\n  return c\nend\nc = number <=> rhs.number\nif c.zero?\nelse\n  return c\nend\n(insertion_code || 'A'.pred) <=> (rhs.insertion_code || 'A'.pred)\n"}},{"html_id":"==(rhs:self):Bool-instance-method","name":"==","doc":"Returns `true` if this residue is the same as *rhs*, else `false`.\n\nNOTE: overrides the equality operator included by `Comparable`,\nwhich uses the `<=>` operator thus returning true for two\ndifferent residues that have the same chain id, number and\ninsertion code.","summary":"<p>Returns <code>true</code> if this residue is the same as <em>rhs</em>, else <code>false</code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Bool","args_html":"(rhs : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":83,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L83"},"def":{"name":"==","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"same?(rhs)"}},{"html_id":"[](atom_t:Topology::AtomType):Atom-instance-method","name":"[]","doc":"Returns the atom that matches *atom_t*.\n\nAtom must match both atom type's name and element, otherwise it\nraises `IndexError`.\n\n```\nresidue = Structure.read(\"peptide.pdb\").residues[0]\nresidue[Topology::AtomType(\"CA\")]               # => <Atom A:TRP1:CA(2)\nresidue[Topology::AtomType(\"CA\", element: \"N\")] # raises IndexError\nresidue[Topology::AtomType(\"CX\")]               # raises IndexError\n```","summary":"<p>Returns the atom that matches <em>atom_t</em>.</p>","abstract":false,"args":[{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"Topology::AtomType"}],"args_string":"(atom_t : Topology::AtomType) : Atom","args_html":"(atom_t : <a href=\"../Chem/Topology/AtomType.html\">Topology::AtomType</a>) : <a href=\"../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/residue.cr","line_number":98,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L98"},"def":{"name":"[]","args":[{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"Topology::AtomType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom","visibility":"Public","body":"self[atom_t]? || (raise(IndexError.new(\"Cannot find atom for atom type: #{atom_t}\")))"}},{"html_id":"[](*args,**options)-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/residue.cr","line_number":25,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L25"},"def":{"name":"[]","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@atom_table[*args, **options]"}},{"html_id":"[](*args,**options,&)-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/residue.cr","line_number":25,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L25"},"def":{"name":"[]","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@atom_table.[](*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"[]?(atom_t:Topology::AtomType):Atom?-instance-method","name":"[]?","doc":"Returns the atom that matches *atom_t*.\n\nAtom must match both atom type's name and element, otherwise it\nreturns `nil`.\n\n```\nresidue = Structure.read(\"peptide.pdb\").residues[0]\nresidue[Topology::AtomType(\"CA\")]               # => <Atom A:TRP1:CA(2)\nresidue[Topology::AtomType(\"CA\", element: \"N\")] # => nil\nresidue[Topology::AtomType(\"CX\")]               # => nil\n```","summary":"<p>Returns the atom that matches <em>atom_t</em>.</p>","abstract":false,"args":[{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"Topology::AtomType"}],"args_string":"(atom_t : Topology::AtomType) : Atom?","args_html":"(atom_t : <a href=\"../Chem/Topology/AtomType.html\">Topology::AtomType</a>) : <a href=\"../Chem/Atom.html\">Atom</a>?","location":{"filename":"src/chem/core/residue.cr","line_number":113,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L113"},"def":{"name":"[]?","args":[{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"Topology::AtomType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom | ::Nil","visibility":"Public","body":"if atom = self[atom_t.name]?\n  if atom.match?(atom_t)\n    atom\n  end\nend"}},{"html_id":"[]?(*args,**options)-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/residue.cr","line_number":25,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L25"},"def":{"name":"[]?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@atom_table[*args, **options]?"}},{"html_id":"[]?(*args,**options,&)-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/residue.cr","line_number":25,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L25"},"def":{"name":"[]?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@atom_table.[]?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"bonded?(other:self,bond_t:Topology::BondType,strict:Bool=true):Bool-instance-method","name":"bonded?","doc":"Returns true if `self` is bonded to *other* through *bond_t*,\notherwise false.\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\nbond_t = Topology::BondType.new \"C\", \"N\"\nresidues[0].bonded?(residues[1], bond_t) # => true\nresidues[1].bonded?(residues[2], bond_t) # => true\nresidues[2].bonded?(residues[3], bond_t) # => false\nresidues[1].bonded?(residues[3], bond_t) # => false\n```\n\nBond check follows the directionality of *bond_t*, that is, the\nleft and right atoms are looked up in `self` and *other*,\nrespectively:\n\n```\nresidues[0].bonded?(residues[1], bond_t) # => true\nresidues[1].bonded?(residues[0], bond_t) # => false\n```\n\nNote that bond order is taken into account, e.g.:\n\n```\nbond_t = Topology::BondType.new \"C\", \"N\", order: 2\nresidues[0].bonded?(residues[1], bond_t) # => false\n```\n\nIf *strict* is false, it uses elements only instead to look for\nbonded atoms, and bond order is ignored.\n\n```\nbond_t = Topology::BondType.new \"C\", \"NX\", order: 2\nresidues[0].bonded?(residues[1], bond_t)                # => false\nresidues[0].bonded?(residues[1], bond_t, strict: false) # => true\n```","summary":"<p>Returns true if <code>self</code> is bonded to <em>other</em> through <em>bond_t</em>, otherwise false.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"},{"name":"bond_t","doc":null,"default_value":"","external_name":"bond_t","restriction":"Topology::BondType"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"}],"args_string":"(other : self, bond_t : Topology::BondType, strict : Bool = true) : Bool","args_html":"(other : <span class=\"k\">self</span>, bond_t : <a href=\"../Chem/Topology/BondType.html\">Topology::BondType</a>, strict : Bool = <span class=\"n\">true</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":174,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L174"},"def":{"name":"bonded?","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"},{"name":"bond_t","doc":null,"default_value":"","external_name":"bond_t","restriction":"Topology::BondType"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(bonded?(other, bond_t[0], bond_t[1], bond_t.order)) || ((!strict) && (bonded?(other, bond_t[0].element, bond_t[1].element)))"}},{"html_id":"bonded?(other:self,lhs:Element,rhs:Element,order:Int?=nil):Bool-instance-method","name":"bonded?","doc":"Returns true if `self` is bonded to *other* through a bond between\n*lhs* and *rhs*, otherwise false.\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\n```\n\nOne can use atom names, atom types or elements:\n\n```\na, b = Topology::AtomType.new(\"C\"), Topology::AtomType.new(\"N\")\nresidues[0].bonded? residues[1], \"C\", \"N\"            # => true\nresidues[0].bonded? residues[1], a, b                # => true\nresidues[0].bonded? residues[1], a, PeriodicTable::N # => true\nresidues[0].bonded? residues[1], PeriodicTable::C, b # => true\nresidues[1].bonded? residues[2], a, b                # => true\nresidues[1].bonded? residues[3], a, b                # => false\nresidues[2].bonded? residues[3], a, b                # => false\n```\n\nNote that *lhs* and *rhs* are looked up in `self` and *other*,\nrespectively, i.e., the arguments are not interchangeable:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\" # => true\nresidues[0].bonded? residues[1], \"N\", \"C\" # => false\n```\n\nWhen atom names or atom types are specified, this method returns\nfalse if missing:\n\n```\nmissing_atom_t = Topology::AtomType.new(\"OZ5\")\nresidues[0].bonded? residues[1], \"CX1\", \"N\"             # => false\nresidues[0].bonded? residues[1], missing_atom_t, \"N\"    # => false\nresidues[0].bonded? residues[1], \"C\", PeriodicTable::Mg # => false\n```\n\nWhen elements are specified, all atoms of that element are tested:\n\n```\nresidues[1].bonded? residues[2], \"C\", PeriodicTable::N  # => true\nresidues[1].bonded? residues[2], \"SG\", PeriodicTable::C # => true\n```\n\nIf *order* is specified, it also check for bond order, otherwise\nit is ignored:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\"    # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 1 # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 2 # => false\n```","summary":"<p>Returns true if <code>self</code> is bonded to <em>other</em> through a bond between <em>lhs</em> and <em>rhs</em>, otherwise false.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"},{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"Element"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Element"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Int | ::Nil"}],"args_string":"(other : self, lhs : Element, rhs : Element, order : Int? = nil) : Bool","args_html":"(other : <span class=\"k\">self</span>, lhs : <a href=\"../Chem/Element.html\">Element</a>, rhs : <a href=\"../Chem/Element.html\">Element</a>, order : Int? = <span class=\"n\">nil</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":272,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L272"},"def":{"name":"bonded?","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"},{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"Element"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Element"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Int | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if other.same?(self)\n  return false\nend\n@atoms.any? do |a|\n  if a === lhs\n  else\n    next\n  end\n  other.each_atom.any? do |b|\n    if (b === rhs) && (bond = a.bonds[b]?)\n      bond.order == (order || bond.order)\n    end\n  end\nend\n"}},{"html_id":"bonded?(other:self,lhs:Topology::AtomType|String,rhs:Element,order:Int?=nil):Bool-instance-method","name":"bonded?","doc":"Returns true if `self` is bonded to *other* through a bond between\n*lhs* and *rhs*, otherwise false.\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\n```\n\nOne can use atom names, atom types or elements:\n\n```\na, b = Topology::AtomType.new(\"C\"), Topology::AtomType.new(\"N\")\nresidues[0].bonded? residues[1], \"C\", \"N\"            # => true\nresidues[0].bonded? residues[1], a, b                # => true\nresidues[0].bonded? residues[1], a, PeriodicTable::N # => true\nresidues[0].bonded? residues[1], PeriodicTable::C, b # => true\nresidues[1].bonded? residues[2], a, b                # => true\nresidues[1].bonded? residues[3], a, b                # => false\nresidues[2].bonded? residues[3], a, b                # => false\n```\n\nNote that *lhs* and *rhs* are looked up in `self` and *other*,\nrespectively, i.e., the arguments are not interchangeable:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\" # => true\nresidues[0].bonded? residues[1], \"N\", \"C\" # => false\n```\n\nWhen atom names or atom types are specified, this method returns\nfalse if missing:\n\n```\nmissing_atom_t = Topology::AtomType.new(\"OZ5\")\nresidues[0].bonded? residues[1], \"CX1\", \"N\"             # => false\nresidues[0].bonded? residues[1], missing_atom_t, \"N\"    # => false\nresidues[0].bonded? residues[1], \"C\", PeriodicTable::Mg # => false\n```\n\nWhen elements are specified, all atoms of that element are tested:\n\n```\nresidues[1].bonded? residues[2], \"C\", PeriodicTable::N  # => true\nresidues[1].bonded? residues[2], \"SG\", PeriodicTable::C # => true\n```\n\nIf *order* is specified, it also check for bond order, otherwise\nit is ignored:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\"    # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 1 # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 2 # => false\n```","summary":"<p>Returns true if <code>self</code> is bonded to <em>other</em> through a bond between <em>lhs</em> and <em>rhs</em>, otherwise false.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"},{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"Topology::AtomType | String"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Element"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Int | ::Nil"}],"args_string":"(other : self, lhs : Topology::AtomType | String, rhs : Element, order : Int? = nil) : Bool","args_html":"(other : <span class=\"k\">self</span>, lhs : <a href=\"../Chem/Topology/AtomType.html\">Topology::AtomType</a> | String, rhs : <a href=\"../Chem/Element.html\">Element</a>, order : Int? = <span class=\"n\">nil</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":244,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L244"},"def":{"name":"bonded?","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"},{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"Topology::AtomType | String"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Element"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Int | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if other.same?(self)\n  return false\nend\nif a = self[lhs]?\nelse\n  return false\nend\nother.each_atom.any? do |b|\n  if (b === rhs) && (bond = a.bonds[b]?)\n    bond.order == (order || bond.order)\n  end\nend\n"}},{"html_id":"bonded?(other:self,lhs:Element,rhs:Topology::AtomType|String,order:Int?=nil):Bool-instance-method","name":"bonded?","doc":"Returns true if `self` is bonded to *other* through a bond between\n*lhs* and *rhs*, otherwise false.\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\n```\n\nOne can use atom names, atom types or elements:\n\n```\na, b = Topology::AtomType.new(\"C\"), Topology::AtomType.new(\"N\")\nresidues[0].bonded? residues[1], \"C\", \"N\"            # => true\nresidues[0].bonded? residues[1], a, b                # => true\nresidues[0].bonded? residues[1], a, PeriodicTable::N # => true\nresidues[0].bonded? residues[1], PeriodicTable::C, b # => true\nresidues[1].bonded? residues[2], a, b                # => true\nresidues[1].bonded? residues[3], a, b                # => false\nresidues[2].bonded? residues[3], a, b                # => false\n```\n\nNote that *lhs* and *rhs* are looked up in `self` and *other*,\nrespectively, i.e., the arguments are not interchangeable:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\" # => true\nresidues[0].bonded? residues[1], \"N\", \"C\" # => false\n```\n\nWhen atom names or atom types are specified, this method returns\nfalse if missing:\n\n```\nmissing_atom_t = Topology::AtomType.new(\"OZ5\")\nresidues[0].bonded? residues[1], \"CX1\", \"N\"             # => false\nresidues[0].bonded? residues[1], missing_atom_t, \"N\"    # => false\nresidues[0].bonded? residues[1], \"C\", PeriodicTable::Mg # => false\n```\n\nWhen elements are specified, all atoms of that element are tested:\n\n```\nresidues[1].bonded? residues[2], \"C\", PeriodicTable::N  # => true\nresidues[1].bonded? residues[2], \"SG\", PeriodicTable::C # => true\n```\n\nIf *order* is specified, it also check for bond order, otherwise\nit is ignored:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\"    # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 1 # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 2 # => false\n```","summary":"<p>Returns true if <code>self</code> is bonded to <em>other</em> through a bond between <em>lhs</em> and <em>rhs</em>, otherwise false.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"},{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"Element"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Topology::AtomType | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Int | ::Nil"}],"args_string":"(other : self, lhs : Element, rhs : Topology::AtomType | String, order : Int? = nil) : Bool","args_html":"(other : <span class=\"k\">self</span>, lhs : <a href=\"../Chem/Element.html\">Element</a>, rhs : <a href=\"../Chem/Topology/AtomType.html\">Topology::AtomType</a> | String, order : Int? = <span class=\"n\">nil</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":258,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L258"},"def":{"name":"bonded?","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"},{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"Element"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Topology::AtomType | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Int | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if other.same?(self)\n  return false\nend\nif b = other[rhs]?\nelse\n  return false\nend\n@atoms.any? do |a|\n  if (a === lhs) && (bond = a.bonds[b]?)\n    bond.order == (order || bond.order)\n  end\nend\n"}},{"html_id":"bonded?(other:self,lhs:Topology::AtomType|String,rhs:Topology::AtomType|String,order:Int?=nil):Bool-instance-method","name":"bonded?","doc":"Returns true if `self` is bonded to *other* through a bond between\n*lhs* and *rhs*, otherwise false.\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\n```\n\nOne can use atom names, atom types or elements:\n\n```\na, b = Topology::AtomType.new(\"C\"), Topology::AtomType.new(\"N\")\nresidues[0].bonded? residues[1], \"C\", \"N\"            # => true\nresidues[0].bonded? residues[1], a, b                # => true\nresidues[0].bonded? residues[1], a, PeriodicTable::N # => true\nresidues[0].bonded? residues[1], PeriodicTable::C, b # => true\nresidues[1].bonded? residues[2], a, b                # => true\nresidues[1].bonded? residues[3], a, b                # => false\nresidues[2].bonded? residues[3], a, b                # => false\n```\n\nNote that *lhs* and *rhs* are looked up in `self` and *other*,\nrespectively, i.e., the arguments are not interchangeable:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\" # => true\nresidues[0].bonded? residues[1], \"N\", \"C\" # => false\n```\n\nWhen atom names or atom types are specified, this method returns\nfalse if missing:\n\n```\nmissing_atom_t = Topology::AtomType.new(\"OZ5\")\nresidues[0].bonded? residues[1], \"CX1\", \"N\"             # => false\nresidues[0].bonded? residues[1], missing_atom_t, \"N\"    # => false\nresidues[0].bonded? residues[1], \"C\", PeriodicTable::Mg # => false\n```\n\nWhen elements are specified, all atoms of that element are tested:\n\n```\nresidues[1].bonded? residues[2], \"C\", PeriodicTable::N  # => true\nresidues[1].bonded? residues[2], \"SG\", PeriodicTable::C # => true\n```\n\nIf *order* is specified, it also check for bond order, otherwise\nit is ignored:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\"    # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 1 # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 2 # => false\n```","summary":"<p>Returns true if <code>self</code> is bonded to <em>other</em> through a bond between <em>lhs</em> and <em>rhs</em>, otherwise false.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"},{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"Topology::AtomType | String"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Topology::AtomType | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Int | ::Nil"}],"args_string":"(other : self, lhs : Topology::AtomType | String, rhs : Topology::AtomType | String, order : Int? = nil) : Bool","args_html":"(other : <span class=\"k\">self</span>, lhs : <a href=\"../Chem/Topology/AtomType.html\">Topology::AtomType</a> | String, rhs : <a href=\"../Chem/Topology/AtomType.html\">Topology::AtomType</a> | String, order : Int? = <span class=\"n\">nil</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":233,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L233"},"def":{"name":"bonded?","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"},{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"Topology::AtomType | String"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Topology::AtomType | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Int | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if other.same?(self)\n  return false\nend\nif (a = self[lhs]?) && (b = other[rhs]?)\nelse\n  return false\nend\nif bond = a.bonds[b]?\nelse\n  return false\nend\nbond.order == (order || bond.order)\n"}},{"html_id":"bonded?(other:self):Bool-instance-method","name":"bonded?","doc":"Returns true if `self` is bonded to *other*, otherwise false.\nResidues may be bonded by any two atoms.\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\nresidues[0].bonded?(residues[1]) # => true\nresidues[1].bonded?(residues[2]) # => true\nresidues[2].bonded?(residues[3]) # => false\nresidues[1].bonded?(residues[3]) # => true\n```","summary":"<p>Returns true if <code>self</code> is bonded to <em>other</em>, otherwise false.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":130,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L130"},"def":{"name":"bonded?","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if other.same?(self)\n  return false\nend\neach_atom.any? do |a1|\n  other.each_atom.any? do |a2|\n    a1.bonded?(to: a2)\n  end\nend\n"}},{"html_id":"bonded_residues(bond_t:Topology::BondType,forward_only:Bool=true,strict:Bool=true):Array(Residue)-instance-method","name":"bonded_residues","doc":"Returns residues bonded through *bond_t*.\n\nReturned residues are ordered by their chain id, residue number\nand insertion code if present (refer to #<=>).\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\nbond_t = Topology::BondType.new(\"C\", \"N\")\nresidues[0].bonded_residues(bond_t).map(&.name) # => [\"CYS\"]\nresidues[1].bonded_residues(bond_t).map(&.name) # => [\"THR\"]\nresidues[2].bonded_residues(bond_t).map(&.name) # => []\nresidues[3].bonded_residues(bond_t).map(&.name) # => []\n```\n\nIf *forward_only* is false, then bond directionality is ignored:\n\n```\nresidues[0].bonded_residues(bond_t, forward_only: true).map(&.name) # => [\"CYS\"]\nresidues[1].bonded_residues(bond_t, forward_only: true).map(&.name) # => [\"ALA\", \"THR\"]\nresidues[2].bonded_residues(bond_t, forward_only: true).map(&.name) # => [\"CYS\"]\nresidues[3].bonded_residues(bond_t, forward_only: true).map(&.name) # => []\n```\n\nIf *strict* is false, bond search checks elements only, and bond\norder is ignored (fuzzy search). In the following example, using\n`strict: false` makes that any C-N bond is accepted regardless of\natom names or bond order:\n\n```\nbond_t = Topology::BondType.new \"C\", \"NX\", order: 2\nresidues[0].bonded_residues(bond_t, strict: false).map(&.name) # => [\"CYS\"]\nresidues[1].bonded_residues(bond_t, strict: false).map(&.name) # => [\"THR\"]\nresidues[2].bonded_residues(bond_t, strict: false).map(&.name) # => []\nresidues[3].bonded_residues(bond_t, strict: false).map(&.name) # => []\n```","summary":"<p>Returns residues bonded through <em>bond_t</em>.</p>","abstract":false,"args":[{"name":"bond_t","doc":null,"default_value":"","external_name":"bond_t","restriction":"Topology::BondType"},{"name":"forward_only","doc":null,"default_value":"true","external_name":"forward_only","restriction":"Bool"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"}],"args_string":"(bond_t : Topology::BondType, forward_only : Bool = true, strict : Bool = true) : Array(Residue)","args_html":"(bond_t : <a href=\"../Chem/Topology/BondType.html\">Topology::BondType</a>, forward_only : Bool = <span class=\"n\">true</span>, strict : Bool = <span class=\"n\">true</span>) : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Residue.html\">Residue</a>)","location":{"filename":"src/chem/core/residue.cr","line_number":343,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L343"},"def":{"name":"bonded_residues","args":[{"name":"bond_t","doc":null,"default_value":"","external_name":"bond_t","restriction":"Topology::BondType"},{"name":"forward_only","doc":null,"default_value":"true","external_name":"forward_only","restriction":"Bool"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Residue)","visibility":"Public","body":"bonded_residues.select! do |residue|\n  bonded = bonded?(residue, bond_t, strict)\n  if forward_only\n  else\n    bonded || (bonded = residue.bonded?(self, bond_t, strict))\n  end\n  bonded\nend"}},{"html_id":"bonded_residues:Array(Residue)-instance-method","name":"bonded_residues","doc":"Returns bonded residues. Residues may be bonded through any atom.\n\nReturned residues are ordered by their chain id, residue number\nand insertion code if present (refer to #<=>).\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\nresidues[0].bonded_residues.map(&.name) # => [\"CYS\"]\nresidues[1].bonded_residues.map(&.name) # => [\"ALA\", \"THR\", \"JG7\"]\nresidues[2].bonded_residues.map(&.name) # => [\"CYS\"]\nresidues[3].bonded_residues.map(&.name) # => [\"CYS\"]\n```","summary":"<p>Returns bonded residues.</p>","abstract":false,"args":[],"args_string":" : Array(Residue)","args_html":" : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Residue.html\">Residue</a>)","location":{"filename":"src/chem/core/residue.cr","line_number":297,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L297"},"def":{"name":"bonded_residues","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Residue)","visibility":"Public","body":"residues = Set(Residue).new\n@atoms.each do |atom|\n  atom.each_bonded_atom do |other|\n    if other.residue == self\n    else\n      residues << other.residue\n    end\n  end\nend\nresidues.to_a.sort!\n"}},{"html_id":"chain:Chain-instance-method","name":"chain","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Chain","args_html":" : <a href=\"../Chem/Chain.html\">Chain</a>","location":{"filename":"src/chem/core/residue.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L18"},"def":{"name":"chain","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Chain","visibility":"Public","body":"@chain"}},{"html_id":"chain=(new_chain:Chain):Chain-instance-method","name":"chain=","doc":null,"summary":null,"abstract":false,"args":[{"name":"new_chain","doc":null,"default_value":"","external_name":"new_chain","restriction":"Chain"}],"args_string":"(new_chain : Chain) : Chain","args_html":"(new_chain : <a href=\"../Chem/Chain.html\">Chain</a>) : <a href=\"../Chem/Chain.html\">Chain</a>","location":{"filename":"src/chem/core/residue.cr","line_number":353,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L353"},"def":{"name":"chain=","args":[{"name":"new_chain","doc":null,"default_value":"","external_name":"new_chain","restriction":"Chain"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Chain","visibility":"Public","body":"@chain.delete(self)\n@chain = new_chain\nnew_chain << self\n"}},{"html_id":"cis?:Bool-instance-method","name":"cis?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":359,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L359"},"def":{"name":"cis?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(angle = omega?) ? angle.abs < 30 : false"}},{"html_id":"clear:self-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/residue.cr","line_number":363,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L363"},"def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"@atom_table.clear\n@atoms.clear\nself\n"}},{"html_id":"code(default:Char='X'):Char-instance-method","name":"code","doc":"Returns a single-letter code associated with the residue's type.\nIf the residue has no associated type or it doesn't have a code,\nthe method returns *default*.","summary":"<p>Returns a single-letter code associated with the residue's type.</p>","abstract":false,"args":[{"name":"default","doc":null,"default_value":"'X'","external_name":"default","restriction":"Char"}],"args_string":"(default : Char = 'X') : Char","args_html":"(default : <a href=\"../Char.html\">Char</a> = <span class=\"s\">&#39;X&#39;</span>) : <a href=\"../Char.html\">Char</a>","location":{"filename":"src/chem/core/residue.cr","line_number":372,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L372"},"def":{"name":"code","args":[{"name":"default","doc":null,"default_value":"'X'","external_name":"default","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char","visibility":"Public","body":"type.try(&.code) || default"}},{"html_id":"delete(atom:Atom):Atom?-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"}],"args_string":"(atom : Atom) : Atom?","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>) : <a href=\"../Chem/Atom.html\">Atom</a>?","location":{"filename":"src/chem/core/residue.cr","line_number":376,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L376"},"def":{"name":"delete","args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom | ::Nil","visibility":"Public","body":"atom = @atoms.delete(atom)\nif atom && (@atom_table[atom.name]?.same?(atom))\n  @atom_table.delete(atom.name)\nend\natom\n"}},{"html_id":"dextro?:Bool-instance-method","name":"dextro?","doc":"Returns `true` is residue is dextrorotatory, otherwise `false`.\n\nA residue is considered to be dextrorotatory if the improper angle\nC-CA-C-CB is negative.\n\nNote that this method returns `false` if the residue doesn't have\nany of such atoms, therefore it's not always equal to the inverse\nof `#levo?`.","summary":"<p>Returns <code>true</code> is residue is dextrorotatory, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":390,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L390"},"def":{"name":"dextro?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if (((n = self[\"N\"]?) && (ca = self[\"CA\"]?)) && (c = self[\"C\"]?)) && (cb = self[\"CB\"]?)\n  (Spatial.improper(n, ca, c, cb)) < 0\nelse\n  false\nend"}},{"html_id":"dig(name:String):Atom-instance-method","name":"dig","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom","args_html":"(name : String) : <a href=\"../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/residue.cr","line_number":398,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L398"},"def":{"name":"dig","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom","visibility":"Public","body":"self[name]"}},{"html_id":"dig?(name:String):Atom?-instance-method","name":"dig?","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom?","args_html":"(name : String) : <a href=\"../Chem/Atom.html\">Atom</a>?","location":{"filename":"src/chem/core/residue.cr","line_number":402,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L402"},"def":{"name":"dig?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom | ::Nil","visibility":"Public","body":"self[name]?"}},{"html_id":"dna?:Bool-instance-method","name":"dna?","doc":"Returns `true` if the residue is a DNA residue, else `false`.","summary":"<p>Returns <code>true</code> if the residue is a DNA residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":597,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L597"},"def":{"name":"dna?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@kind == Kind::DNA"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Atom)","args_html":" : Iterator(<a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/core/residue.cr","line_number":406,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L406"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Atom)","visibility":"Public","body":"@atoms.each"}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Atom -> )","args_html":"(&block : <a href=\"../Chem/Atom.html\">Atom</a> -> )","location":{"filename":"src/chem/core/residue.cr","line_number":410,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L410"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Atom ->)"},"return_type":"","visibility":"Public","body":"@atoms.each do |atom|\n  yield atom\nend"}},{"html_id":"has_backbone?:Bool-instance-method","name":"has_backbone?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":416,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L416"},"def":{"name":"has_backbone?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(((!self[\"N\"]?.nil?) && (!self[\"CA\"]?.nil?)) && (!self[\"C\"]?.nil?)) && (!self[\"O\"]?.nil?)"}},{"html_id":"het?:Bool-instance-method","name":"het?","doc":"Returns `true` if the residue is a non-standard (HET) residue,\nelse `false`.","summary":"<p>Returns <code>true</code> if the residue is a non-standard (HET) residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":422,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L422"},"def":{"name":"het?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!protein?"}},{"html_id":"hlxparams:Spatial::HlxParams?-instance-method","name":"hlxparams","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Spatial::HlxParams?","args_html":" : <a href=\"../Chem/Spatial/HlxParams.html\">Spatial::HlxParams</a>?","location":{"filename":"src/chem/core/residue.cr","line_number":426,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L426"},"def":{"name":"hlxparams","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Spatial::HlxParams | ::Nil","visibility":"Public","body":"Spatial.hlxparams(self, structure.lattice)"}},{"html_id":"insertion_code:Char?-instance-method","name":"insertion_code","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Char?","args_html":" : <a href=\"../Char.html\">Char</a>?","location":{"filename":"src/chem/core/residue.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L19"},"def":{"name":"insertion_code","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char | ::Nil","visibility":"Public","body":"@insertion_code"}},{"html_id":"insertion_code=(insertion_code:Char?):Char?-instance-method","name":"insertion_code=","doc":null,"summary":null,"abstract":false,"args":[{"name":"insertion_code","doc":null,"default_value":"","external_name":"insertion_code","restriction":"Char | ::Nil"}],"args_string":"(insertion_code : Char?) : Char?","args_html":"(insertion_code : <a href=\"../Char.html\">Char</a>?) : <a href=\"../Char.html\">Char</a>?","location":{"filename":"src/chem/core/residue.cr","line_number":430,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L430"},"def":{"name":"insertion_code=","args":[{"name":"insertion_code","doc":null,"default_value":"","external_name":"insertion_code","restriction":"Char | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char | ::Nil","visibility":"Public","body":"@insertion_code = insertion_code\n@chain.reset_cache\n@insertion_code\n"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Appends a String representation of this object\nwhich includes its class name, its object address\nand the values of all instance variables.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).inspect # => #<Person:0x10fd31f20 @name=\"John\", @age=32>\n```","summary":"<p>Appends a String representation of this object which includes its class name, its object address and the values of all instance variables.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/core/residue.cr","line_number":436,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L436"},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"io << \"<Residue \"\nto_s(io)\nio << '>'\n"}},{"html_id":"ion?:Bool-instance-method","name":"ion?","doc":"Returns `true` if the residue is a ion residue, else `false`.","summary":"<p>Returns <code>true</code> if the residue is a ion residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":597,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L597"},"def":{"name":"ion?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@kind == Kind::Ion"}},{"html_id":"kind:Kind-instance-method","name":"kind","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Kind","args_html":" : <a href=\"../Chem/Residue/Kind.html\">Kind</a>","location":{"filename":"src/chem/core/residue.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L20"},"def":{"name":"kind","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Kind","visibility":"Public","body":"@kind"}},{"html_id":"kind=(kind:Kind)-instance-method","name":"kind=","doc":null,"summary":null,"abstract":false,"args":[{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Kind"}],"args_string":"(kind : Kind)","args_html":"(kind : <a href=\"../Chem/Residue/Kind.html\">Kind</a>)","location":{"filename":"src/chem/core/residue.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L20"},"def":{"name":"kind=","args":[{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Kind"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@kind = kind"}},{"html_id":"levo?:Bool-instance-method","name":"levo?","doc":"Returns `true` is residue is levorotatory, otherwise `false`.\n\nA residue is considered to be levorotatory if the improper angle\nC-CA-C-CB is positive.\n\nNote that this method returns `false` if the residue doesn't have\nany of such atoms, therefore it's not always equal to the inverse\nof `#dextro?`.","summary":"<p>Returns <code>true</code> is residue is levorotatory, otherwise <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":450,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L450"},"def":{"name":"levo?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if (((n = self[\"N\"]?) && (ca = self[\"CA\"]?)) && (c = self[\"C\"]?)) && (cb = self[\"CB\"]?)\n  (Spatial.improper(n, ca, c, cb)) > 0\nelse\n  false\nend"}},{"html_id":"membrane?:Bool-instance-method","name":"membrane?","doc":"Returns `true` if the residue is a membrane residue, else `false`.","summary":"<p>Returns <code>true</code> if the residue is a membrane residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":597,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L597"},"def":{"name":"membrane?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@kind == Kind::Membrane"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/residue.cr","line_number":458,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L458"},"def":{"name":"n_atoms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@atoms.size"}},{"html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/core/residue.cr","line_number":21,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L21"},"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"name=(str:String):String-instance-method","name":"name=","doc":null,"summary":null,"abstract":false,"args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"args_string":"(str : String) : String","args_html":"(str : String) : String","location":{"filename":"src/chem/core/residue.cr","line_number":462,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L462"},"def":{"name":"name=","args":[{"name":"str","doc":null,"default_value":"","external_name":"str","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name = str\nassign_kind_from_templates\nstr\n"}},{"html_id":"number:Int32-instance-method","name":"number","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/residue.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L22"},"def":{"name":"number","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@number"}},{"html_id":"number=(number:Int32):Int32-instance-method","name":"number=","doc":null,"summary":null,"abstract":false,"args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"}],"args_string":"(number : Int32) : Int32","args_html":"(number : Int32) : Int32","location":{"filename":"src/chem/core/residue.cr","line_number":468,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L468"},"def":{"name":"number=","args":[{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@number = number\n@chain.reset_cache\n@number\n"}},{"html_id":"omega:Float64-instance-method","name":"omega","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core/residue.cr","line_number":499,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L499"},"def":{"name":"omega","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"omega? || (raise(Error.new(\"#{self} is terminal\")))"}},{"html_id":"omega?:Float64?-instance-method","name":"omega?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64?","args_html":" : Float64?","location":{"filename":"src/chem/core/residue.cr","line_number":503,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L503"},"def":{"name":"omega?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"if (((ca1 = pred.try(&.[]?(\"CA\"))) && (c = pred.try(&.[]?(\"C\")))) && (n = self[\"N\"]?)) && (ca2 = self[\"CA\"]?)\n  Spatial.dihedral(ca1, c, n, ca2, structure.lattice)\nend"}},{"html_id":"other?:Bool-instance-method","name":"other?","doc":"Returns `true` if the residue is an unknown residue, else `false`.","summary":"<p>Returns <code>true</code> if the residue is an unknown residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":597,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L597"},"def":{"name":"other?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@kind == Kind::Other"}},{"html_id":"phi:Float64-instance-method","name":"phi","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core/residue.cr","line_number":512,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L512"},"def":{"name":"phi","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"phi? || (raise(Error.new(\"#{self} is terminal\")))"}},{"html_id":"phi?:Float64?-instance-method","name":"phi?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64?","args_html":" : Float64?","location":{"filename":"src/chem/core/residue.cr","line_number":516,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L516"},"def":{"name":"phi?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"if (((ca1 = pred.try(&.[]?(\"C\"))) && (n = self[\"N\"]?)) && (ca2 = self[\"CA\"]?)) && (c = self[\"C\"]?)\n  Spatial.dihedral(ca1, n, ca2, c, structure.lattice)\nend"}},{"html_id":"polymer?:Bool-instance-method","name":"polymer?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":563,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L563"},"def":{"name":"polymer?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!(!((protein? || dna?) || type.try(&.monomer?)))"}},{"html_id":"pred(strict:Bool=true,use_numbering:Bool=true):Residue?-instance-method","name":"pred","doc":"Returns the preceding residue if exists, otherwise `nil`.\n\nIt uses the link bond type of the associated residue type, if\npresent, to search for the previous residue. Thus, link bond\ndetermines the direction, e.g., C(i-1)-N(i). Be aware that atom\ntypes must match exactly to find a residue unless *strict* is\n`false`.\n\nOtherwise, it returns a bonded residue whose number and insertion\ncode come just before those of `self`. This fallback can be\ndisabled by setting *use_numbering* to `false`.\n\nNote that when multiple residues can be connected to the same\nresidue (e.g., branched polymers), it returns the last residue\namong them.","summary":"<p>Returns the preceding residue if exists, otherwise <code>nil</code>.</p>","abstract":false,"args":[{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"use_numbering","doc":null,"default_value":"true","external_name":"use_numbering","restriction":"Bool"}],"args_string":"(strict : Bool = true, use_numbering : Bool = true) : Residue?","args_html":"(strict : Bool = <span class=\"n\">true</span>, use_numbering : Bool = <span class=\"n\">true</span>) : <a href=\"../Chem/Residue.html\">Residue</a>?","location":{"filename":"src/chem/core/residue.cr","line_number":540,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L540"},"def":{"name":"pred","args":[{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"use_numbering","doc":null,"default_value":"true","external_name":"use_numbering","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue | ::Nil","visibility":"Public","body":"if bond_t = type.try(&.link_bond).try(&.inverse)\n  residues = bonded_residues(bond_t)\n  if residues.empty? && (!strict)\n    residues = bonded_residues(bond_t, strict: false)\n  end\n  residues.sort!.last?\nelse\n  if use_numbering\n    bonded_residues.select!(&.<(self)).sort!.last?\n  end\nend"}},{"html_id":"protein?:Bool-instance-method","name":"protein?","doc":"Returns `true` if the residue is a protein residue, else `false`.","summary":"<p>Returns <code>true</code> if the residue is a protein residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":597,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L597"},"def":{"name":"protein?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@kind == Kind::Protein"}},{"html_id":"psi:Float64-instance-method","name":"psi","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core/residue.cr","line_number":550,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L550"},"def":{"name":"psi","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"psi? || (raise(Error.new(\"#{self} is terminal\")))"}},{"html_id":"psi?:Float64?-instance-method","name":"psi?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64?","args_html":" : Float64?","location":{"filename":"src/chem/core/residue.cr","line_number":554,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L554"},"def":{"name":"psi?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"if (((n1 = self[\"N\"]?) && (ca = self[\"CA\"]?)) && (c = self[\"C\"]?)) && (n2 = succ.try(&.[]?(\"N\")))\n  Spatial.dihedral(n1, ca, c, n2, structure.lattice)\nend"}},{"html_id":"ramachandran_angles:Tuple(Float64,Float64)-instance-method","name":"ramachandran_angles","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Tuple(Float64, Float64)","args_html":" : Tuple(Float64, Float64)","location":{"filename":"src/chem/core/residue.cr","line_number":567,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L567"},"def":{"name":"ramachandran_angles","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(Float64, Float64)","visibility":"Public","body":"{phi, psi}"}},{"html_id":"sec:Protein::SecondaryStructure-instance-method","name":"sec","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Protein::SecondaryStructure","args_html":" : <a href=\"../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>","location":{"filename":"src/chem/core/residue.cr","line_number":23,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L23"},"def":{"name":"sec","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Protein::SecondaryStructure","visibility":"Public","body":"@sec"}},{"html_id":"sec=(sec:Protein::SecondaryStructure)-instance-method","name":"sec=","doc":null,"summary":null,"abstract":false,"args":[{"name":"sec","doc":null,"default_value":"","external_name":"sec","restriction":"Protein::SecondaryStructure"}],"args_string":"(sec : Protein::SecondaryStructure)","args_html":"(sec : <a href=\"../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>)","location":{"filename":"src/chem/core/residue.cr","line_number":23,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L23"},"def":{"name":"sec=","args":[{"name":"sec","doc":null,"default_value":"","external_name":"sec","restriction":"Protein::SecondaryStructure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@sec = sec"}},{"html_id":"solvent?:Bool-instance-method","name":"solvent?","doc":"Returns `true` if the residue is a solvent residue, else `false`.","summary":"<p>Returns <code>true</code> if the residue is a solvent residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":597,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L597"},"def":{"name":"solvent?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"@kind == Kind::Solvent"}},{"html_id":"structure(*args,**options)-instance-method","name":"structure","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/residue.cr","line_number":26,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L26"},"def":{"name":"structure","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@chain.structure(*args, **options)"}},{"html_id":"structure(*args,**options,&)-instance-method","name":"structure","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/residue.cr","line_number":26,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L26"},"def":{"name":"structure","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@chain.structure(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"succ(strict:Bool=true,use_numbering:Bool=true):Residue?-instance-method","name":"succ","doc":"Returns the following residue if exists, otherwise `nil`.\n\nIt uses the link bond type of the associated residue type, if\npresent, to search for the next residue. Thus, link bond\ndetermines the direction, e.g., C(i)-N(i+1). Be aware that atom\ntypes must match exactly to find a residue unless *strict* is\n`false`.\n\nOtherwise, it returns a bonded residue whose number and insertion\ncode come just after those of `self`. This fallback can be\ndisabled by setting *use_numbering* to `false`.\n\nNote that when multiple residues can be connected to the same\nresidue (e.g., branched polymers), it returns the first residue\namong them.","summary":"<p>Returns the following residue if exists, otherwise <code>nil</code>.</p>","abstract":false,"args":[{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"use_numbering","doc":null,"default_value":"true","external_name":"use_numbering","restriction":"Bool"}],"args_string":"(strict : Bool = true, use_numbering : Bool = true) : Residue?","args_html":"(strict : Bool = <span class=\"n\">true</span>, use_numbering : Bool = <span class=\"n\">true</span>) : <a href=\"../Chem/Residue.html\">Residue</a>?","location":{"filename":"src/chem/core/residue.cr","line_number":489,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L489"},"def":{"name":"succ","args":[{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"use_numbering","doc":null,"default_value":"true","external_name":"use_numbering","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue | ::Nil","visibility":"Public","body":"if bond_t = type.try(&.link_bond)\n  residues = bonded_residues(bond_t)\n  if residues.empty? && (!strict)\n    residues = bonded_residues(bond_t, strict: false)\n  end\n  residues.sort!.first?\nelse\n  if use_numbering\n    bonded_residues.select!(&.>(self)).sort!.first?\n  end\nend"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/core/residue.cr","line_number":571,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L571"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << chain.id\nio << ':'\nio << @name\nio << @number\nio << @insertion_code\n"}},{"html_id":"trans?:Bool-instance-method","name":"trans?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":579,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L579"},"def":{"name":"trans?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(angle = omega?) ? angle.abs > 150 : false"}},{"html_id":"type:Topology::ResidueType?-instance-method","name":"type","doc":"Returns associated residue type if registered, otherwise nil.\n\nThe type of a residue is fetched by its name.","summary":"<p>Returns associated residue type if registered, otherwise nil.</p>","abstract":false,"args":[],"args_string":" : Topology::ResidueType?","args_html":" : <a href=\"../Chem/Topology/ResidueType.html\">Topology::ResidueType</a>?","location":{"filename":"src/chem/core/residue.cr","line_number":586,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L586"},"def":{"name":"type","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Topology::ResidueType | ::Nil","visibility":"Public","body":"Topology::Templates[@name]?"}},{"html_id":"water?:Bool-instance-method","name":"water?","doc":"Returns `true` if the residue is a water residue, else `false`.\nThis is done by checking if the associated residue type (if any)\ncorrespond to the water template.","summary":"<p>Returns <code>true</code> if the residue is a water residue, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":593,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L593"},"def":{"name":"water?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"type.try do |__arg11|\n  __arg11.description.downcase\nend == \"water\""}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/Residue/Kind","path":"Chem/Residue/Kind.html","kind":"enum","full_name":"Chem::Residue::Kind","name":"Kind","abstract":false,"superclass":null,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/residue.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L6"}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"Protein","name":"Protein","value":"0","doc":null,"summary":null},{"id":"DNA","name":"DNA","value":"1","doc":null,"summary":null},{"id":"Ion","name":"Ion","value":"2","doc":null,"summary":null},{"id":"Solvent","name":"Solvent","value":"3","doc":null,"summary":null},{"id":"Membrane","name":"Membrane","value":"4","doc":null,"summary":null},{"id":"Other","name":"Other","value":"5","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Residue","kind":"class","full_name":"Chem::Residue","name":"Residue"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"dna?-instance-method","name":"dna?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/residue.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L8"},"def":{"name":"dna?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == DNA"}},{"html_id":"ion?-instance-method","name":"ion?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/residue.cr","line_number":9,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L9"},"def":{"name":"ion?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Ion"}},{"html_id":"membrane?-instance-method","name":"membrane?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/residue.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L11"},"def":{"name":"membrane?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Membrane"}},{"html_id":"other?-instance-method","name":"other?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/residue.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L12"},"def":{"name":"other?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Other"}},{"html_id":"protein?-instance-method","name":"protein?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/residue.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L7"},"def":{"name":"protein?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Protein"}},{"html_id":"solvent?-instance-method","name":"solvent?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/residue.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue.cr#L10"},"def":{"name":"solvent?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == Solvent"}}],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/ResidueCollection","path":"Chem/ResidueCollection.html","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/core/residue_collection.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"chem.cr/Chem/AtomView","kind":"struct","full_name":"Chem::AtomView","name":"AtomView"},{"html_id":"chem.cr/Chem/Chain","kind":"class","full_name":"Chem::Chain","name":"Chain"},{"html_id":"chem.cr/Chem/ChainView","kind":"struct","full_name":"Chem::ChainView","name":"ChainView"},{"html_id":"chem.cr/Chem/ResidueView","kind":"struct","full_name":"Chem::ResidueView","name":"ResidueView"},{"html_id":"chem.cr/Chem/Structure","kind":"class","full_name":"Chem::Structure","name":"Structure"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"each_residue:Iterator(Residue)-instance-method","name":"each_residue","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Iterator(Residue)","args_html":" : Iterator(<a href=\"../Chem/Residue.html\">Residue</a>)","location":{"filename":"src/chem/core/residue_collection.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L3"},"def":{"name":"each_residue","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Residue)","visibility":"Public","body":""}},{"html_id":"each_residue(&block:Residue->)-instance-method","name":"each_residue","doc":null,"summary":null,"abstract":true,"args":[],"args_string":"(&block : Residue -> )","args_html":"(&block : <a href=\"../Chem/Residue.html\">Residue</a> -> )","location":{"filename":"src/chem/core/residue_collection.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L4"},"def":{"name":"each_residue","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Residue ->)"},"return_type":"","visibility":"Public","body":""}},{"html_id":"each_residue_fragment(&:ResidueView->):Nil-instance-method","name":"each_residue_fragment","doc":"Iterates over residue-wise fragments.\n\nA fragment is an array of inter-connected residues. Fragments are\ndinamically computed by iterating over `Residue#bonded_residues`\nof the selected residues.\n\nNOTE: fragments are scoped to the current list of residues such\nthat bonded residues not contained in the list are omitted, e.g.,\ngiven the list of residues [1, 2, 3, 4, 7, 8] belonging to the\nsequence 1-2-3-4-5-6 7-8-9, this method will return [[1, 2, 3, 4],\n[7, 8]], not [[1, 2, 3, 4, 5, 6], [7, 8, 9]].","summary":"<p>Iterates over residue-wise fragments.</p>","abstract":false,"args":[],"args_string":"(& : ResidueView -> ) : Nil","args_html":"(& : <a href=\"../Chem/ResidueView.html\">ResidueView</a> -> ) : Nil","location":{"filename":"src/chem/core/residue_collection.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L18"},"def":{"name":"each_residue_fragment","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(ResidueView ->)"},"return_type":"Nil","visibility":"Public","body":"residues = (Set(Residue).new(n_residues)).concat(each_residue)\neach_residue do |residue|\n  if residue.in?(residues)\n  else\n    next\n  end\n  residues.delete(residue)\n  fragment = [residue]\n  fragment.each do |residue|\n    residue.bonded_residues.each do |residue|\n      if residue.in?(residues)\n      else\n        next\n      end\n      fragment << residue\n      residues.delete(residue)\n    end\n  end\n  yield ResidueView.new(fragment.sort!)\nend\n"}},{"html_id":"each_secondary_structure(reuse:Bool|Array(Residue)=false,strict:Bool=true,handedness:Bool=true):Iterator(ResidueView)-instance-method","name":"each_secondary_structure","doc":"Returns an iterator over secondary structure elements (SSEs).\n\nSSEs are defined as segments of consecutive, bonded residues that\nhave the same secondary structure. If `strict` is `false`,\nresidues are grouped by their secondary structure type. If\n`handedness` is `false`, handedness is not taken into account when\n`strict` is `false`. See `Protein::SecondaryStructure#equals?`.\n\nLet's say a `structure` has 25 residues with two beta strands\nspanning residues 3-12 and 18-23, then:\n\n```\niter = structure.each_secondary_structure\niter.next.map &.number # => [1, 2]\niter.next.map &.number # => [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\niter.next.map &.number # => [13, 14, 15, 16, 17]\niter.next.map &.number # => [18, 19, 20, 21, 22, 23]\niter.next.map &.number # => [24, 25]\niter.next              # => Iterator::Stop::INSTANCE\n```\n\nNote that non-protein residues are skipped over.\n\nBy default, a new array is created and yielded for each slice when\ninvoking `next`.\n* If *reuse* is `false`, a new array is created for each chunk.\n* If *reuse* is `true`, an array is created once and reused.\n* If *reuse* is an `Array`, it will be reused instead.\n\nThe latter can be used to prevent many memory allocations when\neach slice of interest is to be used in a read-only fashion.","summary":"<p>Returns an iterator over secondary structure elements (SSEs).</p>","abstract":false,"args":[{"name":"reuse","doc":null,"default_value":"false","external_name":"reuse","restriction":"Bool | Array(Residue)"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","doc":null,"default_value":"true","external_name":"handedness","restriction":"Bool"}],"args_string":"(reuse : Bool | Array(Residue) = false, strict : Bool = true, handedness : Bool = true) : Iterator(ResidueView)","args_html":"(reuse : Bool | <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Residue.html\">Residue</a>) = <span class=\"n\">false</span>, strict : Bool = <span class=\"n\">true</span>, handedness : Bool = <span class=\"n\">true</span>) : Iterator(<a href=\"../Chem/ResidueView.html\">ResidueView</a>)","location":{"filename":"src/chem/core/residue_collection.cr","line_number":66,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L66"},"def":{"name":"each_secondary_structure","args":[{"name":"reuse","doc":null,"default_value":"false","external_name":"reuse","restriction":"Bool | Array(Residue)"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","doc":null,"default_value":"true","external_name":"handedness","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(ResidueView)","visibility":"Public","body":"(each_residue.select(&.protein?).chunk_while(reuse) do |i, j|\n  (i.sec.equals?(j.sec, strict, handedness)) && (i.bonded?(j))\nend).map do |residues|\n  ResidueView.new(residues)\nend"}},{"html_id":"each_secondary_structure(reuse:Bool|Array(Residue)=false,strict:Bool=true,handedness:Bool=true,&:ResidueView,Protein::SecondaryStructure->):Nil-instance-method","name":"each_secondary_structure","doc":"Iterates over secondary structure elements (SSEs), yielding both\nthe residues and secondary structure.\n\nSSEs are defined as segments of consecutive, bonded residues that\nhave the same secondary structure. If `strict` is `false`,\nresidues are grouped by their secondary structure type. If\n`handedness` is `false`, handedness is not taken into account when\n`strict` is `false`. See `Protein::SecondaryStructure#equals?`.\n\nLet's say a `structure` has 25 residues with two beta strands\nspanning residues 3-12 and 18-23, then:\n\n```\nstructure.each_secondary_structure do |sec, ary|\n  puts \"#{sec.to_s} at #{ary[0].number}..#{ary[-1].number}\"\nend\n```\n\nPrints:\n\n```text\nNone at 1..2\nBetaStrand at 3..12\nNone at 13..17\nBetaStrand at 18..23\nNone at 24..25\n```\n\nNote that non-protein residues are skipped over.\n\nBy default, a new array is created and yielded for each slice when\ninvoking `next`.\n* If *reuse* is `false`, a new array is created for each chunk.\n* If *reuse* is `true`, an array is created once and reused.\n* If *reuse* is an `Array`, it will be reused instead.\n\nThe latter can be used to prevent many memory allocations when\neach slice of interest is to be used in a read-only fashion.","summary":"<p>Iterates over secondary structure elements (SSEs), yielding both the residues and secondary structure.</p>","abstract":false,"args":[{"name":"reuse","doc":null,"default_value":"false","external_name":"reuse","restriction":"Bool | Array(Residue)"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","doc":null,"default_value":"true","external_name":"handedness","restriction":"Bool"}],"args_string":"(reuse : Bool | Array(Residue) = false, strict : Bool = true, handedness : Bool = true, & : ResidueView, Protein::SecondaryStructure -> ) : Nil","args_html":"(reuse : Bool | <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Residue.html\">Residue</a>) = <span class=\"n\">false</span>, strict : Bool = <span class=\"n\">true</span>, handedness : Bool = <span class=\"n\">true</span>, & : <a href=\"../Chem/ResidueView.html\">ResidueView</a>, <a href=\"../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a> -> ) : Nil","location":{"filename":"src/chem/core/residue_collection.cr","line_number":117,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L117"},"def":{"name":"each_secondary_structure","args":[{"name":"reuse","doc":null,"default_value":"false","external_name":"reuse","restriction":"Bool | Array(Residue)"},{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","doc":null,"default_value":"true","external_name":"handedness","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(ResidueView, Protein::SecondaryStructure ->)"},"return_type":"Nil","visibility":"Public","body":"accum = reuse.is_a?(Array) ? reuse : [] of Residue\neach_residue do |j|\n  if j.protein?\n  else\n    next\n  end\n  if (i = accum.last?) && ((!(i.sec.equals?(j.sec, strict, handedness))) || (!(i.bonded?(j))))\n    yield ResidueView.new(accum), accum[0].sec\n    reuse ? accum.clear : (    accum = [] of Residue)\n  end\n  accum << j\nend\nif accum.empty?\nelse\n  yield ResidueView.new(accum), accum[0].sec\nend\n"}},{"html_id":"link_bond:Topology::BondType?-instance-method","name":"link_bond","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Topology::BondType?","args_html":" : <a href=\"../Chem/Topology/BondType.html\">Topology::BondType</a>?","location":{"filename":"src/chem/core/residue_collection.cr","line_number":136,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L136"},"def":{"name":"link_bond","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Topology::BondType | ::Nil","visibility":"Public","body":"each_residue.compact_map do |__arg1|\n  __arg1.type.try(&.link_bond)\nend.first?"}},{"html_id":"n_residues:Int32-instance-method","name":"n_residues","doc":null,"summary":null,"abstract":true,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/residue_collection.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L5"},"def":{"name":"n_residues","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":""}},{"html_id":"reset_secondary_structure:self-instance-method","name":"reset_secondary_structure","doc":"Sets secondary structure of every residue to none.","summary":"<p>Sets secondary structure of every residue to none.</p>","abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/residue_collection.cr","line_number":141,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L141"},"def":{"name":"reset_secondary_structure","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"each_residue(&.sec = :none)\nself\n"}},{"html_id":"residue_fragments:Array(ResidueView)-instance-method","name":"residue_fragments","doc":"Returns residue-wise fragments. See #each_residue_fragment.","summary":"<p>Returns residue-wise fragments.</p>","abstract":false,"args":[],"args_string":" : Array(ResidueView)","args_html":" : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/ResidueView.html\">ResidueView</a>)","location":{"filename":"src/chem/core/residue_collection.cr","line_number":147,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L147"},"def":{"name":"residue_fragments","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(ResidueView)","visibility":"Public","body":"fragments = [] of ResidueView\neach_residue_fragment do |fragment|\n  fragments << fragment\nend\nfragments\n"}},{"html_id":"residues:ResidueView-instance-method","name":"residues","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ResidueView","args_html":" : <a href=\"../Chem/ResidueView.html\">ResidueView</a>","location":{"filename":"src/chem/core/residue_collection.cr","line_number":153,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L153"},"def":{"name":"residues","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ResidueView","visibility":"Public","body":"residues = Array(Residue).new(n_residues)\neach_residue do |residue|\n  residues << residue\nend\nResidueView.new(residues)\n"}},{"html_id":"sec=(seclist:Array(Protein::SecondaryStructure)):Array(Protein::SecondaryStructure)-instance-method","name":"sec=","doc":null,"summary":null,"abstract":false,"args":[{"name":"seclist","doc":null,"default_value":"","external_name":"seclist","restriction":"Array(Protein::SecondaryStructure)"}],"args_string":"(seclist : Array(Protein::SecondaryStructure)) : Array(Protein::SecondaryStructure)","args_html":"(seclist : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>)) : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>)","location":{"filename":"src/chem/core/residue_collection.cr","line_number":164,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L164"},"def":{"name":"sec=","args":[{"name":"seclist","doc":null,"default_value":"","external_name":"seclist","restriction":"Array(Protein::SecondaryStructure)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Protein::SecondaryStructure)","visibility":"Public","body":"if seclist.size != n_residues\n  raise(ArgumentError.new(\"Mismatch secondary structure list\"))\nend\neach_residue.zip(seclist) do |res, sec|\n  res.sec = sec\nend\nseclist\n"}},{"html_id":"sec=(sec:Protein::SecondaryStructure):Protein::SecondaryStructure-instance-method","name":"sec=","doc":null,"summary":null,"abstract":false,"args":[{"name":"sec","doc":null,"default_value":"","external_name":"sec","restriction":"Protein::SecondaryStructure"}],"args_string":"(sec : Protein::SecondaryStructure) : Protein::SecondaryStructure","args_html":"(sec : <a href=\"../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>) : <a href=\"../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>","location":{"filename":"src/chem/core/residue_collection.cr","line_number":159,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L159"},"def":{"name":"sec=","args":[{"name":"sec","doc":null,"default_value":"","external_name":"sec","restriction":"Protein::SecondaryStructure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Protein::SecondaryStructure","visibility":"Public","body":"each_residue(&.sec = sec)\nsec\n"}},{"html_id":"secondary_structures(strict:Bool=true,handedness:Bool=true):Array(ResidueView)-instance-method","name":"secondary_structures","doc":null,"summary":null,"abstract":false,"args":[{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","doc":null,"default_value":"true","external_name":"handedness","restriction":"Bool"}],"args_string":"(strict : Bool = true, handedness : Bool = true) : Array(ResidueView)","args_html":"(strict : Bool = <span class=\"n\">true</span>, handedness : Bool = <span class=\"n\">true</span>) : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/ResidueView.html\">ResidueView</a>)","location":{"filename":"src/chem/core/residue_collection.cr","line_number":170,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_collection.cr#L170"},"def":{"name":"secondary_structures","args":[{"name":"strict","doc":null,"default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","doc":null,"default_value":"true","external_name":"handedness","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(ResidueView)","visibility":"Public","body":"elements = [] of ResidueView\neach_secondary_structure(strict: strict, handedness: handedness) do |ele|\n  elements << ele\nend\nelements\n"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/ResidueView","path":"Chem/ResidueView.html","kind":"struct","full_name":"Chem::ResidueView","name":"ResidueView","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ArrayView","kind":"module","full_name":"Chem::ArrayView","name":"ArrayView"},{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/residue_view.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/ArrayView","kind":"module","full_name":"Chem::ArrayView","name":"ArrayView"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"[](serial:Int,ins_code:Char):Residue?-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int"},{"name":"ins_code","doc":null,"default_value":"","external_name":"ins_code","restriction":"Char"}],"args_string":"(serial : Int, ins_code : Char) : Residue?","args_html":"(serial : Int, ins_code : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Residue.html\">Residue</a>?","location":{"filename":"src/chem/core/residue_view.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L8"},"def":{"name":"[]","args":[{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int"},{"name":"ins_code","doc":null,"default_value":"","external_name":"ins_code","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue | ::Nil","visibility":"Public","body":"self[serial, ins_code]? || (raise(IndexError.new))"}},{"html_id":"[](*,serial:Int):Residue-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int"}],"args_string":"(*, serial : Int) : Residue","args_html":"(*, serial : Int) : <a href=\"../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/residue_view.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L12"},"def":{"name":"[]","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Residue","visibility":"Public","body":"(self[serial: serial]?) || (raise(IndexError.new))"}},{"html_id":"[]?(serial:Int,ins_code:Char):Residue?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int"},{"name":"ins_code","doc":null,"default_value":"","external_name":"ins_code","restriction":"Char"}],"args_string":"(serial : Int, ins_code : Char) : Residue?","args_html":"(serial : Int, ins_code : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Residue.html\">Residue</a>?","location":{"filename":"src/chem/core/residue_view.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L16"},"def":{"name":"[]?","args":[{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int"},{"name":"ins_code","doc":null,"default_value":"","external_name":"ins_code","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue | ::Nil","visibility":"Public","body":"find do |res|\n  (res.number == serial) && (res.insertion_code == ins_code)\nend"}},{"html_id":"[]?(*,serial:Int):Residue?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int"}],"args_string":"(*, serial : Int) : Residue?","args_html":"(*, serial : Int) : <a href=\"../Chem/Residue.html\">Residue</a>?","location":{"filename":"src/chem/core/residue_view.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L20"},"def":{"name":"[]?","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"Residue | ::Nil","visibility":"Public","body":"find do |__arg0|\n  __arg0.number == serial\nend"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Atom)","args_html":" : Iterator(<a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/core/residue_view.cr","line_number":24,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L24"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Atom)","visibility":"Public","body":"Iterator.chain(map(&.each_atom))"}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Atom -> )","args_html":"(&block : <a href=\"../Chem/Atom.html\">Atom</a> -> )","location":{"filename":"src/chem/core/residue_view.cr","line_number":28,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L28"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Atom ->)"},"return_type":"","visibility":"Public","body":"each do |residue|\n  residue.each_atom do |atom|\n    yield atom\n  end\nend"}},{"html_id":"each_chain:Iterator(Chain)-instance-method","name":"each_chain","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Chain)","args_html":" : Iterator(<a href=\"../Chem/Chain.html\">Chain</a>)","location":{"filename":"src/chem/core/residue_view.cr","line_number":36,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L36"},"def":{"name":"each_chain","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Chain)","visibility":"Public","body":"each.map(&.chain).uniq"}},{"html_id":"each_chain(&block:Chain->)-instance-method","name":"each_chain","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Chain -> )","args_html":"(&block : <a href=\"../Chem/Chain.html\">Chain</a> -> )","location":{"filename":"src/chem/core/residue_view.cr","line_number":40,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L40"},"def":{"name":"each_chain","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Chain ->)"},"return_type":"","visibility":"Public","body":"chains = Set(Chain).new\neach do |residue|\n  if residue.chain.in?(chains)\n  else\n    yield residue.chain\n  end\n  chains << residue.chain\nend\n"}},{"html_id":"each_residue:Iterator(Residue)-instance-method","name":"each_residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Residue)","args_html":" : Iterator(<a href=\"../Chem/Residue.html\">Residue</a>)","location":{"filename":"src/chem/core/residue_view.cr","line_number":48,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L48"},"def":{"name":"each_residue","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Residue)","visibility":"Public","body":"each"}},{"html_id":"each_residue(&block:Residue->)-instance-method","name":"each_residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Residue -> )","args_html":"(&block : <a href=\"../Chem/Residue.html\">Residue</a> -> )","location":{"filename":"src/chem/core/residue_view.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L52"},"def":{"name":"each_residue","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Residue ->)"},"return_type":"","visibility":"Public","body":"each do |residue|\n  yield residue\nend"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/residue_view.cr","line_number":58,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L58"},"def":{"name":"n_atoms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"sum(&.n_atoms)"}},{"html_id":"n_chains:Int32-instance-method","name":"n_chains","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/residue_view.cr","line_number":62,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L62"},"def":{"name":"n_chains","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"each_chain.sum do\n  1\nend"}},{"html_id":"n_residues:Int32-instance-method","name":"n_residues","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/residue_view.cr","line_number":66,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L66"},"def":{"name":"n_residues","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"size"}},{"html_id":"residues:self-instance-method","name":"residues","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/residue_view.cr","line_number":70,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/residue_view.cr#L70"},"def":{"name":"residues","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"self"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Spatial","path":"Chem/Spatial.html","kind":"module","full_name":"Chem::Spatial","name":"Spatial","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/spatial.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial.cr#L16"},{"filename":"src/chem/spatial/affine.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L1"},{"filename":"src/chem/spatial/basis.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L1"},{"filename":"src/chem/spatial/bounds.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L1"},{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L1"},{"filename":"src/chem/spatial/grid.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L1"},{"filename":"src/chem/spatial/hlxparams.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/hlxparams.cr#L1"},{"filename":"src/chem/spatial/kdtree.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L1"},{"filename":"src/chem/spatial/measure.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/measure.cr#L1"},{"filename":"src/chem/spatial/quat.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L1"},{"filename":"src/chem/spatial/size.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/size.cr#L1"},{"filename":"src/chem/spatial/vec3.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L1"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"angle(a:Vec3,b:Vec3,c:Vec3,lattice:Lattice?=nil):Float64-instance-method","name":"angle","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Vec3"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"args_string":"(a : Vec3, b : Vec3, c : Vec3, lattice : Lattice? = nil) : Float64","args_html":"(a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, c : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, lattice : <a href=\"../Chem/Lattice.html\">Lattice</a>? = <span class=\"n\">nil</span>) : Float64","location":{"filename":"src/chem/spatial/measure.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/measure.cr#L10"},"def":{"name":"angle","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Vec3"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"if lattice\n  a = a.wrap(lattice, around: b)\n  c = c.wrap(lattice, around: b)\nend\nangle(a - b, c - b)\n"}},{"html_id":"angle(a:Atom,b:Atom,c:Atom,lattice:Lattice?=nil):Float64-instance-method","name":"angle","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Atom"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Atom"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Atom"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"args_string":"(a : Atom, b : Atom, c : Atom, lattice : Lattice? = nil) : Float64","args_html":"(a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>, c : <a href=\"../Chem/Atom.html\">Atom</a>, lattice : <a href=\"../Chem/Lattice.html\">Lattice</a>? = <span class=\"n\">nil</span>) : Float64","location":{"filename":"src/chem/spatial/measure.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/measure.cr#L6"},"def":{"name":"angle","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Atom"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Atom"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Atom"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"angle(a.coords, b.coords, c.coords, lattice)"}},{"html_id":"angle(a:Vec3,b:Vec3):Float64-instance-method","name":"angle","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"}],"args_string":"(a : Vec3, b : Vec3) : Float64","args_html":"(a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial/measure.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/measure.cr#L2"},"def":{"name":"angle","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(Math.atan2((a.cross(b)).size, a.dot(b))).degrees"}},{"html_id":"dihedral(a:Vec3,b:Vec3,c:Vec3,d:Vec3,lattice:Lattice?=nil):Float64-instance-method","name":"dihedral","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Vec3"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Vec3"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"args_string":"(a : Vec3, b : Vec3, c : Vec3, d : Vec3, lattice : Lattice? = nil) : Float64","args_html":"(a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, c : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, d : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, lattice : <a href=\"../Chem/Lattice.html\">Lattice</a>? = <span class=\"n\">nil</span>) : Float64","location":{"filename":"src/chem/spatial/measure.cr","line_number":28,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/measure.cr#L28"},"def":{"name":"dihedral","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Vec3"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Vec3"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"if lattice\n  a = a.wrap(lattice, around: b)\n  c = c.wrap(lattice, around: b)\n  d = d.wrap(lattice, around: c)\nend\ndihedral(b - a, c - b, d - c)\n"}},{"html_id":"dihedral(a:Atom,b:Atom,c:Atom,d:Atom,*args,**options):Float64-instance-method","name":"dihedral","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Atom"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Atom"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Atom"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Atom"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(a : Atom, b : Atom, c : Atom, d : Atom, *args, **options) : Float64","args_html":"(a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>, c : <a href=\"../Chem/Atom.html\">Atom</a>, d : <a href=\"../Chem/Atom.html\">Atom</a>, *args, **options) : Float64","location":{"filename":"src/chem/spatial/measure.cr","line_number":24,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/measure.cr#L24"},"def":{"name":"dihedral","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Atom"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Atom"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Atom"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Atom"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":4,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"dihedral(a.coords, b.coords, c.coords, d.coords, *args, **options)"}},{"html_id":"dihedral(a:Vec3,b:Vec3,c:Vec3):Float64-instance-method","name":"dihedral","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Vec3"}],"args_string":"(a : Vec3, b : Vec3, c : Vec3) : Float64","args_html":"(a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, c : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial/measure.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/measure.cr#L18"},"def":{"name":"dihedral","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"ab = a.cross(b)\nangle = angle(ab, b.cross(c))\n(ab.dot(c)) < 0 ? -angle : angle\n"}},{"html_id":"distance(q1:Quat,q2:Quat):Float64-instance-method","name":"distance","doc":"Returns the distance between two quaternions.\n\nIt uses the formula `acos(2 * p·q^2 - 1)`, which returns the angular\ndistance (0 to π) between the orientations represented by the\ntwo quaternions. Taken from\n[https://math.stackexchange.com/a/90098](https://math.stackexchange.com/a/90098).","summary":"<p>Returns the distance between two quaternions.</p>","abstract":false,"args":[{"name":"q1","doc":null,"default_value":"","external_name":"q1","restriction":"Quat"},{"name":"q2","doc":null,"default_value":"","external_name":"q2","restriction":"Quat"}],"args_string":"(q1 : Quat, q2 : Quat) : Float64","args_html":"(q1 : <a href=\"../Chem/Spatial/Quat.html\">Quat</a>, q2 : <a href=\"../Chem/Spatial/Quat.html\">Quat</a>) : Float64","location":{"filename":"src/chem/spatial/measure.cr","line_number":51,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/measure.cr#L51"},"def":{"name":"distance","args":[{"name":"q1","doc":null,"default_value":"","external_name":"q1","restriction":"Quat"},{"name":"q2","doc":null,"default_value":"","external_name":"q2","restriction":"Quat"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Math.acos((2 * ((q1.dot(q2)) ** 2)) - 1)"}},{"html_id":"distance(*args,**options):Float64-instance-method","name":"distance","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options) : Float64","args_html":"(*args, **options) : Float64","location":{"filename":"src/chem/spatial/measure.cr","line_number":41,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/measure.cr#L41"},"def":{"name":"distance","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Math.sqrt(squared_distance(*args, **options))"}},{"html_id":"hlxparams(res:Residue,lattice:Lattice?=nil):HlxParams?-instance-method","name":"hlxparams","doc":null,"summary":null,"abstract":false,"args":[{"name":"res","doc":null,"default_value":"","external_name":"res","restriction":"Residue"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"args_string":"(res : Residue, lattice : Lattice? = nil) : HlxParams?","args_html":"(res : <a href=\"../Chem/Residue.html\">Residue</a>, lattice : <a href=\"../Chem/Lattice.html\">Lattice</a>? = <span class=\"n\">nil</span>) : <a href=\"../Chem/Spatial/HlxParams.html\">HlxParams</a>?","location":{"filename":"src/chem/spatial/hlxparams.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/hlxparams.cr#L12"},"def":{"name":"hlxparams","args":[{"name":"res","doc":null,"default_value":"","external_name":"res","restriction":"Residue"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"HlxParams | ::Nil","visibility":"Public","body":"begin\n  if (res.protein? && (prev_res = res.pred)) && (next_res = res.succ)\n  else\n    return\n  end\n  coord = if lattice\n    ca2 = res[\"CA\"].coords\n    n2 = res[\"N\"].coords.wrap(lattice, around: ca2)\n    c2 = res[\"C\"].coords.wrap(lattice, around: ca2)\n    cb2 = res[\"CB\"]?.try do |__arg0|\n      __arg0.coords.wrap(lattice, around: ca2)\n    end\n    c1 = prev_res[\"C\"].coords.wrap(lattice, around: n2)\n    ca1 = prev_res[\"CA\"].coords.wrap(lattice, around: c1)\n    n3 = next_res[\"N\"].coords.wrap(lattice, around: c2)\n    ca3 = next_res[\"CA\"].coords.wrap(lattice, around: n2)\n    { {ca: ca1, c: c1}, {n: n2, ca: ca2, c: c2, cb: cb2}, {n: n3, ca: ca3} }\n  else\n    { {ca: prev_res[\"CA\"].coords, c: prev_res[\"C\"].coords}, {n: res[\"N\"].coords, ca: res[\"CA\"].coords, c: res[\"C\"].coords, cb: res[\"CB\"]?.try(&.coords)}, {n: next_res[\"N\"].coords, ca: next_res[\"CA\"].coords} }\n  end\n  rotaxis, twist, pitch = rotation(coord)\n  chirality = chirality(coord)\n  if chirality < 0\n    pitch, rotaxis, twist = -pitch, -rotaxis, (2 * Math::PI) - twist\n  end\n  HlxParams.new(rotaxis, twist.degrees, pitch, radius(coord, twist))\nrescue KeyError\n  nil\nend"}},{"html_id":"improper(a:Vec3,b:Vec3,c:Vec3,d:Vec3,lattice:Lattice?=nil):Float64-instance-method","name":"improper","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Vec3"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Vec3"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"args_string":"(a : Vec3, b : Vec3, c : Vec3, d : Vec3, lattice : Lattice? = nil) : Float64","args_html":"(a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, c : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, d : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, lattice : <a href=\"../Chem/Lattice.html\">Lattice</a>? = <span class=\"n\">nil</span>) : Float64","location":{"filename":"src/chem/spatial/measure.cr","line_number":60,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/measure.cr#L60"},"def":{"name":"improper","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Vec3"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Vec3"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"dihedral(b, a, c, d, lattice)"}},{"html_id":"improper(a:Atom,b:Atom,c:Atom,d:Atom,*args,**options):Float64-instance-method","name":"improper","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Atom"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Atom"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Atom"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Atom"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(a : Atom, b : Atom, c : Atom, d : Atom, *args, **options) : Float64","args_html":"(a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>, c : <a href=\"../Chem/Atom.html\">Atom</a>, d : <a href=\"../Chem/Atom.html\">Atom</a>, *args, **options) : Float64","location":{"filename":"src/chem/spatial/measure.cr","line_number":56,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/measure.cr#L56"},"def":{"name":"improper","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Atom"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Atom"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Atom"},{"name":"d","doc":null,"default_value":"","external_name":"d","restriction":"Atom"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":4,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"improper(a.coords, b.coords, c.coords, d.coords, *args, **options)"}},{"html_id":"squared_distance(a:Vec3,b:Vec3,lattice:Lattice?=nil):Float64-instance-method","name":"squared_distance","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"args_string":"(a : Vec3, b : Vec3, lattice : Lattice? = nil) : Float64","args_html":"(a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, lattice : <a href=\"../Chem/Lattice.html\">Lattice</a>? = <span class=\"n\">nil</span>) : Float64","location":{"filename":"src/chem/spatial/measure.cr","line_number":73,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/measure.cr#L73"},"def":{"name":"squared_distance","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"if lattice\n  b = b.wrap(lattice, around: a)\nend\n(((a.x - b.x) ** 2) + ((a.y - b.y) ** 2)) + ((a.z - b.z) ** 2)\n"}},{"html_id":"squared_distance(a:Atom,b:Atom,lattice:Lattice?=nil):Float64-instance-method","name":"squared_distance","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Atom"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Atom"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"args_string":"(a : Atom, b : Atom, lattice : Lattice? = nil) : Float64","args_html":"(a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>, lattice : <a href=\"../Chem/Lattice.html\">Lattice</a>? = <span class=\"n\">nil</span>) : Float64","location":{"filename":"src/chem/spatial/measure.cr","line_number":68,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/measure.cr#L68"},"def":{"name":"squared_distance","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Atom"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Atom"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"squared_distance(a.coords, b.coords, lattice)"}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/Spatial/AffineTransform","path":"Chem/Spatial/AffineTransform.html","kind":"struct","full_name":"Chem::Spatial::AffineTransform","name":"AffineTransform","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/affine.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"build(&block:Pointer(Float64)->):self-class-method","name":"build","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Pointer(Float64) -> ) : self","args_html":"(&block : Pointer(Float64) -> ) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/affine.cr","line_number":23,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L23"},"def":{"name":"build","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Pointer(Float64) ->)"},"return_type":"self","visibility":"Public","body":"transform = AffineTransform.new\nyield transform.to_unsafe\ntransform\n"}},{"html_id":"new(a:Vec3,b:Vec3,c:Vec3,d:Vec3=Vec3.zero)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Vec3"},{"name":"d","doc":null,"default_value":"Vec3.zero","external_name":"d","restriction":"Vec3"}],"args_string":"(a : Vec3, b : Vec3, c : Vec3, d : Vec3 = Vec3.zero)","args_html":"(a : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, c : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, d : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> = <span class=\"t\">Vec3</span>.zero)","location":{"filename":"src/chem/spatial/affine.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L13"},"def":{"name":"new","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Vec3"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Vec3"},{"name":"d","doc":null,"default_value":"Vec3.zero","external_name":"d","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(a, b, c, d)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/spatial/affine.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L5"},"def":{"name":"new","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"scaling(byfactor:Number):self-class-method","name":"scaling","doc":null,"summary":null,"abstract":false,"args":[{"name":"factor","doc":null,"default_value":"","external_name":"by","restriction":"Number"}],"args_string":"(by factor : Number) : self","args_html":"(by factor : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/affine.cr","line_number":29,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L29"},"def":{"name":"scaling","args":[{"name":"factor","doc":null,"default_value":"","external_name":"by","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"AffineTransform.build do |buffer|\n  3.times do |i|\n    buffer[(i * 4) + i] = factor.to_f\n  end\nend"}},{"html_id":"scaling(byfactors:ScalingFactors):self-class-method","name":"scaling","doc":null,"summary":null,"abstract":false,"args":[{"name":"factors","doc":null,"default_value":"","external_name":"by","restriction":"ScalingFactors"}],"args_string":"(by factors : ScalingFactors) : self","args_html":"(by factors : <a href=\"../../Chem/Spatial/AffineTransform/ScalingFactors.html\">ScalingFactors</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/affine.cr","line_number":35,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L35"},"def":{"name":"scaling","args":[{"name":"factors","doc":null,"default_value":"","external_name":"by","restriction":"ScalingFactors"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"AffineTransform.build do |buffer|\n  factors.each_with_index do |ele, i|\n    buffer[(i * 4) + i] = ele.to_f\n  end\nend"}},{"html_id":"translation(byoffset:Vec3):self-class-method","name":"translation","doc":null,"summary":null,"abstract":false,"args":[{"name":"offset","doc":null,"default_value":"","external_name":"by","restriction":"Vec3"}],"args_string":"(by offset : Vec3) : self","args_html":"(by offset : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/affine.cr","line_number":41,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L41"},"def":{"name":"translation","args":[{"name":"offset","doc":null,"default_value":"","external_name":"by","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"AffineTransform.build do |buffer|\n  3.times do |i|\n    buffer[(i * 4) + 3] = offset[i]\n  end\nend"}}],"instance_methods":[{"html_id":"*(rhs:self):self-instance-method","name":"*","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/affine.cr","line_number":47,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L47"},"def":{"name":"*","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"AffineTransform.build do |buffer|\n  buffer.map_with_index!(16) do |ele, index|\n    i = index // 4\n    j = index % 4\n    (0..3).sum do |d|\n      (unsafe_fetch((i * 4) + d)) * (rhs.unsafe_fetch((d * 4) + j))\n    end\n  end\nend"}},{"html_id":"*(rhs:Vec3):Vec3-instance-method","name":"*","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Vec3"}],"args_string":"(rhs : Vec3) : Vec3","args_html":"(rhs : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/affine.cr","line_number":59,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L59"},"def":{"name":"*","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"x = ((((unsafe_fetch(0)) * rhs.x) + ((unsafe_fetch(1)) * rhs.y)) + ((unsafe_fetch(2)) * rhs.z)) + (unsafe_fetch(3))\ny = ((((unsafe_fetch(4)) * rhs.x) + ((unsafe_fetch(5)) * rhs.y)) + ((unsafe_fetch(6)) * rhs.z)) + (unsafe_fetch(7))\nz = ((((unsafe_fetch(8)) * rhs.x) + ((unsafe_fetch(9)) * rhs.y)) + ((unsafe_fetch(10)) * rhs.z)) + (unsafe_fetch(11))\nVec3.new(x, y, z)\n"}},{"html_id":"==(rhs:self):Bool-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Bool","args_html":"(rhs : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/spatial/affine.cr","line_number":69,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L69"},"def":{"name":"==","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(0..15).all? do |i|\n  (unsafe_fetch(i)) == (rhs.unsafe_fetch(i))\nend"}},{"html_id":"inner_det:Float64-instance-method","name":"inner_det","doc":"Returns the determinant of the inner 3x3 rotation matrix","summary":"<p>Returns the determinant of the inner 3x3 rotation matrix</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/affine.cr","line_number":74,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L74"},"def":{"name":"inner_det","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(((unsafe_fetch(0)) * (((unsafe_fetch(5)) * (unsafe_fetch(10))) - ((unsafe_fetch(9)) * (unsafe_fetch(6))))) - ((unsafe_fetch(1)) * (((unsafe_fetch(4)) * (unsafe_fetch(10))) + ((unsafe_fetch(6)) * (unsafe_fetch(8)))))) + ((unsafe_fetch(2)) * (((unsafe_fetch(4)) * (unsafe_fetch(9))) - ((unsafe_fetch(5)) * (unsafe_fetch(8)))))"}},{"html_id":"inspect(io:IO)-instance-method","name":"inspect","doc":"Appends this struct's name and instance variables names and values\nto the given IO.\n\n```\nstruct Point\n  def initialize(@x : Int32, @y : Int32)\n  end\nend\n\np1 = Point.new 1, 2\np1.to_s    # \"Point(@x=1, @y=2)\"\np1.inspect # \"Point(@x=1, @y=2)\"\n```","summary":"<p>Appends this struct's name and instance variables names and values to the given IO.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/spatial/affine.cr","line_number":106,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L106"},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << \"AffineTransform[[\"\n16.times do |index|\n  i = index // 4\n  j = index % 4\n  if i > 0 || j > 0\n    io << (j == 0 ? \"], [\" : \", \")\n  end\n  (unsafe_fetch(index)).inspect(io)\nend\nio << \"]]\"\n"}},{"html_id":"inv:self-instance-method","name":"inv","doc":"Returns the inverse transformation\n\nThe algorithm exploits the fact that when a matrix looks like this\n\n```text\nA = [ M   b  ]\n    [ 0   1  ]\n```\n\nwhere A is 4x4 (augmented matrix), M is 3x3 (rotation matrix), b is 3x1\n(translation vector), and the bottom row is (0, 0, 0, 1), then\n\n```text\ninv(A) = [ inv(M)   -inv(M) * b ]\n         [   0            1     ]\n```\n\n`inv(M)` is computed following the standard procedure (see Wikipedia, Inversion of\n3x3 matrices).\n\nRefer to https://stackoverflow.com/a/2625420 or Wikipedia, Affine transformation\narticle (Properties section) for a detailed explanation.","summary":"<p>Returns the inverse transformation</p>","abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/affine.cr","line_number":139,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L139"},"def":{"name":"inv","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"AffineTransform.build do |buffer|\n  inner_inv(buffer)\n  {3, 7, 11}.each do |i|\n    buffer[i] = (0..2).sum do |j|\n      (-buffer[(i - 3) + j]) * (unsafe_fetch((j * 4) + 3))\n    end\n  end\nend"}},{"html_id":"scale(byfactor:Number):self-instance-method","name":"scale","doc":null,"summary":null,"abstract":false,"args":[{"name":"factor","doc":null,"default_value":"","external_name":"by","restriction":"Number"}],"args_string":"(by factor : Number) : self","args_html":"(by factor : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/affine.cr","line_number":150,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L150"},"def":{"name":"scale","args":[{"name":"factor","doc":null,"default_value":"","external_name":"by","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"scale(by: {factor, factor, factor})"}},{"html_id":"scale(byfactors:ScalingFactors):self-instance-method","name":"scale","doc":null,"summary":null,"abstract":false,"args":[{"name":"factors","doc":null,"default_value":"","external_name":"by","restriction":"ScalingFactors"}],"args_string":"(by factors : ScalingFactors) : self","args_html":"(by factors : <a href=\"../../Chem/Spatial/AffineTransform/ScalingFactors.html\">ScalingFactors</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/affine.cr","line_number":154,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L154"},"def":{"name":"scale","args":[{"name":"factors","doc":null,"default_value":"","external_name":"by","restriction":"ScalingFactors"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"AffineTransform.build do |buffer|\n  buffer.copy_from(@buffer, 16)\n  buffer.map_with_index!(12) do |ele, i|\n    __temp_42 = i\n    buffer[__temp_42] = buffer[__temp_42] * factors[i // 4]\n  end\nend"}},{"html_id":"to_a:Array(Float64)-instance-method","name":"to_a","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Float64)","args_html":" : <a href=\"../../Array.html\">Array</a>(Float64)","location":{"filename":"src/chem/spatial/affine.cr","line_number":167,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L167"},"def":{"name":"to_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Float64)","visibility":"Public","body":"Array(Float64).build(16) do |buffer|\n  buffer.copy_from(@buffer, 16)\n  16\nend"}},{"html_id":"to_unsafe:Pointer(Float64)-instance-method","name":"to_unsafe","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Pointer(Float64)","args_html":" : Pointer(Float64)","location":{"filename":"src/chem/spatial/affine.cr","line_number":163,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L163"},"def":{"name":"to_unsafe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Pointer(Float64)","visibility":"Public","body":"@buffer"}},{"html_id":"translate(byoffset:Vec3):self-instance-method","name":"translate","doc":null,"summary":null,"abstract":false,"args":[{"name":"offset","doc":null,"default_value":"","external_name":"by","restriction":"Vec3"}],"args_string":"(by offset : Vec3) : self","args_html":"(by offset : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/affine.cr","line_number":174,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L174"},"def":{"name":"translate","args":[{"name":"offset","doc":null,"default_value":"","external_name":"by","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"AffineTransform.build do |buffer|\n  buffer.copy_from(@buffer, 16)\n  3.times do |i|\n    __temp_44 = ((i + 1) * 4) - 1\n    buffer[__temp_44] = buffer[__temp_44] + offset[i]\n  end\nend"}},{"html_id":"unsafe_fetch(index:Int):Float64-instance-method","name":"unsafe_fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : Float64","args_html":"(index : Int) : Float64","location":{"filename":"src/chem/spatial/affine.cr","line_number":183,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L183"},"def":{"name":"unsafe_fetch","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"to_unsafe[index]"}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/Spatial/AffineTransform/ScalingFactors","path":"Chem/Spatial/AffineTransform/ScalingFactors.html","kind":"alias","full_name":"Chem::Spatial::AffineTransform::ScalingFactors","name":"ScalingFactors","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/spatial/affine.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/affine.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":true,"aliased":"Tuple(Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | UInt128 | UInt16 | UInt32 | UInt64 | UInt8, Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | UInt128 | UInt16 | UInt32 | UInt64 | UInt8, Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | UInt128 | UInt16 | UInt32 | UInt64 | UInt8)","aliased_html":"{Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | UInt128 | UInt16 | UInt32 | UInt64 | UInt8, Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | UInt128 | UInt16 | UInt32 | UInt64 | UInt8, Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | UInt128 | UInt16 | UInt32 | UInt64 | UInt8}","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial/AffineTransform","kind":"struct","full_name":"Chem::Spatial::AffineTransform","name":"AffineTransform"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/Spatial/Basis","path":"Chem/Spatial/Basis.html","kind":"struct","full_name":"Chem::Spatial::Basis","name":"Basis","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/basis.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(i:Vec3,j:Vec3,k:Vec3)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Vec3"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Vec3"},{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Vec3"}],"args_string":"(i : Vec3, j : Vec3, k : Vec3)","args_html":"(i : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, j : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, k : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)","location":{"filename":"src/chem/spatial/basis.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L7"},"def":{"name":"new","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Vec3"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Vec3"},{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(i, j, k)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(size:Size,alpha:Number=90.0,beta:Number=90.0,gamma:Number=90.0):self-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Size"},{"name":"alpha","doc":null,"default_value":"90.0","external_name":"alpha","restriction":"Number"},{"name":"beta","doc":null,"default_value":"90.0","external_name":"beta","restriction":"Number"},{"name":"gamma","doc":null,"default_value":"90.0","external_name":"gamma","restriction":"Number"}],"args_string":"(size : Size, alpha : Number = 90.0, beta : Number = 90.0, gamma : Number = 90.0) : self","args_html":"(size : <a href=\"../../Chem/Spatial/Size.html\">Size</a>, alpha : <a href=\"../../Number.html\">Number</a> = <span class=\"n\">90.0</span>, beta : <a href=\"../../Number.html\">Number</a> = <span class=\"n\">90.0</span>, gamma : <a href=\"../../Number.html\">Number</a> = <span class=\"n\">90.0</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/basis.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L10"},"def":{"name":"new","args":[{"name":"size","doc":null,"default_value":"","external_name":"size","restriction":"Size"},{"name":"alpha","doc":null,"default_value":"90.0","external_name":"alpha","restriction":"Number"},{"name":"beta","doc":null,"default_value":"90.0","external_name":"beta","restriction":"Number"},{"name":"gamma","doc":null,"default_value":"90.0","external_name":"gamma","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if (alpha < 0 || beta < 0) || gamma < 0\n  raise(ArgumentError.new(\"Negative angle\"))\nend\nif ((alpha == 90) && (beta == 90)) && (gamma == 90)\n  i = Vec3[size.x, 0, 0]\n  j = Vec3[0, size.y, 0]\n  k = Vec3[0, 0, size.z]\nelse\n  cos_alpha = Math.cos(alpha.radians)\n  cos_beta = Math.cos(beta.radians)\n  cos_gamma = Math.cos(gamma.radians)\n  sin_gamma = Math.sin(gamma.radians)\n  kx = size.z * cos_beta\n  ky = (size.z * (cos_alpha - (cos_beta * cos_gamma))) / sin_gamma\n  kz = Math.sqrt(((size.z ** 2) - (kx ** 2)) - (ky ** 2))\n  i = Vec3[size.x, 0, 0]\n  j = Vec3[size.y * cos_gamma, size.y * sin_gamma, 0]\n  k = Vec3[kx, ky, kz]\nend\nnew(i, j, k)\n"}}],"instance_methods":[{"html_id":"==(rhs:self):Bool-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Bool","args_html":"(rhs : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/spatial/basis.cr","line_number":36,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L36"},"def":{"name":"==","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((@i == rhs.i) && (@j == rhs.j)) && (@k == rhs.k)"}},{"html_id":"a:Float64-instance-method","name":"a","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/basis.cr","line_number":40,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L40"},"def":{"name":"a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@i.size"}},{"html_id":"alpha:Float64-instance-method","name":"alpha","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/basis.cr","line_number":44,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L44"},"def":{"name":"alpha","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Spatial.angle(@j, @k)"}},{"html_id":"angles:Tuple(Float64,Float64,Float64)-instance-method","name":"angles","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Tuple(Float64, Float64, Float64)","args_html":" : Tuple(Float64, Float64, Float64)","location":{"filename":"src/chem/spatial/basis.cr","line_number":48,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L48"},"def":{"name":"angles","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(Float64, Float64, Float64)","visibility":"Public","body":"{alpha, beta, gamma}"}},{"html_id":"b:Float64-instance-method","name":"b","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/basis.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L52"},"def":{"name":"b","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@j.size"}},{"html_id":"beta:Float64-instance-method","name":"beta","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/basis.cr","line_number":56,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L56"},"def":{"name":"beta","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Spatial.angle(@i, @k)"}},{"html_id":"c:Float64-instance-method","name":"c","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/basis.cr","line_number":60,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L60"},"def":{"name":"c","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@k.size"}},{"html_id":"gamma:Float64-instance-method","name":"gamma","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/basis.cr","line_number":64,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L64"},"def":{"name":"gamma","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Spatial.angle(@i, @j)"}},{"html_id":"i:Vec3-instance-method","name":"i","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Vec3","args_html":" : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/basis.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L3"},"def":{"name":"i","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"@i"}},{"html_id":"j:Vec3-instance-method","name":"j","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Vec3","args_html":" : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/basis.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L4"},"def":{"name":"j","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"@j"}},{"html_id":"k:Vec3-instance-method","name":"k","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Vec3","args_html":" : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/basis.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L5"},"def":{"name":"k","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"@k"}},{"html_id":"size:Size-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Size","args_html":" : <a href=\"../../Chem/Spatial/Size.html\">Size</a>","location":{"filename":"src/chem/spatial/basis.cr","line_number":68,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L68"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Size","visibility":"Public","body":"Size.new(@i.size, @j.size, @k.size)"}},{"html_id":"transform:AffineTransform-instance-method","name":"transform","doc":"Returns the transformation that converts Cartesian coordinates to fractional\ncoordinates in terms of the basis vectors.\n\nThis is equivalent to the basis change from standard to the basis defined by the\nlattice vectors, which is calculated as the inverse of the latter","summary":"<p>Returns the transformation that converts Cartesian coordinates to fractional coordinates in terms of the basis vectors.</p>","abstract":false,"args":[],"args_string":" : AffineTransform","args_html":" : <a href=\"../../Chem/Spatial/AffineTransform.html\">AffineTransform</a>","location":{"filename":"src/chem/spatial/basis.cr","line_number":77,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/basis.cr#L77"},"def":{"name":"transform","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AffineTransform","visibility":"Public","body":"@basis_transform || (@basis_transform = AffineTransform.build do |buffer|\n  det = ((@i.x * ((@j.y * @k.z) - (@j.z * @k.y))) - (@j.x * ((@i.y * @k.z) + (@k.y * @i.z)))) + (@k.x * ((@i.y * @j.z) - (@j.y * @i.z)))\n  inv_det = 1 / det\n  buffer[0] = ((@j.y * @k.z) - (@j.z * @k.y)) * inv_det\n  buffer[1] = ((@k.x * @j.z) - (@j.x * @k.z)) * inv_det\n  buffer[2] = ((@j.x * @k.y) - (@k.x * @j.y)) * inv_det\n  buffer[4] = ((@k.y * @i.z) - (@i.y * @k.z)) * inv_det\n  buffer[5] = ((@i.x * @k.z) - (@k.x * @i.z)) * inv_det\n  buffer[6] = ((@i.y * @k.x) - (@i.x * @k.y)) * inv_det\n  buffer[8] = ((@i.y * @j.z) - (@i.z * @j.y)) * inv_det\n  buffer[9] = ((@i.z * @j.x) - (@i.x * @j.z)) * inv_det\n  buffer[10] = ((@i.x * @j.y) - (@i.y * @j.x)) * inv_det\nend)"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Spatial/Bounds","path":"Chem/Spatial/Bounds.html","kind":"struct","full_name":"Chem::Spatial::Bounds","name":"Bounds","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/bounds.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"[](a:Float64,b:Float64,c:Float64):self-class-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Float64"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Float64"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Float64"}],"args_string":"(a : Float64, b : Float64, c : Float64) : self","args_html":"(a : Float64, b : Float64, c : Float64) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":26,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L26"},"def":{"name":"[]","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Float64"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Float64"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(Vec3.origin, Size[a, b, c])"}},{"html_id":"new(origin:Vec3,basis:Basis)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"origin","doc":null,"default_value":"","external_name":"origin","restriction":"Vec3"},{"name":"basis","doc":null,"default_value":"","external_name":"basis","restriction":"Basis"}],"args_string":"(origin : Vec3, basis : Basis)","args_html":"(origin : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, basis : <a href=\"../../Chem/Spatial/Basis.html\">Basis</a>)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L8"},"def":{"name":"new","args":[{"name":"origin","doc":null,"default_value":"","external_name":"origin","restriction":"Vec3"},{"name":"basis","doc":null,"default_value":"","external_name":"basis","restriction":"Basis"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(origin, basis)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(vmin:Vec3,vmax:Vec3):self-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"vmin","doc":null,"default_value":"","external_name":"vmin","restriction":"Vec3"},{"name":"vmax","doc":null,"default_value":"","external_name":"vmax","restriction":"Vec3"}],"args_string":"(vmin : Vec3, vmax : Vec3) : self","args_html":"(vmin : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, vmax : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L19"},"def":{"name":"new","args":[{"name":"vmin","doc":null,"default_value":"","external_name":"vmin","restriction":"Vec3"},{"name":"vmax","doc":null,"default_value":"","external_name":"vmax","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(vmin, Vec3[vmax.x - vmin.x, 0, 0], Vec3[0, vmax.y - vmin.y, 0], Vec3[0, 0, vmax.z - vmin.z])"}},{"html_id":"new(origin:Vec3,*args,**options):self-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"origin","doc":null,"default_value":"","external_name":"origin","restriction":"Vec3"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(origin : Vec3, *args, **options) : self","args_html":"(origin : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, *args, **options) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L11"},"def":{"name":"new","args":[{"name":"origin","doc":null,"default_value":"","external_name":"origin","restriction":"Vec3"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":1,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(origin, Basis.new(*args, **options))"}},{"html_id":"new(*args,**options):self-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options) : self","args_html":"(*args, **options) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L15"},"def":{"name":"new","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(Vec3.origin, Basis.new(*args, **options))"}},{"html_id":"zero:self-class-method","name":"zero","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":30,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L30"},"def":{"name":"zero","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(Vec3.origin, Size[0, 0, 0])"}}],"instance_methods":[{"html_id":"+(rhs:Vec3):self-instance-method","name":"+","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Vec3"}],"args_string":"(rhs : Vec3) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":34,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L34"},"def":{"name":"+","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Bounds.new(@origin + rhs, @basis)"}},{"html_id":"-(rhs:Vec3):self-instance-method","name":"-","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Vec3"}],"args_string":"(rhs : Vec3) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":34,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L34"},"def":{"name":"-","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Bounds.new(@origin - rhs, @basis)"}},{"html_id":"a(*args,**options)-instance-method","name":"a","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"a","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.a(*args, **options)"}},{"html_id":"a(*args,**options,&)-instance-method","name":"a","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"a","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.a(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"alpha(*args,**options)-instance-method","name":"alpha","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"alpha","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.alpha(*args, **options)"}},{"html_id":"alpha(*args,**options,&)-instance-method","name":"alpha","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"alpha","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.alpha(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"angles(*args,**options)-instance-method","name":"angles","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"angles","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.angles(*args, **options)"}},{"html_id":"angles(*args,**options,&)-instance-method","name":"angles","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"angles","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.angles(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"b(*args,**options)-instance-method","name":"b","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"b","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.b(*args, **options)"}},{"html_id":"b(*args,**options,&)-instance-method","name":"b","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"b","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.b(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"basis:Basis-instance-method","name":"basis","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Basis","args_html":" : <a href=\"../../Chem/Spatial/Basis.html\">Basis</a>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L3"},"def":{"name":"basis","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Basis","visibility":"Public","body":"@basis"}},{"html_id":"beta(*args,**options)-instance-method","name":"beta","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"beta","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.beta(*args, **options)"}},{"html_id":"beta(*args,**options,&)-instance-method","name":"beta","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"beta","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.beta(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"c(*args,**options)-instance-method","name":"c","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"c","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.c(*args, **options)"}},{"html_id":"c(*args,**options,&)-instance-method","name":"c","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"c","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.c(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"center:Vec3-instance-method","name":"center","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Vec3","args_html":" : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":46,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L46"},"def":{"name":"center","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"@origin + (((@basis.i + @basis.j) + @basis.k) * 0.5)"}},{"html_id":"each_vertex(&:Vec3->):Nil-instance-method","name":"each_vertex","doc":"Yields bounds' vertices.\n\n```\nBounds[5, 10, 20].each_vertex { |vec| puts vec }\n```\n\nPrints:\n\n```text\nVec3[0.0, 0.0, 0.0]\nVec3[0.0, 0.0, 20.0]\nVec3[0.0, 10.0, 0.0]\nVec3[0.0, 10.0, 20.0]\nVec3[5.0, 0.0, 0.0]\nVec3[5.0, 0.0, 20.0]\nVec3[5.0, 10.0, 0.0]\nVec3[5.0, 10.0, 20.0]\n```","summary":"<p>Yields bounds' vertices.</p>","abstract":false,"args":[],"args_string":"(& : Vec3 -> ) : Nil","args_html":"(& : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> ) : Nil","location":{"filename":"src/chem/spatial/bounds.cr","line_number":68,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L68"},"def":{"name":"each_vertex","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Vec3 ->)"},"return_type":"Nil","visibility":"Public","body":"2.times do |di|\n  2.times do |dj|\n    2.times do |dk|\n      yield ((@origin + (i * di)) + (j * dj)) + (k * dk)\n    end\n  end\nend"}},{"html_id":"gamma(*args,**options)-instance-method","name":"gamma","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"gamma","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.gamma(*args, **options)"}},{"html_id":"gamma(*args,**options,&)-instance-method","name":"gamma","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"gamma","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.gamma(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"i(*args,**options)-instance-method","name":"i","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"i","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.i(*args, **options)"}},{"html_id":"i(*args,**options,&)-instance-method","name":"i","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"i","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.i(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"includes?(bounds:Bounds):Bool-instance-method","name":"includes?","doc":"Returns `true` if the current instance contains *bounds*, `false`\notherwise.\n\nIt effectively checks if every vertex of *bounds* is contained by\nthe current instance.\n\n```\nbounds = Bounds.new S[10, 10, 10], 90, 90, 120\nbounds.includes? Bounds.new(Size[5, 4, 6])                     # => true\nbounds.includes? Bounds.new(Vec3[-1, 2, -4], Size[5, 4, 6])) # => false\n```","summary":"<p>Returns <code>true</code> if the current instance contains <em>bounds</em>, <code>false</code> otherwise.</p>","abstract":false,"args":[{"name":"bounds","doc":null,"default_value":"","external_name":"bounds","restriction":"Bounds"}],"args_string":"(bounds : Bounds) : Bool","args_html":"(bounds : <a href=\"../../Chem/Spatial/Bounds.html\">Bounds</a>) : Bool","location":{"filename":"src/chem/spatial/bounds.cr","line_number":89,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L89"},"def":{"name":"includes?","args":[{"name":"bounds","doc":null,"default_value":"","external_name":"bounds","restriction":"Bounds"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"bounds.vertices.all? do |vec|\n  includes?(vec)\nend"}},{"html_id":"includes?(vec:Vec3):Bool-instance-method","name":"includes?","doc":null,"summary":null,"abstract":false,"args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : Bool","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : Bool","location":{"filename":"src/chem/spatial/bounds.cr","line_number":93,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L93"},"def":{"name":"includes?","args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if @origin.zero?\nelse\n  vec = vec - @origin\nend\nif ((((alpha == 90) && (beta == 90)) && (gamma == 90)) && (i.y == 0)) && (i.z == 0)\n  ((0 <= (__temp_46 = vec.x) && __temp_46 <= a) && (0 <= (__temp_47 = vec.y) && __temp_47 <= b)) && (0 <= (__temp_48 = vec.z) && __temp_48 <= c)\nelse\n  vec = (vec.to_fractional(@basis)).map(&.round(Float64::DIGITS))\n  ((0 <= (__temp_49 = vec.x) && __temp_49 <= 1) && (0 <= (__temp_50 = vec.y) && __temp_50 <= 1)) && (0 <= (__temp_51 = vec.z) && __temp_51 <= 1)\nend\n"}},{"html_id":"j(*args,**options)-instance-method","name":"j","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"j","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.j(*args, **options)"}},{"html_id":"j(*args,**options,&)-instance-method","name":"j","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"j","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.j(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"k(*args,**options)-instance-method","name":"k","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"k","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.k(*args, **options)"}},{"html_id":"k(*args,**options,&)-instance-method","name":"k","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"k","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.k(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"max:Vec3-instance-method","name":"max","doc":"Returns maximum edge.\n\n```\nbounds = Bounds.new Vec3[1.5, 3, -0.4], S[10, 10, 12], 90, 90, 120\nbounds.max # => Vec3[6.5, 11.66, 11.6]\n```","summary":"<p>Returns maximum edge.</p>","abstract":false,"args":[],"args_string":" : Vec3","args_html":" : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":109,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L109"},"def":{"name":"max","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"((@origin + i) + j) + k"}},{"html_id":"min:Vec3-instance-method","name":"min","doc":"Returns minimum edge. This is equivalent to the origin.\n\n```\nbounds = Bounds.new Vec3[1.5, 3, -0.4], S[10, 10, 12], 90, 90, 120\nbounds.min # => Vec3[1.5, 3, -0.4]\n```","summary":"<p>Returns minimum edge.</p>","abstract":false,"args":[],"args_string":" : Vec3","args_html":" : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":119,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L119"},"def":{"name":"min","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"@origin"}},{"html_id":"origin:Vec3-instance-method","name":"origin","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Vec3","args_html":" : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L4"},"def":{"name":"origin","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"@origin"}},{"html_id":"pad(padding:Number):self-instance-method","name":"pad","doc":"Returns a bounds with its extents expanded by *padding* in every\ndirection. Note that its size is actually increased by `padding *\n2`.\n\n```\nbounds = Bounds.new Vec3[1, 5, 3], S[10, 5, 12]\nbounds.center # => Vec3[6.0, 7.5, 9.0]\nbounds = bounds.pad(2.5)\nbounds.size   # => Size[15, 10, 17]\nbounds.center # => Vec3[6.0, 7.5, 9.0]\n```","summary":"<p>Returns a bounds with its extents expanded by <em>padding</em> in every direction.</p>","abstract":false,"args":[{"name":"padding","doc":null,"default_value":"","external_name":"padding","restriction":"Number"}],"args_string":"(padding : Number) : self","args_html":"(padding : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":134,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L134"},"def":{"name":"pad","args":[{"name":"padding","doc":null,"default_value":"","external_name":"padding","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if padding < 0\n  raise(ArgumentError.new(\"Padding cannot be negative\"))\nend\nnew_origin = ((@origin - (i.resize(padding))) - (j.resize(padding))) - (k.resize(padding))\nBounds.new(new_origin, i.pad(padding * 2), j.pad(padding * 2), k.pad(padding * 2))\n"}},{"html_id":"size(*args,**options)-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"size","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.size(*args, **options)"}},{"html_id":"size(*args,**options,&)-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L6"},"def":{"name":"size","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@basis.size(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"translate(offset:Vec3):self-instance-method","name":"translate","doc":"Returns a bounds translated by *offset*.\n\n```\nbounds = Bounds.new Vec3[-5, 1, 20], S[10, 10, 10], 90, 90, 120\nbounds.translate(Vec3[1, 2, 10]).min # => Vec3[-4.0, 3.0, 30.0]\n```","summary":"<p>Returns a bounds translated by <em>offset</em>.</p>","abstract":false,"args":[{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"Vec3"}],"args_string":"(offset : Vec3) : self","args_html":"(offset : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/bounds.cr","line_number":146,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L146"},"def":{"name":"translate","args":[{"name":"offset","doc":null,"default_value":"","external_name":"offset","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Bounds.new(@origin + offset, basis)"}},{"html_id":"vertices:Array(Vec3)-instance-method","name":"vertices","doc":"Returns bounds' vertices.\n\n```\nbounds = Bounds[5, 10, 20]\nbounds.vertices # => [Vec3[0.0, 0.0, 0.0], Vec3[0.0, 0.0, 20.0], ...]\n```","summary":"<p>Returns bounds' vertices.</p>","abstract":false,"args":[],"args_string":" : Array(Vec3)","args_html":" : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)","location":{"filename":"src/chem/spatial/bounds.cr","line_number":156,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L156"},"def":{"name":"vertices","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Vec3)","visibility":"Public","body":"vertices = [] of Vec3\neach_vertex do |vec|\n  vertices << vec\nend\nvertices\n"}},{"html_id":"volume:Float64-instance-method","name":"volume","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/bounds.cr","line_number":162,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/bounds.cr#L162"},"def":{"name":"volume","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@basis.i.dot(@basis.j.cross(@basis.k))"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Spatial/CoordinatesProxy","path":"Chem/Spatial/CoordinatesProxy.html","kind":"struct","full_name":"Chem::Spatial::CoordinatesProxy","name":"CoordinatesProxy","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(atoms:AtomCollection,lattice:Lattice?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"args_string":"(atoms : AtomCollection, lattice : Lattice? = nil)","args_html":"(atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>, lattice : <a href=\"../../Chem/Lattice.html\">Lattice</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L6"},"def":{"name":"new","args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(atoms, lattice)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(rhs:Enumerable(Vec3)):Bool-instance-method","name":"==","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Enumerable(Vec3)"}],"args_string":"(rhs : Enumerable(Vec3)) : Bool","args_html":"(rhs : Enumerable(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)) : Bool","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":9,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L9"},"def":{"name":"==","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Enumerable(Vec3)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"zip(rhs) do |a, b|\n  if a != b\n    return false\n  end\nend\ntrue\n"}},{"html_id":"bounds:Bounds-instance-method","name":"bounds","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bounds","args_html":" : <a href=\"../../Chem/Spatial/Bounds.html\">Bounds</a>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":14,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L14"},"def":{"name":"bounds","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bounds","visibility":"Public","body":"min = StaticArray[Float64::MAX, Float64::MAX, Float64::MAX]\nmax = StaticArray[Float64::MIN, Float64::MIN, Float64::MIN]\neach do |coords|\n  3.times do |i|\n    if coords[i] < (min.unsafe_fetch(i))\n      min[i] = coords[i]\n    end\n    if coords[i] > (max.unsafe_fetch(i))\n      max[i] = coords[i]\n    end\n  end\nend\norigin = Vec3.new(min[0], min[1], min[2])\nsize = Size.new(max[0] - min[0], max[1] - min[1], max[2] - min[2])\nBounds.new(origin, size)\n"}},{"html_id":"center:Vec3-instance-method","name":"center","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Vec3","args_html":" : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":28,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L28"},"def":{"name":"center","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"sum / @atoms.n_atoms"}},{"html_id":"center_along(vec:Vec3):self-instance-method","name":"center_along","doc":"Translates coordinates so that the center is at the middle of *vec*.\n\n```\nstructure = Structure.read \"path/to/file\"\nstructure.coords.center # => [1.5 2.0 3.2]\nstructure.coords.center_along Vec3[0, 10, 0]\nstructure.coords.center # => [1.5 5.0 3.2]\n```","summary":"<p>Translates coordinates so that the center is at the middle of <em>vec</em>.</p>","abstract":false,"args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : self","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":40,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L40"},"def":{"name":"center_along","args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"nvec = vec.normalize\ntranslate!((vec / 2) - ((center.dot(nvec)) * nvec))\n"}},{"html_id":"center_at(vec:Vec3):self-instance-method","name":"center_at","doc":"Translates coordinates so that the center is at *vec*.\n\n```\nstructure = Structure.read \"path/to/file\"\nstructure.coords.center # => [1.0 2.0 3.0]\nstructure.coords.center_at Vec3[10, 20, 30]\nstructure.coords.center # => [10 20 30]\n```","summary":"<p>Translates coordinates so that the center is at <em>vec</em>.</p>","abstract":false,"args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : self","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":53,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L53"},"def":{"name":"center_at","args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"translate!(vec - center)"}},{"html_id":"center_at_cell:self-instance-method","name":"center_at_cell","doc":"Translates coordinates so that they are centered at the primary unit cell.\n\nRaises NotPeriodicError if coordinates are not periodic.\n\n```\nstructure = Structure.read \"path/to/file\"\nstructure.lattice       # => [[1.0 0.0 0.0] [0.0 25.0 0.0] [0.0 0.0 213]]\nstructure.coords.center # => [1.0 2.0 3.0]\nstructure.coords.center_at_cell\nstructure.coords.center # => [0.5 12.5 106.5]\n\nstructure = Structure.read \"path/to/non_periodic_file\"\nstructure.coords.center_at_cell # raises NotPeriodicError\n```","summary":"<p>Translates coordinates so that they are centered at the primary unit cell.</p>","abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":71,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L71"},"def":{"name":"center_at_cell","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if lattice = @lattice\nelse\n  raise(NotPeriodicError.new)\nend\ncenter_at(lattice.bounds.center)\n"}},{"html_id":"center_at_origin:self-instance-method","name":"center_at_origin","doc":"Translates coordinates so that the center is at the origin.\n\n```\nstructure = Structure.read \"path/to/file\"\nstructure.coords.center # => [1.0 2.0 3.0]\nstructure.coords.center_at_origin\nstructure.coords.center # => [0.0 0.0 0.0]\n```","summary":"<p>Translates coordinates so that the center is at the origin.</p>","abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":84,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L84"},"def":{"name":"center_at_origin","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"center_at(Vec3.origin)"}},{"html_id":"com:Vec3-instance-method","name":"com","doc":"Returns the center of mass.\n\n```\nstructure = Chem::Structure.build do\n  atom :O, Vec3[1, 2, 3]\n  atom :H, Vec3[4, 5, 6]\n  atom :H, Vec3[7, 8, 9]\nend\nstructure.coords.center # => [4.0 5.0 6.0]\nstructure.coords.com    # => [1.5035248 2.5035248 3.5035248]\n```","summary":"<p>Returns the center of mass.</p>","abstract":false,"args":[],"args_string":" : Vec3","args_html":" : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":99,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L99"},"def":{"name":"com","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"center = Vec3[0, 0, 0]\ntotal_mass = 0.0\neach_with_atom do |vec, atom|\n  center = center + (atom.mass * vec)\n  total_mass = total_mass + atom.mass\nend\ncenter / total_mass\n"}},{"html_id":"each(fractional:Bool=false):Iterator(Vec3)-instance-method","name":"each","doc":"Must return an `Iterator` over the elements in this collection.","summary":"<p>Must return an <code>Iterator</code> over the elements in this collection.</p>","abstract":false,"args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false) : Iterator(Vec3)","args_html":"(fractional : Bool = <span class=\"n\">false</span>) : Iterator(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":109,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L109"},"def":{"name":"each","args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Vec3)","visibility":"Public","body":"if fractional\n  if lattice = @lattice\n  else\n    raise(NotPeriodicError.new)\n  end\n  FractionalCoordinatesIterator.new(@atoms, lattice)\nelse\n  @atoms.each_atom.map(&.coords)\nend"}},{"html_id":"each(fractional:Bool=false,&block:Vec3->)-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":false,"args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false, &block : Vec3 -> )","args_html":"(fractional : Bool = <span class=\"n\">false</span>, &block : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> )","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":118,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L118"},"def":{"name":"each","args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Vec3 ->)"},"return_type":"","visibility":"Public","body":"if fractional\n  if lattice = @lattice\n  else\n    raise(NotPeriodicError.new)\n  end\n  @atoms.each_atom do |atom|\n    yield atom.coords.to_fractional(lattice)\n  end\nelse\n  @atoms.each_atom do |atom|\n    yield atom.coords\n  end\nend"}},{"html_id":"each_with_atom(fractional:Bool=false,&block:Vec3,Atom->)-instance-method","name":"each_with_atom","doc":null,"summary":null,"abstract":false,"args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false, &block : Vec3, Atom -> )","args_html":"(fractional : Bool = <span class=\"n\">false</span>, &block : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, <a href=\"../../Chem/Atom.html\">Atom</a> -> )","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":127,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L127"},"def":{"name":"each_with_atom","args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Vec3, Atom ->)"},"return_type":"","visibility":"Public","body":"iter = @atoms.each_atom\neach(fractional) do |vec|\n  if (  atom = iter.next).is_a?(Atom)\n  else\n    break\n  end\n  yield vec, atom\nend\n"}},{"html_id":"map(fractional:Bool=false,&block:Vec3->Vec3):Array(Vec3)-instance-method","name":"map","doc":"Returns an `Array` with the results of running the block against each element of the collection.\n\n```\n[1, 2, 3].map { |i| i * 10 } # => [10, 20, 30]\n```","summary":"<p>Returns an <code><a href=\"../../Array.html\">Array</a></code> with the results of running the block against each element of the collection.</p>","abstract":false,"args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false, &block : Vec3 -> Vec3) : Array(Vec3)","args_html":"(fractional : Bool = <span class=\"n\">false</span>, &block : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":135,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L135"},"def":{"name":"map","args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Vec3 -> Vec3)"},"return_type":"Array(Vec3)","visibility":"Public","body":"ary = [] of Vec3\neach(fractional) do |coords|\n  ary << (yield coords)\nend\nary\n"}},{"html_id":"map!(fractional:Bool=false,&block:Vec3->Vec3):self-instance-method","name":"map!","doc":null,"summary":null,"abstract":false,"args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false, &block : Vec3 -> Vec3) : self","args_html":"(fractional : Bool = <span class=\"n\">false</span>, &block : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":141,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L141"},"def":{"name":"map!","args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Vec3 -> Vec3)"},"return_type":"self","visibility":"Public","body":"if fractional\n  if lattice = @lattice\n  else\n    raise(NotPeriodicError.new)\n  end\n  @atoms.each_atom do |atom|\n    atom.coords = (yield atom.coords.to_fractional(lattice)).to_cartesian(lattice)\n  end\nelse\n  @atoms.each_atom do |atom|\n    atom.coords = yield atom.coords\n  end\nend\nself\n"}},{"html_id":"map_with_atom(fractional:Bool=false,&block:Vec3,Atom->Vec3):Array(Vec3)-instance-method","name":"map_with_atom","doc":null,"summary":null,"abstract":false,"args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false, &block : Vec3, Atom -> Vec3) : Array(Vec3)","args_html":"(fractional : Bool = <span class=\"n\">false</span>, &block : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, <a href=\"../../Chem/Atom.html\">Atom</a> -> <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":153,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L153"},"def":{"name":"map_with_atom","args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Vec3, Atom -> Vec3)"},"return_type":"Array(Vec3)","visibility":"Public","body":"ary = [] of Vec3\neach_with_atom(fractional) do |coords, atom|\n  ary << (yield coords, atom)\nend\nary\n"}},{"html_id":"map_with_atom!(fractional:Bool=false,&block:Vec3,Atom->Vec3):self-instance-method","name":"map_with_atom!","doc":null,"summary":null,"abstract":false,"args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false, &block : Vec3, Atom -> Vec3) : self","args_html":"(fractional : Bool = <span class=\"n\">false</span>, &block : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, <a href=\"../../Chem/Atom.html\">Atom</a> -> <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":162,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L162"},"def":{"name":"map_with_atom!","args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Vec3, Atom -> Vec3)"},"return_type":"self","visibility":"Public","body":"iter = @atoms.each_atom\nmap!(fractional) do |vec|\n  if (  atom = iter.next).is_a?(Atom)\n  else\n    break\n  end\n  yield vec, atom\nend\nself\n"}},{"html_id":"to_a(fractional:Bool=false):Array(Vec3)-instance-method","name":"to_a","doc":"Returns an `Array` with all the elements in the collection.\n\n```\n(1..5).to_a # => [1, 2, 3, 4, 5]\n```","summary":"<p>Returns an <code><a href=\"../../Array.html\">Array</a></code> with all the elements in the collection.</p>","abstract":false,"args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false) : Array(Vec3)","args_html":"(fractional : Bool = <span class=\"n\">false</span>) : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":187,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L187"},"def":{"name":"to_a","args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Vec3)","visibility":"Public","body":"ary = [] of Vec3\neach(fractional) do |coords|\n  ary << coords\nend\nary\n"}},{"html_id":"to_cartesian!:self-instance-method","name":"to_cartesian!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":193,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L193"},"def":{"name":"to_cartesian!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if lattice = @lattice\nelse\n  raise(NotPeriodicError.new)\nend\nmap!(&.to_cartesian(lattice))\n"}},{"html_id":"to_fractional!:self-instance-method","name":"to_fractional!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":198,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L198"},"def":{"name":"to_fractional!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if lattice = @lattice\nelse\n  raise(NotPeriodicError.new)\nend\nmap!(&.to_fractional(lattice))\n"}},{"html_id":"transform(transform:AffineTransform):Array(Vec3)-instance-method","name":"transform","doc":null,"summary":null,"abstract":false,"args":[{"name":"transform","doc":null,"default_value":"","external_name":"transform","restriction":"AffineTransform"}],"args_string":"(transform : AffineTransform) : Array(Vec3)","args_html":"(transform : <a href=\"../../Chem/Spatial/AffineTransform.html\">AffineTransform</a>) : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":171,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L171"},"def":{"name":"transform","args":[{"name":"transform","doc":null,"default_value":"","external_name":"transform","restriction":"AffineTransform"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Vec3)","visibility":"Public","body":"map(&.*(transform))"}},{"html_id":"transform!(transform:AffineTransform):self-instance-method","name":"transform!","doc":null,"summary":null,"abstract":false,"args":[{"name":"transform","doc":null,"default_value":"","external_name":"transform","restriction":"AffineTransform"}],"args_string":"(transform : AffineTransform) : self","args_html":"(transform : <a href=\"../../Chem/Spatial/AffineTransform.html\">AffineTransform</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":175,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L175"},"def":{"name":"transform!","args":[{"name":"transform","doc":null,"default_value":"","external_name":"transform","restriction":"AffineTransform"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"map!(&.*(transform))"}},{"html_id":"translate(byoffset:Vec3):Array(Vec3)-instance-method","name":"translate","doc":null,"summary":null,"abstract":false,"args":[{"name":"offset","doc":null,"default_value":"","external_name":"by","restriction":"Vec3"}],"args_string":"(by offset : Vec3) : Array(Vec3)","args_html":"(by offset : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":179,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L179"},"def":{"name":"translate","args":[{"name":"offset","doc":null,"default_value":"","external_name":"by","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Vec3)","visibility":"Public","body":"map(&.+(offset))"}},{"html_id":"translate!(byoffset:Vec3):self-instance-method","name":"translate!","doc":null,"summary":null,"abstract":false,"args":[{"name":"offset","doc":null,"default_value":"","external_name":"by","restriction":"Vec3"}],"args_string":"(by offset : Vec3) : self","args_html":"(by offset : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":183,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L183"},"def":{"name":"translate!","args":[{"name":"offset","doc":null,"default_value":"","external_name":"by","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"map!(&.+(offset))"}},{"html_id":"wrap(aroundcenter:Vec3?=nil):self-instance-method","name":"wrap","doc":null,"summary":null,"abstract":false,"args":[{"name":"center","doc":null,"default_value":"nil","external_name":"around","restriction":"Vec3 | ::Nil"}],"args_string":"(around center : Vec3? = nil) : self","args_html":"(around center : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>? = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":203,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L203"},"def":{"name":"wrap","args":[{"name":"center","doc":null,"default_value":"nil","external_name":"around","restriction":"Vec3 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if lattice = @lattice\nelse\n  raise(NotPeriodicError.new)\nend\nwrap(lattice, center)\n"}},{"html_id":"wrap(lattice:Lattice,aroundcenter:Vec3?=nil):self-instance-method","name":"wrap","doc":null,"summary":null,"abstract":false,"args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"},{"name":"center","doc":null,"default_value":"nil","external_name":"around","restriction":"Vec3 | ::Nil"}],"args_string":"(lattice : Lattice, around center : Vec3? = nil) : self","args_html":"(lattice : <a href=\"../../Chem/Lattice.html\">Lattice</a>, around center : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>? = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":208,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/coordinates_proxy.cr#L208"},"def":{"name":"wrap","args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"},{"name":"center","doc":null,"default_value":"nil","external_name":"around","restriction":"Vec3 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"center || (center = lattice.bounds.center)\nif lattice.cuboid?\n  vecs = {lattice.i, lattice.j, lattice.k}\n  normed_vecs = vecs.map(&.normalize)\n  map! do |vec|\n    d = vec - center\n    3.times do |i|\n      fd = (d.dot(normed_vecs[i])) / vecs[i].size\n      if fd.abs > 0.5\n        vec = vec - (fd.round * vecs[i])\n      end\n    end\n    vec\n  end\nelse\n  offset = (center.to_fractional(lattice)) - Vec3[0.5, 0.5, 0.5]\n  map!(fractional: true) do |vec|\n    vec - (vec - offset).floor\n  end\nend\nself\n"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Spatial/Error","path":"Chem/Spatial/Error.html","kind":"class","full_name":"Chem::Spatial::Error","name":"Error","abstract":false,"superclass":{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial.cr#L19"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"chem.cr/Chem/Spatial/NotPeriodicError","kind":"class","full_name":"Chem::Spatial::NotPeriodicError","name":"NotPeriodicError"}],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Spatial/Grid","path":"Chem/Spatial/Grid.html","kind":"class","full_name":"Chem::Spatial::Grid","name":"Grid","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},{"filename":"src/chem/spatial/grid.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L6"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":"TODO: add support for non-cubic grids (use lattice instead of bounds?)\n      - i to coords: origin.x + (i / nx) * lattice.a\n      - coords to i: ?\nTODO: implement functionality from vmd's volmap","summary":"<p><span class=\"flag orange\">TODO</span>  add support for non-cubic grids (use lattice instead of bounds?)       - i to coords: origin.x + (i / nx) * lattice.a       - coords to i: ? TODO: implement functionality from vmd's volmap</p>","class_methods":[],"constructors":[{"html_id":"[](ni:Int,nj:Int,nk:Int):self-class-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"ni","doc":null,"default_value":"","external_name":"ni","restriction":"Int"},{"name":"nj","doc":null,"default_value":"","external_name":"nj","restriction":"Int"},{"name":"nk","doc":null,"default_value":"","external_name":"nk","restriction":"Int"}],"args_string":"(ni : Int, nj : Int, nk : Int) : self","args_html":"(ni : Int, nj : Int, nk : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":39,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L39"},"def":{"name":"[]","args":[{"name":"ni","doc":null,"default_value":"","external_name":"ni","restriction":"Int"},{"name":"nj","doc":null,"default_value":"","external_name":"nj","restriction":"Int"},{"name":"nk","doc":null,"default_value":"","external_name":"nk","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new({ni.to_i, nj.to_i, nk.to_i}, Bounds.zero)"}},{"html_id":"atom_distance(structure:Structure,dim:Dimensions,bounds:Bounds?=nil):self-class-method","name":"atom_distance","doc":null,"summary":null,"abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","doc":null,"default_value":"nil","external_name":"bounds","restriction":"Bounds | ::Nil"}],"args_string":"(structure : Structure, dim : Dimensions, bounds : Bounds? = nil) : self","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>, dim : <a href=\"../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>, bounds : <a href=\"../../Chem/Spatial/Bounds.html\">Bounds</a>? = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":43,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L43"},"def":{"name":"atom_distance","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","doc":null,"default_value":"nil","external_name":"bounds","restriction":"Bounds | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"grid = new(dim, (bounds || structure.coords.bounds))\nkdtree = KDTree.new(structure)\ngrid.map_with_coords! do |_, vec|\n  Math.sqrt((kdtree.nearest_with_distance(vec))[1])\nend\n"}},{"html_id":"atom_distance_like(other:self|Info,structure:Structure):self-class-method","name":"atom_distance_like","doc":"Returns a grid filled with the distances to the nearest atom. It will have the\nsame bounds and points as *other*.\n\n```\nstructure = Structure.read \"path/to/file\"\ninfo = Grid::Info.new Bounds[1.5, 2.135, 6.12], {10, 10, 10}\ngrid = Grid.atom_distance structure, info.dim, info.bounds\nGrid.atom_distance_like(info, structure) == grid # => true\n```","summary":"<p>Returns a grid filled with the distances to the nearest atom.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self | Info"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(other : self | Info, structure : Structure) : self","args_html":"(other : <span class=\"k\">self</span> | <a href=\"../../Chem/Spatial/Grid/Info.html\">Info</a>, structure : <a href=\"../../Chem/Structure.html\">Structure</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":62,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L62"},"def":{"name":"atom_distance_like","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self | Info"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"atom_distance(structure, other.dim, other.bounds)"}},{"html_id":"build(info:Info,source_file:String|Path|Nil=nil,&:Pointer(Float64),Int32->):self-class-method","name":"build","doc":"Creates a new `Grid` with *info* and yields a buffer to be filled.\n\nThis method is **unsafe**, but it is usually used to initialize the buffer in a\nlinear fashion, e.g., reading values from a file.\n\n```\nGrid.build(Grid.info(\"/path/to/file\")) do |buffer, size|\n  size.times do |i|\n    buffer[i] = read_value\n  end\nend\n```","summary":"<p>Creates a new <code><a href=\"../../Chem/Spatial/Grid.html\">Grid</a></code> with <em>info</em> and yields a buffer to be filled.</p>","abstract":false,"args":[{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":"Info"},{"name":"source_file","doc":null,"default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"args_string":"(info : Info, source_file : String | Path | Nil = nil, & : Pointer(Float64), Int32 -> ) : self","args_html":"(info : <a href=\"../../Chem/Spatial/Grid/Info.html\">Info</a>, source_file : String | Path | Nil = <span class=\"n\">nil</span>, & : Pointer(Float64), Int32 -> ) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":78,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L78"},"def":{"name":"build","args":[{"name":"info","doc":null,"default_value":"","external_name":"info","restriction":"Info"},{"name":"source_file","doc":null,"default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Pointer(Float64), Int32 ->)"},"return_type":"self","visibility":"Public","body":"grid = new(info.dim, info.bounds, source_file)\nyield grid.to_unsafe, grid.size\ngrid\n"}},{"html_id":"build(dim:Dimensions,bounds:Bounds,source_file:String|Path|Nil=nil,&:Pointer(Float64),Int32->):self-class-method","name":"build","doc":null,"summary":null,"abstract":false,"args":[{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","doc":null,"default_value":"","external_name":"bounds","restriction":"Bounds"},{"name":"source_file","doc":null,"default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"args_string":"(dim : Dimensions, bounds : Bounds, source_file : String | Path | Nil = nil, & : Pointer(Float64), Int32 -> ) : self","args_html":"(dim : <a href=\"../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>, bounds : <a href=\"../../Chem/Spatial/Bounds.html\">Bounds</a>, source_file : String | Path | Nil = <span class=\"n\">nil</span>, & : Pointer(Float64), Int32 -> ) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":86,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L86"},"def":{"name":"build","args":[{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","doc":null,"default_value":"","external_name":"bounds","restriction":"Bounds"},{"name":"source_file","doc":null,"default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Pointer(Float64), Int32 ->)"},"return_type":"self","visibility":"Public","body":"grid = new(dim, bounds, source_file)\nyield grid.to_unsafe, grid.size\ngrid\n"}},{"html_id":"empty_like(other:self|Info):self-class-method","name":"empty_like","doc":"Returns a zero-filled grid with the same bounds and points as *other*.\n\n```\ngrid = Grid.from_dx \"/path/to/grid\"\nother = Grid.empty_like grid\nother.bounds == grid.bounds # => true\nother.dim == grid.dim       # => true\nother.to_a.minmax           # => {0.0, 0.0}\n```","summary":"<p>Returns a zero-filled grid with the same bounds and points as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self | Info"}],"args_string":"(other : self | Info) : self","args_html":"(other : <span class=\"k\">self</span> | <a href=\"../../Chem/Spatial/Grid/Info.html\">Info</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":104,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L104"},"def":{"name":"empty_like","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self | Info"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(other.dim, other.bounds)"}},{"html_id":"fill_like(other:self|Info,value:Number):self-class-method","name":"fill_like","doc":"Returns a grid with the same bounds and points as *other* filled with *value*.\n\n```\ngrid = Grid.from_dx \"/path/to/grid\"\nother = Grid.fill_like grid, 2345.123\nother.bounds == grid.bounds # => true\nother.dim == grid.dim       # => true\nother.to_a.minmax           # => {2345.123, 2345.123}\n```","summary":"<p>Returns a grid with the same bounds and points as <em>other</em> filled with <em>value</em>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self | Info"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number"}],"args_string":"(other : self | Info, value : Number) : self","args_html":"(other : <span class=\"k\">self</span> | <a href=\"../../Chem/Spatial/Grid/Info.html\">Info</a>, value : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":117,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L117"},"def":{"name":"fill_like","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self | Info"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(other.dim, other.bounds, value.to_f)"}},{"html_id":"from_chgcar(input:IO|Path|String):self-class-method","name":"from_chgcar","doc":"Returns the grid encoded in *input* using the\n`Chem::VASP::Chgcar` file format. Arguments are forwarded to\n`Chem::VASP::Chgcar::Reader.open`.","summary":"<p>Returns the grid encoded in <em>input</em> using the <code><a href=\"../../Chem/VASP/Chgcar.html\">Chem::VASP::Chgcar</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_chgcar","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::VASP::Chgcar::Reader.open(input) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_cube(input:IO|Path|String):self-class-method","name":"from_cube","doc":"Returns the grid encoded in *input* using the\n`Chem::Cube` file format. Arguments are forwarded to\n`Chem::Cube::Reader.open`.","summary":"<p>Returns the grid encoded in <em>input</em> using the <code><a href=\"../../Chem/Cube.html\">Chem::Cube</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_cube","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::Cube::Reader.open(input) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_dx(input:IO|Path|String):self-class-method","name":"from_dx","doc":"Returns the grid encoded in *input* using the\n`Chem::DX` file format. Arguments are forwarded to\n`Chem::DX::Reader.open`.","summary":"<p>Returns the grid encoded in <em>input</em> using the <code><a href=\"../../Chem/DX.html\">Chem::DX</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_dx","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::DX::Reader.open(input) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_locpot(input:IO|Path|String):self-class-method","name":"from_locpot","doc":"Returns the grid encoded in *input* using the\n`Chem::VASP::Locpot` file format. Arguments are forwarded to\n`Chem::VASP::Locpot::Reader.open`.","summary":"<p>Returns the grid encoded in <em>input</em> using the <code><a href=\"../../Chem/VASP/Locpot.html\">Chem::VASP::Locpot</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_locpot","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::VASP::Locpot::Reader.open(input) do |reader|\n  reader.read_entry\nend"}},{"html_id":"new(dim:Dimensions,bounds:Bounds,source_file:String|Path|Nil=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","doc":null,"default_value":"","external_name":"bounds","restriction":"Bounds"},{"name":"source_file","doc":null,"default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"args_string":"(dim : Dimensions, bounds : Bounds, source_file : String | Path | Nil = nil)","args_html":"(dim : <a href=\"../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>, bounds : <a href=\"../../Chem/Spatial/Bounds.html\">Bounds</a>, source_file : String | Path | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/spatial/grid.cr","line_number":21,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L21"},"def":{"name":"new","args":[{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","doc":null,"default_value":"","external_name":"bounds","restriction":"Bounds"},{"name":"source_file","doc":null,"default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(dim, bounds, source_file)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(dim:Dimensions,bounds:Bounds,initial_value:Float64,source_file:String|Path|Nil=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","doc":null,"default_value":"","external_name":"bounds","restriction":"Bounds"},{"name":"initial_value","doc":null,"default_value":"","external_name":"initial_value","restriction":"Float64"},{"name":"source_file","doc":null,"default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"args_string":"(dim : Dimensions, bounds : Bounds, initial_value : Float64, source_file : String | Path | Nil = nil)","args_html":"(dim : <a href=\"../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>, bounds : <a href=\"../../Chem/Spatial/Bounds.html\">Bounds</a>, initial_value : Float64, source_file : String | Path | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/spatial/grid.cr","line_number":30,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L30"},"def":{"name":"new","args":[{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","doc":null,"default_value":"","external_name":"bounds","restriction":"Bounds"},{"name":"initial_value","doc":null,"default_value":"","external_name":"initial_value","restriction":"Float64"},{"name":"source_file","doc":null,"default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(dim, bounds, initial_value, source_file)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(dim:Dimensions,bounds:Bounds,source_file:String|Path|Nil=nil,&block:Location->Number)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","doc":null,"default_value":"","external_name":"bounds","restriction":"Bounds"},{"name":"source_file","doc":null,"default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"args_string":"(dim : Dimensions, bounds : Bounds, source_file : String | Path | Nil = nil, &block : Location -> Number)","args_html":"(dim : <a href=\"../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>, bounds : <a href=\"../../Chem/Spatial/Bounds.html\">Bounds</a>, source_file : String | Path | Nil = <span class=\"n\">nil</span>, &block : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a> -> <a href=\"../../Number.html\">Number</a>)","location":{"filename":"src/chem/spatial/grid.cr","line_number":121,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L121"},"def":{"name":"new","args":[{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","doc":null,"default_value":"","external_name":"bounds","restriction":"Bounds"},{"name":"source_file","doc":null,"default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Location -> Number)"},"return_type":"","visibility":"Public","body":"(new(dim, bounds, source_file)).map_with_loc! do |_, loc|\n  (yield loc).to_f\nend"}},{"html_id":"read(input:IO|Path|String,format:Chem::Format|String):self-class-method","name":"read","doc":"Returns the grid encoded in the specified file\nusing *format*. Raises `ArgumentError` if *format* has\nrequired arguments or cannot read `Chem::Spatial::Grid`.\n\nThe supported file formats are `Chem::Cube`, `Chem::DX`, `Chem::VASP::Chgcar`, `Chem::VASP::Locpot`. Use the\n`.from_*` methods to customize how the object is decoded in\nthe corresponding file format if possible.","summary":"<p>Returns the grid encoded in the specified file using <em>format</em>.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(input : IO | Path | String, format : Chem::Format | String) : self","args_html":"(input : IO | Path | String, format : <a href=\"../../Chem/Format.html\">Chem::Format</a> | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"read","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .cube?\n  from_cube(input)\nwhen .dx?\n  from_dx(input)\nwhen .chgcar?\n  from_chgcar(input)\nwhen .locpot?\n  from_locpot(input)\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::Spatial::Grid\"))\nend\n"}},{"html_id":"read(path:Path|String):self-class-method","name":"read","doc":"Returns the grid encoded in the specified file.\nThe file format is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nThe supported file formats are the following:\n\n- `Chem::Cube` (.cube)\n- `Chem::DX` (.dx)\n- `Chem::VASP::Chgcar` (CHGCAR)\n- `Chem::VASP::Locpot` (LOCPOT)\n\nUse the `.from_*` methods to customize how the object is\ndecoded in the corresponding file format if possible.","summary":"<p>Returns the grid encoded in the specified file.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"read","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"read(path, ::Chem::Format.from_filename(path))"}},{"html_id":"vdw_mask(structure:Structure,dim:Dimensions,bounds:Bounds?=nil,delta:Float64=0.02):self-class-method","name":"vdw_mask","doc":"TODO: add more tests\nFIXME: check delta calculation (grid.resolution.min / 2 shouldn't be enough?)","summary":"<p><span class=\"flag orange\">TODO</span>  add more tests FIXME: check delta calculation (grid.resolution.min / 2 shouldn't be enough?)</p>","abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","doc":null,"default_value":"nil","external_name":"bounds","restriction":"Bounds | ::Nil"},{"name":"delta","doc":null,"default_value":"0.02","external_name":"delta","restriction":"Float64"}],"args_string":"(structure : Structure, dim : Dimensions, bounds : Bounds? = nil, delta : Float64 = 0.02) : self","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>, dim : <a href=\"../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>, bounds : <a href=\"../../Chem/Spatial/Bounds.html\">Bounds</a>? = <span class=\"n\">nil</span>, delta : Float64 = <span class=\"n\">0.02</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":132,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L132"},"def":{"name":"vdw_mask","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","doc":null,"default_value":"nil","external_name":"bounds","restriction":"Bounds | ::Nil"},{"name":"delta","doc":null,"default_value":"0.02","external_name":"delta","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"grid = new(dim, (bounds || structure.coords.bounds))\ndelta = Math.min(delta, grid.resolution.min / 2)\nkdtree = KDTree.new(structure)\nvdw_cutoff = structure.each_atom.max_of(&.vdw_radius)\nstructure.each_atom do |atom|\n  grid.each_loc(atom.coords, atom.vdw_radius + delta) do |loc, d|\n    too_close = false\n    kdtree.each_neighbor(grid.coords_at(loc), within: vdw_cutoff) do |other, od|\n      if (Math.sqrt(od)) < (other.vdw_radius - delta)\n        too_close = true\n      end\n    end\n    if (!too_close) && (d - atom.vdw_radius).abs < delta\n      grid[loc] = 1\n    end\n  end\nend\ngrid\n"}},{"html_id":"vdw_mask_like(other:self|Info,structure:Structure,delta:Float64=0.02):self-class-method","name":"vdw_mask_like","doc":"Returns a grid mask with the points at the vdW spheres set to 1. It will have the\nsame bounds and points as *other*.\n\n```\nstructure = Structure.read \"path/to/file\"\ninfo = Grid::Info.new Bounds[5.213, 6.823, 10.352], {20, 25, 40}\ngrid = Grid.vdw_mask structure, info.dim, info.bounds\nGrid.vdw_mask_like(info, structure) == grid # => true\n```","summary":"<p>Returns a grid mask with the points at the vdW spheres set to 1.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self | Info"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"delta","doc":null,"default_value":"0.02","external_name":"delta","restriction":"Float64"}],"args_string":"(other : self | Info, structure : Structure, delta : Float64 = 0.02) : self","args_html":"(other : <span class=\"k\">self</span> | <a href=\"../../Chem/Spatial/Grid/Info.html\">Info</a>, structure : <a href=\"../../Chem/Structure.html\">Structure</a>, delta : Float64 = <span class=\"n\">0.02</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":174,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L174"},"def":{"name":"vdw_mask_like","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"self | Info"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"delta","doc":null,"default_value":"0.02","external_name":"delta","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"vdw_mask(structure, other.dim, other.bounds, delta)"}}],"instance_methods":[{"html_id":"*(rhs:Number):self-instance-method","name":"*","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":188,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L188"},"def":{"name":"*","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Grid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele * rhs\n  end\nend"}},{"html_id":"*(rhs:self):self-instance-method","name":"*","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":188,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L188"},"def":{"name":"*","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if @dim == rhs.dim\nelse\n  raise(ArgumentError.new(\"Incompatible grid\"))\nend\nGrid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele * (rhs.unsafe_fetch(i))\n  end\nend\n"}},{"html_id":"+(rhs:Number):self-instance-method","name":"+","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":188,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L188"},"def":{"name":"+","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Grid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele + rhs\n  end\nend"}},{"html_id":"+(rhs:self):self-instance-method","name":"+","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":188,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L188"},"def":{"name":"+","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if @dim == rhs.dim\nelse\n  raise(ArgumentError.new(\"Incompatible grid\"))\nend\nGrid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele + (rhs.unsafe_fetch(i))\n  end\nend\n"}},{"html_id":"-(rhs:Number):self-instance-method","name":"-","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":188,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L188"},"def":{"name":"-","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Grid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele - rhs\n  end\nend"}},{"html_id":"-(rhs:self):self-instance-method","name":"-","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":188,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L188"},"def":{"name":"-","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if @dim == rhs.dim\nelse\n  raise(ArgumentError.new(\"Incompatible grid\"))\nend\nGrid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele - (rhs.unsafe_fetch(i))\n  end\nend\n"}},{"html_id":"/(rhs:Number):self-instance-method","name":"/","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":188,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L188"},"def":{"name":"/","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Grid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele / rhs\n  end\nend"}},{"html_id":"/(rhs:self):self-instance-method","name":"/","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":188,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L188"},"def":{"name":"/","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if @dim == rhs.dim\nelse\n  raise(ArgumentError.new(\"Incompatible grid\"))\nend\nGrid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele / (rhs.unsafe_fetch(i))\n  end\nend\n"}},{"html_id":"==(rhs:self):Bool-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Bool","args_html":"(rhs : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/spatial/grid.cr","line_number":180,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L180"},"def":{"name":"==","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if (@dim == rhs.dim) && (@bounds == rhs.bounds)\nelse\n  return false\nend\neach_with_index do |ele, i|\n  if ele != (rhs.unsafe_fetch(i))\n    return false\n  end\nend\ntrue\n"}},{"html_id":"[](*args,**options):Float64-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options) : Float64","args_html":"(*args, **options) : Float64","location":{"filename":"src/chem/spatial/grid.cr","line_number":208,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L208"},"def":{"name":"[]","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"self[*args, **options]? || (raise(IndexError.new))"}},{"html_id":"[]=(i:Int,j:Int,k:Int,value:Float64):Float64-instance-method","name":"[]=","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float64"}],"args_string":"(i : Int, j : Int, k : Int, value : Float64) : Float64","args_html":"(i : Int, j : Int, k : Int, value : Float64) : Float64","location":{"filename":"src/chem/spatial/grid.cr","line_number":240,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L240"},"def":{"name":"[]=","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"self[Location.new(i, j, k)] = value"}},{"html_id":"[]=(i:Int,value:Float64):Float64-instance-method","name":"[]=","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float64"}],"args_string":"(i : Int, value : Float64) : Float64","args_html":"(i : Int, value : Float64) : Float64","location":{"filename":"src/chem/spatial/grid.cr","line_number":233,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L233"},"def":{"name":"[]=","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"if i < 0\n  i = i + size\nend\nif 0 <= i && i < size\nelse\n  raise(IndexError.new)\nend\n@buffer[i] = value\n"}},{"html_id":"[]=(loc:Location,value:Float64):Float64-instance-method","name":"[]=","doc":null,"summary":null,"abstract":false,"args":[{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"Location"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float64"}],"args_string":"(loc : Location, value : Float64) : Float64","args_html":"(loc : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>, value : Float64) : Float64","location":{"filename":"src/chem/spatial/grid.cr","line_number":245,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L245"},"def":{"name":"[]=","args":[{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"Location"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"if i = index(loc)\nelse\n  raise(IndexError.new)\nend\n@buffer[i] = value\n"}},{"html_id":"[]?(i:Int,j:Int,k:Int):Float64?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Int"}],"args_string":"(i : Int, j : Int, k : Int) : Float64?","args_html":"(i : Int, j : Int, k : Int) : Float64?","location":{"filename":"src/chem/spatial/grid.cr","line_number":213,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L213"},"def":{"name":"[]?","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"self[Location.new(i, j, k)]?"}},{"html_id":"[]?(loc:Location):Float64?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"Location"}],"args_string":"(loc : Location) : Float64?","args_html":"(loc : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>) : Float64?","location":{"filename":"src/chem/spatial/grid.cr","line_number":218,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L218"},"def":{"name":"[]?","args":[{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"Location"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"if i = index(loc)\n  unsafe_fetch(i)\nend"}},{"html_id":"[]?(vec:Vec3):Float64?-instance-method","name":"[]?","doc":"TODO: add interpolation (check ARBInterp)","summary":"<p><span class=\"flag orange\">TODO</span>  add interpolation (check ARBInterp)</p>","abstract":false,"args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : Float64?","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64?","location":{"filename":"src/chem/spatial/grid.cr","line_number":226,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L226"},"def":{"name":"[]?","args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"if i = index(vec)\n  unsafe_fetch(i)\nend"}},{"html_id":"bounds:Bounds-instance-method","name":"bounds","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bounds","args_html":" : <a href=\"../../Chem/Spatial/Bounds.html\">Bounds</a>","location":{"filename":"src/chem/spatial/grid.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L13"},"def":{"name":"bounds","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bounds","visibility":"Public","body":"@bounds"}},{"html_id":"coords_at(*args,**options):Vec3-instance-method","name":"coords_at","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options) : Vec3","args_html":"(*args, **options) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/grid.cr","line_number":250,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L250"},"def":{"name":"coords_at","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"(coords_at?(*args, **options)) || (raise(IndexError.new))"}},{"html_id":"coords_at?(i:Int,j:Int,k:Int):Vec3?-instance-method","name":"coords_at?","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Int"}],"args_string":"(i : Int, j : Int, k : Int) : Vec3?","args_html":"(i : Int, j : Int, k : Int) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>?","location":{"filename":"src/chem/spatial/grid.cr","line_number":260,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L260"},"def":{"name":"coords_at?","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3 | ::Nil","visibility":"Public","body":"coords_at?(Location.new(i, j, k))"}},{"html_id":"coords_at?(i:Int):Vec3?-instance-method","name":"coords_at?","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"args_string":"(i : Int) : Vec3?","args_html":"(i : Int) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>?","location":{"filename":"src/chem/spatial/grid.cr","line_number":254,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L254"},"def":{"name":"coords_at?","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3 | ::Nil","visibility":"Public","body":"if loc = loc_at?(i)\n  coords_at?(loc)\nend"}},{"html_id":"coords_at?(loc:Location):Vec3?-instance-method","name":"coords_at?","doc":null,"summary":null,"abstract":false,"args":[{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"Location"}],"args_string":"(loc : Location) : Vec3?","args_html":"(loc : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>?","location":{"filename":"src/chem/spatial/grid.cr","line_number":264,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L264"},"def":{"name":"coords_at?","args":[{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"Location"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3 | ::Nil","visibility":"Public","body":"if index(loc)\nelse\n  return\nend\nunsafe_coords_at(loc)\n"}},{"html_id":"dim:Dimensions-instance-method","name":"dim","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Dimensions","args_html":" : <a href=\"../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>","location":{"filename":"src/chem/spatial/grid.cr","line_number":14,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L14"},"def":{"name":"dim","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Dimensions","visibility":"Public","body":"@dim"}},{"html_id":"dup:self-instance-method","name":"dup","doc":"Returns a shallow copy of this object.\n\nThis allocates a new object and copies the contents of\n`self` into it.","summary":"<p>Returns a shallow copy of this object.</p>","abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":269,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L269"},"def":{"name":"dup","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Grid.build(@dim, @bounds) do |buffer|\n  buffer.copy_from(@buffer, size)\nend"}},{"html_id":"each_axial_slice(axis:Int,reuse:Bool|Array(Float64)=false,&:Array(Float64)->):Nil-instance-method","name":"each_axial_slice","doc":"Iterates over slices along *axis*. Axis is specified as an\ninteger: 0-2 refer to the direction of the first, second or third\nbasis vector, respectively.\n\n```\ngrid = Grid.new({2, 3, 2}, Bounds[1, 1, 1]) { |i, j, k| i * 6 + j * 2 + k }\ngrid.to_a # => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nslices = [] of Array(Float64)\ngrid.each_axial_slice(axis: 1) { |slice| slices << slice }\nslices # => [[0, 1, 6, 7], [2, 3, 8, 9], [4, 5, 10, 11]]\n```\n\nWhen using read-only slices, one can specify the *reuse* option to\nprevent many memory allocations:\n\n* If *reuse* is an `Array`, this array will be reused.\n* If *reuse* is true, the method will create a new array and reuse\n  it.\n* If *reuse* is false (default), a new array is created and\n  yielded on each iteration.","summary":"<p>Iterates over slices along <em>axis</em>.</p>","abstract":false,"args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int"},{"name":"reuse","doc":null,"default_value":"false","external_name":"reuse","restriction":"Bool | Array(Float64)"}],"args_string":"(axis : Int, reuse : Bool | Array(Float64) = false, & : Array(Float64) -> ) : Nil","args_html":"(axis : Int, reuse : Bool | <a href=\"../../Array.html\">Array</a>(Float64) = <span class=\"n\">false</span>, & : <a href=\"../../Array.html\">Array</a>(Float64) -> ) : Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":295,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L295"},"def":{"name":"each_axial_slice","args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int"},{"name":"reuse","doc":null,"default_value":"false","external_name":"reuse","restriction":"Bool | Array(Float64)"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Array(Float64) ->)"},"return_type":"Nil","visibility":"Public","body":"njk = nj * nk\ncase axis\nwhen 0\n  each_axial_slice(ni, njk, reuse) do |buffer, i|\n    njk.times do |i_|\n      buffer << (unsafe_fetch((i * njk) + i_))\n    end\n    yield buffer\n  end\nwhen 1\n  each_axial_slice(nj, ni * nk, reuse) do |buffer, j|\n    ni.times do |i|\n      nk.times do |i_|\n        buffer << (unsafe_fetch(((i * njk) + (j * nk)) + i_))\n      end\n    end\n    yield buffer\n  end\nwhen 2\n  each_axial_slice(nk, ni * nj, reuse) do |buffer, k|\n    ni.times do |i|\n      nj.times do |j|\n        buffer << (unsafe_fetch(((i * njk) + (j * nk)) + k))\n      end\n    end\n    yield buffer\n  end\nelse\n  raise(IndexError.new)\nend\n"}},{"html_id":"each_coords(&:Vec3->):Nil-instance-method","name":"each_coords","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : Vec3 -> ) : Nil","args_html":"(& : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> ) : Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":326,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L326"},"def":{"name":"each_coords","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Vec3 ->)"},"return_type":"Nil","visibility":"Public","body":"each_loc do |loc|\n  yield unsafe_coords_at(loc)\nend"}},{"html_id":"each_loc(vec:Vec3,cutoff:Number,&:Location,Float64->):Nil-instance-method","name":"each_loc","doc":null,"summary":null,"abstract":false,"args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"},{"name":"cutoff","doc":null,"default_value":"","external_name":"cutoff","restriction":"Number"}],"args_string":"(vec : Vec3, cutoff : Number, & : Location, Float64 -> ) : Nil","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, cutoff : <a href=\"../../Number.html\">Number</a>, & : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>, Float64 -> ) : Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":342,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L342"},"def":{"name":"each_loc","args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"},{"name":"cutoff","doc":null,"default_value":"","external_name":"cutoff","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Location, Float64 ->)"},"return_type":"Nil","visibility":"Public","body":"if loc = loc_at?(vec)\nelse\n  return\nend\ndi, dj, dk = resolution.map do |ele|\n  (cutoff / ele).to_i\nend\ncutoff = cutoff * cutoff\n((((loc[0] - di) - 1)..((loc[0] + di) + 1)).clamp(0..(ni - 1))).each do |i|\n  ((((loc[1] - dj) - 1)..((loc[1] + dj) + 1)).clamp(0..(nj - 1))).each do |j|\n    ((((loc[2] - dk) - 1)..((loc[2] + dk) + 1)).clamp(0..(nk - 1))).each do |k|\n      new_loc = Location.new(i, j, k)\n      d = Spatial.squared_distance(vec, unsafe_coords_at(new_loc))\n      if d < cutoff\n        yield new_loc, Math.sqrt(d)\n      end\n    end\n  end\nend\n"}},{"html_id":"each_loc(&:Location->):Nil-instance-method","name":"each_loc","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : Location -> ) : Nil","args_html":"(& : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a> -> ) : Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":332,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L332"},"def":{"name":"each_loc","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Location ->)"},"return_type":"Nil","visibility":"Public","body":"ni.times do |i|\n  nj.times do |j|\n    nk.times do |k|\n      yield Location.new(i, j, k)\n    end\n  end\nend"}},{"html_id":"each_with_coords(&:Float64,Vec3->):Nil-instance-method","name":"each_with_coords","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : Float64, Vec3 -> ) : Nil","args_html":"(& : Float64, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> ) : Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":357,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L357"},"def":{"name":"each_with_coords","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Float64, Vec3 ->)"},"return_type":"Nil","visibility":"Public","body":"each_index do |i|\n  yield unsafe_fetch(i), unsafe_coords_at(unsafe_loc_at(i))\nend"}},{"html_id":"each_with_loc(&:Float64,Location->):Nil-instance-method","name":"each_with_loc","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : Float64, Location -> ) : Nil","args_html":"(& : Float64, <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a> -> ) : Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":363,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L363"},"def":{"name":"each_with_loc","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Float64, Location ->)"},"return_type":"Nil","visibility":"Public","body":"each_with_index do |ele, i|\n  yield ele, unsafe_loc_at(i)\nend"}},{"html_id":"includes?(*args,**options)-instance-method","name":"includes?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/grid.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L19"},"def":{"name":"includes?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@bounds.includes?(*args, **options)"}},{"html_id":"includes?(*args,**options,&)-instance-method","name":"includes?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/grid.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L19"},"def":{"name":"includes?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@bounds.includes?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"index(loc:Location):Int32?-instance-method","name":"index","doc":null,"summary":null,"abstract":false,"args":[{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"Location"}],"args_string":"(loc : Location) : Int32?","args_html":"(loc : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>) : Int32?","location":{"filename":"src/chem/spatial/grid.cr","line_number":369,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L369"},"def":{"name":"index","args":[{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"Location"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"loc = loc.map_with_index do |ele, i|\n  ele < 0 ? ele + @dim[i] : ele\nend\nloc.each_with_index do |ele, i|\n  if 0 <= ele && ele < @dim[i]\n  else\n    return\n  end\nend\nunsafe_index(loc)\n"}},{"html_id":"index(vec:Vec3):Int32?-instance-method","name":"index","doc":null,"summary":null,"abstract":false,"args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : Int32?","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : Int32?","location":{"filename":"src/chem/spatial/grid.cr","line_number":377,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L377"},"def":{"name":"index","args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32 | ::Nil","visibility":"Public","body":"if loc = loc_at?(vec)\n  unsafe_index(loc)\nend"}},{"html_id":"index!(*args,**options):Int32-instance-method","name":"index!","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options) : Int32","args_html":"(*args, **options) : Int32","location":{"filename":"src/chem/spatial/grid.cr","line_number":383,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L383"},"def":{"name":"index!","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"(index(*args, **options)) || (raise(IndexError.new))"}},{"html_id":"loc_at(*args,**options):Location-instance-method","name":"loc_at","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options) : Location","args_html":"(*args, **options) : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>","location":{"filename":"src/chem/spatial/grid.cr","line_number":387,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L387"},"def":{"name":"loc_at","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Location","visibility":"Public","body":"(loc_at?(*args, **options)) || (raise(IndexError.new))"}},{"html_id":"loc_at?(i:Int):Location?-instance-method","name":"loc_at?","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"args_string":"(i : Int) : Location?","args_html":"(i : Int) : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>?","location":{"filename":"src/chem/spatial/grid.cr","line_number":391,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L391"},"def":{"name":"loc_at?","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Location | ::Nil","visibility":"Public","body":"if i < 0\n  i = i + size\nend\nif 0 <= i && i < size\n  unsafe_loc_at(i)\nend\n"}},{"html_id":"loc_at?(vec:Vec3):Location?-instance-method","name":"loc_at?","doc":null,"summary":null,"abstract":false,"args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : Location?","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>?","location":{"filename":"src/chem/spatial/grid.cr","line_number":396,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L396"},"def":{"name":"loc_at?","args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Location | ::Nil","visibility":"Public","body":"if vec.in?(bounds)\nelse\n  return\nend\nvec = (vec - origin).to_fractional(bounds.basis)\n(vec * @dim.map(&.-(1))).round.to_t.map(&.to_i)\n"}},{"html_id":"map(&:Float64->Float64):self-instance-method","name":"map","doc":"Returns an `Array` with the results of running the block against each element of the collection.\n\n```\n[1, 2, 3].map { |i| i * 10 } # => [10, 20, 30]\n```","summary":"<p>Returns an <code><a href=\"../../Array.html\">Array</a></code> with the results of running the block against each element of the collection.</p>","abstract":false,"args":[],"args_string":"(& : Float64 -> Float64) : self","args_html":"(& : Float64 -> Float64) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":402,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L402"},"def":{"name":"map","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Float64 -> Float64)"},"return_type":"self","visibility":"Public","body":"dup.map! do |ele|\n  yield ele\nend"}},{"html_id":"map!(&:Float64->Float64):self-instance-method","name":"map!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : Float64 -> Float64) : self","args_html":"(& : Float64 -> Float64) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":408,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L408"},"def":{"name":"map!","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Float64 -> Float64)"},"return_type":"self","visibility":"Public","body":"@buffer.map!(size) do |ele|\n  yield ele\nend\nself\n"}},{"html_id":"map_with_coords(&:Float64,Vec3->Number):self-instance-method","name":"map_with_coords","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : Float64, Vec3 -> Number) : self","args_html":"(& : Float64, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":413,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L413"},"def":{"name":"map_with_coords","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Float64, Vec3 -> Number)"},"return_type":"self","visibility":"Public","body":"dup.map_with_coords! do |ele, vec|\n  yield ele, vec\nend"}},{"html_id":"map_with_coords!(&:Float64,Vec3->Number):self-instance-method","name":"map_with_coords!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : Float64, Vec3 -> Number) : self","args_html":"(& : Float64, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":419,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L419"},"def":{"name":"map_with_coords!","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Float64, Vec3 -> Number)"},"return_type":"self","visibility":"Public","body":"each_with_index do |ele, i|\n  @buffer[i] = (yield ele, unsafe_coords_at(unsafe_loc_at(i))).to_f\nend\nself\n"}},{"html_id":"map_with_index(&:Float64,Int32->Number):self-instance-method","name":"map_with_index","doc":"Like `map`, but the block gets passed both the element and its index.\n\n```\n[\"Alice\", \"Bob\"].map_with_index { |name, i| \"User ##{i}: #{name}\" }\n# => [\"User #0: Alice\", \"User #1: Bob\"]\n```\n\nAccepts an optional *offset* parameter, which tells it to start counting\nfrom there.","summary":"<p>Like <code><a href=\"../../Chem/Spatial/Grid.html#map%28%26%3AFloat64-%3EFloat64%29%3Aself-instance-method\">#map</a></code>, but the block gets passed both the element and its index.</p>","abstract":false,"args":[],"args_string":"(& : Float64, Int32 -> Number) : self","args_html":"(& : Float64, Int32 -> <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":426,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L426"},"def":{"name":"map_with_index","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Float64, Int32 -> Number)"},"return_type":"self","visibility":"Public","body":"dup.map_with_index! do |ele, i|\n  yield ele, i\nend"}},{"html_id":"map_with_index!(&:Float64,Int32->Number):self-instance-method","name":"map_with_index!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : Float64, Int32 -> Number) : self","args_html":"(& : Float64, Int32 -> <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":432,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L432"},"def":{"name":"map_with_index!","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Float64, Int32 -> Number)"},"return_type":"self","visibility":"Public","body":"each_with_index do |ele, i|\n  @buffer[i] = (yield ele, i).to_f\nend\nself\n"}},{"html_id":"map_with_loc(&:Float64,Location->Number):self-instance-method","name":"map_with_loc","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : Float64, Location -> Number) : self","args_html":"(& : Float64, <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a> -> <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":439,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L439"},"def":{"name":"map_with_loc","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Float64, Location -> Number)"},"return_type":"self","visibility":"Public","body":"dup.map_with_loc! do |ele, loc|\n  yield ele, loc\nend"}},{"html_id":"map_with_loc!(&:Float64,Location->Number):self-instance-method","name":"map_with_loc!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : Float64, Location -> Number) : self","args_html":"(& : Float64, <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a> -> <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":445,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L445"},"def":{"name":"map_with_loc!","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Float64, Location -> Number)"},"return_type":"self","visibility":"Public","body":"each_with_index do |ele, i|\n  @buffer[i] = (yield ele, unsafe_loc_at(i)).to_f\nend\nself\n"}},{"html_id":"mask(&:Float64->Bool):self-instance-method","name":"mask","doc":"Returns a grid mask. Elements for which the passed block returns `true` are set to\n1, otherwise 0.\n\nGrid masks are very useful to deal with multiple grids, and when points are to be\nselected based on one grid only.\n\n```\ngrid = Grid.new({2, 2, 2}, Bounds[10, 10, 10]) { |i, j, k| i + j + k }\ngrid.to_a              # => [0, 1, 1, 2, 1, 2, 2, 3]\ngrid.mask(&.>(1)).to_a # => [0, 0, 0, 1, 0, 1, 1, 1]\ngrid.to_a              # => [0, 1, 1, 2, 1, 2, 2, 3]\n```","summary":"<p>Returns a grid mask.</p>","abstract":false,"args":[],"args_string":"(& : Float64 -> Bool) : self","args_html":"(& : Float64 -> Bool) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":464,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L464"},"def":{"name":"mask","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Float64 -> Bool)"},"return_type":"self","visibility":"Public","body":"map do |ele|\n  (  yield ele) ? 1.0 : 0.0\nend"}},{"html_id":"mask(value:Number,delta:Number):self-instance-method","name":"mask","doc":"Returns a grid mask. Elements for which `(value - ele).abs <= delta` returns\n`true` are set to 1, otherwise 0.\n\nGrid masks are very useful to deal with multiple grids, and when points are to be\nselected based on one grid only.\n\n```\ngrid = Grid.new({2, 2, 3}, Bounds[1, 1, 1]) { |i, j, k| (i + 1) * (j + 1) * (k + 1) / 5 }\ngrid.to_a              # => [0.2, 0.4, 0.6, 0.4, 0.8, 1.2, 0.4, 0.8, 1.2, 0.8, 1.6, 2.4]\ngrid.mask(1, 0.5).to_a # => [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0]\ngrid.to_a              # => [0.2, 0.4, 0.6, 0.4, 0.8, 1.2, 0.4, 0.8, 1.2, 0.8, 1.6, 2.4]\n```","summary":"<p>Returns a grid mask.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number"},{"name":"delta","doc":null,"default_value":"","external_name":"delta","restriction":"Number"}],"args_string":"(value : Number, delta : Number) : self","args_html":"(value : <a href=\"../../Number.html\">Number</a>, delta : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":496,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L496"},"def":{"name":"mask","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number"},{"name":"delta","doc":null,"default_value":"","external_name":"delta","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"mask((value - delta)..(value + delta))"}},{"html_id":"mask(pattern):self-instance-method","name":"mask","doc":"Returns a grid mask. Elements for which `pattern === element` returns `true` are\nset to 1, otherwise 0.\n\nGrid masks are very useful to deal with multiple grids, and when points are to be\nselected based on one grid only.\n\n```\ngrid = Grid.new({2, 2, 3}, Bounds[1, 1, 1]) { |i, j, k| (i + 1) * (j + 1) * (k + 1) }\ngrid.to_a              # => [1, 2, 3, 2, 4, 6, 2, 4, 6, 4, 8, 12]\ngrid.mask(2..4.5).to_a # => [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0]\ngrid.to_a              # => [1, 2, 3, 2, 4, 6, 2, 4, 6, 4, 8, 12]\n```","summary":"<p>Returns a grid mask.</p>","abstract":false,"args":[{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":""}],"args_string":"(pattern) : self","args_html":"(pattern) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":480,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L480"},"def":{"name":"mask","args":[{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"mask do |ele|\n  pattern === ele\nend"}},{"html_id":"mask!(&:Float64->Bool):self-instance-method","name":"mask!","doc":"Masks a grid by the passed block. Elements for which the passed block returns\n`false` are set to 0.\n\nOptimized version of creating a mask and applying it to the same grid, but avoids\ncreating intermediate grids. This is equivalent to `grid = grid * grid.mask\n{ ... }`.\n\n```\ngrid = Grid.new({2, 2, 2}, Bounds[10, 10, 10]) { |i, j, k| i + j + k }\ngrid.to_a # => [0, 1, 1, 2, 1, 2, 2, 3]\ngrid.mask! &.>(1)\ngrid.to_a # => [0, 0, 0, 2, 0, 2, 2, 3]\n```","summary":"<p>Masks a grid by the passed block.</p>","abstract":false,"args":[],"args_string":"(& : Float64 -> Bool) : self","args_html":"(& : Float64 -> Bool) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":513,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L513"},"def":{"name":"mask!","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Float64 -> Bool)"},"return_type":"self","visibility":"Public","body":"map! do |ele|\n  (  yield ele) ? ele : 0.0\nend"}},{"html_id":"mask!(value:Number,delta:Number):self-instance-method","name":"mask!","doc":"Masks a grid by *value*+/-*delta*. Elements for which `(value - ele).abs > delta`\nreturns `true` are set to 0.\n\nOptimized version of creating a mask and applying it to the same grid, but avoids\ncreating intermediate grids. This is equivalent to `grid = grid * grid.mask(value,\ndelta)`\n\n```\ngrid = Grid.new({2, 2, 3}, Bounds[1, 1, 1]) { |i, j, k| (i + j + k) / 5 }\ngrid.to_a # => [0.0, 0.2, 0.4, 0.2, 0.4, 0.6, 0.2, 0.4, 0.6, 0.4, 0.6, 0.8]\ngrid.mask! 0.5, 0.1\ngrid.to_a # => [0.0, 0.0, 0.4, 0.0, 0.4, 0.6, 0.0, 0.4, 0.6, 0.4, 0.6, 0.0]\n```","summary":"<p>Masks a grid by <em>value</em>+/-<em>delta</em>.</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number"},{"name":"delta","doc":null,"default_value":"","external_name":"delta","restriction":"Number"}],"args_string":"(value : Number, delta : Number) : self","args_html":"(value : <a href=\"../../Number.html\">Number</a>, delta : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":547,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L547"},"def":{"name":"mask!","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Number"},{"name":"delta","doc":null,"default_value":"","external_name":"delta","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"mask!((value - delta)..(value + delta))"}},{"html_id":"mask!(pattern):self-instance-method","name":"mask!","doc":"Masks a grid by *pattern*. Elements for which `pattern === element` returns\n`false` are set to 0.\n\nOptimized version of creating a mask and applying it to the same grid, but avoids\ncreating intermediate grids. This is equivalent to `grid = grid *\ngrid.mask(pattern)`\n\n```\ngrid = Grid.new({2, 2, 3}, Bounds[1, 1, 1]) { |i, j, k| (i + 1) * (j + 1) * (k + 1) }\ngrid.to_a # => [1, 2, 3, 2, 4, 6, 2, 4, 6, 4, 8, 12]\ngrid.mask! 2..4.5\ngrid.to_a # => [0, 2, 3, 2, 4, 0, 2, 4, 0, 4, 0, 0]\n```","summary":"<p>Masks a grid by <em>pattern</em>.</p>","abstract":false,"args":[{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":""}],"args_string":"(pattern) : self","args_html":"(pattern) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":530,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L530"},"def":{"name":"mask!","args":[{"name":"pattern","doc":null,"default_value":"","external_name":"pattern","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"mask! do |ele|\n  pattern === ele\nend"}},{"html_id":"mask_by_coords(&:Vec3->Bool):self-instance-method","name":"mask_by_coords","doc":"Returns a grid mask. Coordinates for which the passed block returns `true` are set\nto 1, otherwise 0.\n\nGrid masks are very useful to deal with multiple grids, and when points are to be\nselected based on one grid only.\n\n```\ngrid = Grid.new({2, 2, 2}, Bounds[10, 10, 10]) { |i, j, k| i * 4 + j * 2 + k }\ngrid.to_a                           # => [0, 1, 2, 3, 4, 5, 6, 7]\ngrid.mask_by_coords(&.x.==(0)).to_a # => [1, 1, 1, 1, 0, 0, 0, 0]\ngrid.to_a                           # => [0, 1, 2, 3, 4, 5, 6, 7]\n```","summary":"<p>Returns a grid mask.</p>","abstract":false,"args":[],"args_string":"(& : Vec3 -> Bool) : self","args_html":"(& : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> Bool) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":563,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L563"},"def":{"name":"mask_by_coords","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Vec3 -> Bool)"},"return_type":"self","visibility":"Public","body":"map_with_coords do |_, vec|\n  (  yield vec) ? 1.0 : 0.0\nend"}},{"html_id":"mask_by_coords!(&:Vec3->Bool):self-instance-method","name":"mask_by_coords!","doc":"Masks a grid by coordinates. Coordinates for which the passed block returns\n`false` are set to 0.\n\nOptimized version of creating a mask and applying it to the same grid, but avoids\ncreating intermediate grids. This is equivalent to `grid = grid *\ngrid.mask_by_coords { ... }`\n\n```\ngrid = Grid.new({2, 2, 2}, Bounds[5, 5, 5]) { |i, j, k| i * 4 + j * 2 + k }\ngrid.to_a # => [0, 1, 2, 3, 4, 5, 6, 7]\ngrid.mask_by_coords! { |vec| vec.y == 5 }\ngrid.to_a # => [0, 0, 2, 3, 0, 0, 6, 7]\n```","summary":"<p>Masks a grid by coordinates.</p>","abstract":false,"args":[],"args_string":"(& : Vec3 -> Bool) : self","args_html":"(& : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> Bool) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":580,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L580"},"def":{"name":"mask_by_coords!","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Vec3 -> Bool)"},"return_type":"self","visibility":"Public","body":"map_with_coords! do |ele, vec|\n  (  yield vec) ? ele : 0.0\nend"}},{"html_id":"mask_by_index(&:Int32->Bool):self-instance-method","name":"mask_by_index","doc":"Returns a grid mask. Indexes for which the passed block returns `true` are set to\n1, otherwise 0.\n\nGrid masks are very useful to deal with multiple grids, and when points are to be\nselected based on one grid only.\n\n```\ngrid = Grid.new({2, 2, 2}, Bounds[10, 10, 10]) { |i, j, k| i * 4 + j * 2 + k }\ngrid.to_a                       # => [0, 1, 2, 3, 4, 5, 6, 7]\ngrid.mask_by_index(&.>(4)).to_a # => [0, 0, 0, 0, 0, 1, 1, 1]\ngrid.to_a                       # => [0, 1, 2, 3, 4, 5, 6, 7]\n```","summary":"<p>Returns a grid mask.</p>","abstract":false,"args":[],"args_string":"(& : Int32 -> Bool) : self","args_html":"(& : Int32 -> Bool) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":596,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L596"},"def":{"name":"mask_by_index","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Int32 -> Bool)"},"return_type":"self","visibility":"Public","body":"map_with_index do |_, i|\n  (  yield i) ? 1.0 : 0.0\nend"}},{"html_id":"mask_by_index!(&:Int32->Bool):self-instance-method","name":"mask_by_index!","doc":"Masks a grid by index. Indexes for which the passed block returns `false` are set\nto 0.\n\nOptimized version of creating a mask and applying it to the same grid, but avoids\ncreating intermediate grids. This is equivalent to `grid = grid *\ngrid.mask_by_index { ... }`\n\n```\ngrid = Grid.new({2, 2, 2}, Bounds[1, 1, 1]) { |i, j, k| i * 4 + j * 2 + k }\ngrid.to_a # => [0, 1, 2, 3, 4, 5, 6, 7]\ngrid.mask_by_index! &.<(3)\ngrid.to_a # => [0, 1, 2, 0, 0, 0, 0, 0]\n```","summary":"<p>Masks a grid by index.</p>","abstract":false,"args":[],"args_string":"(& : Int32 -> Bool) : self","args_html":"(& : Int32 -> Bool) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":613,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L613"},"def":{"name":"mask_by_index!","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Int32 -> Bool)"},"return_type":"self","visibility":"Public","body":"map_with_index! do |ele, i|\n  (  yield i) ? ele : 0.0\nend"}},{"html_id":"mask_by_loc(&:Location->Bool):self-instance-method","name":"mask_by_loc","doc":"Returns a grid mask. Locations for which the passed block returns `true` are set\nto 1, otherwise 0.\n\nGrid masks are very useful to deal with multiple grids, and when points are to be\nselected based on one grid only.\n\n```\ngrid = Grid.new({2, 2, 2}, Bounds[10, 10, 10]) { |i, j, k| i * 4 + j * 2 + k }\ngrid.to_a                                  # => [0, 1, 2, 3, 4, 5, 6, 7]\ngrid.mask_by_loc { |i, j, k| k == 1 }.to_a # => [0, 1, 0, 1, 0, 1, 0, 1]\ngrid.to_a                                  # => [0, 1, 2, 3, 4, 5, 6, 7]\n```","summary":"<p>Returns a grid mask.</p>","abstract":false,"args":[],"args_string":"(& : Location -> Bool) : self","args_html":"(& : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a> -> Bool) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":629,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L629"},"def":{"name":"mask_by_loc","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Location -> Bool)"},"return_type":"self","visibility":"Public","body":"map_with_loc do |_, loc|\n  (  yield loc) ? 1.0 : 0.0\nend"}},{"html_id":"mask_by_loc!(&:Location->Bool):self-instance-method","name":"mask_by_loc!","doc":"Masks a grid by location. Locations for which the passed block returns `false` are\nset to 0.\n\nOptimized version of creating a mask and applying it to the same grid, but avoids\ncreating intermediate grids. This is equivalent to `grid = grid * grid.mask_by_loc\n{ ... }`\n\n```\ngrid = Grid.new({2, 2, 2}, Bounds[1, 1, 1]) { |i, j, k| i * 4 + j * 2 + k }\ngrid.to_a # => [0, 1, 2, 3, 4, 5, 6, 7]\ngrid.mask_by_loc! { |(i, j, k)| i == 1 }\ngrid.to_a # => [0, 0, 0, 0, 4, 5, 6, 7]\n```","summary":"<p>Masks a grid by location.</p>","abstract":false,"args":[],"args_string":"(& : Location -> Bool) : self","args_html":"(& : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a> -> Bool) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":646,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L646"},"def":{"name":"mask_by_loc!","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Location -> Bool)"},"return_type":"self","visibility":"Public","body":"map_with_loc! do |ele, loc|\n  (  yield loc) ? ele : 0.0\nend"}},{"html_id":"mean(axis:Int):Array(Float64)-instance-method","name":"mean","doc":"Returns the arithmetic mean along *axis*. Axis is specified as an\ninteger: 0-2 refer to the direction of the first, second or third\nbasis vector, respectively.\n\nRaises IndexError is *axis* is out of bounds.\n\n```\ngrid = Grid.new({2, 3, 4}, Bounds[1, 1, 1]) { |i, j, k| i * 12 + j * 4 + k }\ngrid.mean(axis: 0) # => [5.5, 17.5]\ngrid.mean(axis: 1) # => [7.5, 11.5, 15.5]\ngrid.mean(axis: 2) # => [10, 11, 12, 13]\ngrid.mean(axis: 3) # raises IndexError\n```","summary":"<p>Returns the arithmetic mean along <em>axis</em>.</p>","abstract":false,"args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int"}],"args_string":"(axis : Int) : Array(Float64)","args_html":"(axis : Int) : <a href=\"../../Array.html\">Array</a>(Float64)","location":{"filename":"src/chem/spatial/grid.cr","line_number":673,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L673"},"def":{"name":"mean","args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Float64)","visibility":"Public","body":"values = Array(Float64).new(@dim[axis])\neach_axial_slice(axis, reuse: true) do |slice|\n  values << (slice.sum / slice.size)\nend\nvalues\n"}},{"html_id":"mean:Float64-instance-method","name":"mean","doc":"Returns the arithmetic mean of the grid elements.\n\n```\ngrid = Grid.new({2, 3, 4}, Bounds[1, 1, 1]) { |i, j, k| i * 12 + j * 4 + k }\ngrid.mean # => 11.5\n```","summary":"<p>Returns the arithmetic mean of the grid elements.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/grid.cr","line_number":656,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L656"},"def":{"name":"mean","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"sum / size"}},{"html_id":"mean_with_coords(axis:Int):Array(Tuple(Float64,Float64))-instance-method","name":"mean_with_coords","doc":"Returns the arithmetic mean along *axis* with its coordinates.\nAxis is specified as an integer: 0-2 refer to the direction of the\nfirst, second or third basis vector, respectively.\n\nRaises IndexError is *axis* is out of bounds.\n\n```\ngrid = Grid.new({2, 3, 5}, Bounds[1, 1, 1]) { |i, j, k| i * 12 + j * 4 + k }\ngrid.mean(axis: 1) # => [{9.5, 0.0}, {14.5, 0.5}, {19.5, 1.0}]\n```","summary":"<p>Returns the arithmetic mean along <em>axis</em> with its coordinates.</p>","abstract":false,"args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int"}],"args_string":"(axis : Int) : Array(Tuple(Float64, Float64))","args_html":"(axis : Int) : <a href=\"../../Array.html\">Array</a>(Tuple(Float64, Float64))","location":{"filename":"src/chem/spatial/grid.cr","line_number":691,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L691"},"def":{"name":"mean_with_coords","args":[{"name":"axis","doc":null,"default_value":"","external_name":"axis","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Tuple(Float64, Float64))","visibility":"Public","body":"delta = resolution[axis]\ni = 0\nary = Array(Tuple(Float64, Float64)).new(@dim[axis])\neach_axial_slice(axis, reuse: true) do |slice|\n  ary << {slice.sum / slice.size, i * delta}\n  i = i + 1\nend\nary\n"}},{"html_id":"ni:Int32-instance-method","name":"ni","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/spatial/grid.cr","line_number":702,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L702"},"def":{"name":"ni","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"dim[0]"}},{"html_id":"nj:Int32-instance-method","name":"nj","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/spatial/grid.cr","line_number":706,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L706"},"def":{"name":"nj","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"dim[1]"}},{"html_id":"nk:Int32-instance-method","name":"nk","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/spatial/grid.cr","line_number":710,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L710"},"def":{"name":"nk","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"dim[2]"}},{"html_id":"origin(*args,**options)-instance-method","name":"origin","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/grid.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L19"},"def":{"name":"origin","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@bounds.origin(*args, **options)"}},{"html_id":"origin(*args,**options,&)-instance-method","name":"origin","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/grid.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L19"},"def":{"name":"origin","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@bounds.origin(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"resolution:Tuple(Float64,Float64,Float64)-instance-method","name":"resolution","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Tuple(Float64, Float64, Float64)","args_html":" : Tuple(Float64, Float64, Float64)","location":{"filename":"src/chem/spatial/grid.cr","line_number":714,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L714"},"def":{"name":"resolution","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(Float64, Float64, Float64)","visibility":"Public","body":"{ni == 1 ? 0.0 : bounds.i.size / (ni - 1), nj == 1 ? 0.0 : bounds.j.size / (nj - 1), nk == 1 ? 0.0 : bounds.k.size / (nk - 1)}"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/spatial/grid.cr","line_number":720,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L720"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"(ni * nj) * nk"}},{"html_id":"source_file:Path?-instance-method","name":"source_file","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Path?","args_html":" : Path?","location":{"filename":"src/chem/spatial/grid.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L15"},"def":{"name":"source_file","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Path | ::Nil","visibility":"Public","body":"@source_file"}},{"html_id":"step(di:Int,dj:Int,dk:Int):self-instance-method","name":"step","doc":null,"summary":null,"abstract":false,"args":[{"name":"di","doc":null,"default_value":"","external_name":"di","restriction":"Int"},{"name":"dj","doc":null,"default_value":"","external_name":"dj","restriction":"Int"},{"name":"dk","doc":null,"default_value":"","external_name":"dk","restriction":"Int"}],"args_string":"(di : Int, dj : Int, dk : Int) : self","args_html":"(di : Int, dj : Int, dk : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":728,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L728"},"def":{"name":"step","args":[{"name":"di","doc":null,"default_value":"","external_name":"di","restriction":"Int"},{"name":"dj","doc":null,"default_value":"","external_name":"dj","restriction":"Int"},{"name":"dk","doc":null,"default_value":"","external_name":"dk","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if (di > 0 && dj > 0) && dk > 0\nelse\n  raise(ArgumentError.new(\"Invalid step size\"))\nend\nnew_ni = ni // di\nif (new_ni % di) > 0\n  new_ni = new_ni + 1\nend\nnew_nj = nj // dj\nif (new_nj % dj) > 0\n  new_nj = new_nj + 1\nend\nnew_nk = nk // dk\nif (new_nk % dk) > 0\n  new_nk = new_nk + 1\nend\nGrid.new({new_ni, new_nj, new_nk}, bounds) do |i, j, k|\n  unsafe_fetch(unsafe_index(Location.new(i * di, j * dj, k * dk)))\nend\n"}},{"html_id":"step(n:Int):self-instance-method","name":"step","doc":null,"summary":null,"abstract":false,"args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int"}],"args_string":"(n : Int) : self","args_html":"(n : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":724,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L724"},"def":{"name":"step","args":[{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"step(n, n, n)"}},{"html_id":"to_a:Array(Float64)-instance-method","name":"to_a","doc":"Returns an `Array` with all the elements in the collection.\n\n```\n{1, 2, 3}.to_a # => [1, 2, 3]\n```","summary":"<p>Returns an <code><a href=\"../../Array.html\">Array</a></code> with all the elements in the collection.</p>","abstract":false,"args":[],"args_string":" : Array(Float64)","args_html":" : <a href=\"../../Array.html\">Array</a>(Float64)","location":{"filename":"src/chem/spatial/grid.cr","line_number":741,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L741"},"def":{"name":"to_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Float64)","visibility":"Public","body":"Array(Float64).build(size) do |buffer|\n  buffer.copy_from(@buffer, size)\n  size\nend"}},{"html_id":"to_chgcar(output:IO|Path|String,structure:Structure):Nil-instance-method","name":"to_chgcar","doc":"Writes the grid to *output* using the `Chem::VASP::Chgcar`\nfile format. Arguments are fowarded to `Chem::VASP::Chgcar::Writer.open`.","summary":"<p>Writes the grid to <em>output</em> using the <code><a href=\"../../Chem/VASP/Chgcar.html\">Chem::VASP::Chgcar</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(output : IO | Path | String, structure : Structure) : Nil","args_html":"(output : IO | Path | String, structure : <a href=\"../../Chem/Structure.html\">Structure</a>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_chgcar","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::VASP::Chgcar::Writer.open(output, structure) do |writer|\n  writer << self\nend"}},{"html_id":"to_chgcar(structure:Structure):String-instance-method","name":"to_chgcar","doc":"Returns a string representation of the grid using\nthe `Chem::VASP::Chgcar` file format. Arguments are fowarded to\n`Chem::VASP::Chgcar::Writer.open`.","summary":"<p>Returns a string representation of the grid using the <code><a href=\"../../Chem/VASP/Chgcar.html\">Chem::VASP::Chgcar</a></code> file format.</p>","abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure) : String","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_chgcar","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_chgcar(io, structure)\nend"}},{"html_id":"to_cube(output:IO|Path|String,atoms:AtomCollection):Nil-instance-method","name":"to_cube","doc":"Writes the grid to *output* using the `Chem::Cube`\nfile format. Arguments are fowarded to `Chem::Cube::Writer.open`.","summary":"<p>Writes the grid to <em>output</em> using the <code><a href=\"../../Chem/Cube.html\">Chem::Cube</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"}],"args_string":"(output : IO | Path | String, atoms : AtomCollection) : Nil","args_html":"(output : IO | Path | String, atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_cube","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::Cube::Writer.open(output, atoms) do |writer|\n  writer << self\nend"}},{"html_id":"to_cube(atoms:AtomCollection):String-instance-method","name":"to_cube","doc":"Returns a string representation of the grid using\nthe `Chem::Cube` file format. Arguments are fowarded to\n`Chem::Cube::Writer.open`.","summary":"<p>Returns a string representation of the grid using the <code><a href=\"../../Chem/Cube.html\">Chem::Cube</a></code> file format.</p>","abstract":false,"args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"}],"args_string":"(atoms : AtomCollection) : String","args_html":"(atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_cube","args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_cube(io, atoms)\nend"}},{"html_id":"to_dx(output:IO|Path|String):Nil-instance-method","name":"to_dx","doc":"Writes the grid to *output* using the `Chem::DX`\nfile format. Arguments are fowarded to `Chem::DX::Writer.open`.","summary":"<p>Writes the grid to <em>output</em> using the <code><a href=\"../../Chem/DX.html\">Chem::DX</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_dx","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::DX::Writer.open(output) do |writer|\n  writer << self\nend"}},{"html_id":"to_dx:String-instance-method","name":"to_dx","doc":"Returns a string representation of the grid using\nthe `Chem::DX` file format. Arguments are fowarded to\n`Chem::DX::Writer.open`.","summary":"<p>Returns a string representation of the grid using the <code><a href=\"../../Chem/DX.html\">Chem::DX</a></code> file format.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_dx","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_dx(io)\nend"}},{"html_id":"to_locpot(output:IO|Path|String,structure:Structure):Nil-instance-method","name":"to_locpot","doc":"Writes the grid to *output* using the `Chem::VASP::Locpot`\nfile format. Arguments are fowarded to `Chem::VASP::Locpot::Writer.open`.","summary":"<p>Writes the grid to <em>output</em> using the <code><a href=\"../../Chem/VASP/Locpot.html\">Chem::VASP::Locpot</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(output : IO | Path | String, structure : Structure) : Nil","args_html":"(output : IO | Path | String, structure : <a href=\"../../Chem/Structure.html\">Structure</a>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_locpot","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::VASP::Locpot::Writer.open(output, structure) do |writer|\n  writer << self\nend"}},{"html_id":"to_locpot(structure:Structure):String-instance-method","name":"to_locpot","doc":"Returns a string representation of the grid using\nthe `Chem::VASP::Locpot` file format. Arguments are fowarded to\n`Chem::VASP::Locpot::Writer.open`.","summary":"<p>Returns a string representation of the grid using the <code><a href=\"../../Chem/VASP/Locpot.html\">Chem::VASP::Locpot</a></code> file format.</p>","abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure) : String","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_locpot","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_locpot(io, structure)\nend"}},{"html_id":"to_unsafe:Pointer(Float64)-instance-method","name":"to_unsafe","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Pointer(Float64)","args_html":" : Pointer(Float64)","location":{"filename":"src/chem/spatial/grid.cr","line_number":748,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L748"},"def":{"name":"to_unsafe","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Pointer(Float64)","visibility":"Public","body":"@buffer"}},{"html_id":"unsafe_fetch(i:Int):Float64-instance-method","name":"unsafe_fetch","doc":"Returns the element at the given *index*, without doing any bounds check.\n\n`Indexable` makes sure to invoke this method with *index* in `0...size`,\nso converting negative indices to positive ones is not needed here.\n\nClients never invoke this method directly. Instead, they access\nelements with `#[](index)` and `#[]?(index)`.\n\nThis method should only be directly invoked if you are absolutely\nsure the index is in bounds, to avoid a bounds check for a small boost\nof performance.","summary":"<p>Returns the element at the given <em>index</em>, without doing any bounds check.</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"args_string":"(i : Int) : Float64","args_html":"(i : Int) : Float64","location":{"filename":"src/chem/spatial/grid.cr","line_number":753,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L753"},"def":{"name":"unsafe_fetch","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@buffer[i]"}},{"html_id":"unsafe_fetch(loc:Location):Float64-instance-method","name":"unsafe_fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"Location"}],"args_string":"(loc : Location) : Float64","args_html":"(loc : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>) : Float64","location":{"filename":"src/chem/spatial/grid.cr","line_number":758,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L758"},"def":{"name":"unsafe_fetch","args":[{"name":"loc","doc":null,"default_value":"","external_name":"loc","restriction":"Location"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"unsafe_fetch(unsafe_index(loc))"}},{"html_id":"volume(*args,**options)-instance-method","name":"volume","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/grid.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L19"},"def":{"name":"volume","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@bounds.volume(*args, **options)"}},{"html_id":"volume(*args,**options,&)-instance-method","name":"volume","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/grid.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L19"},"def":{"name":"volume","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@bounds.volume(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"write(output:IO|Path|String,format:Chem::Format|String):Nil-instance-method","name":"write","doc":"Writes the grid to *output* using *format*. Raises\n`ArgumentError` if *format* has required arguments or cannot\nwrite `Chem::Spatial::Grid`.\n\nThe supported file formats are `Chem::DX`. Use the\n`#to_*` methods to customize how the object is written in the\ncorresponding file format if possible.","summary":"<p>Writes the grid to <em>output</em> using <em>format</em>.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(output : IO | Path | String, format : Chem::Format | String) : Nil","args_html":"(output : IO | Path | String, format : <a href=\"../../Chem/Format.html\">Chem::Format</a> | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"write","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .cube?\n  raise(ArgumentError.new(\"#{format} format has required arguments. Use `#to_cube` instead.\"))\nwhen .dx?\n  to_dx(output)\nwhen .chgcar?\n  raise(ArgumentError.new(\"#{format} format has required arguments. Use `#to_chgcar` instead.\"))\nwhen .locpot?\n  raise(ArgumentError.new(\"#{format} format has required arguments. Use `#to_locpot` instead.\"))\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::Spatial::Grid\"))\nend\n"}},{"html_id":"write(path:Path|String):Nil-instance-method","name":"write","doc":"Writes the grid to the specified file. The file\nformat is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nThe supported file formats are the following:\n\n- `Chem::DX` (.dx)\n\nUse the `#to_*` methods to customize how the object is written\nin the corresponding file format if possible.","summary":"<p>Writes the grid to the specified file.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : Nil","args_html":"(path : Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"write","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"write(path, ::Chem::Format.from_filename(path))"}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/Spatial/Grid/Dimensions","path":"Chem/Spatial/Grid/Dimensions.html","kind":"alias","full_name":"Chem::Spatial::Grid::Dimensions","name":"Dimensions","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/spatial/grid.cr","line_number":9,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L9"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":true,"aliased":"Tuple(Int32, Int32, Int32)","aliased_html":"{Int32, Int32, Int32}","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial/Grid","kind":"class","full_name":"Chem::Spatial::Grid","name":"Grid"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Spatial/Grid/Info","path":"Chem/Spatial/Grid/Info.html","kind":"struct","full_name":"Chem::Spatial::Grid::Info","name":"Info","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},{"filename":"src/chem/spatial/grid.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L11"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial/Grid","kind":"class","full_name":"Chem::Spatial::Grid","name":"Grid"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"from_chgcar(input:IO|Path|String):self-class-method","name":"from_chgcar","doc":"Returns the header encoded in *input* using the\n`Chem::VASP::Chgcar` file format. Arguments are forwarded to\n`Chem::VASP::Chgcar::Reader.open`.","summary":"<p>Returns the header encoded in <em>input</em> using the <code><a href=\"../../../Chem/VASP/Chgcar.html\">Chem::VASP::Chgcar</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_chgcar","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::VASP::Chgcar::Reader.open(input) do |reader|\n  reader.read_header\nend"}},{"html_id":"from_cube(input:IO|Path|String):self-class-method","name":"from_cube","doc":"Returns the header encoded in *input* using the\n`Chem::Cube` file format. Arguments are forwarded to\n`Chem::Cube::Reader.open`.","summary":"<p>Returns the header encoded in <em>input</em> using the <code><a href=\"../../../Chem/Cube.html\">Chem::Cube</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_cube","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::Cube::Reader.open(input) do |reader|\n  reader.read_header\nend"}},{"html_id":"from_dx(input:IO|Path|String):self-class-method","name":"from_dx","doc":"Returns the header encoded in *input* using the\n`Chem::DX` file format. Arguments are forwarded to\n`Chem::DX::Reader.open`.","summary":"<p>Returns the header encoded in <em>input</em> using the <code><a href=\"../../../Chem/DX.html\">Chem::DX</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_dx","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::DX::Reader.open(input) do |reader|\n  reader.read_header\nend"}},{"html_id":"from_locpot(input:IO|Path|String):self-class-method","name":"from_locpot","doc":"Returns the header encoded in *input* using the\n`Chem::VASP::Locpot` file format. Arguments are forwarded to\n`Chem::VASP::Locpot::Reader.open`.","summary":"<p>Returns the header encoded in <em>input</em> using the <code><a href=\"../../../Chem/VASP/Locpot.html\">Chem::VASP::Locpot</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_locpot","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::VASP::Locpot::Reader.open(input) do |reader|\n  reader.read_header\nend"}},{"html_id":"new(bounds:Bounds,dim:Dimensions)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"bounds","doc":null,"default_value":"","external_name":"bounds","restriction":"Bounds"},{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"}],"args_string":"(bounds : Bounds, dim : Dimensions)","args_html":"(bounds : <a href=\"../../../Chem/Spatial/Bounds.html\">Bounds</a>, dim : <a href=\"../../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>)","location":{"filename":"src/chem/spatial/grid.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L11"},"def":{"name":"new","args":[{"name":"bounds","doc":null,"default_value":"","external_name":"bounds","restriction":"Bounds"},{"name":"dim","doc":null,"default_value":"","external_name":"dim","restriction":"Dimensions"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(bounds, dim)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"read(input:IO|Path|String,format:Chem::Format|String):self-class-method","name":"read","doc":"Returns the header encoded in the specified file\nusing *format*. Raises `ArgumentError` if *format* has\nrequired arguments or cannot read `Chem::Spatial::Grid::Info`.\n\nThe supported file formats are `Chem::Cube`, `Chem::DX`, `Chem::VASP::Chgcar`, `Chem::VASP::Locpot`. Use the\n`.from_*` methods to customize how the object is decoded in\nthe corresponding file format if possible.","summary":"<p>Returns the header encoded in the specified file using <em>format</em>.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(input : IO | Path | String, format : Chem::Format | String) : self","args_html":"(input : IO | Path | String, format : <a href=\"../../../Chem/Format.html\">Chem::Format</a> | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"read","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .cube?\n  from_cube(input)\nwhen .dx?\n  from_dx(input)\nwhen .chgcar?\n  from_chgcar(input)\nwhen .locpot?\n  from_locpot(input)\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::Spatial::Grid::Info\"))\nend\n"}},{"html_id":"read(path:Path|String):self-class-method","name":"read","doc":"Returns the header encoded in the specified file.\nThe file format is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nThe supported file formats are the following:\n\n- `Chem::Cube` (.cube)\n- `Chem::DX` (.dx)\n- `Chem::VASP::Chgcar` (CHGCAR)\n- `Chem::VASP::Locpot` (LOCPOT)\n\nUse the `.from_*` methods to customize how the object is\ndecoded in the corresponding file format if possible.","summary":"<p>Returns the header encoded in the specified file.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"read","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"read(path, ::Chem::Format.from_filename(path))"}}],"instance_methods":[{"html_id":"bounds:Bounds-instance-method","name":"bounds","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bounds","args_html":" : <a href=\"../../../Chem/Spatial/Bounds.html\">Bounds</a>","location":null,"def":{"name":"bounds","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bounds","visibility":"Public","body":"@bounds"}},{"html_id":"clone-instance-method","name":"clone","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/spatial/grid.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L11"},"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.new(@bounds.clone, @dim.clone)"}},{"html_id":"copy_with(bounds_bounds=@bounds,dim_dim=@dim)-instance-method","name":"copy_with","doc":null,"summary":null,"abstract":false,"args":[{"name":"_bounds","doc":null,"default_value":"@bounds","external_name":"bounds","restriction":""},{"name":"_dim","doc":null,"default_value":"@dim","external_name":"dim","restriction":""}],"args_string":"(bounds _bounds = @bounds, dim _dim = @dim)","args_html":"(bounds _bounds = @bounds, dim _dim = @dim)","location":{"filename":"src/chem/spatial/grid.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L11"},"def":{"name":"copy_with","args":[{"name":"_bounds","doc":null,"default_value":"@bounds","external_name":"bounds","restriction":""},{"name":"_dim","doc":null,"default_value":"@dim","external_name":"dim","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.new(_bounds, _dim)"}},{"html_id":"dim:Dimensions-instance-method","name":"dim","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Dimensions","args_html":" : <a href=\"../../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>","location":null,"def":{"name":"dim","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Dimensions","visibility":"Public","body":"@dim"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Spatial/Grid/Location","path":"Chem/Spatial/Grid/Location.html","kind":"alias","full_name":"Chem::Spatial::Grid::Location","name":"Location","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/spatial/grid.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/grid.cr#L10"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":true,"aliased":"Tuple(Int32, Int32, Int32)","aliased_html":"{Int32, Int32, Int32}","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial/Grid","kind":"class","full_name":"Chem::Spatial::Grid","name":"Grid"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/Spatial/HlxParams","path":"Chem/Spatial/HlxParams.html","kind":"struct","full_name":"Chem::Spatial::HlxParams","name":"HlxParams","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/hlxparams.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/hlxparams.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(rotaxis:Vec3,twist:Float64,pitch:Float64,radius:Float64)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"rotaxis","doc":null,"default_value":"","external_name":"rotaxis","restriction":"Vec3"},{"name":"twist","doc":null,"default_value":"","external_name":"twist","restriction":"Float64"},{"name":"pitch","doc":null,"default_value":"","external_name":"pitch","restriction":"Float64"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Float64"}],"args_string":"(rotaxis : Vec3, twist : Float64, pitch : Float64, radius : Float64)","args_html":"(rotaxis : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, twist : Float64, pitch : Float64, radius : Float64)","location":{"filename":"src/chem/spatial/hlxparams.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/hlxparams.cr#L2"},"def":{"name":"new","args":[{"name":"rotaxis","doc":null,"default_value":"","external_name":"rotaxis","restriction":"Vec3"},{"name":"twist","doc":null,"default_value":"","external_name":"twist","restriction":"Float64"},{"name":"pitch","doc":null,"default_value":"","external_name":"pitch","restriction":"Float64"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(rotaxis, twist, pitch, radius)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/spatial/hlxparams.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/hlxparams.cr#L2"},"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.new(@rotaxis.clone, @twist.clone, @pitch.clone, @radius.clone)"}},{"html_id":"copy_with(rotaxis_rotaxis=@rotaxis,twist_twist=@twist,pitch_pitch=@pitch,radius_radius=@radius)-instance-method","name":"copy_with","doc":null,"summary":null,"abstract":false,"args":[{"name":"_rotaxis","doc":null,"default_value":"@rotaxis","external_name":"rotaxis","restriction":""},{"name":"_twist","doc":null,"default_value":"@twist","external_name":"twist","restriction":""},{"name":"_pitch","doc":null,"default_value":"@pitch","external_name":"pitch","restriction":""},{"name":"_radius","doc":null,"default_value":"@radius","external_name":"radius","restriction":""}],"args_string":"(rotaxis _rotaxis = @rotaxis, twist _twist = @twist, pitch _pitch = @pitch, radius _radius = @radius)","args_html":"(rotaxis _rotaxis = @rotaxis, twist _twist = @twist, pitch _pitch = @pitch, radius _radius = @radius)","location":{"filename":"src/chem/spatial/hlxparams.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/hlxparams.cr#L2"},"def":{"name":"copy_with","args":[{"name":"_rotaxis","doc":null,"default_value":"@rotaxis","external_name":"rotaxis","restriction":""},{"name":"_twist","doc":null,"default_value":"@twist","external_name":"twist","restriction":""},{"name":"_pitch","doc":null,"default_value":"@pitch","external_name":"pitch","restriction":""},{"name":"_radius","doc":null,"default_value":"@radius","external_name":"radius","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self.class.new(_rotaxis, _twist, _pitch, _radius)"}},{"html_id":"pitch:Float64-instance-method","name":"pitch","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":null,"def":{"name":"pitch","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@pitch"}},{"html_id":"radius:Float64-instance-method","name":"radius","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":null,"def":{"name":"radius","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@radius"}},{"html_id":"rotaxis:Vec3-instance-method","name":"rotaxis","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Vec3","args_html":" : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":null,"def":{"name":"rotaxis","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"@rotaxis"}},{"html_id":"to_q:Quat-instance-method","name":"to_q","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Quat","args_html":" : <a href=\"../../Chem/Spatial/Quat.html\">Quat</a>","location":{"filename":"src/chem/spatial/hlxparams.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/hlxparams.cr#L7"},"def":{"name":"to_q","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Quat","visibility":"Public","body":"Quat.rotation(about: @rotaxis, by: @twist)"}},{"html_id":"twist:Float64-instance-method","name":"twist","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":null,"def":{"name":"twist","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@twist"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Spatial/KDTree","path":"Chem/Spatial/KDTree.html","kind":"class","full_name":"Chem::Spatial::KDTree","name":"KDTree","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/kdtree.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"DIMENSIONS","name":"DIMENSIONS","value":"3","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(structure:Structure,periodic:Bool,**options)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"periodic","doc":null,"default_value":"","external_name":"periodic","restriction":"Bool"}],"args_string":"(structure : Structure, periodic : Bool, **options)","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>, periodic : Bool, **options)","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":48,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L48"},"def":{"name":"new","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"periodic","doc":null,"default_value":"","external_name":"periodic","restriction":"Bool"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if periodic\n  if lattice = structure.lattice\n  else\n    raise(NotPeriodicError.new)\n  end\n  new(structure.atoms, lattice, **options)\nelse\n  new(structure.atoms.map do |atom|\n    {atom.coords, atom}\n  end)\nend"}},{"html_id":"new(atoms:Enumerable(Atom),lattice:Lattice?=nil,**options)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"Enumerable(Atom)"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"args_string":"(atoms : Enumerable(Atom), lattice : Lattice? = nil, **options)","args_html":"(atoms : Enumerable(<a href=\"../../Chem/Atom.html\">Atom</a>), lattice : <a href=\"../../Chem/Lattice.html\">Lattice</a>? = <span class=\"n\">nil</span>, **options)","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":57,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L57"},"def":{"name":"new","args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"Enumerable(Atom)"},{"name":"lattice","doc":null,"default_value":"nil","external_name":"lattice","restriction":"Lattice | ::Nil"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"ary = atoms.map do |atom|\n  {atom.coords, atom}\nend\nif lattice\n  PBC.each_adjacent_image(atoms, lattice, **options) do |atom, coords|\n    ary << {coords, atom}\n  end\nend\nnew(ary)\n"}},{"html_id":"new(structure:Structure,**options):self-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure, **options) : self","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>, **options) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":44,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L44"},"def":{"name":"new","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(structure, structure.periodic?, **options)"}}],"instance_methods":[{"html_id":"each_neighbor(ofcoords:Vec3,*,withinradius:Float64,&block:Atom,Float64->):Nil-instance-method","name":"each_neighbor","doc":null,"summary":null,"abstract":false,"args":[{"name":"coords","doc":null,"default_value":"","external_name":"of","restriction":"Vec3"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"radius","doc":null,"default_value":"","external_name":"within","restriction":"Float64"}],"args_string":"(of coords : Vec3, *, within radius : Float64, &block : Atom, Float64 -> ) : Nil","args_html":"(of coords : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, *, within radius : Float64, &block : <a href=\"../../Chem/Atom.html\">Atom</a>, Float64 -> ) : Nil","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":76,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L76"},"def":{"name":"each_neighbor","args":[{"name":"coords","doc":null,"default_value":"","external_name":"of","restriction":"Vec3"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"radius","doc":null,"default_value":"","external_name":"within","restriction":"Float64"}],"double_splat":null,"splat_index":1,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Atom, Float64 ->)"},"return_type":"Nil","visibility":"Public","body":"search(@root, coords, radius ** 2, &block)"}},{"html_id":"each_neighbor(ofatom:Atom,*,withinradius:Float64,&block:Atom,Float64->):Nil-instance-method","name":"each_neighbor","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"of","restriction":"Atom"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"radius","doc":null,"default_value":"","external_name":"within","restriction":"Float64"}],"args_string":"(of atom : Atom, *, within radius : Float64, &block : Atom, Float64 -> ) : Nil","args_html":"(of atom : <a href=\"../../Chem/Atom.html\">Atom</a>, *, within radius : Float64, &block : <a href=\"../../Chem/Atom.html\">Atom</a>, Float64 -> ) : Nil","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":67,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L67"},"def":{"name":"each_neighbor","args":[{"name":"atom","doc":null,"default_value":"","external_name":"of","restriction":"Atom"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"radius","doc":null,"default_value":"","external_name":"within","restriction":"Float64"}],"double_splat":null,"splat_index":1,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Atom, Float64 ->)"},"return_type":"Nil","visibility":"Public","body":"search(@root, atom.coords, radius ** 2) do |other, distance|\n  if atom != other\n    block.call(other, distance)\n  end\nend"}},{"html_id":"nearest(tocoords:Vec3):Atom-instance-method","name":"nearest","doc":null,"summary":null,"abstract":false,"args":[{"name":"coords","doc":null,"default_value":"","external_name":"to","restriction":"Vec3"}],"args_string":"(to coords : Vec3) : Atom","args_html":"(to coords : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":87,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L87"},"def":{"name":"nearest","args":[{"name":"coords","doc":null,"default_value":"","external_name":"to","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom","visibility":"Public","body":"(neighbors(coords, count: 1)).first"}},{"html_id":"nearest(toatom:Atom):Atom-instance-method","name":"nearest","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"to","restriction":"Atom"}],"args_string":"(to atom : Atom) : Atom","args_html":"(to atom : <a href=\"../../Chem/Atom.html\">Atom</a>) : <a href=\"../../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":83,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L83"},"def":{"name":"nearest","args":[{"name":"atom","doc":null,"default_value":"","external_name":"to","restriction":"Atom"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom","visibility":"Public","body":"(neighbors(atom.coords, count: 2))[1]"}},{"html_id":"nearest_with_distance(atom:Atom|Vec3):Tuple(Atom,Float64)-instance-method","name":"nearest_with_distance","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom | Vec3"}],"args_string":"(atom : Atom | Vec3) : Tuple(Atom, Float64)","args_html":"(atom : <a href=\"../../Chem/Atom.html\">Atom</a> | <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : Tuple(<a href=\"../../Chem/Atom.html\">Atom</a>, Float64)","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":91,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L91"},"def":{"name":"nearest_with_distance","args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom | Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(Atom, Float64)","visibility":"Public","body":"(neighbors_with_distance(atom, n: 1)).first"}},{"html_id":"neighbors(ofcoords:Vec3,*,count:Int):Array(Atom)-instance-method","name":"neighbors","doc":null,"summary":null,"abstract":false,"args":[{"name":"coords","doc":null,"default_value":"","external_name":"of","restriction":"Vec3"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"args_string":"(of coords : Vec3, *, count : Int) : Array(Atom)","args_html":"(of coords : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, *, count : Int) : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":99,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L99"},"def":{"name":"neighbors","args":[{"name":"coords","doc":null,"default_value":"","external_name":"of","restriction":"Vec3"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Array(Atom)","visibility":"Public","body":"neighbors = Array(Tuple(Atom, Float64)).new(count)\nsearch(@root, coords, count, neighbors)\nneighbors.map(&.[](0))\n"}},{"html_id":"neighbors(ofatom:Atom,*,count:Int):Array(Atom)-instance-method","name":"neighbors","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"of","restriction":"Atom"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"args_string":"(of atom : Atom, *, count : Int) : Array(Atom)","args_html":"(of atom : <a href=\"../../Chem/Atom.html\">Atom</a>, *, count : Int) : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":95,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L95"},"def":{"name":"neighbors","args":[{"name":"atom","doc":null,"default_value":"","external_name":"of","restriction":"Atom"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"count","doc":null,"default_value":"","external_name":"count","restriction":"Int"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Array(Atom)","visibility":"Public","body":"(neighbors(atom.coords, count: count + 1)).reject!(&.==(atom))"}},{"html_id":"neighbors(ofcoords:Vec3,*,withinradius:Number):Array(Atom)-instance-method","name":"neighbors","doc":null,"summary":null,"abstract":false,"args":[{"name":"coords","doc":null,"default_value":"","external_name":"of","restriction":"Vec3"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"radius","doc":null,"default_value":"","external_name":"within","restriction":"Number"}],"args_string":"(of coords : Vec3, *, within radius : Number) : Array(Atom)","args_html":"(of coords : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, *, within radius : <a href=\"../../Number.html\">Number</a>) : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":109,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L109"},"def":{"name":"neighbors","args":[{"name":"coords","doc":null,"default_value":"","external_name":"of","restriction":"Vec3"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"radius","doc":null,"default_value":"","external_name":"within","restriction":"Number"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Array(Atom)","visibility":"Public","body":"neighbors = [] of Tuple(Atom, Float64)\nsearch(@root, coords, radius ** 2) do |atom, distance|\n  neighbors << {atom, distance}\nend\nneighbors.sort_by!(&.[](1)).map(&.[](0))\n"}},{"html_id":"neighbors(ofatom:Atom,*,withinradius:Number):Array(Atom)-instance-method","name":"neighbors","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"of","restriction":"Atom"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"radius","doc":null,"default_value":"","external_name":"within","restriction":"Number"}],"args_string":"(of atom : Atom, *, within radius : Number) : Array(Atom)","args_html":"(of atom : <a href=\"../../Chem/Atom.html\">Atom</a>, *, within radius : <a href=\"../../Number.html\">Number</a>) : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":105,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L105"},"def":{"name":"neighbors","args":[{"name":"atom","doc":null,"default_value":"","external_name":"of","restriction":"Atom"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"radius","doc":null,"default_value":"","external_name":"within","restriction":"Number"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Array(Atom)","visibility":"Public","body":"(neighbors(atom.coords, within: radius)).reject!(&.==(atom))"}},{"html_id":"neighbors_with_distance(vec:Vec3,*,n:Int):Array(Tuple(Atom,Float64))-instance-method","name":"neighbors_with_distance","doc":null,"summary":null,"abstract":false,"args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int"}],"args_string":"(vec : Vec3, *, n : Int) : Array(Tuple(Atom, Float64))","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, *, n : Int) : <a href=\"../../Array.html\">Array</a>(Tuple(<a href=\"../../Chem/Atom.html\">Atom</a>, Float64))","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":121,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L121"},"def":{"name":"neighbors_with_distance","args":[{"name":"vec","doc":null,"default_value":"","external_name":"vec","restriction":"Vec3"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Array(Tuple(Atom, Float64))","visibility":"Public","body":"neighbors = Array(Tuple(Atom, Float64)).new(n)\nsearch(@root, vec, n, neighbors)\nneighbors\n"}},{"html_id":"neighbors_with_distance(atom:Atom,*,n:Int):Array(Tuple(Atom,Float64))-instance-method","name":"neighbors_with_distance","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int"}],"args_string":"(atom : Atom, *, n : Int) : Array(Tuple(Atom, Float64))","args_html":"(atom : <a href=\"../../Chem/Atom.html\">Atom</a>, *, n : Int) : <a href=\"../../Array.html\">Array</a>(Tuple(<a href=\"../../Chem/Atom.html\">Atom</a>, Float64))","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":117,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/kdtree.cr#L117"},"def":{"name":"neighbors_with_distance","args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"},{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"n","doc":null,"default_value":"","external_name":"n","restriction":"Int"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"Array(Tuple(Atom, Float64))","visibility":"Public","body":"(neighbors_with_distance(atom.coords, n: n + 1)).reject! do |__arg5|\n  __arg5[0] == atom\nend"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Spatial/NotPeriodicError","path":"Chem/Spatial/NotPeriodicError.html","kind":"class","full_name":"Chem::Spatial::NotPeriodicError","name":"NotPeriodicError","abstract":false,"superclass":{"html_id":"chem.cr/Chem/Spatial/Error","kind":"class","full_name":"Chem::Spatial::Error","name":"Error"},"ancestors":[{"html_id":"chem.cr/Chem/Spatial/Error","kind":"class","full_name":"Chem::Spatial::Error","name":"Error"},{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial.cr","line_number":21,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial.cr#L21"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(message=\"Coordinatesarenotperiodic\")-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"message","doc":null,"default_value":"\"Coordinates are not periodic\"","external_name":"message","restriction":""}],"args_string":"(message = \"Coordinates are not periodic\")","args_html":"(message = <span class=\"s\">&quot;Coordinates are not periodic&quot;</span>)","location":{"filename":"src/chem/spatial.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial.cr#L22"},"def":{"name":"new","args":[{"name":"message","doc":null,"default_value":"\"Coordinates are not periodic\"","external_name":"message","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Spatial/PBC","path":"Chem/Spatial/PBC.html","kind":"module","full_name":"Chem::Spatial::PBC","name":"PBC","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/spatial/pbc.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/pbc.cr#L1"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"ADJACENT_IMAGE_IDXS","name":"ADJACENT_IMAGE_IDXS","value":"[{1, 0, 0}, {0, 1, 0}, {0, 0, 1}, {1, 1, 0}, {1, 0, 1}, {0, 1, 1}, {1, 1, 1}]","doc":null,"summary":null}],"included_modules":[],"extended_modules":[{"html_id":"chem.cr/Chem/Spatial/PBC","kind":"module","full_name":"Chem::Spatial::PBC","name":"PBC"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"adjacent_images(*args,**options):Array(Tuple(Atom,Vec3))-instance-method","name":"adjacent_images","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options) : Array(Tuple(Atom, Vec3))","args_html":"(*args, **options) : <a href=\"../../Array.html\">Array</a>(Tuple(<a href=\"../../Chem/Atom.html\">Atom</a>, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>))","location":{"filename":"src/chem/spatial/pbc.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/pbc.cr#L7"},"def":{"name":"adjacent_images","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"Array(Tuple(Atom, Vec3))","visibility":"Public","body":"ary = [] of Tuple(Atom, Vec3)\neach_adjacent_image(*args, **options) do |atom, coords|\n  ary << {atom, coords}\nend\nary\n"}},{"html_id":"each_adjacent_image(atoms:AtomCollection,lattice:Lattice,radius:Number,&block:Atom,Vec3->)-instance-method","name":"each_adjacent_image","doc":null,"summary":null,"abstract":false,"args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"args_string":"(atoms : AtomCollection, lattice : Lattice, radius : Number, &block : Atom, Vec3 -> )","args_html":"(atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>, lattice : <a href=\"../../Chem/Lattice.html\">Lattice</a>, radius : <a href=\"../../Number.html\">Number</a>, &block : <a href=\"../../Chem/Atom.html\">Atom</a>, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> )","location":{"filename":"src/chem/spatial/pbc.cr","line_number":42,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/pbc.cr#L42"},"def":{"name":"each_adjacent_image","args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Atom, Vec3 ->)"},"return_type":"","visibility":"Public","body":"if radius < 0\n  raise(Error.new(\"Radius cannot be negative\"))\nend\noffset = offset_to_primary_unit_cell(atoms, lattice)\npaddings = cell_paddings(lattice, radius)\natoms.each_atom do |atom|\n  vec = (atom.coords.to_fractional(lattice)) + offset\n  extents = padded_cell_extents(vec, paddings)\n  img_sense = vec.map do |ele|\n    ele < 0.5 ? 1 : -1\n  end\n  ADJACENT_IMAGE_IDXS.each do |img_idx|\n    img_vec = vec + (img_sense * img_idx)\n    if (0..2).all? do |i|\n      img_vec[i].in?(extents[i])\n    end\n      yield atom, (img_vec - offset).to_cartesian(lattice)\n    end\n  end\nend\n"}},{"html_id":"each_adjacent_image(atoms:AtomCollection,lattice:Lattice,&block:Atom,Vec3->)-instance-method","name":"each_adjacent_image","doc":null,"summary":null,"abstract":false,"args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"}],"args_string":"(atoms : AtomCollection, lattice : Lattice, &block : Atom, Vec3 -> )","args_html":"(atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>, lattice : <a href=\"../../Chem/Lattice.html\">Lattice</a>, &block : <a href=\"../../Chem/Atom.html\">Atom</a>, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> )","location":{"filename":"src/chem/spatial/pbc.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/pbc.cr#L20"},"def":{"name":"each_adjacent_image","args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Atom, Vec3 ->)"},"return_type":"","visibility":"Public","body":"offset = (lattice.bounds.center - atoms.coords.center).to_fractional(lattice)\natoms.each_atom do |atom|\n  fcoords = atom.coords.to_fractional(lattice)\n  w_fcoords = fcoords - fcoords.floor\n  ax_offset = (fcoords + offset).map do |ele|\n    ele < 0.5 ? 1 : -1\n  end\n  ADJACENT_IMAGE_IDXS.each do |img_idx|\n    yield atom, (fcoords + (ax_offset * img_idx)).to_cartesian(lattice)\n  end\nend\n"}},{"html_id":"each_adjacent_image(structure:Structure,radius:Number,&block:Atom,Vec3->)-instance-method","name":"each_adjacent_image","doc":null,"summary":null,"abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"args_string":"(structure : Structure, radius : Number, &block : Atom, Vec3 -> )","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>, radius : <a href=\"../../Number.html\">Number</a>, &block : <a href=\"../../Chem/Atom.html\">Atom</a>, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> )","location":{"filename":"src/chem/spatial/pbc.cr","line_number":35,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/pbc.cr#L35"},"def":{"name":"each_adjacent_image","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"radius","doc":null,"default_value":"","external_name":"radius","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Atom, Vec3 ->)"},"return_type":"","visibility":"Public","body":"if lattice = structure.lattice\nelse\n  raise(NotPeriodicError.new)\nend\neach_adjacent_image(structure, lattice, radius, &block)\n"}},{"html_id":"each_adjacent_image(structure:Structure,&block:Atom,Vec3->)-instance-method","name":"each_adjacent_image","doc":null,"summary":null,"abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure, &block : Atom, Vec3 -> )","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>, &block : <a href=\"../../Chem/Atom.html\">Atom</a>, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> )","location":{"filename":"src/chem/spatial/pbc.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/pbc.cr#L15"},"def":{"name":"each_adjacent_image","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Atom, Vec3 ->)"},"return_type":"","visibility":"Public","body":"if lattice = structure.lattice\nelse\n  raise(NotPeriodicError.new)\nend\neach_adjacent_image(structure, lattice, &block)\n"}},{"html_id":"unwrap(atoms:AtomCollection,lattice:Lattice):Nil-instance-method","name":"unwrap","doc":null,"summary":null,"abstract":false,"args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"}],"args_string":"(atoms : AtomCollection, lattice : Lattice) : Nil","args_html":"(atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>, lattice : <a href=\"../../Chem/Lattice.html\">Lattice</a>) : Nil","location":{"filename":"src/chem/spatial/pbc.cr","line_number":65,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/pbc.cr#L65"},"def":{"name":"unwrap","args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"atoms.coords.to_fractional!\nmoved_atoms = Set(Atom).new\natoms.each_fragment do |fragment|\n  assemble_fragment(fragment[0], fragment[0].coords, moved_atoms)\n  fragment.coords.translate!(by: -fragment.coords.center.floor)\n  moved_atoms.clear\nend\natoms.coords.to_cartesian!\n"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Spatial/Quat","path":"Chem/Spatial/Quat.html","kind":"struct","full_name":"Chem::Spatial::Quat","name":"Quat","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/quat.cr","line_number":77,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L77"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":"The quaternion is a mathematical construct that extends the complex\nnumbers and it is useful to encode three-dimensional rotations.\nQuats are represented by four numbers (w, x, y, z), where w is\nconsidered as the real (scalar) part and x, y, z the imaginary\n(vector) part. Rotations can be encoded as a unit quaternion using\nthe axis-angle representation, where x, y, z correspond to the\nrotation axis and w to the rotation angle by the following formula:\n\n```text\nq(v, t) = q(w, x, y, z) = q(cos(t/2), sin(t/2)vx, sin(t/2)vy, sin(t/2)vz)\n```\n\nwhere *v* is a unit vector and *t* is the rotation angle.\nQuats have several useful mathematical properties, e.g.,\nquaternion multiplication can be used to represent a sequence of\nrotations producing a single quaternion. Indeed, the rotation\nencoded in the quaternion *q* can be applied to a ordinary vector\n*p* simply by\n\n```text\np* = q * p * q-1\n```\n\nwhere *q*-1 is the inverse of *q* and *p** is the rotated vector\n(see `Quat#*` for details).\n\n## Examples\n\n```\nq = Quat[1, 2, 3, 4]\nq                 # => [1.0 2.0 3.0 4.0]\nq.real            # => 1.0\nq.imag            # => [2.0 3.0 4.0]\nq.w               # => 1.0\nq.x               # => 2.0\nq.y               # => 3.0\nq.z               # => 4.0\n-q                # => [-1.0 -2.0 -3.0 -4.0]\nq.abs             # => 5.477225575051661\nq.abs2            # => 30.0\nq.conj            # => [1.0 -2.0 -3.0 -4.0]\nq.inv             # => [0.033 -0.067 -0.1 -0.133]\nq.normalize       # => [0.183 0.365 0.548 0.730]\nq.unit?           # => false\nq.normalize.unit? # => true\nq.zero?           # => false\n\nq * 2  # => [2.0 4.0 6.0 8.0]\nq / 10 # => [0.2 0.4 0.6 0.8]\n\np = Quat[4, 3, 2, 1]\np + q # => [5.0 5.0 5.0 5.0]\np * q # => [-12.0 16.0 4.0 22.0]\nq * p # => [-12.0 6.0 24.0 12.0]\n```\n\nUse the convenience methods to encode rotations.\n\n```\nv = Vec3[1, 2, 3]\nq = Quat.aligning v, to: Vec3[1, 0, 0]\nq * v # => [3.742 0.0 0.0]\n# or\nv.transform(q)    # => [3.742 0.0 0.0]\n(q * v).normalize # => [1.0 0.0 0.0]\n\nq = Quat.rotation Vec3[0, 1, 0], by: 90\nq * v # => [3.0 2.0 -1.0]\nv * q # => [-3.0 2.0 1.0]\n```\n\nNOTE: Quat multiplication is not commutative: `q * v != v *\np`, the former will apply the rotation encoded in *q* to *v* but the\nlatter will produce the inverse rotation. Use `Vec3#transform` to\navoid the ambiguity.","summary":"<p>The quaternion is a mathematical construct that extends the complex numbers and it is useful to encode three-dimensional rotations.</p>","class_methods":[],"constructors":[{"html_id":"[](w:Float64,x:Float64,y:Float64,z:Float64):self-class-method","name":"[]","doc":"Returns a quaternion with *w* as the real (scalar) part and *x*,\n*y*, and *z* as the vector (imaginary) part.","summary":"<p>Returns a quaternion with <em>w</em> as the real (scalar) part and <em>x</em>, <em>y</em>, and <em>z</em> as the vector (imaginary) part.</p>","abstract":false,"args":[{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Float64"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"}],"args_string":"(w : Float64, x : Float64, y : Float64, z : Float64) : self","args_html":"(w : Float64, x : Float64, y : Float64, z : Float64) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":95,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L95"},"def":{"name":"[]","args":[{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Float64"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Quat.new(w, x, y, z)"}},{"html_id":"aligning(u:Vec3,tov:Vec3):self-class-method","name":"aligning","doc":"Returns a quaternion encoding the rotation operation to align *u*\nto *v*.","summary":"<p>Returns a quaternion encoding the rotation operation to align <em>u</em> to <em>v</em>.</p>","abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"Vec3"},{"name":"v","doc":null,"default_value":"","external_name":"to","restriction":"Vec3"}],"args_string":"(u : Vec3, to v : Vec3) : self","args_html":"(u : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, to v : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":101,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L101"},"def":{"name":"aligning","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"Vec3"},{"name":"v","doc":null,"default_value":"","external_name":"to","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"w = u.cross(v)\nQuat[(Math.sqrt(u.squared_size * v.squared_size)) + (u.dot(v)), w.x, w.y, w.z].normalize\n"}},{"html_id":"aligning(u:Tuple(Vec3,Vec3),tov:Tuple(Vec3,Vec3)):self-class-method","name":"aligning","doc":"Returns a quaternion encoding the rotation to align *u[0]* to\n*v[0]* and *u[1]* to *v[1]*.\n\nFirst compute the alignment of *u[0]* to *v[0]*, then the\nalignment of the transformed *u[1]* to *v[1]* on the plane\nperpendicular to *v[0]* by taking their projections.","summary":"<p>Returns a quaternion encoding the rotation to align <em>u[0]</em> to <em>v[0]</em> and <em>u[1]</em> to <em>v[1]</em>.</p>","abstract":false,"args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"Tuple(Vec3, Vec3)"},{"name":"v","doc":null,"default_value":"","external_name":"to","restriction":"Tuple(Vec3, Vec3)"}],"args_string":"(u : Tuple(Vec3, Vec3), to v : Tuple(Vec3, Vec3)) : self","args_html":"(u : Tuple(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>), to v : Tuple(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":112,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L112"},"def":{"name":"aligning","args":[{"name":"u","doc":null,"default_value":"","external_name":"u","restriction":"Tuple(Vec3, Vec3)"},{"name":"v","doc":null,"default_value":"","external_name":"to","restriction":"Tuple(Vec3, Vec3)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"q = Spatial::Quat.aligning(u[0], to: v[0])\nqq = Spatial::Quat.aligning((q * u[1]).proj_plane(v[0]), to: v[1].proj_plane(v[0]))\nqq * q\n"}},{"html_id":"new(w:Float64,x:Float64,y:Float64,z:Float64)-class-method","name":"new","doc":"Creates a new quaternion with *w* as the real (scalar) part and\n*x*, *y*, and *z* as the vector (imaginary) part.","summary":"<p>Creates a new quaternion with <em>w</em> as the real (scalar) part and <em>x</em>, <em>y</em>, and <em>z</em> as the vector (imaginary) part.</p>","abstract":false,"args":[{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Float64"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"}],"args_string":"(w : Float64, x : Float64, y : Float64, z : Float64)","args_html":"(w : Float64, x : Float64, y : Float64, z : Float64)","location":{"filename":"src/chem/spatial/quat.cr","line_number":89,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L89"},"def":{"name":"new","args":[{"name":"w","doc":null,"default_value":"","external_name":"w","restriction":"Float64"},{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(w, x, y, z)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"rotation(aboutrotaxis:Vec3,bytheta:Float64):self-class-method","name":"rotation","doc":"Returns a quaternion encoding the rotation about the axis vector\n*rotaxis* by *theta* degrees.","summary":"<p>Returns a quaternion encoding the rotation about the axis vector <em>rotaxis</em> by <em>theta</em> degrees.</p>","abstract":false,"args":[{"name":"rotaxis","doc":null,"default_value":"","external_name":"about","restriction":"Vec3"},{"name":"theta","doc":null,"default_value":"","external_name":"by","restriction":"Float64"}],"args_string":"(about rotaxis : Vec3, by theta : Float64) : self","args_html":"(about rotaxis : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, by theta : Float64) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":120,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L120"},"def":{"name":"rotation","args":[{"name":"rotaxis","doc":null,"default_value":"","external_name":"about","restriction":"Vec3"},{"name":"theta","doc":null,"default_value":"","external_name":"by","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"theta = theta.radians / 2\nvec = (Math.sin(theta)) * rotaxis.normalize\nQuat[Math.cos(theta), vec.x, vec.y, vec.z]\n"}}],"instance_methods":[{"html_id":"*(rhs:self):self-instance-method","name":"*","doc":"Returns the Hamilton product of the quaternion and *rhs*.","summary":"<p>Returns the Hamilton product of the quaternion and <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":142,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L142"},"def":{"name":"*","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"w = (@w * rhs.w) - (imag.dot(rhs.imag))\nv = ((@w * rhs.imag) + (rhs.w * imag)) + (imag.cross(rhs.imag))\nQuat[w, v.x, v.y, v.z]\n"}},{"html_id":"*(rhs:Vec3):Vec3-instance-method","name":"*","doc":"Returns the conjugate of *rhs* by the quaternion.\n\nThe conjugate of *rhs* is calculated as `p* = q * p * q^-1`, where\n`p` is a quaternion whose vector part is *rhs* and real part\nequals zero. Thus, the resulting quaternion is computed using the\nHamilton product and its vector part corresponds to `p*`. Such\noperation can be written as `(self * rhs.to_q * inv).imag`, but\nthis method implements an optimized version by using some vector\nand quaternion identities. The faster method is taken from this\n[post](https://bit.ly/3G9FENX) of the molecular matters blog.\n\nIf the quaternion encodes a rotation about an axis, this\neffectively applies such rotation to *rhs*.","summary":"<p>Returns the conjugate of <em>rhs</em> by the quaternion.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Vec3"}],"args_string":"(rhs : Vec3) : Vec3","args_html":"(rhs : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/quat.cr","line_number":161,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L161"},"def":{"name":"*","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"v = 2 * (imag.cross(rhs))\n(rhs + (@w * v)) + (imag.cross(v))\n"}},{"html_id":"*(rhs:Number):self-instance-method","name":"*","doc":"Returns the element-wise multiplication of the quaternion by *rhs*.","summary":"<p>Returns the element-wise multiplication of the quaternion by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":167,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L167"},"def":{"name":"*","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Quat[@w * rhs, @x * rhs, @y * rhs, @z * rhs]"}},{"html_id":"+(rhs:self):self-instance-method","name":"+","doc":"Returns the element-wise addition of the quaternion by *rhs*.","summary":"<p>Returns the element-wise addition of the quaternion by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":127,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L127"},"def":{"name":"+","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Quat[@w + rhs.w, @x + rhs.x, @y + rhs.y, @z + rhs.z]"}},{"html_id":"-(rhs:self):self-instance-method","name":"-","doc":"Returns the element-wise addition of the quaternion by *rhs*.","summary":"<p>Returns the element-wise addition of the quaternion by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":137,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L137"},"def":{"name":"-","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Quat[@w - rhs.w, @x - rhs.x, @y - rhs.y, @z - rhs.z]"}},{"html_id":"-:self-instance-method","name":"-","doc":"Returns the negation of the quaternion.","summary":"<p>Returns the negation of the quaternion.</p>","abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":132,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L132"},"def":{"name":"-","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Quat[-@w, -@x, -@y, -@z]"}},{"html_id":"/(rhs:Number):self-instance-method","name":"/","doc":"Returns the element-wise division of the quaternion by *rhs*.","summary":"<p>Returns the element-wise division of the quaternion by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L172"},"def":{"name":"/","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Quat[@w / rhs, @x / rhs, @y / rhs, @z / rhs]"}},{"html_id":"abs:Float64-instance-method","name":"abs","doc":"Returns the absolute value (norm) using the Pythagorean theorem.","summary":"<p>Returns the absolute value (norm) using the Pythagorean theorem.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/quat.cr","line_number":177,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L177"},"def":{"name":"abs","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Math.sqrt(abs2)"}},{"html_id":"abs2:Float64-instance-method","name":"abs2","doc":"Returns the square of the absolute value (norm).","summary":"<p>Returns the square of the absolute value (norm).</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/quat.cr","line_number":182,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L182"},"def":{"name":"abs2","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(((@w ** 2) + (@x ** 2)) + (@y ** 2)) + (@z ** 2)"}},{"html_id":"conj:self-instance-method","name":"conj","doc":"Returns the conjugate of the quaternion.","summary":"<p>Returns the conjugate of the quaternion.</p>","abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":187,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L187"},"def":{"name":"conj","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Quat[@w, -@x, -@y, -@z]"}},{"html_id":"dot(rhs:self):Float64-instance-method","name":"dot","doc":"Returns the dot product of the quaternion and *rhs*.","summary":"<p>Returns the dot product of the quaternion and <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Float64","args_html":"(rhs : <span class=\"k\">self</span>) : Float64","location":{"filename":"src/chem/spatial/quat.cr","line_number":192,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L192"},"def":{"name":"dot","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(((@w * rhs.w) + (@x * rhs.x)) + (@y * rhs.y)) + (@z * rhs.z)"}},{"html_id":"imag:Vec3-instance-method","name":"imag","doc":"Returns the imaginary part of the quaternion.","summary":"<p>Returns the imaginary part of the quaternion.</p>","abstract":false,"args":[],"args_string":" : Vec3","args_html":" : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/quat.cr","line_number":197,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L197"},"def":{"name":"imag","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Vec3","visibility":"Public","body":"Vec3[@x, @y, @z]"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Appends this struct's name and instance variables names and values\nto the given IO.\n\n```\nstruct Point\n  def initialize(@x : Int32, @y : Int32)\n  end\nend\n\np1 = Point.new 1, 2\np1.to_s    # \"Point(@x=1, @y=2)\"\np1.inspect # \"Point(@x=1, @y=2)\"\n```","summary":"<p>Appends this struct's name and instance variables names and values to the given IO.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/spatial/quat.cr","line_number":201,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L201"},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"((((((((io << \"Quat[\") << @w) << \", \") << @x) << \", \") << @y) << \", \") << @z) << ']'"}},{"html_id":"inv:self-instance-method","name":"inv","doc":"Returns the inverse of the quaternion.","summary":"<p>Returns the inverse of the quaternion.</p>","abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":206,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L206"},"def":{"name":"inv","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"conj / abs2"}},{"html_id":"normalize:self-instance-method","name":"normalize","doc":"Returns the normalized quaternion of the quaternion.","summary":"<p>Returns the normalized quaternion of the quaternion.</p>","abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":211,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L211"},"def":{"name":"normalize","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if zero?\n  return dup\nend\nself * (1 / abs)\n"}},{"html_id":"real:Float64-instance-method","name":"real","doc":"Returns the real part of the quaternion.","summary":"<p>Returns the real part of the quaternion.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/quat.cr","line_number":217,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L217"},"def":{"name":"real","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@w"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code><a href=\"../../Chem/Spatial/Quat.html#inspect%28io%3AIO%29%3ANil-instance-method\">#inspect(io)</a></code>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/spatial/quat.cr","line_number":221,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L221"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"io << \"[\"\n{% for var in [\"w\", \"x\", \"y\", \"z\"] of ::String %}\n        io << ' ' if @{{ var.id }}.positive?\n        io << @{{ var.id }}\n        {% if var != \"z\" %}\n          io << ' '\n        {% end %}\n      {% end %}\nio << ']'\n"}},{"html_id":"unit?:Bool-instance-method","name":"unit?","doc":"Returns `true` if the quaternion is a unit quaternion, else\n`false`.","summary":"<p>Returns <code>true</code> if the quaternion is a unit quaternion, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/spatial/quat.cr","line_number":235,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L235"},"def":{"name":"unit?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(abs - 1).abs <= 1e-15"}},{"html_id":"w:Float64-instance-method","name":"w","doc":"Real (scalar) part of the quaternion.","summary":"<p>Real (scalar) part of the quaternion.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/quat.cr","line_number":79,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L79"},"def":{"name":"w","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@w"}},{"html_id":"x:Float64-instance-method","name":"x","doc":"X component of the imaginary (vector) part of the quaternion.","summary":"<p>X component of the imaginary (vector) part of the quaternion.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/quat.cr","line_number":81,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L81"},"def":{"name":"x","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@x"}},{"html_id":"y:Float64-instance-method","name":"y","doc":"Y component of the imaginary (vector) part of the quaternion.","summary":"<p>Y component of the imaginary (vector) part of the quaternion.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/quat.cr","line_number":83,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L83"},"def":{"name":"y","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@y"}},{"html_id":"z:Float64-instance-method","name":"z","doc":"Z component of the imaginary (vector) part of the quaternion.","summary":"<p>Z component of the imaginary (vector) part of the quaternion.</p>","abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/quat.cr","line_number":85,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L85"},"def":{"name":"z","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@z"}},{"html_id":"zero?:Bool-instance-method","name":"zero?","doc":"Returns `true` if the quaternion is a zero quaternion, else\n`false`.","summary":"<p>Returns <code>true</code> if the quaternion is a zero quaternion, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/spatial/quat.cr","line_number":241,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L241"},"def":{"name":"zero?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(((@w == 0) && (@x == 0)) && (@y == 0)) && (@z == 0)"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Spatial/Size","path":"Chem/Spatial/Size.html","kind":"struct","full_name":"Chem::Spatial::Size","name":"Size","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/size.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/size.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"[](x:Float64,y:Float64,z:Float64):self-class-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"}],"args_string":"(x : Float64, y : Float64, z : Float64) : self","args_html":"(x : Float64, y : Float64, z : Float64) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/size.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/size.cr#L11"},"def":{"name":"[]","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(x, y, z)"}},{"html_id":"new(x:Float64,y:Float64,z:Float64)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"}],"args_string":"(x : Float64, y : Float64, z : Float64)","args_html":"(x : Float64, y : Float64, z : Float64)","location":{"filename":"src/chem/spatial/size.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/size.cr#L7"},"def":{"name":"new","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(x, y, z)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"zero:self-class-method","name":"zero","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/size.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/size.cr#L15"},"def":{"name":"zero","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(0, 0, 0)"}}],"instance_methods":[{"html_id":"*(rhs:Number):self-instance-method","name":"*","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/size.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/size.cr#L19"},"def":{"name":"*","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Size.new(@x * rhs, @y * rhs, @z * rhs)"}},{"html_id":"/(rhs:Number):self-instance-method","name":"/","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/size.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/size.cr#L19"},"def":{"name":"/","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Size.new(@x / rhs, @y / rhs, @z / rhs)"}},{"html_id":"[](index:Int):Float64-instance-method","name":"[]","doc":"Returns the element at *index*. Raises `IndexError` if *index* is\nout of bounds.\n\n```\nary = Size[10, 15, 20]\nary[0]  # => 10\nary[1]  # => 15\nary[2]  # => 20\nary[3]  # raises IndexError\nary[-1] # raises IndexError\n```","summary":"<p>Returns the element at <em>index</em>.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : Float64","args_html":"(index : Int) : Float64","location":{"filename":"src/chem/spatial/size.cr","line_number":36,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/size.cr#L36"},"def":{"name":"[]","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"self[index]? || (raise(IndexError.new))"}},{"html_id":"[]?(index:Int):Float64?-instance-method","name":"[]?","doc":"Returns the element at *index*. Returns `nil` if *index* is out of\nbounds.\n\n```\nary = Size[10, 15, 20]\nary[0]?  # => 10\nary[1]?  # => 15\nary[2]?  # => 20\nary[3]?  # => nil\nary[-1]? # => nil\n```","summary":"<p>Returns the element at <em>index</em>.</p>","abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : Float64?","args_html":"(index : Int) : Float64?","location":{"filename":"src/chem/spatial/size.cr","line_number":51,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/size.cr#L51"},"def":{"name":"[]?","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"case index\nwhen 0\n  @x\nwhen 1\n  @y\nwhen 2\n  @z\nend"}},{"html_id":"volume:Float64-instance-method","name":"volume","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/size.cr","line_number":59,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/size.cr#L59"},"def":{"name":"volume","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(@x * @y) * @z"}},{"html_id":"x:Float64-instance-method","name":"x","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/size.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/size.cr#L3"},"def":{"name":"x","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@x"}},{"html_id":"y:Float64-instance-method","name":"y","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/size.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/size.cr#L4"},"def":{"name":"y","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@y"}},{"html_id":"z:Float64-instance-method","name":"z","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/size.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/size.cr#L5"},"def":{"name":"z","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@z"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Spatial/Vec3","path":"Chem/Spatial/Vec3.html","kind":"struct","full_name":"Chem::Spatial::Vec3","name":"Vec3","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/quat.cr","line_number":246,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L246"},{"filename":"src/chem/spatial/vec3.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"[](x:NumberType,y:NumberType,z:NumberType):self-class-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"NumberType"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"NumberType"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"NumberType"}],"args_string":"(x : NumberType, y : NumberType, z : NumberType) : self","args_html":"(x : NumberType, y : NumberType, z : NumberType) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":9,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L9"},"def":{"name":"[]","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"NumberType"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"NumberType"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"NumberType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(x, y, z)"}},{"html_id":"new(x:Float64,y:Float64,z:Float64)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"}],"args_string":"(x : Float64, y : Float64, z : Float64)","args_html":"(x : Float64, y : Float64, z : Float64)","location":{"filename":"src/chem/spatial/vec3.cr","line_number":33,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L33"},"def":{"name":"new","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"Float64"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"Float64"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(x, y, z)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(x:NumberType,y:NumberType,z:NumberType)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"NumberType"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"NumberType"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"NumberType"}],"args_string":"(x : NumberType, y : NumberType, z : NumberType)","args_html":"(x : NumberType, y : NumberType, z : NumberType)","location":{"filename":"src/chem/spatial/vec3.cr","line_number":36,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L36"},"def":{"name":"new","args":[{"name":"x","doc":null,"default_value":"","external_name":"x","restriction":"NumberType"},{"name":"y","doc":null,"default_value":"","external_name":"y","restriction":"NumberType"},{"name":"z","doc":null,"default_value":"","external_name":"z","restriction":"NumberType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(x, y, z)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"origin:self-class-method","name":"origin","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L13"},"def":{"name":"origin","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"zero"}},{"html_id":"x:self-class-method","name":"x","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":17,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L17"},"def":{"name":"x","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(1, 0, 0)"}},{"html_id":"y:self-class-method","name":"y","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":21,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L21"},"def":{"name":"y","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(0, 1, 0)"}},{"html_id":"z:self-class-method","name":"z","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":25,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L25"},"def":{"name":"z","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(0, 0, 1)"}},{"html_id":"zero:self-class-method","name":"zero","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":29,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L29"},"def":{"name":"zero","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(0, 0, 0)"}}],"instance_methods":[{"html_id":"*(other:Number):self-instance-method","name":"*","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"args_string":"(other : Number) : self","args_html":"(other : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L52"},"def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(@x * other, @y * other, @z * other)"}},{"html_id":"*(other:Vec3):self-instance-method","name":"*","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vec3"}],"args_string":"(other : Vec3) : self","args_html":"(other : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L52"},"def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(@x * other.x, @y * other.y, @z * other.z)"}},{"html_id":"*(other:Tuple(NumberType,NumberType,NumberType)):self-instance-method","name":"*","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tuple(NumberType, NumberType, NumberType)"}],"args_string":"(other : Tuple(NumberType, NumberType, NumberType)) : self","args_html":"(other : Tuple(NumberType, NumberType, NumberType)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L52"},"def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tuple(NumberType, NumberType, NumberType)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"map_with_index do |value, i|\n  value * other[i]\nend"}},{"html_id":"*(rhs:AffineTransform):self-instance-method","name":"*","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"AffineTransform"}],"args_string":"(rhs : AffineTransform) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/AffineTransform.html\">AffineTransform</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":76,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L76"},"def":{"name":"*","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"AffineTransform"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"rhs * self"}},{"html_id":"*(rhs:Quat):self-instance-method","name":"*","doc":"Returns the conjugate of the quaternion by the inverse of *rhs*.\nSee `Quat#*` for details.","summary":"<p>Returns the conjugate of the quaternion by the inverse of <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Quat"}],"args_string":"(rhs : Quat) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/Quat.html\">Quat</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":249,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L249"},"def":{"name":"*","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Quat"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"rhs.inv * self"}},{"html_id":"+(other:Number):self-instance-method","name":"+","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"args_string":"(other : Number) : self","args_html":"(other : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L52"},"def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(@x + other, @y + other, @z + other)"}},{"html_id":"+(other:Vec3):self-instance-method","name":"+","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vec3"}],"args_string":"(other : Vec3) : self","args_html":"(other : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L52"},"def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(@x + other.x, @y + other.y, @z + other.z)"}},{"html_id":"+(other:Tuple(NumberType,NumberType,NumberType)):self-instance-method","name":"+","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tuple(NumberType, NumberType, NumberType)"}],"args_string":"(other : Tuple(NumberType, NumberType, NumberType)) : self","args_html":"(other : Tuple(NumberType, NumberType, NumberType)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L52"},"def":{"name":"+","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tuple(NumberType, NumberType, NumberType)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"map_with_index do |value, i|\n  value + other[i]\nend"}},{"html_id":"+(rhs:Size):self-instance-method","name":"+","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Size"}],"args_string":"(rhs : Size) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/Size.html\">Size</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":66,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L66"},"def":{"name":"+","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Size"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(@x + rhs.x, @y + rhs.y, @z + rhs.z)"}},{"html_id":"-(other:Number):self-instance-method","name":"-","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"args_string":"(other : Number) : self","args_html":"(other : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L52"},"def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(@x - other, @y - other, @z - other)"}},{"html_id":"-(other:Vec3):self-instance-method","name":"-","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vec3"}],"args_string":"(other : Vec3) : self","args_html":"(other : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L52"},"def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(@x - other.x, @y - other.y, @z - other.z)"}},{"html_id":"-(other:Tuple(NumberType,NumberType,NumberType)):self-instance-method","name":"-","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tuple(NumberType, NumberType, NumberType)"}],"args_string":"(other : Tuple(NumberType, NumberType, NumberType)) : self","args_html":"(other : Tuple(NumberType, NumberType, NumberType)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L52"},"def":{"name":"-","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tuple(NumberType, NumberType, NumberType)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"map_with_index do |value, i|\n  value - other[i]\nend"}},{"html_id":"-(rhs:Size):self-instance-method","name":"-","doc":null,"summary":null,"abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Size"}],"args_string":"(rhs : Size) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/Size.html\">Size</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":66,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L66"},"def":{"name":"-","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Size"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(@x - rhs.x, @y - rhs.y, @z - rhs.z)"}},{"html_id":"-:self-instance-method","name":"-","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":72,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L72"},"def":{"name":"-","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"inv"}},{"html_id":"/(other:Number):self-instance-method","name":"/","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"args_string":"(other : Number) : self","args_html":"(other : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L52"},"def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(@x / other, @y / other, @z / other)"}},{"html_id":"/(other:Vec3):self-instance-method","name":"/","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vec3"}],"args_string":"(other : Vec3) : self","args_html":"(other : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L52"},"def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(@x / other.x, @y / other.y, @z / other.z)"}},{"html_id":"/(other:Tuple(NumberType,NumberType,NumberType)):self-instance-method","name":"/","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tuple(NumberType, NumberType, NumberType)"}],"args_string":"(other : Tuple(NumberType, NumberType, NumberType)) : self","args_html":"(other : Tuple(NumberType, NumberType, NumberType)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L52"},"def":{"name":"/","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Tuple(NumberType, NumberType, NumberType)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"map_with_index do |value, i|\n  value / other[i]\nend"}},{"html_id":"[](index:Int32):Float64-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : Float64","args_html":"(index : Int32) : Float64","location":{"filename":"src/chem/spatial/vec3.cr","line_number":42,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L42"},"def":{"name":"[]","args":[{"name":"index","doc":null,"default_value":"","external_name":"index","restriction":"Int32"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"case index\nwhen 0\n  @x\nwhen 1\n  @y\nwhen 2\n  @z\nelse\n  raise(IndexError.new)\nend"}},{"html_id":"abs:self-instance-method","name":"abs","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":80,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L80"},"def":{"name":"abs","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"map(&.abs)"}},{"html_id":"clamp(min:Number,max:Number):self-instance-method","name":"clamp","doc":null,"summary":null,"abstract":false,"args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"args_string":"(min : Number, max : Number) : self","args_html":"(min : <a href=\"../../Number.html\">Number</a>, max : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":84,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L84"},"def":{"name":"clamp","args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"map(&.clamp(min, max))"}},{"html_id":"clamp(range:Range):self-instance-method","name":"clamp","doc":null,"summary":null,"abstract":false,"args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range"}],"args_string":"(range : Range) : self","args_html":"(range : <a href=\"../../Range.html\">Range</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":88,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L88"},"def":{"name":"clamp","args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"map(&.clamp(range))"}},{"html_id":"close_to?(rhs:self,delta:Number=Float64::EPSILON):Bool-instance-method","name":"close_to?","doc":"Returns `true` if the elements of the vectors are within *delta*\nfrom each other, else `false`.\n\n```\nVec3[1, 2, 3].close_to?(Vec3[1, 2, 3])                     # => true\nVec3[1, 2, 3].close_to?(Vec3[1.001, 1.999, 3.00004], 1e-3) # => true\nVec3[1, 2, 3].close_to?(Vec3[3, 2, 1])                     # => false\nVec3[1, 2, 3].close_to?(Vec3[1.001, 1.999, 3.00004], 1e-8) # => false\n```","summary":"<p>Returns <code>true</code> if the elements of the vectors are within <em>delta</em> from each other, else <code>false</code>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"},{"name":"delta","doc":null,"default_value":"Float64::EPSILON","external_name":"delta","restriction":"Number"}],"args_string":"(rhs : self, delta : Number = Float64::EPSILON) : Bool","args_html":"(rhs : <span class=\"k\">self</span>, delta : <a href=\"../../Number.html\">Number</a> = <span class=\"t\">Float64</span><span class=\"t\">::</span><span class=\"t\">EPSILON</span>) : Bool","location":{"filename":"src/chem/spatial/vec3.cr","line_number":101,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L101"},"def":{"name":"close_to?","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"},{"name":"delta","doc":null,"default_value":"Float64::EPSILON","external_name":"delta","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((@x.close_to?(rhs.x, delta)) && (@y.close_to?(rhs.y, delta))) && (@z.close_to?(rhs.z, delta))"}},{"html_id":"cross(other:Vec3):self-instance-method","name":"cross","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vec3"}],"args_string":"(other : Vec3) : self","args_html":"(other : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":107,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L107"},"def":{"name":"cross","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new((@y * other.z) - (@z * other.y), (@z * other.x) - (@x * other.z), (@x * other.y) - (@y * other.x))"}},{"html_id":"dot(other:Vec3):Float64-instance-method","name":"dot","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vec3"}],"args_string":"(other : Vec3) : Float64","args_html":"(other : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial/vec3.cr","line_number":113,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L113"},"def":{"name":"dot","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"((@x * other.x) + (@y * other.y)) + (@z * other.z)"}},{"html_id":"floor:self-instance-method","name":"floor","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":117,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L117"},"def":{"name":"floor","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"map(&.floor)"}},{"html_id":"image(lattice:Lattice,i:Int,j:Int,k:Int):self-instance-method","name":"image","doc":"Returns vector's PBC image with respect to `lattice`\n\n```\nlat = Lattice.new S[2, 2, 3], 90, 90, 120\nlat.i # => Vec3[2.0, 0.0, 0.0]\nlat.j # => Vec3[-1, 1.732, 0.0]\nlat.k # => Vec3[0.0, 0.0, 3.0]\n\nvec = Vec3[1, 1, 1.5]\nvec.image(lat, 1, 0, 0) # => Vec3[3.0, 1.0, 1.5]\nvec.image(lat, 0, 1, 0) # => Vec3[0.0, 2.732, 1.5]\nvec.image(lat, 0, 0, 1) # => Vec3[1.0, 1.0, 4.5]\nvec.image(lat, 1, 0, 1) # => Vec3[3.0, 1.0, 4.5]\nvec.image(lat, 1, 1, 1) # => Vec3[2.0, 2.732, 4.5]\n```","summary":"<p>Returns vector's PBC image with respect to <code>lattice</code></p>","abstract":false,"args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"},{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Int"}],"args_string":"(lattice : Lattice, i : Int, j : Int, k : Int) : self","args_html":"(lattice : <a href=\"../../Chem/Lattice.html\">Lattice</a>, i : Int, j : Int, k : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":148,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L148"},"def":{"name":"image","args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"},{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"((self + (lattice.i * i)) + (lattice.j * j)) + (lattice.k * k)"}},{"html_id":"image(i:Int,j:Int,k:Int):self-instance-method","name":"image","doc":"Returns vector's PBC image in fractional coordinates\n\n```\nvec = Vec3[0.456, 0.1, 0.8]\nvec.image 1, 0, 0   # => Vec3[1.456, 0.1, 0.8]\nvec.image -1, 0, 0  # => Vec3[-0.544, 0.1, 0.8]\nvec.image -1, 1, -5 # => Vec3[-0.544, 1.1, -4.2]\n```","summary":"<p>Returns vector's PBC image in fractional coordinates</p>","abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Int"}],"args_string":"(i : Int, j : Int, k : Int) : self","args_html":"(i : Int, j : Int, k : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":129,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L129"},"def":{"name":"image","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"k","doc":null,"default_value":"","external_name":"k","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"self + Vec3[i, j, k]"}},{"html_id":"inspect(io:IO)-instance-method","name":"inspect","doc":"Appends this struct's name and instance variables names and values\nto the given IO.\n\n```\nstruct Point\n  def initialize(@x : Int32, @y : Int32)\n  end\nend\n\np1 = Point.new 1, 2\np1.to_s    # \"Point(@x=1, @y=2)\"\np1.inspect # \"Point(@x=1, @y=2)\"\n```","summary":"<p>Appends this struct's name and instance variables names and values to the given IO.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/spatial/vec3.cr","line_number":156,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L156"},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((((((io << \"Vec3[\") << @x) << \", \") << @y) << \", \") << @z) << ']'"}},{"html_id":"inv:self-instance-method","name":"inv","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":152,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L152"},"def":{"name":"inv","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Vec3.new(-@x, -@y, -@z)"}},{"html_id":"map(&block:Float64->Number::Primitive):self-instance-method","name":"map","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Float64 -> Number::Primitive) : self","args_html":"(&block : Float64 -> Number::Primitive) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":160,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L160"},"def":{"name":"map","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Float64 -> Number::Primitive)"},"return_type":"self","visibility":"Public","body":"Vec3.new((yield @x).to_f, (yield @y).to_f, (yield @z).to_f)"}},{"html_id":"map_with_index(&block:Float64,Int32->Number::Primitive):self-instance-method","name":"map_with_index","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Float64, Int32 -> Number::Primitive) : self","args_html":"(&block : Float64, Int32 -> Number::Primitive) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":164,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L164"},"def":{"name":"map_with_index","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Float64, Int32 -> Number::Primitive)"},"return_type":"self","visibility":"Public","body":"Vec3.new((yield @x, 0).to_f, (yield @y, 1).to_f, (yield @z, 2).to_f)"}},{"html_id":"normalize:self-instance-method","name":"normalize","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":168,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L168"},"def":{"name":"normalize","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"resize(1)"}},{"html_id":"origin?:Bool-instance-method","name":"origin?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/spatial/vec3.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L172"},"def":{"name":"origin?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"zero?"}},{"html_id":"pad(padding:Number):self-instance-method","name":"pad","doc":null,"summary":null,"abstract":false,"args":[{"name":"padding","doc":null,"default_value":"","external_name":"padding","restriction":"Number"}],"args_string":"(padding : Number) : self","args_html":"(padding : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":176,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L176"},"def":{"name":"pad","args":[{"name":"padding","doc":null,"default_value":"","external_name":"padding","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"resize(size + padding)"}},{"html_id":"proj(rhs:self):self-instance-method","name":"proj","doc":"Returns the projection of the vector on *rhs*.","summary":"<p>Returns the projection of the vector on <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":181,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L181"},"def":{"name":"proj","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"rhs = rhs.normalize\n(dot(rhs)) * rhs\n"}},{"html_id":"proj_plane(rhs:self):self-instance-method","name":"proj_plane","doc":"Returns the projection of the vector on the plane perpendicular\nto *rhs*.","summary":"<p>Returns the projection of the vector on the plane perpendicular to <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":188,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L188"},"def":{"name":"proj_plane","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"self - (proj(rhs))"}},{"html_id":"resize(new_size:Number):self-instance-method","name":"resize","doc":null,"summary":null,"abstract":false,"args":[{"name":"new_size","doc":null,"default_value":"","external_name":"new_size","restriction":"Number"}],"args_string":"(new_size : Number) : self","args_html":"(new_size : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":192,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L192"},"def":{"name":"resize","args":[{"name":"new_size","doc":null,"default_value":"","external_name":"new_size","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if zero?\n  return dup\nend\nself * (new_size / size)\n"}},{"html_id":"rotate(aboutrotaxis:Vec3,bytheta:Float64):self-instance-method","name":"rotate","doc":null,"summary":null,"abstract":false,"args":[{"name":"rotaxis","doc":null,"default_value":"","external_name":"about","restriction":"Vec3"},{"name":"theta","doc":null,"default_value":"","external_name":"by","restriction":"Float64"}],"args_string":"(about rotaxis : Vec3, by theta : Float64) : self","args_html":"(about rotaxis : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, by theta : Float64) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":197,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L197"},"def":{"name":"rotate","args":[{"name":"rotaxis","doc":null,"default_value":"","external_name":"about","restriction":"Vec3"},{"name":"theta","doc":null,"default_value":"","external_name":"by","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"(Quat.rotation(rotaxis, theta)) * self"}},{"html_id":"round:self-instance-method","name":"round","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":201,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L201"},"def":{"name":"round","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"map(&.round)"}},{"html_id":"size:Float64-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/vec3.cr","line_number":205,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L205"},"def":{"name":"size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"Math.sqrt(squared_size)"}},{"html_id":"squared_size:Float64-instance-method","name":"squared_size","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/vec3.cr","line_number":209,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L209"},"def":{"name":"squared_size","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"((@x ** 2) + (@y ** 2)) + (@z ** 2)"}},{"html_id":"to_a:Array(Float64)-instance-method","name":"to_a","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Float64)","args_html":" : <a href=\"../../Array.html\">Array</a>(Float64)","location":{"filename":"src/chem/spatial/vec3.cr","line_number":213,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L213"},"def":{"name":"to_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(Float64)","visibility":"Public","body":"[x, y, z]"}},{"html_id":"to_cartesian(basis:Basis):self-instance-method","name":"to_cartesian","doc":null,"summary":null,"abstract":false,"args":[{"name":"basis","doc":null,"default_value":"","external_name":"basis","restriction":"Basis"}],"args_string":"(basis : Basis) : self","args_html":"(basis : <a href=\"../../Chem/Spatial/Basis.html\">Basis</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":217,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L217"},"def":{"name":"to_cartesian","args":[{"name":"basis","doc":null,"default_value":"","external_name":"basis","restriction":"Basis"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"((@x * basis.i) + (@y * basis.j)) + (@z * basis.k)"}},{"html_id":"to_cartesian(lattice:Lattice):self-instance-method","name":"to_cartesian","doc":null,"summary":null,"abstract":false,"args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"}],"args_string":"(lattice : Lattice) : self","args_html":"(lattice : <a href=\"../../Chem/Lattice.html\">Lattice</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":221,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L221"},"def":{"name":"to_cartesian","args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"to_cartesian(lattice.basis)"}},{"html_id":"to_fractional(basis:Basis):self-instance-method","name":"to_fractional","doc":null,"summary":null,"abstract":false,"args":[{"name":"basis","doc":null,"default_value":"","external_name":"basis","restriction":"Basis"}],"args_string":"(basis : Basis) : self","args_html":"(basis : <a href=\"../../Chem/Spatial/Basis.html\">Basis</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":225,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L225"},"def":{"name":"to_fractional","args":[{"name":"basis","doc":null,"default_value":"","external_name":"basis","restriction":"Basis"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"basis.transform * self"}},{"html_id":"to_fractional(lattice:Lattice):self-instance-method","name":"to_fractional","doc":null,"summary":null,"abstract":false,"args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"}],"args_string":"(lattice : Lattice) : self","args_html":"(lattice : <a href=\"../../Chem/Lattice.html\">Lattice</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":229,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L229"},"def":{"name":"to_fractional","args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"to_fractional(lattice.basis)"}},{"html_id":"to_q:Quat-instance-method","name":"to_q","doc":"Returns the quaternion representation of the vector, i.e.,\nQuat[0, x, y, z].","summary":"<p>Returns the quaternion representation of the vector, i.e., Quat[0, x, y, z].</p>","abstract":false,"args":[],"args_string":" : Quat","args_html":" : <a href=\"../../Chem/Spatial/Quat.html\">Quat</a>","location":{"filename":"src/chem/spatial/quat.cr","line_number":255,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/quat.cr#L255"},"def":{"name":"to_q","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Quat","visibility":"Public","body":"Quat[0, @x, @y, @z]"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code><a href=\"../../Chem/Spatial/Vec3.html#inspect%28io%3AIO%29-instance-method\">#inspect(io)</a></code>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/spatial/vec3.cr","line_number":233,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L233"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"((((((io << '[') << @x) << ' ') << @y) << ' ') << @z) << ']'"}},{"html_id":"to_t:Tuple(Float64,Float64,Float64)-instance-method","name":"to_t","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Tuple(Float64, Float64, Float64)","args_html":" : Tuple(Float64, Float64, Float64)","location":{"filename":"src/chem/spatial/vec3.cr","line_number":237,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L237"},"def":{"name":"to_t","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Tuple(Float64, Float64, Float64)","visibility":"Public","body":"{x, y, z}"}},{"html_id":"transform(transformation:AffineTransform):self-instance-method","name":"transform","doc":null,"summary":null,"abstract":false,"args":[{"name":"transformation","doc":null,"default_value":"","external_name":"transformation","restriction":"AffineTransform"}],"args_string":"(transformation : AffineTransform) : self","args_html":"(transformation : <a href=\"../../Chem/Spatial/AffineTransform.html\">AffineTransform</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":241,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L241"},"def":{"name":"transform","args":[{"name":"transformation","doc":null,"default_value":"","external_name":"transformation","restriction":"AffineTransform"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"transformation * self"}},{"html_id":"transform(q:Quat):self-instance-method","name":"transform","doc":null,"summary":null,"abstract":false,"args":[{"name":"q","doc":null,"default_value":"","external_name":"q","restriction":"Quat"}],"args_string":"(q : Quat) : self","args_html":"(q : <a href=\"../../Chem/Spatial/Quat.html\">Quat</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":245,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L245"},"def":{"name":"transform","args":[{"name":"q","doc":null,"default_value":"","external_name":"q","restriction":"Quat"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"q * self"}},{"html_id":"wrap(lattice:Lattice,aroundcenter:self):self-instance-method","name":"wrap","doc":null,"summary":null,"abstract":false,"args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"},{"name":"center","doc":null,"default_value":"","external_name":"around","restriction":"self"}],"args_string":"(lattice : Lattice, around center : self) : self","args_html":"(lattice : <a href=\"../../Chem/Lattice.html\">Lattice</a>, around center : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":262,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L262"},"def":{"name":"wrap","args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"},{"name":"center","doc":null,"default_value":"","external_name":"around","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"((to_fractional(lattice)).wrap(center.to_fractional(lattice))).to_cartesian(lattice)"}},{"html_id":"wrap(aroundcenter:self):self-instance-method","name":"wrap","doc":null,"summary":null,"abstract":false,"args":[{"name":"center","doc":null,"default_value":"","external_name":"around","restriction":"self"}],"args_string":"(around center : self) : self","args_html":"(around center : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":253,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L253"},"def":{"name":"wrap","args":[{"name":"center","doc":null,"default_value":"","external_name":"around","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"offset = self - (center - Vec3[0.5, 0.5, 0.5])\nself - offset.map_with_index do |ele, i|\n  ele == 1 ? 0 : ele.floor\nend\n"}},{"html_id":"wrap(lattice:Lattice):self-instance-method","name":"wrap","doc":null,"summary":null,"abstract":false,"args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"}],"args_string":"(lattice : Lattice) : self","args_html":"(lattice : <a href=\"../../Chem/Lattice.html\">Lattice</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":258,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L258"},"def":{"name":"wrap","args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"(to_fractional(lattice)).wrap.to_cartesian(lattice)"}},{"html_id":"wrap:self-instance-method","name":"wrap","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":249,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L249"},"def":{"name":"wrap","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"self - map_with_index do |ele, i|\n  ele == 1 ? 0 : ele.floor\nend"}},{"html_id":"x:Float64-instance-method","name":"x","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/vec3.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L5"},"def":{"name":"x","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@x"}},{"html_id":"x?:Bool-instance-method","name":"x?","doc":"Returns `true` if the vector lies along X axis, else `false`.","summary":"<p>Returns <code>true</code> if the vector lies along X axis, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/spatial/vec3.cr","line_number":267,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L267"},"def":{"name":"x?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((!(@x.close_to?(0))) && (@y.close_to?(0))) && (@z.close_to?(0))"}},{"html_id":"xy?:Bool-instance-method","name":"xy?","doc":"Returns `true` if the vector lies in the XY-plane, else `false`.","summary":"<p>Returns <code>true</code> if the vector lies in the XY-plane, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/spatial/vec3.cr","line_number":272,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L272"},"def":{"name":"xy?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((!(@x.close_to?(0))) || (!(@y.close_to?(0)))) && (@z.close_to?(0))"}},{"html_id":"xz?:Bool-instance-method","name":"xz?","doc":"Returns `true` if the vector lies in the XZ-plane, else `false`.","summary":"<p>Returns <code>true</code> if the vector lies in the XZ-plane, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/spatial/vec3.cr","line_number":277,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L277"},"def":{"name":"xz?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((!(@x.close_to?(0))) || (!(@z.close_to?(0)))) && (@y.close_to?(0))"}},{"html_id":"y:Float64-instance-method","name":"y","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/vec3.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L6"},"def":{"name":"y","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@y"}},{"html_id":"y?:Bool-instance-method","name":"y?","doc":"Returns `true` if the vector lies along Y axis, else `false`.","summary":"<p>Returns <code>true</code> if the vector lies along Y axis, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/spatial/vec3.cr","line_number":282,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L282"},"def":{"name":"y?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((@x.close_to?(0)) && (!(@y.close_to?(0)))) && (@z.close_to?(0))"}},{"html_id":"yz?:Bool-instance-method","name":"yz?","doc":"Returns `true` if the vector lies in the YZ-plane, else `false`.","summary":"<p>Returns <code>true</code> if the vector lies in the YZ-plane, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/spatial/vec3.cr","line_number":287,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L287"},"def":{"name":"yz?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(@x.close_to?(0)) && ((!(@y.close_to?(0))) || (!(@z.close_to?(0))))"}},{"html_id":"z:Float64-instance-method","name":"z","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/spatial/vec3.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L7"},"def":{"name":"z","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"@z"}},{"html_id":"z?:Bool-instance-method","name":"z?","doc":"Returns `true` if the vector lies along Z axis, else `false`.","summary":"<p>Returns <code>true</code> if the vector lies along Z axis, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/spatial/vec3.cr","line_number":292,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L292"},"def":{"name":"z?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((@x.close_to?(0)) && (@y.close_to?(0))) && (!(@z.close_to?(0)))"}},{"html_id":"zero?:Bool-instance-method","name":"zero?","doc":"Returns `true` if the vector is zero, else `false`.","summary":"<p>Returns <code>true</code> if the vector is zero, else <code>false</code>.</p>","abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/spatial/vec3.cr","line_number":297,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/spatial/vec3.cr#L297"},"def":{"name":"zero?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"((@x.close_to?(0)) && (@y.close_to?(0))) && (@z.close_to?(0))"}}],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/Structure","path":"Chem/Structure.html","kind":"class","full_name":"Chem::Structure","name":"Structure","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/structure.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L2"},{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"build(*args,**options,&):self-class-method","name":"build","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &) : self","args_html":"(*args, **options, &) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/structure.cr","line_number":23,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L23"},"def":{"name":"build","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"self","visibility":"Public","body":"builder = Structure::Builder.new(*args, **options)\nwith builder yield builder\nbuilder.build\n"}},{"html_id":"from_chgcar(input:IO|Path|String):self-class-method","name":"from_chgcar","doc":"Returns the structure encoded in *input* using the\n`Chem::VASP::Chgcar` file format. Arguments are forwarded to\n`Chem::VASP::Chgcar::Reader.open`.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/VASP/Chgcar.html\">Chem::VASP::Chgcar</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_chgcar","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::VASP::Chgcar::Reader.open(input) do |reader|\n  reader.read_attached\nend"}},{"html_id":"from_cube(input:IO|Path|String):self-class-method","name":"from_cube","doc":"Returns the structure encoded in *input* using the\n`Chem::Cube` file format. Arguments are forwarded to\n`Chem::Cube::Reader.open`.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/Cube.html\">Chem::Cube</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_cube","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::Cube::Reader.open(input) do |reader|\n  reader.read_attached\nend"}},{"html_id":"from_gen(input:IO|Path|String,guess_topology:Bool=false):self-class-method","name":"from_gen","doc":"Returns the structure encoded in *input* using the\n`Chem::Gen` file format. Arguments are forwarded to\n`Chem::Gen::Reader.open`.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/Gen.html\">Chem::Gen</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"args_string":"(input : IO | Path | String, guess_topology : Bool = false) : self","args_html":"(input : IO | Path | String, guess_topology : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_gen","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::Gen::Reader.open(input, guess_topology) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_locpot(input:IO|Path|String):self-class-method","name":"from_locpot","doc":"Returns the structure encoded in *input* using the\n`Chem::VASP::Locpot` file format. Arguments are forwarded to\n`Chem::VASP::Locpot::Reader.open`.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/VASP/Locpot.html\">Chem::VASP::Locpot</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_locpot","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::VASP::Locpot::Reader.open(input) do |reader|\n  reader.read_attached\nend"}},{"html_id":"from_mol2(input:IO|Path|String):self-class-method","name":"from_mol2","doc":"Returns the structure encoded in *input* using the\n`Chem::Mol2` file format. Arguments are forwarded to\n`Chem::Mol2::Reader.open`.\n\nIf *input* contains multiple entries, this method returns\nthe first one only. Use `Array#from_mol2` or\n`Chem::Mol2::Reader#each` to get multiple entries instead.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_mol2","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::Mol2::Reader.open(input) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_pdb(input:IO|Path|String,alt_loc:Char?=nil,chains:Enumerable(Char)|String|Nil=nil,het:Bool=true):self-class-method","name":"from_pdb","doc":"Returns the structure encoded in *input* using the\n`Chem::PDB` file format. Arguments are forwarded to\n`Chem::PDB::Reader.open`.\n\nIf *input* contains multiple entries, this method returns\nthe first one only. Use `Array#from_pdb` or\n`Chem::PDB::Reader#each` to get multiple entries instead.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"}],"args_string":"(input : IO | Path | String, alt_loc : Char? = nil, chains : Enumerable(Char) | String | Nil = nil, het : Bool = true) : self","args_html":"(input : IO | Path | String, alt_loc : <a href=\"../Char.html\">Char</a>? = <span class=\"n\">nil</span>, chains : Enumerable(<a href=\"../Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, het : Bool = <span class=\"n\">true</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_pdb","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::PDB::Reader.open(input, alt_loc, chains, het) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_poscar(input:IO|Path|String,guess_topology:Bool=false):self-class-method","name":"from_poscar","doc":"Returns the structure encoded in *input* using the\n`Chem::VASP::Poscar` file format. Arguments are forwarded to\n`Chem::VASP::Poscar::Reader.open`.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/VASP/Poscar.html\">Chem::VASP::Poscar</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"args_string":"(input : IO | Path | String, guess_topology : Bool = false) : self","args_html":"(input : IO | Path | String, guess_topology : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_poscar","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::VASP::Poscar::Reader.open(input, guess_topology) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_xyz(input:IO|Path|String,guess_topology:Bool=false):self-class-method","name":"from_xyz","doc":"Returns the structure encoded in *input* using the\n`Chem::XYZ` file format. Arguments are forwarded to\n`Chem::XYZ::Reader.open`.\n\nIf *input* contains multiple entries, this method returns\nthe first one only. Use `Array#from_xyz` or\n`Chem::XYZ::Reader#each` to get multiple entries instead.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"args_string":"(input : IO | Path | String, guess_topology : Bool = false) : self","args_html":"(input : IO | Path | String, guess_topology : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_xyz","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::XYZ::Reader.open(input, guess_topology) do |reader|\n  reader.read_entry\nend"}},{"html_id":"new(source_file:Path|String|Nil=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"source_file","doc":null,"default_value":"nil","external_name":"source_file","restriction":"Path | String | Nil"}],"args_string":"(source_file : Path | String | Nil = nil)","args_html":"(source_file : Path | String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/core/structure.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L18"},"def":{"name":"new","args":[{"name":"source_file","doc":null,"default_value":"nil","external_name":"source_file","restriction":"Path | String | Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(source_file)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"read(input:IO|Path|String,format:Chem::Format|String):self-class-method","name":"read","doc":"Returns the structure encoded in the specified file\nusing *format*. Raises `ArgumentError` if *format* has\nrequired arguments or cannot read `Chem::Structure`.\n\nIf *input* contains multiple entries, this method returns\nthe first one only. Use `Array.read` or\n`Chem::FormatReader::MultiEntry#each` (reader can be\nobtained via `Chem::Format.reader`) to get multiple entries\ninstead.\n\nThe supported file formats are `Chem::Cube`, `Chem::Gen`, `Chem::Mol2`, `Chem::PDB`, `Chem::VASP::Chgcar`, `Chem::VASP::Locpot`, `Chem::VASP::Poscar`, `Chem::XYZ`. Use the\n`.from_*` methods to customize how the object is decoded in\nthe corresponding file format if possible.","summary":"<p>Returns the structure encoded in the specified file using <em>format</em>.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(input : IO | Path | String, format : Chem::Format | String) : self","args_html":"(input : IO | Path | String, format : <a href=\"../Chem/Format.html\">Chem::Format</a> | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"read","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .gen?\n  from_gen(input)\nwhen .mol2?\n  from_mol2(input)\nwhen .pdb?\n  from_pdb(input)\nwhen .xyz?\n  from_xyz(input)\nwhen .poscar?\n  from_poscar(input)\nwhen .cube?\n  from_cube(input)\nwhen .chgcar?\n  from_chgcar(input)\nwhen .locpot?\n  from_locpot(input)\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::Structure\"))\nend\n"}},{"html_id":"read(path:Path|String):self-class-method","name":"read","doc":"Returns the structure encoded in the specified file.\nThe file format is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nIf the file contains multiple entries, this method returns\nthe first one only. Use `Array.read` to get multiple entries\ninstead.\n\nThe supported file formats are the following:\n\n- `Chem::Gen` (.gen)\n- `Chem::Mol2` (.mol2)\n- `Chem::PDB` (.ent, .pdb)\n- `Chem::XYZ` (.xyz)\n- `Chem::VASP::Poscar` (.poscar, POSCAR, CONTCAR)\n- `Chem::Cube` (.cube)\n- `Chem::VASP::Chgcar` (CHGCAR)\n- `Chem::VASP::Locpot` (LOCPOT)\n\nUse the `.from_*` methods to customize how the object is\ndecoded in the corresponding file format if possible.","summary":"<p>Returns the structure encoded in the specified file.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"read","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"read(path, ::Chem::Format.from_filename(path))"}}],"instance_methods":[{"html_id":"[](*args,**options)-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/structure.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L16"},"def":{"name":"[]","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@chain_table[*args, **options]"}},{"html_id":"[](*args,**options,&)-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/structure.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L16"},"def":{"name":"[]","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@chain_table.[](*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"[]?(*args,**options)-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/structure.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L16"},"def":{"name":"[]?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@chain_table[*args, **options]?"}},{"html_id":"[]?(*args,**options,&)-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/structure.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L16"},"def":{"name":"[]?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@chain_table.[]?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"biases:Array(Chem::Bias)-instance-method","name":"biases","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(Chem::Bias)","args_html":" : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Bias.html\">Chem::Bias</a>)","location":{"filename":"src/chem/core/structure.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L10"},"def":{"name":"biases","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@biases"}},{"html_id":"clear:self-instance-method","name":"clear","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/structure.cr","line_number":35,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L35"},"def":{"name":"clear","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"@chain_table.clear\n@chains.clear\nself\n"}},{"html_id":"clone:self-instance-method","name":"clone","doc":"Returns a deep copy of `self`, that is, every chain/residue/atom is copied.\n\nUnlike array-like classes in the language, `#dup` (shallow copy) is not possible.\n\n```\nstructure = Structure.new \"/path/to/file.pdb\"\nother = structure.clone\nother == structure     # => true\nother.same?(structure) # => false\n\nstructure.dig('A', 23, \"OG\").partial_charge         # => 0.0\nother.dig('A', 23, \"OG\").partial_charge             # => 0.0\nstructure.dig('A', 23, \"OG\").partial_charge = 0.635 # => 0.635\nother.dig('A', 23, \"OG\").partial_charge             # => 0.0\n```","summary":"<p>Returns a deep copy of <code>self</code>, that is, every chain/residue/atom is copied.</p>","abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/structure.cr","line_number":56,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L56"},"def":{"name":"clone","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"structure = Structure.new(@source_file)\nstructure.biases.concat(@biases)\nstructure.experiment = @experiment\nstructure.lattice = @lattice\nstructure.title = @title\neach_chain(&.copy_to(structure))\nbonds.each do |bond|\n  a, b = bond\n  a = structure.dig(a.chain.id, a.residue.number, a.residue.insertion_code, a.name)\n  b = structure.dig(b.chain.id, b.residue.number, b.residue.insertion_code, b.name)\n  a.bonds.add(b, order: bond.order)\nend\nstructure\n"}},{"html_id":"coords:Spatial::CoordinatesProxy-instance-method","name":"coords","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Spatial::CoordinatesProxy","args_html":" : <a href=\"../Chem/Spatial/CoordinatesProxy.html\">Spatial::CoordinatesProxy</a>","location":{"filename":"src/chem/core/structure.cr","line_number":72,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L72"},"def":{"name":"coords","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Spatial::CoordinatesProxy","visibility":"Public","body":"Spatial::CoordinatesProxy.new(self, @lattice)"}},{"html_id":"delete(ch:Chain):Chain?-instance-method","name":"delete","doc":null,"summary":null,"abstract":false,"args":[{"name":"ch","doc":null,"default_value":"","external_name":"ch","restriction":"Chain"}],"args_string":"(ch : Chain) : Chain?","args_html":"(ch : <a href=\"../Chem/Chain.html\">Chain</a>) : <a href=\"../Chem/Chain.html\">Chain</a>?","location":{"filename":"src/chem/core/structure.cr","line_number":76,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L76"},"def":{"name":"delete","args":[{"name":"ch","doc":null,"default_value":"","external_name":"ch","restriction":"Chain"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Chain | ::Nil","visibility":"Public","body":"ch = @chains.delete(ch)\nif ch && (@chain_table[ch.id]?.same?(ch))\n  @chain_table.delete(ch.id)\nend\nch\n"}},{"html_id":"dig(id:Char):Chain-instance-method","name":"dig","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"}],"args_string":"(id : Char) : Chain","args_html":"(id : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Chain.html\">Chain</a>","location":{"filename":"src/chem/core/structure.cr","line_number":82,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L82"},"def":{"name":"dig","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Chain","visibility":"Public","body":"self[id]"}},{"html_id":"dig(id:Char,*subindexes)-instance-method","name":"dig","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"},{"name":"subindexes","doc":null,"default_value":"","external_name":"subindexes","restriction":""}],"args_string":"(id : Char, *subindexes)","args_html":"(id : <a href=\"../Char.html\">Char</a>, *subindexes)","location":{"filename":"src/chem/core/structure.cr","line_number":86,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L86"},"def":{"name":"dig","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"},{"name":"subindexes","doc":null,"default_value":"","external_name":"subindexes","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self[id].dig(*subindexes)"}},{"html_id":"dig?(id:Char):Chain?-instance-method","name":"dig?","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"}],"args_string":"(id : Char) : Chain?","args_html":"(id : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Chain.html\">Chain</a>?","location":{"filename":"src/chem/core/structure.cr","line_number":90,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L90"},"def":{"name":"dig?","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Chain | ::Nil","visibility":"Public","body":"self[id]?"}},{"html_id":"dig?(id:Char,*subindexes)-instance-method","name":"dig?","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"},{"name":"subindexes","doc":null,"default_value":"","external_name":"subindexes","restriction":""}],"args_string":"(id : Char, *subindexes)","args_html":"(id : <a href=\"../Char.html\">Char</a>, *subindexes)","location":{"filename":"src/chem/core/structure.cr","line_number":94,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L94"},"def":{"name":"dig?","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"},{"name":"subindexes","doc":null,"default_value":"","external_name":"subindexes","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if chain = self[id]?\n  chain.dig?(*subindexes)\nend"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Atom)","args_html":" : Iterator(<a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/core/structure.cr","line_number":100,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L100"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Atom)","visibility":"Public","body":"iterators = [] of Iterator(Atom)\neach_chain do |chain|\n  chain.each_residue do |residue|\n    iterators << residue.each_atom\n  end\nend\nIterator.chain(iterators)\n"}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Atom -> )","args_html":"(&block : <a href=\"../Chem/Atom.html\">Atom</a> -> )","location":{"filename":"src/chem/core/structure.cr","line_number":110,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L110"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Atom ->)"},"return_type":"","visibility":"Public","body":"@chains.each do |chain|\n  chain.each_atom do |atom|\n    yield atom\n  end\nend"}},{"html_id":"each_chain:Iterator(Chain)-instance-method","name":"each_chain","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Chain)","args_html":" : Iterator(<a href=\"../Chem/Chain.html\">Chain</a>)","location":{"filename":"src/chem/core/structure.cr","line_number":118,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L118"},"def":{"name":"each_chain","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Chain)","visibility":"Public","body":"@chains.each"}},{"html_id":"each_chain(&block:Chain->)-instance-method","name":"each_chain","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Chain -> )","args_html":"(&block : <a href=\"../Chem/Chain.html\">Chain</a> -> )","location":{"filename":"src/chem/core/structure.cr","line_number":122,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L122"},"def":{"name":"each_chain","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Chain ->)"},"return_type":"","visibility":"Public","body":"@chains.each do |chain|\n  yield chain\nend"}},{"html_id":"each_residue:Iterator(Residue)-instance-method","name":"each_residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Iterator(Residue)","args_html":" : Iterator(<a href=\"../Chem/Residue.html\">Residue</a>)","location":{"filename":"src/chem/core/structure.cr","line_number":128,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L128"},"def":{"name":"each_residue","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Iterator(Residue)","visibility":"Public","body":"Iterator.chain(each_chain.map(&.each_residue).to_a)"}},{"html_id":"each_residue(&block:Residue->)-instance-method","name":"each_residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : Residue -> )","args_html":"(&block : <a href=\"../Chem/Residue.html\">Residue</a> -> )","location":{"filename":"src/chem/core/structure.cr","line_number":132,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L132"},"def":{"name":"each_residue","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Residue ->)"},"return_type":"","visibility":"Public","body":"@chains.each do |chain|\n  chain.each_residue do |residue|\n    yield residue\n  end\nend"}},{"html_id":"empty?-instance-method","name":"empty?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/structure.cr","line_number":140,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L140"},"def":{"name":"empty?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"size == 0"}},{"html_id":"experiment:Structure::Experiment?-instance-method","name":"experiment","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Structure::Experiment?","args_html":" : <a href=\"../Chem/Structure/Experiment.html\">Structure::Experiment</a>?","location":{"filename":"src/chem/core/structure.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L11"},"def":{"name":"experiment","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Structure::Experiment | ::Nil","visibility":"Public","body":"@experiment"}},{"html_id":"experiment=(experiment:Structure::Experiment?)-instance-method","name":"experiment=","doc":null,"summary":null,"abstract":false,"args":[{"name":"experiment","doc":null,"default_value":"","external_name":"experiment","restriction":"Structure::Experiment | ::Nil"}],"args_string":"(experiment : Structure::Experiment?)","args_html":"(experiment : <a href=\"../Chem/Structure/Experiment.html\">Structure::Experiment</a>?)","location":{"filename":"src/chem/core/structure.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L11"},"def":{"name":"experiment=","args":[{"name":"experiment","doc":null,"default_value":"","external_name":"experiment","restriction":"Structure::Experiment | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@experiment = experiment"}},{"html_id":"inspect(io:IO)-instance-method","name":"inspect","doc":"Appends a String representation of this object\nwhich includes its class name, its object address\nand the values of all instance variables.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).inspect # => #<Person:0x10fd31f20 @name=\"John\", @age=32>\n```","summary":"<p>Appends a String representation of this object which includes its class name, its object address and the values of all instance variables.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/core/structure.cr","line_number":144,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L144"},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"to_s(io)"}},{"html_id":"lattice:Lattice?-instance-method","name":"lattice","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Lattice?","args_html":" : <a href=\"../Chem/Lattice.html\">Lattice</a>?","location":{"filename":"src/chem/core/structure.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L12"},"def":{"name":"lattice","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lattice | ::Nil","visibility":"Public","body":"@lattice"}},{"html_id":"lattice=(lattice:Lattice?)-instance-method","name":"lattice=","doc":null,"summary":null,"abstract":false,"args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice | ::Nil"}],"args_string":"(lattice : Lattice?)","args_html":"(lattice : <a href=\"../Chem/Lattice.html\">Lattice</a>?)","location":{"filename":"src/chem/core/structure.cr","line_number":12,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L12"},"def":{"name":"lattice=","args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@lattice = lattice"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/structure.cr","line_number":148,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L148"},"def":{"name":"n_atoms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"each_chain.sum(&.n_atoms)"}},{"html_id":"n_chains:Int32-instance-method","name":"n_chains","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/structure.cr","line_number":152,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L152"},"def":{"name":"n_chains","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@chains.size"}},{"html_id":"n_residues:Int32-instance-method","name":"n_residues","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/core/structure.cr","line_number":156,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L156"},"def":{"name":"n_residues","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"each_chain.sum(&.n_residues)"}},{"html_id":"periodic?:Bool-instance-method","name":"periodic?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/core/structure.cr","line_number":160,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L160"},"def":{"name":"periodic?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!(!@lattice)"}},{"html_id":"renumber_by_connectivity(split_chains:Bool=true):Nil-instance-method","name":"renumber_by_connectivity","doc":"Renumber chain and residues based on bond information.\n\nResidue fragments are assigned to unique chains unless\n*split_chains* is `false`, which keeps existing chains intact.\nResidue ordering is computed based on the link bond if available.\n\nNOTE: existing chains are reused to re-arrang the residues among\nthem, so avoid caching them before calling this.","summary":"<p>Renumber chain and residues based on bond information.</p>","abstract":false,"args":[{"name":"split_chains","doc":null,"default_value":"true","external_name":"split_chains","restriction":"Bool"}],"args_string":"(split_chains : Bool = true) : Nil","args_html":"(split_chains : Bool = <span class=\"n\">true</span>) : Nil","location":{"filename":"src/chem/core/structure.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L172"},"def":{"name":"renumber_by_connectivity","args":[{"name":"split_chains","doc":null,"default_value":"true","external_name":"split_chains","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if split_chains\n  id = 'A'.pred\n  residues.residue_fragments.each do |residues|\n    chain = (dig?(id = id.succ)) || (Chain.new(id, self))\n    chain.clear\n    residues.each(&.chain = chain)\n    chain.renumber_by_connectivity\n  end\nelse\n  each_chain(&.renumber_by_connectivity)\nend"}},{"html_id":"source_file:Path?-instance-method","name":"source_file","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Path?","args_html":" : Path?","location":{"filename":"src/chem/core/structure.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L13"},"def":{"name":"source_file","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Path | ::Nil","visibility":"Public","body":"@source_file"}},{"html_id":"title:String-instance-method","name":"title","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/core/structure.cr","line_number":14,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L14"},"def":{"name":"title","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@title"}},{"html_id":"title=(title:String)-instance-method","name":"title=","doc":null,"summary":null,"abstract":false,"args":[{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/chem/core/structure.cr","line_number":14,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L14"},"def":{"name":"title=","args":[{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@title = title"}},{"html_id":"to_gen(fractional:Bool=false):String-instance-method","name":"to_gen","doc":"Returns a string representation of the structure using\nthe `Chem::Gen` file format. Arguments are fowarded to\n`Chem::Gen::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/Gen.html\">Chem::Gen</a></code> file format.</p>","abstract":false,"args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false) : String","args_html":"(fractional : Bool = <span class=\"n\">false</span>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_gen","args":[{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_gen(io, fractional)\nend"}},{"html_id":"to_gen(output:IO|Path|String,fractional:Bool=false):Nil-instance-method","name":"to_gen","doc":"Writes the structure to *output* using the `Chem::Gen`\nfile format. Arguments are fowarded to `Chem::Gen::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/Gen.html\">Chem::Gen</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(output : IO | Path | String, fractional : Bool = false) : Nil","args_html":"(output : IO | Path | String, fractional : Bool = <span class=\"n\">false</span>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_gen","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::Gen::Writer.open(output, fractional) do |writer|\n  writer << self\nend"}},{"html_id":"to_mol2(output:IO|Path|String):Nil-instance-method","name":"to_mol2","doc":"Writes the structure to *output* using the `Chem::Mol2`\nfile format. Arguments are fowarded to `Chem::Mol2::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_mol2","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::Mol2::Writer.open(output, total_entries: 1) do |writer|\n  writer << self\nend"}},{"html_id":"to_mol2:String-instance-method","name":"to_mol2","doc":"Returns a string representation of the structure using\nthe `Chem::Mol2` file format. Arguments are fowarded to\n`Chem::Mol2::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_mol2","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_mol2(io)\nend"}},{"html_id":"to_pdb(bonds:PDB::Writer::BondOptions=PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true):String-instance-method","name":"to_pdb","doc":"Returns a string representation of the structure using\nthe `Chem::PDB` file format. Arguments are fowarded to\n`Chem::PDB::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"}],"args_string":"(bonds : PDB::Writer::BondOptions = PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true) : String","args_html":"(bonds : <a href=\"../Chem/PDB/Writer/BondOptions.html\">PDB::Writer::BondOptions</a> = <span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_pdb","args":[{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_pdb(io, bonds, renumber)\nend"}},{"html_id":"to_pdb(output:IO|Path|String,bonds:PDB::Writer::BondOptions=PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true):Nil-instance-method","name":"to_pdb","doc":"Writes the structure to *output* using the `Chem::PDB`\nfile format. Arguments are fowarded to `Chem::PDB::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"}],"args_string":"(output : IO | Path | String, bonds : PDB::Writer::BondOptions = PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true) : Nil","args_html":"(output : IO | Path | String, bonds : <a href=\"../Chem/PDB/Writer/BondOptions.html\">PDB::Writer::BondOptions</a> = <span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_pdb","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"bonds","doc":null,"default_value":"PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"PDB::Writer::BondOptions"},{"name":"renumber","doc":null,"default_value":"true","external_name":"renumber","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::PDB::Writer.open(output, bonds, renumber, total_entries: 1) do |writer|\n  writer << self\nend"}},{"html_id":"to_poscar(order:Array(Element)|Array(String)|Nil=nil,fractional:Bool=false,wrap:Bool=false):String-instance-method","name":"to_poscar","doc":"Returns a string representation of the structure using\nthe `Chem::VASP::Poscar` file format. Arguments are fowarded to\n`Chem::VASP::Poscar::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/VASP/Poscar.html\">Chem::VASP::Poscar</a></code> file format.</p>","abstract":false,"args":[{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","doc":null,"default_value":"false","external_name":"wrap","restriction":"Bool"}],"args_string":"(order : Array(Element) | Array(String) | Nil = nil, fractional : Bool = false, wrap : Bool = false) : String","args_html":"(order : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Element.html\">Element</a>) | <a href=\"../Array.html\">Array</a>(String) | Nil = <span class=\"n\">nil</span>, fractional : Bool = <span class=\"n\">false</span>, wrap : Bool = <span class=\"n\">false</span>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_poscar","args":[{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","doc":null,"default_value":"false","external_name":"wrap","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_poscar(io, order, fractional, wrap)\nend"}},{"html_id":"to_poscar(output:IO|Path|String,order:Array(Element)|Array(String)|Nil=nil,fractional:Bool=false,wrap:Bool=false):Nil-instance-method","name":"to_poscar","doc":"Writes the structure to *output* using the `Chem::VASP::Poscar`\nfile format. Arguments are fowarded to `Chem::VASP::Poscar::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/VASP/Poscar.html\">Chem::VASP::Poscar</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","doc":null,"default_value":"false","external_name":"wrap","restriction":"Bool"}],"args_string":"(output : IO | Path | String, order : Array(Element) | Array(String) | Nil = nil, fractional : Bool = false, wrap : Bool = false) : Nil","args_html":"(output : IO | Path | String, order : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Element.html\">Element</a>) | <a href=\"../Array.html\">Array</a>(String) | Nil = <span class=\"n\">nil</span>, fractional : Bool = <span class=\"n\">false</span>, wrap : Bool = <span class=\"n\">false</span>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_poscar","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","doc":null,"default_value":"false","external_name":"wrap","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::VASP::Poscar::Writer.open(output, order, fractional, wrap) do |writer|\n  writer << self\nend"}},{"html_id":"to_pymol(output:IO|Path|String):Nil-instance-method","name":"to_pymol","doc":"Writes the structure to *output* using the `Chem::PyMOL`\nfile format. Arguments are fowarded to `Chem::PyMOL::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/PyMOL.html\">Chem::PyMOL</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_pymol","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::PyMOL::Writer.open(output) do |writer|\n  writer << self\nend"}},{"html_id":"to_pymol:String-instance-method","name":"to_pymol","doc":"Returns a string representation of the structure using\nthe `Chem::PyMOL` file format. Arguments are fowarded to\n`Chem::PyMOL::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/PyMOL.html\">Chem::PyMOL</a></code> file format.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_pymol","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_pymol(io)\nend"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/core/structure.cr","line_number":186,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L186"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << \"<Structure\"\nif title.blank?\nelse\n  (io << \" \") << title.inspect\nend\nio << \": \"\n(io << n_atoms) << \" atoms\"\nif n_residues > 1\n  ((io << \", \") << n_residues) << \" residues\"\nend\nio << \", \"\nif @lattice\nelse\n  io << \"non-\"\nend\nio << \"periodic>\"\n"}},{"html_id":"to_stride(output:IO|Path|String):Nil-instance-method","name":"to_stride","doc":"Writes the structure to *output* using the `Chem::Protein::Stride`\nfile format. Arguments are fowarded to `Chem::Protein::Stride::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/Protein/Stride.html\">Chem::Protein::Stride</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_stride","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::Protein::Stride::Writer.open(output) do |writer|\n  writer << self\nend"}},{"html_id":"to_stride:String-instance-method","name":"to_stride","doc":"Returns a string representation of the structure using\nthe `Chem::Protein::Stride` file format. Arguments are fowarded to\n`Chem::Protein::Stride::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/Protein/Stride.html\">Chem::Protein::Stride</a></code> file format.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_stride","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_stride(io)\nend"}},{"html_id":"to_vmd(output:IO|Path|String):Nil-instance-method","name":"to_vmd","doc":"Writes the structure to *output* using the `Chem::VMD`\nfile format. Arguments are fowarded to `Chem::VMD::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/VMD.html\">Chem::VMD</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_vmd","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::VMD::Writer.open(output) do |writer|\n  writer << self\nend"}},{"html_id":"to_vmd:String-instance-method","name":"to_vmd","doc":"Returns a string representation of the structure using\nthe `Chem::VMD` file format. Arguments are fowarded to\n`Chem::VMD::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/VMD.html\">Chem::VMD</a></code> file format.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_vmd","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_vmd(io)\nend"}},{"html_id":"to_xyz(output:IO|Path|String):Nil-instance-method","name":"to_xyz","doc":"Writes the structure to *output* using the `Chem::XYZ`\nfile format. Arguments are fowarded to `Chem::XYZ::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_xyz","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"Chem::XYZ::Writer.open(output, total_entries: 1) do |writer|\n  writer << self\nend"}},{"html_id":"to_xyz:String-instance-method","name":"to_xyz","doc":"Returns a string representation of the structure using\nthe `Chem::XYZ` file format. Arguments are fowarded to\n`Chem::XYZ::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"to_xyz","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_xyz(io)\nend"}},{"html_id":"unwrap:self-instance-method","name":"unwrap","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/structure.cr","line_number":197,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure.cr#L197"},"def":{"name":"unwrap","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if lattice = @lattice\nelse\n  raise(Spatial::NotPeriodicError.new)\nend\nSpatial::PBC.unwrap(self, lattice)\nself\n"}},{"html_id":"write(output:IO|Path|String,format:Chem::Format|String):Nil-instance-method","name":"write","doc":"Writes the structure to *output* using *format*. Raises\n`ArgumentError` if *format* has required arguments or cannot\nwrite `Chem::Structure`.\n\nThe supported file formats are `Chem::Gen`, `Chem::Mol2`, `Chem::PDB`, `Chem::Protein::Stride`, `Chem::PyMOL`, `Chem::VASP::Poscar`, `Chem::VMD`, `Chem::XYZ`. Use the\n`#to_*` methods to customize how the object is written in the\ncorresponding file format if possible.","summary":"<p>Writes the structure to <em>output</em> using <em>format</em>.</p>","abstract":false,"args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(output : IO | Path | String, format : Chem::Format | String) : Nil","args_html":"(output : IO | Path | String, format : <a href=\"../Chem/Format.html\">Chem::Format</a> | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"write","args":[{"name":"output","doc":null,"default_value":"","external_name":"output","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .gen?\n  to_gen(output)\nwhen .mol2?\n  to_mol2(output)\nwhen .pdb?\n  to_pdb(output)\nwhen .pymol?\n  to_pymol(output)\nwhen .vmd?\n  to_vmd(output)\nwhen .xyz?\n  to_xyz(output)\nwhen .stride?\n  to_stride(output)\nwhen .poscar?\n  to_poscar(output)\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::Structure\"))\nend\n"}},{"html_id":"write(path:Path|String):Nil-instance-method","name":"write","doc":"Writes the structure to the specified file. The file\nformat is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nThe supported file formats are the following:\n\n- `Chem::Gen` (.gen)\n- `Chem::Mol2` (.mol2)\n- `Chem::PDB` (.ent, .pdb)\n- `Chem::PyMOL` (.pml)\n- `Chem::VMD` (.vmd)\n- `Chem::XYZ` (.xyz)\n- `Chem::Protein::Stride` (.stride)\n- `Chem::VASP::Poscar` (.poscar, POSCAR, CONTCAR)\n\nUse the `#to_*` methods to customize how the object is written\nin the corresponding file format if possible.","summary":"<p>Writes the structure to the specified file.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : Nil","args_html":"(path : Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"write","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"write(path, ::Chem::Format.from_filename(path))"}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/Structure/Builder","path":"Chem/Structure/Builder.html","kind":"class","full_name":"Chem::Structure::Builder","name":"Builder","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/structure/builder.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L4"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Structure","kind":"class","full_name":"Chem::Structure","name":"Structure"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(structure:Structure)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure)","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>)","location":{"filename":"src/chem/core/structure/builder.cr","line_number":17,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L17"},"def":{"name":"new","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(structure)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(*args,guess_topology:Bool=false,**options)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"args_string":"(*args, guess_topology : Bool = false, **options)","args_html":"(*args, guess_topology : Bool = <span class=\"n\">false</span>, **options)","location":{"filename":"src/chem/core/structure/builder.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L13"},"def":{"name":"new","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(*args, **options, guess_topology: guess_topology)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"atom(name:String,serial:Int32,coords:Spatial::Vec3,**options):Atom-instance-method","name":"atom","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int32"},{"name":"coords","doc":null,"default_value":"","external_name":"coords","restriction":"Spatial::Vec3"}],"args_string":"(name : String, serial : Int32, coords : Spatial::Vec3, **options) : Atom","args_html":"(name : String, serial : Int32, coords : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, **options) : <a href=\"../../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":38,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L38"},"def":{"name":"atom","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"serial","doc":null,"default_value":"","external_name":"serial","restriction":"Int32"},{"name":"coords","doc":null,"default_value":"","external_name":"coords","restriction":"Spatial::Vec3"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom","visibility":"Public","body":"@atom_serial = serial\nAtom.new(name, @atom_serial, coords, residue, **options)\n"}},{"html_id":"atom(element:Element|Symbol,coords:Spatial::Vec3,**options):Atom-instance-method","name":"atom","doc":null,"summary":null,"abstract":false,"args":[{"name":"element","doc":null,"default_value":"","external_name":"element","restriction":"Element | Symbol"},{"name":"coords","doc":null,"default_value":"","external_name":"coords","restriction":"Spatial::Vec3"}],"args_string":"(element : Element | Symbol, coords : Spatial::Vec3, **options) : Atom","args_html":"(element : <a href=\"../../Chem/Element.html\">Element</a> | Symbol, coords : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, **options) : <a href=\"../../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":28,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L28"},"def":{"name":"atom","args":[{"name":"element","doc":null,"default_value":"","external_name":"element","restriction":"Element | Symbol"},{"name":"coords","doc":null,"default_value":"","external_name":"coords","restriction":"Spatial::Vec3"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom","visibility":"Public","body":"if element.is_a?(Symbol)\n  element = PeriodicTable[element.to_s.capitalize]\nend\nid = residue.each_atom.count do |__arg2|\n  __arg2.element == element\nend + 1\natom(\"#{element.symbol}#{id}\", coords, **options.merge(element: element))\n"}},{"html_id":"atom(name:String,coords:Spatial::Vec3,**options):Atom-instance-method","name":"atom","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"coords","doc":null,"default_value":"","external_name":"coords","restriction":"Spatial::Vec3"}],"args_string":"(name : String, coords : Spatial::Vec3, **options) : Atom","args_html":"(name : String, coords : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, **options) : <a href=\"../../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":34,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L34"},"def":{"name":"atom","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"coords","doc":null,"default_value":"","external_name":"coords","restriction":"Spatial::Vec3"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom","visibility":"Public","body":"Atom.new(name, (@atom_serial = @atom_serial + 1), coords, residue, **options)"}},{"html_id":"atom(coords:Spatial::Vec3,**options):Atom-instance-method","name":"atom","doc":null,"summary":null,"abstract":false,"args":[{"name":"coords","doc":null,"default_value":"","external_name":"coords","restriction":"Spatial::Vec3"}],"args_string":"(coords : Spatial::Vec3, **options) : Atom","args_html":"(coords : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, **options) : <a href=\"../../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":24,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L24"},"def":{"name":"atom","args":[{"name":"coords","doc":null,"default_value":"","external_name":"coords","restriction":"Spatial::Vec3"}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"Atom","visibility":"Public","body":"atom(:C, coords, **options)"}},{"html_id":"bond(name:String,other:String,order:Int=1):Bond-instance-method","name":"bond","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"},{"name":"order","doc":null,"default_value":"1","external_name":"order","restriction":"Int"}],"args_string":"(name : String, other : String, order : Int = 1) : Bond","args_html":"(name : String, other : String, order : Int = <span class=\"n\">1</span>) : <a href=\"../../Chem/Bond.html\">Bond</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":43,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L43"},"def":{"name":"bond","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"String"},{"name":"order","doc":null,"default_value":"1","external_name":"order","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bond","visibility":"Public","body":"(atom!(name)).bonds.add(atom!(other), order)"}},{"html_id":"bond(i:Int,j:Int,order:Int=1,aromatic:Bool=false):Bond-instance-method","name":"bond","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"order","doc":null,"default_value":"1","external_name":"order","restriction":"Int"},{"name":"aromatic","doc":null,"default_value":"false","external_name":"aromatic","restriction":"Bool"}],"args_string":"(i : Int, j : Int, order : Int = 1, aromatic : Bool = false) : Bond","args_html":"(i : Int, j : Int, order : Int = <span class=\"n\">1</span>, aromatic : Bool = <span class=\"n\">false</span>) : <a href=\"../../Chem/Bond.html\">Bond</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":47,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L47"},"def":{"name":"bond","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Int"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Int"},{"name":"order","doc":null,"default_value":"1","external_name":"order","restriction":"Int"},{"name":"aromatic","doc":null,"default_value":"false","external_name":"aromatic","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bond","visibility":"Public","body":"bond = atoms[i].bonds.add(atoms[j], order)\nif aromatic\n  aromatic_bonds << bond\nend\nbond\n"}},{"html_id":"bonds(bond_table:Hash(Tuple(Int32,Int32),Int32)):Nil-instance-method","name":"bonds","doc":null,"summary":null,"abstract":false,"args":[{"name":"bond_table","doc":null,"default_value":"","external_name":"bond_table","restriction":"Hash(Tuple(Int32, Int32), Int32)"}],"args_string":"(bond_table : Hash(Tuple(Int32, Int32), Int32)) : Nil","args_html":"(bond_table : Hash(Tuple(Int32, Int32), Int32)) : Nil","location":{"filename":"src/chem/core/structure/builder.cr","line_number":53,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L53"},"def":{"name":"bonds","args":[{"name":"bond_table","doc":null,"default_value":"","external_name":"bond_table","restriction":"Hash(Tuple(Int32, Int32), Int32)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"atom_table = {} of Int32 => Atom\natom_serials = Set(Int32).new(bond_table.size * 2)\nbond_table.each_key do |__arg3|\n  i = __arg3[0]\n  j = __arg3[1]\n  (atom_serials << i) << j\nend\n@structure.each_atom do |atom|\n  if atom.serial.in?(atom_serials)\n    atom_table[atom.serial] = atom\n  end\nend\nbond_table.each do |__arg4, order|\n  i = __arg4[0]\n  j = __arg4[1]\n  if (lhs = atom_table[i]?) && (rhs = atom_table[j]?)\n    lhs.bonds.add(rhs, order)\n  end\nend\n"}},{"html_id":"build:Structure-instance-method","name":"build","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Structure","args_html":" : <a href=\"../../Chem/Structure.html\">Structure</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":67,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L67"},"def":{"name":"build","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Structure","visibility":"Public","body":"kekulize\nperception = Topology::Perception.new(@structure)\nperception.guess_topology\nif @guess_topology\n  perception.guess_residues\nend\n@structure\n"}},{"html_id":"chain(id:Char):Chain-instance-method","name":"chain","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"}],"args_string":"(id : Char) : Chain","args_html":"(id : <a href=\"../../Char.html\">Char</a>) : <a href=\"../../Chem/Chain.html\">Chain</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":84,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L84"},"def":{"name":"chain","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Chain","visibility":"Public","body":"@chain = @structure[id]? || (Chain.new(id, @structure))"}},{"html_id":"chain:Chain-instance-method","name":"chain","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Chain","args_html":" : <a href=\"../../Chem/Chain.html\">Chain</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":75,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L75"},"def":{"name":"chain","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Chain","visibility":"Public","body":"@chain || next_chain"}},{"html_id":"chain(id:Char,&:self->):Nil-instance-method","name":"chain","doc":null,"summary":null,"abstract":false,"args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"}],"args_string":"(id : Char, & : self -> ) : Nil","args_html":"(id : <a href=\"../../Char.html\">Char</a>, & : <span class=\"k\">self</span> -> ) : Nil","location":{"filename":"src/chem/core/structure/builder.cr","line_number":88,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L88"},"def":{"name":"chain","args":[{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"Nil","visibility":"Public","body":"chain(id)\nwith self yield self\n"}},{"html_id":"chain(&:self->):Nil-instance-method","name":"chain","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : self -> ) : Nil","args_html":"(& : <span class=\"k\">self</span> -> ) : Nil","location":{"filename":"src/chem/core/structure/builder.cr","line_number":79,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L79"},"def":{"name":"chain","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"Nil","visibility":"Public","body":"next_chain\nwith self yield self\n"}},{"html_id":"current_chain:Chain?-instance-method","name":"current_chain","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Chain?","args_html":" : <a href=\"../../Chem/Chain.html\">Chain</a>?","location":{"filename":"src/chem/core/structure/builder.cr","line_number":93,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L93"},"def":{"name":"current_chain","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Chain | ::Nil","visibility":"Public","body":"@chain"}},{"html_id":"current_residue:Residue?-instance-method","name":"current_residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Residue?","args_html":" : <a href=\"../../Chem/Residue.html\">Residue</a>?","location":{"filename":"src/chem/core/structure/builder.cr","line_number":97,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L97"},"def":{"name":"current_residue","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue | ::Nil","visibility":"Public","body":"@residue"}},{"html_id":"expt(expt:Structure::Experiment?)-instance-method","name":"expt","doc":null,"summary":null,"abstract":false,"args":[{"name":"expt","doc":null,"default_value":"","external_name":"expt","restriction":"Structure::Experiment | ::Nil"}],"args_string":"(expt : Structure::Experiment?)","args_html":"(expt : <a href=\"../../Chem/Structure/Experiment.html\">Structure::Experiment</a>?)","location":{"filename":"src/chem/core/structure/builder.cr","line_number":101,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L101"},"def":{"name":"expt","args":[{"name":"expt","doc":null,"default_value":"","external_name":"expt","restriction":"Structure::Experiment | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@structure.experiment = expt"}},{"html_id":"lattice(a:Spatial::Vec3,b:Spatial::Vec3,c:Spatial::Vec3):Lattice-instance-method","name":"lattice","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Spatial::Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Spatial::Vec3"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Spatial::Vec3"}],"args_string":"(a : Spatial::Vec3, b : Spatial::Vec3, c : Spatial::Vec3) : Lattice","args_html":"(a : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, b : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, c : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>) : <a href=\"../../Chem/Lattice.html\">Lattice</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":117,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L117"},"def":{"name":"lattice","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Spatial::Vec3"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Spatial::Vec3"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Spatial::Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lattice","visibility":"Public","body":"@structure.lattice = Lattice.new(a, b, c)"}},{"html_id":"lattice(a:Float64,b:Float64,c:Float64):Lattice-instance-method","name":"lattice","doc":null,"summary":null,"abstract":false,"args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Float64"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Float64"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Float64"}],"args_string":"(a : Float64, b : Float64, c : Float64) : Lattice","args_html":"(a : Float64, b : Float64, c : Float64) : <a href=\"../../Chem/Lattice.html\">Lattice</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":121,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L121"},"def":{"name":"lattice","args":[{"name":"a","doc":null,"default_value":"","external_name":"a","restriction":"Float64"},{"name":"b","doc":null,"default_value":"","external_name":"b","restriction":"Float64"},{"name":"c","doc":null,"default_value":"","external_name":"c","restriction":"Float64"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lattice","visibility":"Public","body":"@structure.lattice = Lattice.new(Spatial::Size[a, b, c])"}},{"html_id":"lattice(lattice:Lattice?)-instance-method","name":"lattice","doc":null,"summary":null,"abstract":false,"args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice | ::Nil"}],"args_string":"(lattice : Lattice?)","args_html":"(lattice : <a href=\"../../Chem/Lattice.html\">Lattice</a>?)","location":{"filename":"src/chem/core/structure/builder.cr","line_number":113,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L113"},"def":{"name":"lattice","args":[{"name":"lattice","doc":null,"default_value":"","external_name":"lattice","restriction":"Lattice | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@structure.lattice = lattice"}},{"html_id":"lattice:Lattice?-instance-method","name":"lattice","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Lattice?","args_html":" : <a href=\"../../Chem/Lattice.html\">Lattice</a>?","location":{"filename":"src/chem/core/structure/builder.cr","line_number":105,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L105"},"def":{"name":"lattice","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lattice | ::Nil","visibility":"Public","body":"@structure.lattice"}},{"html_id":"lattice!:Lattice-instance-method","name":"lattice!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Lattice","args_html":" : <a href=\"../../Chem/Lattice.html\">Lattice</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":109,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L109"},"def":{"name":"lattice!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Lattice","visibility":"Public","body":"@structure.lattice || (raise(Spatial::NotPeriodicError.new))"}},{"html_id":"residue(name:String,number:Int32,inscode:Char?=nil):Residue-instance-method","name":"residue","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"inscode","doc":null,"default_value":"nil","external_name":"inscode","restriction":"Char | ::Nil"}],"args_string":"(name : String, number : Int32, inscode : Char? = nil) : Residue","args_html":"(name : String, number : Int32, inscode : <a href=\"../../Char.html\">Char</a>? = <span class=\"n\">nil</span>) : <a href=\"../../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":138,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L138"},"def":{"name":"residue","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"inscode","doc":null,"default_value":"nil","external_name":"inscode","restriction":"Char | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue","visibility":"Public","body":"@residue = chain[number, inscode]? || (Residue.new(name, number, inscode, chain))"}},{"html_id":"residue(name:String):Residue-instance-method","name":"residue","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Residue","args_html":"(name : String) : <a href=\"../../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":129,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L129"},"def":{"name":"residue","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue","visibility":"Public","body":"@residue = next_residue(name)"}},{"html_id":"residue:Residue-instance-method","name":"residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Residue","args_html":" : <a href=\"../../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":125,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L125"},"def":{"name":"residue","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue","visibility":"Public","body":"@residue || next_residue"}},{"html_id":"residue(name:String,number:Int32,inscode:Char?=nil,&:self->):Nil-instance-method","name":"residue","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"inscode","doc":null,"default_value":"nil","external_name":"inscode","restriction":"Char | ::Nil"}],"args_string":"(name : String, number : Int32, inscode : Char? = nil, & : self -> ) : Nil","args_html":"(name : String, number : Int32, inscode : <a href=\"../../Char.html\">Char</a>? = <span class=\"n\">nil</span>, & : <span class=\"k\">self</span> -> ) : Nil","location":{"filename":"src/chem/core/structure/builder.cr","line_number":142,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L142"},"def":{"name":"residue","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"number","doc":null,"default_value":"","external_name":"number","restriction":"Int32"},{"name":"inscode","doc":null,"default_value":"nil","external_name":"inscode","restriction":"Char | ::Nil"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"Nil","visibility":"Public","body":"residue(name, number, inscode)\nwith self yield self\n"}},{"html_id":"residue(name:String,&:self->):Nil-instance-method","name":"residue","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String, & : self -> ) : Nil","args_html":"(name : String, & : <span class=\"k\">self</span> -> ) : Nil","location":{"filename":"src/chem/core/structure/builder.cr","line_number":133,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L133"},"def":{"name":"residue","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"Nil","visibility":"Public","body":"residue(name)\nwith self yield self\n"}},{"html_id":"secondary_structure(i:Tuple(Char,Int32,Char?),j:Tuple(Char,Int32,Char?),type:Protein::SecondaryStructure):Nil-instance-method","name":"secondary_structure","doc":null,"summary":null,"abstract":false,"args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Tuple(Char, Int32, Char | ::Nil)"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Tuple(Char, Int32, Char | ::Nil)"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Protein::SecondaryStructure"}],"args_string":"(i : Tuple(Char, Int32, Char?), j : Tuple(Char, Int32, Char?), type : Protein::SecondaryStructure) : Nil","args_html":"(i : Tuple(<a href=\"../../Char.html\">Char</a>, Int32, <a href=\"../../Char.html\">Char</a>?), j : Tuple(<a href=\"../../Char.html\">Char</a>, Int32, <a href=\"../../Char.html\">Char</a>?), type : <a href=\"../../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>) : Nil","location":{"filename":"src/chem/core/structure/builder.cr","line_number":147,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L147"},"def":{"name":"secondary_structure","args":[{"name":"i","doc":null,"default_value":"","external_name":"i","restriction":"Tuple(Char, Int32, Char | ::Nil)"},{"name":"j","doc":null,"default_value":"","external_name":"j","restriction":"Tuple(Char, Int32, Char | ::Nil)"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Protein::SecondaryStructure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if (ri = @structure.dig?(*i)) && (rj = @structure.dig?(*j))\nelse\n  return\nend\nsecondary_structure(ri, rj, type)\n"}},{"html_id":"secondary_structure(ri:Residue,rj:Residue,type:Protein::SecondaryStructure)-instance-method","name":"secondary_structure","doc":null,"summary":null,"abstract":false,"args":[{"name":"ri","doc":null,"default_value":"","external_name":"ri","restriction":"Residue"},{"name":"rj","doc":null,"default_value":"","external_name":"rj","restriction":"Residue"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Protein::SecondaryStructure"}],"args_string":"(ri : Residue, rj : Residue, type : Protein::SecondaryStructure)","args_html":"(ri : <a href=\"../../Chem/Residue.html\">Residue</a>, rj : <a href=\"../../Chem/Residue.html\">Residue</a>, type : <a href=\"../../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>)","location":{"filename":"src/chem/core/structure/builder.cr","line_number":154,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L154"},"def":{"name":"secondary_structure","args":[{"name":"ri","doc":null,"default_value":"","external_name":"ri","restriction":"Residue"},{"name":"rj","doc":null,"default_value":"","external_name":"rj","restriction":"Residue"},{"name":"type","doc":null,"default_value":"","external_name":"type","restriction":"Protein::SecondaryStructure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@structure.each_residue do |residue|\n  if ri <= residue && residue <= rj\n    residue.sec = type\n  end\nend"}},{"html_id":"title(title:String)-instance-method","name":"title","doc":null,"summary":null,"abstract":false,"args":[{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/chem/core/structure/builder.cr","line_number":162,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/builder.cr#L162"},"def":{"name":"title","args":[{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@structure.title = title"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Structure/Experiment","path":"Chem/Structure/Experiment.html","kind":"struct","full_name":"Chem::Structure::Experiment","name":"Experiment","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/structure/experiment.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L1"},{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Structure","kind":"class","full_name":"Chem::Structure","name":"Structure"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"from_pdb(input:IO|Path|String,alt_loc:Char?=nil,chains:Enumerable(Char)|String|Nil=nil,het:Bool=true):self-class-method","name":"from_pdb","doc":"Returns the header encoded in *input* using the\n`Chem::PDB` file format. Arguments are forwarded to\n`Chem::PDB::Reader.open`.\n\nIf *input* contains multiple entries, this method returns\nthe first one only. Use `Array#from_pdb` or\n`Chem::PDB::Reader#each` to get multiple entries instead.","summary":"<p>Returns the header encoded in <em>input</em> using the <code><a href=\"../../Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"}],"args_string":"(input : IO | Path | String, alt_loc : Char? = nil, chains : Enumerable(Char) | String | Nil = nil, het : Bool = true) : self","args_html":"(input : IO | Path | String, alt_loc : <a href=\"../../Char.html\">Char</a>? = <span class=\"n\">nil</span>, chains : Enumerable(<a href=\"../../Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, het : Bool = <span class=\"n\">true</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"from_pdb","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"alt_loc","doc":null,"default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","doc":null,"default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"het","doc":null,"default_value":"true","external_name":"het","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"Chem::PDB::Reader.open(input, alt_loc, chains, het) do |reader|\n  reader.read_header\nend"}},{"html_id":"new(title:String,method:Method,resolution:Float64?,pdb_accession:String,deposition_date:Time,doi:String?)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":"Method"},{"name":"resolution","doc":null,"default_value":"","external_name":"resolution","restriction":"Float64 | ::Nil"},{"name":"pdb_accession","doc":null,"default_value":"","external_name":"pdb_accession","restriction":"String"},{"name":"deposition_date","doc":null,"default_value":"","external_name":"deposition_date","restriction":"Time"},{"name":"doi","doc":null,"default_value":"","external_name":"doi","restriction":"String | ::Nil"}],"args_string":"(title : String, method : Method, resolution : Float64?, pdb_accession : String, deposition_date : Time, doi : String?)","args_html":"(title : String, method : <a href=\"../../Chem/Structure/Experiment/Method.html\">Method</a>, resolution : Float64?, pdb_accession : String, deposition_date : Time, doi : String?)","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L20"},"def":{"name":"new","args":[{"name":"title","doc":null,"default_value":"","external_name":"title","restriction":"String"},{"name":"method","doc":null,"default_value":"","external_name":"method","restriction":"Method"},{"name":"resolution","doc":null,"default_value":"","external_name":"resolution","restriction":"Float64 | ::Nil"},{"name":"pdb_accession","doc":null,"default_value":"","external_name":"pdb_accession","restriction":"String"},{"name":"deposition_date","doc":null,"default_value":"","external_name":"deposition_date","restriction":"Time"},{"name":"doi","doc":null,"default_value":"","external_name":"doi","restriction":"String | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(title, method, resolution, pdb_accession, deposition_date, doi)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"read(input:IO|Path|String,format:Chem::Format|String):self-class-method","name":"read","doc":"Returns the header encoded in the specified file\nusing *format*. Raises `ArgumentError` if *format* has\nrequired arguments or cannot read `Chem::Structure::Experiment`.\n\nThe supported file formats are `Chem::PDB`. Use the\n`.from_*` methods to customize how the object is decoded in\nthe corresponding file format if possible.","summary":"<p>Returns the header encoded in the specified file using <em>format</em>.</p>","abstract":false,"args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(input : IO | Path | String, format : Chem::Format | String) : self","args_html":"(input : IO | Path | String, format : <a href=\"../../Chem/Format.html\">Chem::Format</a> | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"read","args":[{"name":"input","doc":null,"default_value":"","external_name":"input","restriction":"IO | Path | String"},{"name":"format","doc":null,"default_value":"","external_name":"format","restriction":"::Chem::Format | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .pdb?\n  from_pdb(input)\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::Structure::Experiment\"))\nend\n"}},{"html_id":"read(path:Path|String):self-class-method","name":"read","doc":"Returns the header encoded in the specified file.\nThe file format is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nThe supported file formats are the following:\n\n- `Chem::PDB` (.ent, .pdb)\n\nUse the `.from_*` methods to customize how the object is\ndecoded in the corresponding file format if possible.","summary":"<p>Returns the header encoded in the specified file.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L270"},"def":{"name":"read","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"read(path, ::Chem::Format.from_filename(path))"}}],"instance_methods":[{"html_id":"deposition_date:Time-instance-method","name":"deposition_date","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Time","args_html":" : Time","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L13"},"def":{"name":"deposition_date","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Time","visibility":"Public","body":"@deposition_date"}},{"html_id":"doi:String?-instance-method","name":"doi","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String?","args_html":" : String?","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":14,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L14"},"def":{"name":"doi","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String | ::Nil","visibility":"Public","body":"@doi"}},{"html_id":"method:Method-instance-method","name":"method","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Method","args_html":" : <a href=\"../../Chem/Structure/Experiment/Method.html\">Method</a>","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L15"},"def":{"name":"method","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Method","visibility":"Public","body":"@method"}},{"html_id":"pdb_accession:String-instance-method","name":"pdb_accession","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L16"},"def":{"name":"pdb_accession","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@pdb_accession"}},{"html_id":"resolution:Float64?-instance-method","name":"resolution","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64?","args_html":" : Float64?","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":17,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L17"},"def":{"name":"resolution","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64 | ::Nil","visibility":"Public","body":"@resolution"}},{"html_id":"title:String-instance-method","name":"title","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L18"},"def":{"name":"title","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@title"}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/Structure/Experiment/Method","path":"Chem/Structure/Experiment/Method.html","kind":"enum","full_name":"Chem::Structure::Experiment::Method","name":"Method","abstract":false,"superclass":null,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/structure/experiment.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"ElectronCrystallography","name":"ElectronCrystallography","value":"0","doc":null,"summary":null},{"id":"ElectronMicroscopy","name":"ElectronMicroscopy","value":"1","doc":null,"summary":null},{"id":"FiberDiffraction","name":"FiberDiffraction","value":"2","doc":null,"summary":null},{"id":"NeutronDiffraction","name":"NeutronDiffraction","value":"3","doc":null,"summary":null},{"id":"SolidStateNMR","name":"SolidStateNMR","value":"4","doc":null,"summary":null},{"id":"SolutionNMR","name":"SolutionNMR","value":"5","doc":null,"summary":null},{"id":"SolutionScattering","name":"SolutionScattering","value":"6","doc":null,"summary":null},{"id":"XRayDiffraction","name":"XRayDiffraction","value":"7","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Structure/Experiment","kind":"struct","full_name":"Chem::Structure::Experiment","name":"Experiment"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"electron_crystallography?-instance-method","name":"electron_crystallography?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L3"},"def":{"name":"electron_crystallography?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ElectronCrystallography"}},{"html_id":"electron_microscopy?-instance-method","name":"electron_microscopy?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L4"},"def":{"name":"electron_microscopy?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == ElectronMicroscopy"}},{"html_id":"fiber_diffraction?-instance-method","name":"fiber_diffraction?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L5"},"def":{"name":"fiber_diffraction?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == FiberDiffraction"}},{"html_id":"neutron_diffraction?-instance-method","name":"neutron_diffraction?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L6"},"def":{"name":"neutron_diffraction?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == NeutronDiffraction"}},{"html_id":"solid_state_nmr?-instance-method","name":"solid_state_nmr?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L7"},"def":{"name":"solid_state_nmr?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == SolidStateNMR"}},{"html_id":"solution_nmr?-instance-method","name":"solution_nmr?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L8"},"def":{"name":"solution_nmr?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == SolutionNMR"}},{"html_id":"solution_scattering?-instance-method","name":"solution_scattering?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":9,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L9"},"def":{"name":"solution_scattering?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == SolutionScattering"}},{"html_id":"x_ray_diffraction?-instance-method","name":"x_ray_diffraction?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core/structure/experiment.cr#L10"},"def":{"name":"x_ray_diffraction?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self == XRayDiffraction"}}],"macros":[],"types":[]}]}]},{"html_id":"chem.cr/Chem/Topology","path":"Chem/Topology.html","kind":"module","full_name":"Chem::Topology","name":"Topology","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/topology/match_data.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L1"},{"filename":"src/chem/topology/patcher.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/patcher.cr#L1"},{"filename":"src/chem/topology/templates/amino.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/amino.cr#L1"},{"filename":"src/chem/topology/types.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L1"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/Topology/AtomType","path":"Chem/Topology/AtomType.html","kind":"class","full_name":"Chem::Topology::AtomType","name":"AtomType","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/topology/types.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Topology","kind":"module","full_name":"Chem::Topology","name":"Topology"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(name:String,formal_charge:Int32=0,element:String?=nil,valency:Int32?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"formal_charge","doc":null,"default_value":"0","external_name":"formal_charge","restriction":"Int32"},{"name":"element","doc":null,"default_value":"nil","external_name":"element","restriction":"String | ::Nil"},{"name":"valency","doc":null,"default_value":"nil","external_name":"valency","restriction":"Int32 | ::Nil"}],"args_string":"(name : String, formal_charge : Int32 = 0, element : String? = nil, valency : Int32? = nil)","args_html":"(name : String, formal_charge : Int32 = <span class=\"n\">0</span>, element : String? = <span class=\"n\">nil</span>, valency : Int32? = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/topology/types.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L8"},"def":{"name":"new","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"formal_charge","doc":null,"default_value":"0","external_name":"formal_charge","restriction":"Int32"},{"name":"element","doc":null,"default_value":"nil","external_name":"element","restriction":"String | ::Nil"},{"name":"valency","doc":null,"default_value":"nil","external_name":"valency","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(name, formal_charge, element, valency)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"element:Element-instance-method","name":"element","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Element","args_html":" : <a href=\"../../Chem/Element.html\">Element</a>","location":{"filename":"src/chem/topology/types.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L3"},"def":{"name":"element","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Element","visibility":"Public","body":"@element"}},{"html_id":"formal_charge:Int32-instance-method","name":"formal_charge","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/topology/types.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L4"},"def":{"name":"formal_charge","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@formal_charge"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Appends a String representation of this object\nwhich includes its class name, its object address\nand the values of all instance variables.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).inspect # => #<Person:0x10fd31f20 @name=\"John\", @age=32>\n```","summary":"<p>Appends a String representation of this object which includes its class name, its object address and the values of all instance variables.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/topology/types.cr","line_number":16,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L16"},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"io << \"<AtomType \"\nto_s(io)\nio << '>'\n"}},{"html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/topology/types.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L5"},"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"suffix:String-instance-method","name":"suffix","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/topology/types.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L22"},"def":{"name":"suffix","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"name[@element.symbol.size..]"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/topology/types.cr","line_number":26,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L26"},"def":{"name":"to_s","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"io << @name\nif @valency == nominal_valency\nelse\n  ((io << '(') << @valency) << ')'\nend\nif @formal_charge == 0\nelse\n  io << (@formal_charge > 0 ? '+' : '-')\nend\nif @formal_charge.abs > 1\n  io << @formal_charge.abs\nend\n"}},{"html_id":"valency:Int32-instance-method","name":"valency","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/topology/types.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L6"},"def":{"name":"valency","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@valency"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Topology/BondType","path":"Chem/Topology/BondType.html","kind":"class","full_name":"Chem::Topology::BondType","name":"BondType","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/topology/types.cr","line_number":38,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L38"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Topology","kind":"module","full_name":"Chem::Topology","name":"Topology"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(lhs:AtomType,rhs:AtomType,order:Int=1)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"AtomType"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"AtomType"},{"name":"order","doc":null,"default_value":"1","external_name":"order","restriction":"Int"}],"args_string":"(lhs : AtomType, rhs : AtomType, order : Int = 1)","args_html":"(lhs : <a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>, rhs : <a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>, order : Int = <span class=\"n\">1</span>)","location":{"filename":"src/chem/topology/types.cr","line_number":46,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L46"},"def":{"name":"new","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"AtomType"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"AtomType"},{"name":"order","doc":null,"default_value":"1","external_name":"order","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(lhs, rhs, order)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(lhs:String,rhs:String,order:Int=1):self-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"String"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"String"},{"name":"order","doc":null,"default_value":"1","external_name":"order","restriction":"Int"}],"args_string":"(lhs : String, rhs : String, order : Int = 1) : self","args_html":"(lhs : String, rhs : String, order : Int = <span class=\"n\">1</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/topology/types.cr","line_number":50,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L50"},"def":{"name":"new","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"String"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"String"},{"name":"order","doc":null,"default_value":"1","external_name":"order","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"BondType.new(AtomType.new(lhs), AtomType.new(rhs), order)"}}],"instance_methods":[{"html_id":"==(rhs:self):Bool-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Bool","args_html":"(rhs : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/topology/types.cr","line_number":54,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L54"},"def":{"name":"==","args":[{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"self"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"if @order != rhs.order\n  return false\nend\n((self[0] == rhs[0]) && (self[1] == rhs[1])) || ((self[0] == rhs[1]) && (self[1] == rhs[0]))\n"}},{"html_id":"includes?(name:String):Bool-instance-method","name":"includes?","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Bool","args_html":"(name : String) : Bool","location":{"filename":"src/chem/topology/types.cr","line_number":60,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L60"},"def":{"name":"includes?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"any? do |__arg0|\n  __arg0.name == name\nend"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Appends a String representation of this object\nwhich includes its class name, its object address\nand the values of all instance variables.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).inspect # => #<Person:0x10fd31f20 @name=\"John\", @age=32>\n```","summary":"<p>Appends a String representation of this object which includes its class name, its object address and the values of all instance variables.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/topology/types.cr","line_number":64,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L64"},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"((((io << \"<BondType \") << self[0].name) << to_char) << self[1].name) << '>'"}},{"html_id":"inverse:self-instance-method","name":"inverse","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : self","args_html":" : <span class=\"k\">self</span>","location":{"filename":"src/chem/topology/types.cr","line_number":68,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L68"},"def":{"name":"inverse","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"BondType.new(self[1], self[0], @order)"}},{"html_id":"order:Int32-instance-method","name":"order","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/topology/types.cr","line_number":41,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L41"},"def":{"name":"order","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@order"}},{"html_id":"other(atom_t:AtomType):AtomType-instance-method","name":"other","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"AtomType"}],"args_string":"(atom_t : AtomType) : AtomType","args_html":"(atom_t : <a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>) : <a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>","location":{"filename":"src/chem/topology/types.cr","line_number":72,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L72"},"def":{"name":"other","args":[{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"AtomType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AtomType","visibility":"Public","body":"case atom_t\nwhen self[0]\n  self[1]\nwhen self[1]\n  self[0]\nelse\n  raise(ArgumentError.new(\"Cannot find atom type #{atom_t}\"))\nend"}},{"html_id":"other(name:String):AtomType-instance-method","name":"other","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String) : AtomType","args_html":"(name : String) : <a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>","location":{"filename":"src/chem/topology/types.cr","line_number":83,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L83"},"def":{"name":"other","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AtomType","visibility":"Public","body":"case name\nwhen self[0].name\n  self[1]\nwhen self[1].name\n  self[0]\nelse\n  raise(ArgumentError.new(\"Cannot find atom type named #{name}\"))\nend"}},{"html_id":"size(*args,**options)-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/topology/types.cr","line_number":42,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L42"},"def":{"name":"size","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@atoms.size(*args, **options)"}},{"html_id":"size(*args,**options,&)-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/topology/types.cr","line_number":42,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L42"},"def":{"name":"size","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@atoms.size(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_char:Char-instance-method","name":"to_char","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Char","args_html":" : <a href=\"../../Char.html\">Char</a>","location":{"filename":"src/chem/topology/types.cr","line_number":94,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L94"},"def":{"name":"to_char","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char","visibility":"Public","body":"case @order\nwhen 1\n  '-'\nwhen 2\n  '='\nwhen 3\n  '#'\nelse\n  raise(\"BUG: unreachable\")\nend"}},{"html_id":"unsafe_fetch(*args,**options)-instance-method","name":"unsafe_fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/topology/types.cr","line_number":42,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L42"},"def":{"name":"unsafe_fetch","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@atoms.unsafe_fetch(*args, **options)"}},{"html_id":"unsafe_fetch(*args,**options,&)-instance-method","name":"unsafe_fetch","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/topology/types.cr","line_number":42,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L42"},"def":{"name":"unsafe_fetch","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@atoms.unsafe_fetch(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Topology/MatchData","path":"Chem/Topology/MatchData.html","kind":"struct","full_name":"Chem::Topology::MatchData","name":"MatchData","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/topology/match_data.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Topology","kind":"module","full_name":"Chem::Topology","name":"Topology"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(resname:String,reskind:Residue::Kind,atom_map:Hash(String,Atom))-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"resname","doc":null,"default_value":"","external_name":"resname","restriction":"String"},{"name":"reskind","doc":null,"default_value":"","external_name":"reskind","restriction":"Residue::Kind"},{"name":"atom_map","doc":null,"default_value":"","external_name":"atom_map","restriction":"Hash(String, Atom)"}],"args_string":"(resname : String, reskind : Residue::Kind, atom_map : Hash(String, Atom))","args_html":"(resname : String, reskind : <a href=\"../../Chem/Residue/Kind.html\">Residue::Kind</a>, atom_map : Hash(String, <a href=\"../../Chem/Atom.html\">Atom</a>))","location":{"filename":"src/chem/topology/match_data.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L8"},"def":{"name":"new","args":[{"name":"resname","doc":null,"default_value":"","external_name":"resname","restriction":"String"},{"name":"reskind","doc":null,"default_value":"","external_name":"reskind","restriction":"Residue::Kind"},{"name":"atom_map","doc":null,"default_value":"","external_name":"atom_map","restriction":"Hash(String, Atom)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(resname, reskind, atom_map)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(res_t:ResidueType,atom_map:Hash(String,Atom)):self-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"res_t","doc":null,"default_value":"","external_name":"res_t","restriction":"ResidueType"},{"name":"atom_map","doc":null,"default_value":"","external_name":"atom_map","restriction":"Hash(String, Atom)"}],"args_string":"(res_t : ResidueType, atom_map : Hash(String, Atom)) : self","args_html":"(res_t : <a href=\"../../Chem/Topology/ResidueType.html\">ResidueType</a>, atom_map : Hash(String, <a href=\"../../Chem/Atom.html\">Atom</a>)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/topology/match_data.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L13"},"def":{"name":"new","args":[{"name":"res_t","doc":null,"default_value":"","external_name":"res_t","restriction":"ResidueType"},{"name":"atom_map","doc":null,"default_value":"","external_name":"atom_map","restriction":"Hash(String, Atom)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"atom_names = res_t.atom_names\natom_map = atom_map.to_a.sort_by! do |__arg0|\n  k = __arg0[0]\n  (atom_names.index(k)) || 99\nend.to_h\nMatchData.new(res_t.name, res_t.kind, atom_map)\n"}}],"instance_methods":[{"html_id":"[](*args,**options)-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/topology/match_data.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L6"},"def":{"name":"[]","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@atom_map[*args, **options]"}},{"html_id":"[](*args,**options,&)-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/topology/match_data.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L6"},"def":{"name":"[]","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@atom_map.[](*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"[]?(*args,**options)-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/topology/match_data.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L6"},"def":{"name":"[]?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@atom_map[*args, **options]?"}},{"html_id":"[]?(*args,**options,&)-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/topology/match_data.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L6"},"def":{"name":"[]?","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@atom_map.[]?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"atom_names:Array(String)-instance-method","name":"atom_names","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)","args_html":" : <a href=\"../../Array.html\">Array</a>(String)","location":{"filename":"src/chem/topology/match_data.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L19"},"def":{"name":"atom_names","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"@atom_map.keys"}},{"html_id":"each_atom(&:Atom,String->):Nil-instance-method","name":"each_atom","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : Atom, String -> ) : Nil","args_html":"(& : <a href=\"../../Chem/Atom.html\">Atom</a>, String -> ) : Nil","location":{"filename":"src/chem/topology/match_data.cr","line_number":23,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L23"},"def":{"name":"each_atom","args":[],"double_splat":null,"splat_index":null,"yields":2,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(Atom, String ->)"},"return_type":"Nil","visibility":"Public","body":"@atom_map.each do |name, atom|\n  yield atom, name\nend"}},{"html_id":"reskind:Residue::Kind-instance-method","name":"reskind","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Residue::Kind","args_html":" : <a href=\"../../Chem/Residue/Kind.html\">Residue::Kind</a>","location":{"filename":"src/chem/topology/match_data.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L3"},"def":{"name":"reskind","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue::Kind","visibility":"Public","body":"@reskind"}},{"html_id":"resname:String-instance-method","name":"resname","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/topology/match_data.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L4"},"def":{"name":"resname","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@resname"}},{"html_id":"size(*args,**options)-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/topology/match_data.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L6"},"def":{"name":"size","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@atom_map.size(*args, **options)"}},{"html_id":"size(*args,**options,&)-instance-method","name":"size","doc":null,"summary":null,"abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/topology/match_data.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L6"},"def":{"name":"size","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"options","doc":null,"default_value":"","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"@atom_map.size(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_h:Hash(String,Atom)-instance-method","name":"to_h","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Hash(String, Atom)","args_html":" : Hash(String, <a href=\"../../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/topology/match_data.cr","line_number":29,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/match_data.cr#L29"},"def":{"name":"to_h","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Hash(String, Atom)","visibility":"Public","body":"@atom_map.dup"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Topology/Patcher","path":"Chem/Topology/Patcher.html","kind":"class","full_name":"Chem::Topology::Patcher","name":"Patcher","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/topology/patcher.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/patcher.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Topology","kind":"module","full_name":"Chem::Topology","name":"Topology"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(residues:ResidueCollection)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"residues","doc":null,"default_value":"","external_name":"residues","restriction":"ResidueCollection"}],"args_string":"(residues : ResidueCollection)","args_html":"(residues : <a href=\"../../Chem/ResidueCollection.html\">ResidueCollection</a>)","location":{"filename":"src/chem/topology/patcher.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/patcher.cr#L5"},"def":{"name":"new","args":[{"name":"residues","doc":null,"default_value":"","external_name":"residues","restriction":"ResidueCollection"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(residues)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"match_and_patch:Nil-instance-method","name":"match_and_patch","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/topology/patcher.cr","line_number":8,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/patcher.cr#L8"},"def":{"name":"match_and_patch","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"prev_res = nil\n@residues.each_residue do |residue|\n  if res_t = residue.type\n    patch(residue, res_t)\n    if prev_res && (bond_t = res_t.link_bond)\n      patch(prev_res, residue, bond_t)\n    end\n  else\n    @unmatched_atoms.concat(residue.each_atom)\n  end\n  prev_res = residue\nend\n"}},{"html_id":"patch(lhs:Residue,rhs:Residue,bond_t:BondType):Nil-instance-method","name":"patch","doc":null,"summary":null,"abstract":false,"args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"Residue"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Residue"},{"name":"bond_t","doc":null,"default_value":"","external_name":"bond_t","restriction":"BondType"}],"args_string":"(lhs : Residue, rhs : Residue, bond_t : BondType) : Nil","args_html":"(lhs : <a href=\"../../Chem/Residue.html\">Residue</a>, rhs : <a href=\"../../Chem/Residue.html\">Residue</a>, bond_t : <a href=\"../../Chem/Topology/BondType.html\">BondType</a>) : Nil","location":{"filename":"src/chem/topology/patcher.cr","line_number":27,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/patcher.cr#L27"},"def":{"name":"patch","args":[{"name":"lhs","doc":null,"default_value":"","external_name":"lhs","restriction":"Residue"},{"name":"rhs","doc":null,"default_value":"","external_name":"rhs","restriction":"Residue"},{"name":"bond_t","doc":null,"default_value":"","external_name":"bond_t","restriction":"BondType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if ((i = lhs[bond_t[0]]?) && (j = rhs[bond_t[1]]?)) && (!(i.bonded?(j)))\n  if i.within_covalent_distance?(j)\n    i.bonds.add(j, bond_t.order)\n  end\nend"}},{"html_id":"patch(atom:Atom,atom_t:AtomType):Nil-instance-method","name":"patch","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"},{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"AtomType"}],"args_string":"(atom : Atom, atom_t : AtomType) : Nil","args_html":"(atom : <a href=\"../../Chem/Atom.html\">Atom</a>, atom_t : <a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>) : Nil","location":{"filename":"src/chem/topology/patcher.cr","line_number":23,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/patcher.cr#L23"},"def":{"name":"patch","args":[{"name":"atom","doc":null,"default_value":"","external_name":"atom","restriction":"Atom"},{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"AtomType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"atom.formal_charge = atom_t.formal_charge"}},{"html_id":"patch(residue:Residue,res_t:ResidueType):Nil-instance-method","name":"patch","doc":null,"summary":null,"abstract":false,"args":[{"name":"residue","doc":null,"default_value":"","external_name":"residue","restriction":"Residue"},{"name":"res_t","doc":null,"default_value":"","external_name":"res_t","restriction":"ResidueType"}],"args_string":"(residue : Residue, res_t : ResidueType) : Nil","args_html":"(residue : <a href=\"../../Chem/Residue.html\">Residue</a>, res_t : <a href=\"../../Chem/Topology/ResidueType.html\">ResidueType</a>) : Nil","location":{"filename":"src/chem/topology/patcher.cr","line_number":33,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/patcher.cr#L33"},"def":{"name":"patch","args":[{"name":"residue","doc":null,"default_value":"","external_name":"residue","restriction":"Residue"},{"name":"res_t","doc":null,"default_value":"","external_name":"res_t","restriction":"ResidueType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"residue.each_atom do |atom|\n  if atom_t = res_t[atom.name]?\n    patch(atom, atom_t)\n  else\n    @unmatched_atoms << atom\n  end\nend\nres_t.bonds.each do |bond_t|\n  patch(residue, residue, bond_t)\nend\n"}},{"html_id":"unmatched_atoms:AtomView-instance-method","name":"unmatched_atoms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : AtomView","args_html":" : <a href=\"../../Chem/AtomView.html\">AtomView</a>","location":{"filename":"src/chem/topology/patcher.cr","line_number":45,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/patcher.cr#L45"},"def":{"name":"unmatched_atoms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AtomView","visibility":"Public","body":"AtomView.new(@unmatched_atoms)"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Topology/Perception","path":"Chem/Topology/Perception.html","kind":"class","full_name":"Chem::Topology::Perception","name":"Perception","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/topology/perception.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/perception.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"MAX_CHAINS","name":"MAX_CHAINS","value":"62","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Topology","kind":"module","full_name":"Chem::Topology","name":"Topology"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(structure:Structure)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure)","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>)","location":{"filename":"src/chem/topology/perception.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/perception.cr#L6"},"def":{"name":"new","args":[{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(structure)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"guess_residues:Nil-instance-method","name":"guess_residues","doc":"Guesses residues from existing bonds.\n\nAtoms are split in fragments, where each fragment is mapped to a list of residues.\nThen, fragments are divided into polymers (e.g., peptide) and non-polymer\nfragments (e.g., water), where residues assigned to the latter are grouped\ntogether by their kind (i.e., protein, ion, solvent, etc.). Finally, polymer\nfragments and residues grouped by kind are assigned to their own unique chain as\nlong as there are less residue groups than the chain limit (62), otherwise all\nresidues are assigned to the same chain.","summary":"<p>Guesses residues from existing bonds.</p>","abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/topology/perception.cr","line_number":18,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/perception.cr#L18"},"def":{"name":"guess_residues","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"matches_per_fragment = detect_residues(@structure.atoms)\nbuilder = Structure::Builder.new(@structure.clear)\nmatches_per_fragment.each do |matches|\n  builder.chain do\n    matches.each do |m|\n      residue = builder.residue(m.resname)\n      residue.kind = m.reskind\n      m.each_atom do |atom, atom_name|\n        atom.name = atom_name\n        atom.residue = residue\n      end\n    end\n  end\nend\n@structure.renumber_by_connectivity(split_chains: false)\nassign_residue_types\n"}},{"html_id":"guess_topology:Nil-instance-method","name":"guess_topology","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/topology/perception.cr","line_number":37,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/perception.cr#L37"},"def":{"name":"guess_topology","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if @structure.n_atoms > 0\nelse\n  return\nend\nif has_topology?\n  patcher = Patcher.new(@structure)\n  patcher.match_and_patch\n  build_connectivity(patcher.unmatched_atoms)\n  assign_bond_orders(patcher.unmatched_atoms)\n  bonded_atoms = patcher.unmatched_atoms.flat_map(&.each_bonded_atom)\n  assign_formal_charges(patcher.unmatched_atoms | bonded_atoms)\nelse\n  build_connectivity(@structure.atoms)\n  assign_bond_orders(@structure.atoms)\n  assign_formal_charges(@structure.atoms)\nend\nassign_residue_types\n"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Topology/ResidueType","path":"Chem/Topology/ResidueType.html","kind":"class","full_name":"Chem::Topology::ResidueType","name":"ResidueType","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/topology/types.cr","line_number":104,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L104"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Topology","kind":"module","full_name":"Chem::Topology","name":"Topology"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"build(kind:Residue::Kind=:other,&):self-class-method","name":"build","doc":null,"summary":null,"abstract":false,"args":[{"name":"kind","doc":null,"default_value":":other","external_name":"kind","restriction":"Residue::Kind"}],"args_string":"(kind : Residue::Kind = :other, &) : self","args_html":"(kind : <a href=\"../../Chem/Residue/Kind.html\">Residue::Kind</a> = <span class=\"n\">:other</span>, &) : <span class=\"k\">self</span>","location":{"filename":"src/chem/topology/types.cr","line_number":127,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L127"},"def":{"name":"build","args":[{"name":"kind","doc":null,"default_value":":other","external_name":"kind","restriction":"Residue::Kind"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"self","visibility":"Public","body":"builder = Templates::Builder.new(kind)\nwith builder yield builder\nbuilder.build\n"}},{"html_id":"new(description:String,name:String,code:Char?,kind:Residue::Kind,atom_types:Array(AtomType),bonds:Array(BondType),link_bond:BondType?=nil,root:AtomType?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"String"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"Char | ::Nil"},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Residue::Kind"},{"name":"atom_types","doc":null,"default_value":"","external_name":"atom_types","restriction":"Array(AtomType)"},{"name":"bonds","doc":null,"default_value":"","external_name":"bonds","restriction":"Array(BondType)"},{"name":"link_bond","doc":null,"default_value":"nil","external_name":"link_bond","restriction":"BondType | ::Nil"},{"name":"root","doc":null,"default_value":"nil","external_name":"root","restriction":"AtomType | ::Nil"}],"args_string":"(description : String, name : String, code : Char?, kind : Residue::Kind, atom_types : Array(AtomType), bonds : Array(BondType), link_bond : BondType? = nil, root : AtomType? = nil)","args_html":"(description : String, name : String, code : <a href=\"../../Char.html\">Char</a>?, kind : <a href=\"../../Chem/Residue/Kind.html\">Residue::Kind</a>, atom_types : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>), bonds : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Topology/BondType.html\">BondType</a>), link_bond : <a href=\"../../Chem/Topology/BondType.html\">BondType</a>? = <span class=\"n\">nil</span>, root : <a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>? = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/topology/types.cr","line_number":115,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L115"},"def":{"name":"new","args":[{"name":"description","doc":null,"default_value":"","external_name":"description","restriction":"String"},{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"},{"name":"code","doc":null,"default_value":"","external_name":"code","restriction":"Char | ::Nil"},{"name":"kind","doc":null,"default_value":"","external_name":"kind","restriction":"Residue::Kind"},{"name":"atom_types","doc":null,"default_value":"","external_name":"atom_types","restriction":"Array(AtomType)"},{"name":"bonds","doc":null,"default_value":"","external_name":"bonds","restriction":"Array(BondType)"},{"name":"link_bond","doc":null,"default_value":"nil","external_name":"link_bond","restriction":"BondType | ::Nil"},{"name":"root","doc":null,"default_value":"nil","external_name":"root","restriction":"AtomType | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(description, name, code, kind, atom_types, bonds, link_bond, root)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](atom_name:String):AtomType-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom_name","doc":null,"default_value":"","external_name":"atom_name","restriction":"String"}],"args_string":"(atom_name : String) : AtomType","args_html":"(atom_name : String) : <a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>","location":{"filename":"src/chem/topology/types.cr","line_number":133,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L133"},"def":{"name":"[]","args":[{"name":"atom_name","doc":null,"default_value":"","external_name":"atom_name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AtomType","visibility":"Public","body":"self[atom_name]? || (raise(Error.new(\"Unknown atom type #{atom_name}\")))"}},{"html_id":"[]?(atom_name:String):AtomType?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom_name","doc":null,"default_value":"","external_name":"atom_name","restriction":"String"}],"args_string":"(atom_name : String) : AtomType?","args_html":"(atom_name : String) : <a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>?","location":{"filename":"src/chem/topology/types.cr","line_number":137,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L137"},"def":{"name":"[]?","args":[{"name":"atom_name","doc":null,"default_value":"","external_name":"atom_name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AtomType | ::Nil","visibility":"Public","body":"@atom_types.find do |__arg1|\n  __arg1.name == atom_name\nend"}},{"html_id":"atom_count(*,include_hydrogens:Bool=true)-instance-method","name":"atom_count","doc":null,"summary":null,"abstract":false,"args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"include_hydrogens","doc":null,"default_value":"true","external_name":"include_hydrogens","restriction":"Bool"}],"args_string":"(*, include_hydrogens : Bool = true)","args_html":"(*, include_hydrogens : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/chem/topology/types.cr","line_number":141,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L141"},"def":{"name":"atom_count","args":[{"name":"","doc":null,"default_value":"","external_name":"","restriction":""},{"name":"include_hydrogens","doc":null,"default_value":"true","external_name":"include_hydrogens","restriction":"Bool"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"size = @atom_types.size\nif include_hydrogens\nelse\n  size = size - @atom_types.count do |__arg2|\n    __arg2.element.hydrogen?\n  end\nend\nsize\n"}},{"html_id":"atom_names:Array(String)-instance-method","name":"atom_names","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)","args_html":" : <a href=\"../../Array.html\">Array</a>(String)","location":{"filename":"src/chem/topology/types.cr","line_number":147,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L147"},"def":{"name":"atom_names","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"@atom_types.map(&.name)"}},{"html_id":"atom_types:Array(AtomType)-instance-method","name":"atom_types","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(AtomType)","args_html":" : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>)","location":{"filename":"src/chem/topology/types.cr","line_number":151,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L151"},"def":{"name":"atom_types","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(AtomType)","visibility":"Public","body":"@atom_types.dup"}},{"html_id":"bonded_atoms(atom_t:AtomType):Array(AtomType)-instance-method","name":"bonded_atoms","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"AtomType"}],"args_string":"(atom_t : AtomType) : Array(AtomType)","args_html":"(atom_t : <a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>) : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>)","location":{"filename":"src/chem/topology/types.cr","line_number":159,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L159"},"def":{"name":"bonded_atoms","args":[{"name":"atom_t","doc":null,"default_value":"","external_name":"atom_t","restriction":"AtomType"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(AtomType)","visibility":"Public","body":"@bonds.select(&.includes?(atom_t)).map(&.other(atom_t))"}},{"html_id":"bonds:Array(BondType)-instance-method","name":"bonds","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(BondType)","args_html":" : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Topology/BondType.html\">BondType</a>)","location":{"filename":"src/chem/topology/types.cr","line_number":163,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L163"},"def":{"name":"bonds","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(BondType)","visibility":"Public","body":"@bonds.dup"}},{"html_id":"code:Char?-instance-method","name":"code","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Char?","args_html":" : <a href=\"../../Char.html\">Char</a>?","location":{"filename":"src/chem/topology/types.cr","line_number":113,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L113"},"def":{"name":"code","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Char | ::Nil","visibility":"Public","body":"@code"}},{"html_id":"description:String-instance-method","name":"description","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/topology/types.cr","line_number":111,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L111"},"def":{"name":"description","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@description"}},{"html_id":"each_atom_type(&block:AtomType->)-instance-method","name":"each_atom_type","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&block : AtomType -> )","args_html":"(&block : <a href=\"../../Chem/Topology/AtomType.html\">AtomType</a> -> )","location":{"filename":"src/chem/topology/types.cr","line_number":155,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L155"},"def":{"name":"each_atom_type","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(AtomType ->)"},"return_type":"","visibility":"Public","body":"@atom_types.each(&block)"}},{"html_id":"formal_charge:Int32-instance-method","name":"formal_charge","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/topology/types.cr","line_number":167,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L167"},"def":{"name":"formal_charge","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@atom_types.each.map(&.formal_charge).sum"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Appends a String representation of this object\nwhich includes its class name, its object address\nand the values of all instance variables.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).inspect # => #<Person:0x10fd31f20 @name=\"John\", @age=32>\n```","summary":"<p>Appends a String representation of this object which includes its class name, its object address and the values of all instance variables.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/topology/types.cr","line_number":171,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L171"},"def":{"name":"inspect","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"(io << \"<ResidueType \") << @name\nif @code\n  ((io << '(') << @code) << ')'\nend\nif @kind.other?\nelse\n  (io << \", \") << @kind.to_s.downcase\nend\nio << '>'\n"}},{"html_id":"kind:Residue::Kind-instance-method","name":"kind","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Residue::Kind","args_html":" : <a href=\"../../Chem/Residue/Kind.html\">Residue::Kind</a>","location":{"filename":"src/chem/topology/types.cr","line_number":109,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L109"},"def":{"name":"kind","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Residue::Kind","visibility":"Public","body":"@kind"}},{"html_id":"link_bond:BondType?-instance-method","name":"link_bond","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : BondType?","args_html":" : <a href=\"../../Chem/Topology/BondType.html\">BondType</a>?","location":{"filename":"src/chem/topology/types.cr","line_number":110,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L110"},"def":{"name":"link_bond","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"BondType | ::Nil","visibility":"Public","body":"@link_bond"}},{"html_id":"monomer?:Bool-instance-method","name":"monomer?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","args_html":" : Bool","location":{"filename":"src/chem/topology/types.cr","line_number":178,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L178"},"def":{"name":"monomer?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"!link_bond.nil?"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Int32","args_html":" : Int32","location":{"filename":"src/chem/topology/types.cr","line_number":182,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L182"},"def":{"name":"n_atoms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int32","visibility":"Public","body":"@atom_types.size"}},{"html_id":"name:String-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : String","args_html":" : String","location":{"filename":"src/chem/topology/types.cr","line_number":108,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L108"},"def":{"name":"name","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"root:AtomType?-instance-method","name":"root","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : AtomType?","args_html":" : <a href=\"../../Chem/Topology/AtomType.html\">AtomType</a>?","location":{"filename":"src/chem/topology/types.cr","line_number":112,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/types.cr#L112"},"def":{"name":"root","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AtomType | ::Nil","visibility":"Public","body":"@root"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Topology/Templates","path":"Chem/Topology/Templates.html","kind":"module","full_name":"Chem::Topology::Templates","name":"Templates","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/topology/templates.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates.cr#L1"},{"filename":"src/chem/topology/templates/amino.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/amino.cr#L1"},{"filename":"src/chem/topology/templates/builder.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L1"},{"filename":"src/chem/topology/templates/detector.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/detector.cr#L1"},{"filename":"src/chem/topology/templates/solvent.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/solvent.cr#L1"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[{"html_id":"chem.cr/Chem/Topology/Templates","kind":"module","full_name":"Chem::Topology::Templates","name":"Templates"}],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Topology","kind":"module","full_name":"Chem::Topology","name":"Topology"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"[](name:String):ResidueType-instance-method","name":"[]","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String) : ResidueType","args_html":"(name : String) : <a href=\"../../Chem/Topology/ResidueType.html\">ResidueType</a>","location":{"filename":"src/chem/topology/templates.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates.cr#L22"},"def":{"name":"[]","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ResidueType","visibility":"Public","body":"TEMPLATES[name]? || (raise(Error.new(\"Unknown residue template #{name}\")))"}},{"html_id":"[]?(name:String):ResidueType?-instance-method","name":"[]?","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String) : ResidueType?","args_html":"(name : String) : <a href=\"../../Chem/Topology/ResidueType.html\">ResidueType</a>?","location":{"filename":"src/chem/topology/templates.cr","line_number":26,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates.cr#L26"},"def":{"name":"[]?","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ResidueType | ::Nil","visibility":"Public","body":"TEMPLATES[name]?"}},{"html_id":"all:Array(ResidueType)-instance-method","name":"all","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(ResidueType)","args_html":" : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Topology/ResidueType.html\">ResidueType</a>)","location":{"filename":"src/chem/topology/templates.cr","line_number":30,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates.cr#L30"},"def":{"name":"all","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(ResidueType)","visibility":"Public","body":"TEMPLATES.values"}},{"html_id":"aminoacid(&):ResidueType-instance-method","name":"aminoacid","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&) : ResidueType","args_html":"(&) : <a href=\"../../Chem/Topology/ResidueType.html\">ResidueType</a>","location":{"filename":"src/chem/topology/templates.cr","line_number":34,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates.cr#L34"},"def":{"name":"aminoacid","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"ResidueType","visibility":"Public","body":"ResidueType.build(Residue::Kind::Protein) do |builder|\n  with builder yield builder\n  residue = builder.build\n  builder.names.each do |name|\n    if TEMPLATES.has_key?(name)\n      raise(Error.new(\"Duplicate residue template #{name}\"))\n    end\n    TEMPLATES[name] = residue\n  end\nend"}},{"html_id":"residue(&):ResidueType-instance-method","name":"residue","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&) : ResidueType","args_html":"(&) : <a href=\"../../Chem/Topology/ResidueType.html\">ResidueType</a>","location":{"filename":"src/chem/topology/templates.cr","line_number":35,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates.cr#L35"},"def":{"name":"residue","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"ResidueType","visibility":"Public","body":"ResidueType.build(Residue::Kind::Other) do |builder|\n  with builder yield builder\n  residue = builder.build\n  builder.names.each do |name|\n    if TEMPLATES.has_key?(name)\n      raise(Error.new(\"Duplicate residue template #{name}\"))\n    end\n    TEMPLATES[name] = residue\n  end\nend"}},{"html_id":"solvent(&):ResidueType-instance-method","name":"solvent","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&) : ResidueType","args_html":"(&) : <a href=\"../../Chem/Topology/ResidueType.html\">ResidueType</a>","location":{"filename":"src/chem/topology/templates.cr","line_number":36,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates.cr#L36"},"def":{"name":"solvent","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"ResidueType","visibility":"Public","body":"ResidueType.build(Residue::Kind::Solvent) do |builder|\n  with builder yield builder\n  residue = builder.build\n  builder.names.each do |name|\n    if TEMPLATES.has_key?(name)\n      raise(Error.new(\"Duplicate residue template #{name}\"))\n    end\n    TEMPLATES[name] = residue\n  end\nend"}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/Topology/Templates/Builder","path":"Chem/Topology/Templates/Builder.html","kind":"class","full_name":"Chem::Topology::Templates::Builder","name":"Builder","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/topology/templates/builder.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"ATOM_NAME_PATTERN","name":"ATOM_NAME_PATTERN","value":"\"[A-Z]{1,3}[0-9]{0,2}\"","doc":null,"summary":null},{"id":"ATOM_SEP_REGEX","name":"ATOM_SEP_REGEX","value":"/(?<=[A-Z0-9\\)\\]])#{BOND_ORDER_PATTERN}(?=[A-Z0-9])/","doc":null,"summary":null},{"id":"ATOM_SPEC_REGEX","name":"ATOM_SPEC_REGEX","value":"/(#{ATOM_NAME_PATTERN})(\\[([A-Z][a-z]?)\\])?([\\+-]\\d?)?(\\((\\d)\\))?/","doc":null,"summary":null},{"id":"BOND_ORDER_PATTERN","name":"BOND_ORDER_PATTERN","value":"\"[-=#]\"","doc":null,"summary":null},{"id":"BOND_REGEX","name":"BOND_REGEX","value":"/(#{ATOM_NAME_PATTERN})(#{BOND_ORDER_PATTERN})(#{ATOM_NAME_PATTERN})/","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Topology/Templates","kind":"module","full_name":"Chem::Topology::Templates","name":"Templates"},"doc":null,"summary":null,"class_methods":[{"html_id":"build(kind:Residue::Kind=:other,&):ResidueType-class-method","name":"build","doc":null,"summary":null,"abstract":false,"args":[{"name":"kind","doc":null,"default_value":":other","external_name":"kind","restriction":"Residue::Kind"}],"args_string":"(kind : Residue::Kind = :other, &) : ResidueType","args_html":"(kind : <a href=\"../../../Chem/Residue/Kind.html\">Residue::Kind</a> = <span class=\"n\">:other</span>, &) : <a href=\"../../../Chem/Topology/ResidueType.html\">ResidueType</a>","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":23,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L23"},"def":{"name":"build","args":[{"name":"kind","doc":null,"default_value":":other","external_name":"kind","restriction":"Residue::Kind"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"ResidueType","visibility":"Public","body":"builder = Builder.new(kind)\nwith builder yield\nbuilder.build\n"}}],"constructors":[{"html_id":"new(kind:Residue::Kind=:other)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"kind","doc":null,"default_value":":other","external_name":"kind","restriction":"Residue::Kind"}],"args_string":"(kind : Residue::Kind = :other)","args_html":"(kind : <a href=\"../../../Chem/Residue/Kind.html\">Residue::Kind</a> = <span class=\"n\">:other</span>)","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":19,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L19"},"def":{"name":"new","args":[{"name":"kind","doc":null,"default_value":":other","external_name":"kind","restriction":"Residue::Kind"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(kind)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"branch(spec:String)-instance-method","name":"branch","doc":null,"summary":null,"abstract":false,"args":[{"name":"spec","doc":null,"default_value":"","external_name":"spec","restriction":"String"}],"args_string":"(spec : String)","args_html":"(spec : String)","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":29,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L29"},"def":{"name":"branch","args":[{"name":"spec","doc":null,"default_value":"","external_name":"spec","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"check_root!(\"branch\", spec)\nparse_spec(spec)\n"}},{"html_id":"build:ResidueType-instance-method","name":"build","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : ResidueType","args_html":" : <a href=\"../../../Chem/Topology/ResidueType.html\">ResidueType</a>","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":34,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L34"},"def":{"name":"build","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"ResidueType","visibility":"Public","body":"if (description = @description)\nelse\n  fatal(\"Missing residue description\")\nend\nif @names.empty?\n  fatal(\"Missing residue name\")\nend\nif @atom_types.empty?\n  fatal(\"Missing residue atom names\")\nend\nadd_missing_hydrogens\ncheck_valencies!\nResidueType.new(description, @names.first, @code, @kind, @atom_types, @bonds, @link_bond, @root)\n"}},{"html_id":"code(char:Char):Nil-instance-method","name":"code","doc":null,"summary":null,"abstract":false,"args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"args_string":"(char : Char) : Nil","args_html":"(char : <a href=\"../../../Char.html\">Char</a>) : Nil","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":98,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L98"},"def":{"name":"code","args":[{"name":"char","doc":null,"default_value":"","external_name":"char","restriction":"Char"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@code = char"}},{"html_id":"cycle(spec:String)-instance-method","name":"cycle","doc":null,"summary":null,"abstract":false,"args":[{"name":"spec","doc":null,"default_value":"","external_name":"spec","restriction":"String"}],"args_string":"(spec : String)","args_html":"(spec : String)","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":58,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L58"},"def":{"name":"cycle","args":[{"name":"spec","doc":null,"default_value":"","external_name":"spec","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"check_root!(\"cycle\", spec)\nif (/#{BOND_ORDER_PATTERN}$/) =~ spec\nelse\n  spec = spec + '-'\nend\nparse_spec(\"#{spec}#{extract_root(spec)}\")\n"}},{"html_id":"description(name:String)-instance-method","name":"description","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":73,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L73"},"def":{"name":"description","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@description = name"}},{"html_id":"link_adjacent_by(spec:String)-instance-method","name":"link_adjacent_by","doc":null,"summary":null,"abstract":false,"args":[{"name":"spec","doc":null,"default_value":"","external_name":"spec","restriction":"String"}],"args_string":"(spec : String)","args_html":"(spec : String)","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":64,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L64"},"def":{"name":"link_adjacent_by","args":[{"name":"spec","doc":null,"default_value":"","external_name":"spec","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@link_bond = parse_bond(spec)"}},{"html_id":"main(spec:String)-instance-method","name":"main","doc":null,"summary":null,"abstract":false,"args":[{"name":"spec","doc":null,"default_value":"","external_name":"spec","restriction":"String"}],"args_string":"(spec : String)","args_html":"(spec : String)","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":68,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L68"},"def":{"name":"main","args":[{"name":"spec","doc":null,"default_value":"","external_name":"spec","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if @kind.protein?\n  spec = \"CA-\" + spec\nend\nparse_spec(spec)\n"}},{"html_id":"name(name:String)-instance-method","name":"name","doc":null,"summary":null,"abstract":false,"args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":46,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L46"},"def":{"name":"name","args":[{"name":"name","doc":null,"default_value":"","external_name":"name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@names << name"}},{"html_id":"names:Array(String)-instance-method","name":"names","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(String)","args_html":" : <a href=\"../../../Array.html\">Array</a>(String)","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":50,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L50"},"def":{"name":"names","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(String)","visibility":"Public","body":"@names.dup"}},{"html_id":"names(*names:String)-instance-method","name":"names","doc":null,"summary":null,"abstract":false,"args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":"String"}],"args_string":"(*names : String)","args_html":"(*names : String)","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":54,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L54"},"def":{"name":"names","args":[{"name":"names","doc":null,"default_value":"","external_name":"names","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@names.concat(names)"}},{"html_id":"remove_atom(atom_name:String)-instance-method","name":"remove_atom","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom_name","doc":null,"default_value":"","external_name":"atom_name","restriction":"String"}],"args_string":"(atom_name : String)","args_html":"(atom_name : String)","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":77,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L77"},"def":{"name":"remove_atom","args":[{"name":"atom_name","doc":null,"default_value":"","external_name":"atom_name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"atom_t = atom_type!(atom_name)\n@bonds.reject!(&.includes?(atom_t))\n@atom_types.delete(atom_t)\n"}},{"html_id":"root(atom_name:String)-instance-method","name":"root","doc":null,"summary":null,"abstract":false,"args":[{"name":"atom_name","doc":null,"default_value":"","external_name":"atom_name","restriction":"String"}],"args_string":"(atom_name : String)","args_html":"(atom_name : String)","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":83,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L83"},"def":{"name":"root","args":[{"name":"atom_name","doc":null,"default_value":"","external_name":"atom_name","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@root = atom_type!(atom_name)"}},{"html_id":"sidechain(&)-instance-method","name":"sidechain","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(&)","args_html":"(&)","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":87,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L87"},"def":{"name":"sidechain","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"if @kind.protein?\nelse\n  fatal(\"Sidechain is only valid for protein residues\")\nend\nwith self yield\n"}},{"html_id":"sidechain(spec:String)-instance-method","name":"sidechain","doc":null,"summary":null,"abstract":false,"args":[{"name":"spec","doc":null,"default_value":"","external_name":"spec","restriction":"String"}],"args_string":"(spec : String)","args_html":"(spec : String)","location":{"filename":"src/chem/topology/templates/builder.cr","line_number":92,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L92"},"def":{"name":"sidechain","args":[{"name":"spec","doc":null,"default_value":"","external_name":"spec","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"sidechain do\n  main(spec)\nend"}}],"macros":[],"types":[{"html_id":"chem.cr/Chem/Topology/Templates/Builder/ParseException","path":"Chem/Topology/Templates/Builder/ParseException.html","kind":"class","full_name":"Chem::Topology::Templates::Builder::ParseException","name":"ParseException","abstract":false,"superclass":{"html_id":"chem.cr/Chem/Topology/Templates/Error","kind":"class","full_name":"Chem::Topology::Templates::Error","name":"Error"},"ancestors":[{"html_id":"chem.cr/Chem/Topology/Templates/Error","kind":"class","full_name":"Chem::Topology::Templates::Error","name":"Error"},{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/topology/templates/builder.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/builder.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Topology/Templates/Builder","kind":"class","full_name":"Chem::Topology::Templates::Builder","name":"Builder"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/Topology/Templates/Detector","path":"Chem/Topology/Templates/Detector.html","kind":"class","full_name":"Chem::Topology::Templates::Detector","name":"Detector","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/topology/templates/detector.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/detector.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"CHARGED_CTER_T","name":"CHARGED_CTER_T","value":"ResidueType.build do\n  description(\"Charged C-ter\")\n  name(\"CTER\")\n  code('c')\n  main(\"CA-C=O\")\n  branch(\"C-OXT-\")\n  root(\"C\")\nend","doc":null,"summary":null},{"id":"CHARGED_NTER_T","name":"CHARGED_NTER_T","value":"ResidueType.build do\n  description(\"Charged N-ter\")\n  name(\"NTER\")\n  code('n')\n  main(\"CA-N+\")\n  root(\"N\")\nend","doc":null,"summary":null},{"id":"CTER_T","name":"CTER_T","value":"ResidueType.build do\n  description(\"C-ter\")\n  name(\"CTER\")\n  code('c')\n  main(\"CA-C=O\")\n  branch(\"C-OXT\")\n  root(\"C\")\nend","doc":null,"summary":null},{"id":"NTER_T","name":"NTER_T","value":"ResidueType.build do\n  description(\"N-ter\")\n  name(\"NTER\")\n  code('n')\n  main(\"CA-N\")\n  root(\"N\")\nend","doc":null,"summary":null}],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Topology/Templates","kind":"module","full_name":"Chem::Topology::Templates","name":"Templates"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(atoms:AtomCollection,templates:Array(ResidueType)?=nil)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"templates","doc":null,"default_value":"nil","external_name":"templates","restriction":"Array(ResidueType) | ::Nil"}],"args_string":"(atoms : AtomCollection, templates : Array(ResidueType)? = nil)","args_html":"(atoms : <a href=\"../../../Chem/AtomCollection.html\">AtomCollection</a>, templates : <a href=\"../../../Array.html\">Array</a>(<a href=\"../../../Chem/Topology/ResidueType.html\">ResidueType</a>)? = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/topology/templates/detector.cr","line_number":37,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/detector.cr#L37"},"def":{"name":"new","args":[{"name":"atoms","doc":null,"default_value":"","external_name":"atoms","restriction":"AtomCollection"},{"name":"templates","doc":null,"default_value":"nil","external_name":"templates","restriction":"Array(ResidueType) | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(atoms, templates)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"each_match(&:MatchData->):Nil-instance-method","name":"each_match","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : MatchData -> ) : Nil","args_html":"(& : <a href=\"../../../Chem/Topology/MatchData.html\">MatchData</a> -> ) : Nil","location":{"filename":"src/chem/topology/templates/detector.cr","line_number":46,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/detector.cr#L46"},"def":{"name":"each_match","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(MatchData ->)"},"return_type":"Nil","visibility":"Public","body":"atom_map = {} of Atom => String\n@atoms.each do |atom|\n  if mapped?(atom, atom_map)\n    next\n  end\n  @templates.each do |res_t|\n    if @atoms.size < res_t.n_atoms || res_t.root.nil?\n      next\n    end\n    if match?(res_t, atom, atom_map)\n      yield MatchData.new(res_t, atom_map.invert)\n      @atoms.subtract(atom_map.each_key)\n    end\n    atom_map.clear\n  end\nend\n"}},{"html_id":"matches:Array(MatchData)-instance-method","name":"matches","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(MatchData)","args_html":" : <a href=\"../../../Array.html\">Array</a>(<a href=\"../../../Chem/Topology/MatchData.html\">MatchData</a>)","location":{"filename":"src/chem/topology/templates/detector.cr","line_number":61,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/detector.cr#L61"},"def":{"name":"matches","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(MatchData)","visibility":"Public","body":"matches = [] of MatchData\neach_match do |match|\n  matches << match\nend\nmatches\n"}},{"html_id":"unmatched_atoms:AtomView-instance-method","name":"unmatched_atoms","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : AtomView","args_html":" : <a href=\"../../../Chem/AtomView.html\">AtomView</a>","location":{"filename":"src/chem/topology/templates/detector.cr","line_number":67,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates/detector.cr#L67"},"def":{"name":"unmatched_atoms","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"AtomView","visibility":"Public","body":"AtomView.new(@atoms)"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/Topology/Templates/Error","path":"Chem/Topology/Templates/Error.html","kind":"class","full_name":"Chem::Topology::Templates::Error","name":"Error","abstract":false,"superclass":{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/topology/templates.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/topology/templates.cr#L4"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[{"html_id":"chem.cr/Chem/Topology/Templates/Builder/ParseException","kind":"class","full_name":"Chem::Topology::Templates::Builder::ParseException","name":"ParseException"}],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/Topology/Templates","kind":"module","full_name":"Chem::Topology::Templates","name":"Templates"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"chem.cr/Chem/VASP","path":"Chem/VASP.html","kind":"module","full_name":"Chem::VASP","name":"VASP","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/vasp/utils.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/utils.cr#L1"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/VASP/Chgcar","path":"Chem/VASP/Chgcar.html","kind":"module","full_name":"Chem::VASP::Chgcar","name":"Chgcar","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/vasp/chgcar.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/chgcar.cr#L4"},{"filename":"src/chem/register_format.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L172"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/VASP","kind":"module","full_name":"Chem::VASP","name":"VASP"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/VASP/Chgcar/Reader","path":"Chem/VASP/Chgcar/Reader.html","kind":"class","full_name":"Chem::VASP::Chgcar::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/VASP/GridReader","kind":"module","full_name":"Chem::VASP::GridReader","name":"GridReader"},{"html_id":"chem.cr/Chem/FormatReader/Attached","kind":"module","full_name":"Chem::FormatReader::Attached","name":"Attached"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vasp/chgcar.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/chgcar.cr#L5"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/Attached","kind":"module","full_name":"Chem::FormatReader::Attached","name":"Attached"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/VASP/GridReader","kind":"module","full_name":"Chem::VASP::GridReader","name":"GridReader"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/VASP/Chgcar","kind":"module","full_name":"Chem::VASP::Chgcar","name":"Chgcar"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/vasp/chgcar.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/chgcar.cr#L11"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/VASP/Chgcar/Writer","path":"Chem/VASP/Chgcar/Writer.html","kind":"class","full_name":"Chem::VASP::Chgcar::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/VASP/GridWriter","kind":"module","full_name":"Chem::VASP::GridWriter","name":"GridWriter"},{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vasp/chgcar.cr","line_number":22,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/chgcar.cr#L22"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/Chem/VASP/GridWriter","kind":"module","full_name":"Chem::VASP::GridWriter","name":"GridWriter"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/VASP/Chgcar","kind":"module","full_name":"Chem::VASP::Chgcar","name":"Chgcar"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,structure:Structure,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, structure : Structure, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, structure : <a href=\"../../../Chem/Structure.html\">Structure</a>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, structure, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,structure:Structure,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(path : Path | String, structure : Structure, & : self -> )","args_html":"(path : Path | String, structure : <a href=\"../../../Chem/Structure.html\">Structure</a>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path, structure)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(path:Path|String,structure:Structure):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(path : Path | String, structure : Structure) : self","args_html":"(path : Path | String, structure : <a href=\"../../../Chem/Structure.html\">Structure</a>) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), structure, sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/VASP/GridReader","path":"Chem/VASP/GridReader.html","kind":"module","full_name":"Chem::VASP::GridReader","name":"GridReader","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/vasp/utils.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/utils.cr#L2"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"chem.cr/Chem/VASP/Chgcar/Reader","kind":"class","full_name":"Chem::VASP::Chgcar::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Locpot/Reader","kind":"class","full_name":"Chem::VASP::Locpot::Reader","name":"Reader"}],"namespace":{"html_id":"chem.cr/Chem/VASP","kind":"module","full_name":"Chem::VASP","name":"VASP"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[{"html_id":"read_attached:Structure-instance-method","name":"read_attached","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Structure","args_html":" : <a href=\"../../Chem/Structure.html\">Structure</a>","location":{"filename":"src/chem/formats/vasp/utils.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/utils.cr#L3"},"def":{"name":"read_attached","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Structure","visibility":"Public","body":"read_header\n@attached || (raise(\"BUG: @attached is nil after reading header\"))\n"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/VASP/GridWriter","path":"Chem/VASP/GridWriter.html","kind":"module","full_name":"Chem::VASP::GridWriter","name":"GridWriter","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/vasp/utils.cr","line_number":42,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/utils.cr#L42"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"chem.cr/Chem/VASP/Chgcar/Writer","kind":"class","full_name":"Chem::VASP::Chgcar::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/VASP/Locpot/Writer","kind":"class","full_name":"Chem::VASP::Locpot::Writer","name":"Writer"}],"namespace":{"html_id":"chem.cr/Chem/VASP","kind":"module","full_name":"Chem::VASP","name":"VASP"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"new(io:IO,structure:Structure,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, structure : Structure, sync_close : Bool = false)","args_html":"(io : IO, structure : <a href=\"../../Chem/Structure.html\">Structure</a>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/vasp/utils.cr","line_number":45,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/utils.cr#L45"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, structure, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/VASP/Locpot","path":"Chem/VASP/Locpot.html","kind":"module","full_name":"Chem::VASP::Locpot","name":"Locpot","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/vasp/locpot.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/locpot.cr#L4"},{"filename":"src/chem/register_format.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L172"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/VASP","kind":"module","full_name":"Chem::VASP","name":"VASP"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/VASP/Locpot/Reader","path":"Chem/VASP/Locpot/Reader.html","kind":"class","full_name":"Chem::VASP::Locpot::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/VASP/GridReader","kind":"module","full_name":"Chem::VASP::GridReader","name":"GridReader"},{"html_id":"chem.cr/Chem/FormatReader/Attached","kind":"module","full_name":"Chem::FormatReader::Attached","name":"Attached"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vasp/locpot.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/locpot.cr#L5"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/Attached","kind":"module","full_name":"Chem::FormatReader::Attached","name":"Attached"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/VASP/GridReader","kind":"module","full_name":"Chem::VASP::GridReader","name":"GridReader"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/VASP/Locpot","kind":"module","full_name":"Chem::VASP::Locpot","name":"Locpot"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/vasp/locpot.cr","line_number":11,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/locpot.cr#L11"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/VASP/Locpot/Writer","path":"Chem/VASP/Locpot/Writer.html","kind":"class","full_name":"Chem::VASP::Locpot::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/VASP/GridWriter","kind":"module","full_name":"Chem::VASP::GridWriter","name":"GridWriter"},{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vasp/locpot.cr","line_number":20,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/locpot.cr#L20"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/Chem/VASP/GridWriter","kind":"module","full_name":"Chem::VASP::GridWriter","name":"GridWriter"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/VASP/Locpot","kind":"module","full_name":"Chem::VASP::Locpot","name":"Locpot"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,structure:Structure,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, structure : Structure, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, structure : <a href=\"../../../Chem/Structure.html\">Structure</a>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, structure, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,structure:Structure,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(path : Path | String, structure : Structure, & : self -> )","args_html":"(path : Path | String, structure : <a href=\"../../../Chem/Structure.html\">Structure</a>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path, structure)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(path:Path|String,structure:Structure):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"args_string":"(path : Path | String, structure : Structure) : self","args_html":"(path : Path | String, structure : <a href=\"../../../Chem/Structure.html\">Structure</a>) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"structure","doc":null,"default_value":"","external_name":"structure","restriction":"Structure"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), structure, sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/VASP/Poscar","path":"Chem/VASP/Poscar.html","kind":"module","full_name":"Chem::VASP::Poscar","name":"Poscar","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/vasp/poscar.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/poscar.cr#L2"},{"filename":"src/chem/register_format.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L172"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/VASP","kind":"module","full_name":"Chem::VASP","name":"VASP"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/VASP/Poscar/Reader","path":"Chem/VASP/Poscar/Reader.html","kind":"class","full_name":"Chem::VASP::Poscar::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vasp/poscar.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/poscar.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/VASP/Poscar","kind":"module","full_name":"Chem::VASP::Poscar","name":"Poscar"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,guess_topology:Bool=false,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, guess_topology : Bool = false, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, guess_topology : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, guess_topology, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,guess_topology:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"args_string":"(path : Path | String, guess_topology : Bool = false, & : self -> )","args_html":"(path : Path | String, guess_topology : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path, guess_topology)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,guess_topology:Bool=false,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, guess_topology : Bool = false, sync_close : Bool = false)","args_html":"(io : IO, guess_topology : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/vasp/poscar.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/poscar.cr#L6"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, guess_topology, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,guess_topology:Bool=false):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"args_string":"(path : Path | String, guess_topology : Bool = false) : self","args_html":"(path : Path | String, guess_topology : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), guess_topology, sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/VASP/Poscar/Writer","path":"Chem/VASP/Poscar/Writer.html","kind":"class","full_name":"Chem::VASP::Poscar::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vasp/poscar.cr","line_number":104,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/poscar.cr#L104"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/VASP/Poscar","kind":"module","full_name":"Chem::VASP::Poscar","name":"Poscar"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,order:Array(Element)|Array(String)|Nil=nil,fractional:Bool=false,wrap:Bool=false,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","doc":null,"default_value":"false","external_name":"wrap","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, order : Array(Element) | Array(String) | Nil = nil, fractional : Bool = false, wrap : Bool = false, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, order : <a href=\"../../../Array.html\">Array</a>(<a href=\"../../../Chem/Element.html\">Element</a>) | <a href=\"../../../Array.html\">Array</a>(String) | Nil = <span class=\"n\">nil</span>, fractional : Bool = <span class=\"n\">false</span>, wrap : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","doc":null,"default_value":"false","external_name":"wrap","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, order, fractional, wrap, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,order:Array(Element)|Array(String)|Nil=nil,fractional:Bool=false,wrap:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","doc":null,"default_value":"false","external_name":"wrap","restriction":"Bool"}],"args_string":"(path : Path | String, order : Array(Element) | Array(String) | Nil = nil, fractional : Bool = false, wrap : Bool = false, & : self -> )","args_html":"(path : Path | String, order : <a href=\"../../../Array.html\">Array</a>(<a href=\"../../../Chem/Element.html\">Element</a>) | <a href=\"../../../Array.html\">Array</a>(String) | Nil = <span class=\"n\">nil</span>, fractional : Bool = <span class=\"n\">false</span>, wrap : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","doc":null,"default_value":"false","external_name":"wrap","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path, order, fractional, wrap)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,order:Array(Element)|Array(String)|Nil=nil,fractional:Bool=false,wrap:Bool=false,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","doc":null,"default_value":"false","external_name":"wrap","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, order : Array(Element) | Array(String) | Nil = nil, fractional : Bool = false, wrap : Bool = false, sync_close : Bool = false)","args_html":"(io : IO, order : <a href=\"../../../Array.html\">Array</a>(<a href=\"../../../Chem/Element.html\">Element</a>) | <a href=\"../../../Array.html\">Array</a>(String) | Nil = <span class=\"n\">nil</span>, fractional : Bool = <span class=\"n\">false</span>, wrap : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/vasp/poscar.cr","line_number":109,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vasp/poscar.cr#L109"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","doc":null,"default_value":"false","external_name":"wrap","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, order, fractional, wrap, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,order:Array(Element)|Array(String)|Nil=nil,fractional:Bool=false,wrap:Bool=false):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","doc":null,"default_value":"false","external_name":"wrap","restriction":"Bool"}],"args_string":"(path : Path | String, order : Array(Element) | Array(String) | Nil = nil, fractional : Bool = false, wrap : Bool = false) : self","args_html":"(path : Path | String, order : <a href=\"../../../Array.html\">Array</a>(<a href=\"../../../Chem/Element.html\">Element</a>) | <a href=\"../../../Array.html\">Array</a>(String) | Nil = <span class=\"n\">nil</span>, fractional : Bool = <span class=\"n\">false</span>, wrap : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"order","doc":null,"default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","doc":null,"default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","doc":null,"default_value":"false","external_name":"wrap","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), order, fractional, wrap, sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"chem.cr/Chem/VMD","path":"Chem/VMD.html","kind":"module","full_name":"Chem::VMD","name":"VMD","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/vmd.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vmd.cr#L2"},{"filename":"src/chem/register_format.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L172"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/VMD/Writer","path":"Chem/VMD/Writer.html","kind":"class","full_name":"Chem::VMD::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vmd.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/vmd.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/VMD","kind":"module","full_name":"Chem::VMD","name":"VMD"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","doc":"Creates a new object from the given *io*.","summary":"<p>Creates a new object from the given <em>io</em>.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":null,"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"chem.cr/Chem/XYZ","path":"Chem/XYZ.html","kind":"module","full_name":"Chem::XYZ","name":"XYZ","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/formats/xyz.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/xyz.cr#L2"},{"filename":"src/chem/register_format.cr","line_number":172,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/register_format.cr#L172"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Chem/XYZ/Reader","path":"Chem/XYZ/Reader.html","kind":"class","full_name":"Chem::XYZ::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/xyz.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/xyz.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/XYZ","kind":"module","full_name":"Chem::XYZ","name":"XYZ"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,guess_topology:Bool=false,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, guess_topology : Bool = false, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, guess_topology : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, guess_topology, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,guess_topology:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"args_string":"(path : Path | String, guess_topology : Bool = false, & : self -> )","args_html":"(path : Path | String, guess_topology : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path, guess_topology)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,guess_topology:Bool=false,sync_close:Bool=false)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, guess_topology : Bool = false, sync_close : Bool = false)","args_html":"(io : IO, guess_topology : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/xyz.cr","line_number":7,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/xyz.cr#L7"},"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io, guess_topology, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,guess_topology:Bool=false):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"args_string":"(path : Path | String, guess_topology : Bool = false) : self","args_html":"(path : Path | String, guess_topology : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"guess_topology","doc":null,"default_value":"false","external_name":"guess_topology","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), guess_topology, sync_close: true)"}}],"instance_methods":[{"html_id":"skip_entry:Nil-instance-method","name":"skip_entry","doc":"Discards the next entry in the IO without fully parsing it.","summary":"<p>Discards the next entry in the IO without fully parsing it.</p>","abstract":false,"args":[],"args_string":" : Nil","args_html":" : Nil","location":{"filename":"src/chem/formats/xyz.cr","line_number":31,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/xyz.cr#L31"},"def":{"name":"skip_entry","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if @pull.eof?\n  return\nend\nn_atoms = @pull.next_i\n(n_atoms + 2).times do\n  @pull.next_line\nend\n"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Chem/XYZ/Writer","path":"Chem/XYZ/Writer.html","kind":"class","full_name":"Chem::XYZ::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","kind":"module","full_name":"Chem::FormatWriter::MultiEntry","name":"MultiEntry"},{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/xyz.cr","line_number":38,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/formats/xyz.cr#L38"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","kind":"module","full_name":"Chem::FormatWriter::MultiEntry","name":"MultiEntry"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Chem/XYZ","kind":"module","full_name":"Chem::XYZ","name":"XYZ"},"doc":null,"summary":null,"class_methods":[{"html_id":"open(io:IO,total_entries:Int32?=nil,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, total_entries : Int32? = nil, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, total_entries : Int32? = <span class=\"n\">nil</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","doc":null,"default_value":"false","external_name":"sync_close","restriction":"Bool"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(io, total_entries, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,total_entries:Int32?=nil,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"args_string":"(path : Path | String, total_entries : Int32? = nil, & : self -> )","args_html":"(path : Path | String, total_entries : Int32? = <span class=\"n\">nil</span>, & : <span class=\"k\">self</span> -> )","location":null,"def":{"name":"open","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(self ->)"},"return_type":"","visibility":"Public","body":"io = new(path, total_entries)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(path:Path|String,total_entries:Int32?=nil):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"args_string":"(path : Path | String, total_entries : Int32? = nil) : self","args_html":"(path : Path | String, total_entries : Int32? = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":null,"def":{"name":"new","args":[{"name":"path","doc":null,"default_value":"","external_name":"path","restriction":"Path | String"},{"name":"total_entries","doc":null,"default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), total_entries, sync_close: true)"}}],"instance_methods":[],"macros":[],"types":[]}]}]},{"html_id":"chem.cr/Colorize","path":"Colorize.html","kind":"module","full_name":"Colorize","name":"Colorize","abstract":false,"superclass":null,"ancestors":[],"locations":[{"filename":"src/chem/core_ext/colorize.cr","line_number":3,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/colorize.cr#L3"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"With Colorize you can change the fore- and background colors and text decorations when rendering text\non terminals supporting ANSI escape codes. It adds the `colorize` method to `Object` and thus all classes\nas its main interface, which calls `to_s` and surrounds it with the necessary escape codes\nwhen it comes to obtaining a string representation of the object.\n\nIts first argument changes the foreground color:\n```\nrequire \"colorize\"\n\n\"foo\".colorize(:green)\n100.colorize(:red)\n[1, 2, 3].colorize(:blue)\n```\n\nThere are alternative ways to change the foreground color:\n```\nrequire \"colorize\"\n\n\"foo\".colorize.fore(:green)\n\"foo\".colorize.green\n```\n\nTo change the background color, the following methods are available:\n```\nrequire \"colorize\"\n\n\"foo\".colorize.back(:green)\n\"foo\".colorize.on(:green)\n\"foo\".colorize.on_green\n```\n\nYou can also pass an RGB color to `colorize`:\n```\nrequire \"colorize\"\n\n\"foo\".colorize(Colorize::ColorRGB.new(0, 255, 255)) # => \"foo\" in aqua\n```\n\nOr an 8-bit color:\n```\nrequire \"colorize\"\n\n\"foo\".colorize(Colorize::Color256.new(208)) # => \"foo\" in orange\n```\n\nIt's also possible to change the text decoration:\n```\nrequire \"colorize\"\n\n\"foo\".colorize.mode(:underline)\n\"foo\".colorize.underline\n```\n\nThe `colorize` method returns a `Colorize::Object` instance,\nwhich allows chaining methods together:\n```\nrequire \"colorize\"\n\n\"foo\".colorize.fore(:yellow).back(:blue).mode(:underline)\n```\n\nWith the `toggle` method you can temporarily disable adding the escape codes.\nSettings of the instance are preserved however and can be turned back on later:\n```\nrequire \"colorize\"\n\n\"foo\".colorize(:red).toggle(false)              # => \"foo\" without color\n\"foo\".colorize(:red).toggle(false).toggle(true) # => \"foo\" in red\n```\n\nThe color `:default` will just leave the object as it is (but it's an `Colorize::Object(String)` then).\nThat's handy in for example conditions:\n```\nrequire \"colorize\"\n\n\"foo\".colorize(some_bool ? :green : :default)\n```\n\nAvailable colors are:\n```\n:default\n:black\n:red\n:green\n:yellow\n:blue\n:magenta\n:cyan\n:light_gray\n:dark_gray\n:light_red\n:light_green\n:light_yellow\n:light_blue\n:light_magenta\n:light_cyan\n:white\n```\n\nAvailable text decorations are:\n```\n:bold\n:bright\n:dim\n:underline\n:blink\n:reverse\n:hidden\n```","summary":"<p>With Colorize you can change the fore- and background colors and text decorations when rendering text on terminals supporting ANSI escape codes.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"chem.cr/Colorize/ColorRGB","path":"Colorize/ColorRGB.html","kind":"struct","full_name":"Colorize::ColorRGB","name":"ColorRGB","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core_ext/colorize.cr","line_number":4,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/colorize.cr#L4"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"chem.cr/Colorize","kind":"module","full_name":"Colorize","name":"Colorize"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"html_id":"from_hex(hex:String):self-class-method","name":"from_hex","doc":null,"summary":null,"abstract":false,"args":[{"name":"hex","doc":null,"default_value":"","external_name":"hex","restriction":"String"}],"args_string":"(hex : String) : self","args_html":"(hex : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core_ext/colorize.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/colorize.cr#L5"},"def":{"name":"from_hex","args":[{"name":"hex","doc":null,"default_value":"","external_name":"hex","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"self","visibility":"Public","body":"hex = hex.lchop('#')\nnew(hex[0..1].to_u8(16), hex[2..3].to_u8(16), hex[4..5].to_u8(16))\n"}}],"instance_methods":[{"html_id":"to_a:Array(UInt8)-instance-method","name":"to_a","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Array(UInt8)","args_html":" : <a href=\"../Array.html\">Array</a>(UInt8)","location":{"filename":"src/chem/core_ext/colorize.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/colorize.cr#L10"},"def":{"name":"to_a","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Array(UInt8)","visibility":"Public","body":"[@red, @green, @blue]"}}],"macros":[],"types":[]}]},{"html_id":"chem.cr/Float","path":"Float.html","kind":"struct","full_name":"Float","name":"Float","abstract":true,"superclass":{"html_id":"chem.cr/Number","kind":"struct","full_name":"Number","name":"Number"},"ancestors":[{"html_id":"chem.cr/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"chem.cr/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core_ext/float.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/float.cr#L1"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"Float is the base type of all floating point numbers.\n\nThere are two floating point types, `Float32` and `Float64`,\nwhich correspond to the [binary32](http://en.wikipedia.org/wiki/Single_precision_floating-point_format)\nand [binary64](http://en.wikipedia.org/wiki/Double_precision_floating-point_format)\ntypes defined by IEEE.\n\nA floating point literal is an optional `+` or `-` sign, followed by\na sequence of numbers or underscores, followed by a dot,\nfollowed by numbers or underscores, followed by an optional exponent suffix,\nfollowed by an optional type suffix. If no suffix is present, the literal's type is `Float64`.\n\n```\n1.0     # Float64\n1.0_f32 # Float32\n1_f32   # Float32\n\n1e10   # Float64\n1.5e10 # Float64\n1.5e-7 # Float64\n\n+1.3 # Float64\n-0.5 # Float64\n```\n\nThe underscore `_` before the suffix is optional.\n\nUnderscores can be used to make some numbers more readable:\n\n```\n1_000_000.111_111 # better than 1000000.111111\n```\n\nSee [`Float` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/floats.html) in the language reference.","summary":"<p>Float is the base type of all floating point numbers.</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"close_to?(other:Number,delta:Number={{@type.constant(\"EPSILON\")}}):Bool-instance-method","name":"close_to?","doc":"Returns `true` if numbers are within *delta* from each other, else `false`.\n\n```\n1.0.close_to?(1.0)                          # => true\n1.0_f32.close_to?(1.0)                      # => true\n1.0.close_to?(1.0 + Float64::EPSILON)       # => true\n1.0_f32.close_to?(1.0 + Float32::EPSILON)   # => true\n1.0.close_to?(1.0005, 1e-3)                 # => true\n1.0.close_to?(1.0 + Float64::EPSILON*2)     # => false\n1.0_f32.close_to?(1.0 + Float32::EPSILON*2) # => false\n1.0.close_to?(1.01, 1e-3)                   # => false\n```","summary":"<p>Returns <code>true</code> if numbers are within <em>delta</em> from each other, else <code>false</code>.</p>","abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"},{"name":"delta","doc":null,"default_value":"{{ @type.constant(\"EPSILON\") }}","external_name":"delta","restriction":"Number"}],"args_string":"(other : Number, delta : Number = {{ @type.constant(\"EPSILON\") }}) : Bool","args_html":"(other : <a href=\"Number.html\">Number</a>, delta : <a href=\"Number.html\">Number</a> = {{ @type.constant(<span class=\"s\">&quot;EPSILON&quot;</span>) }}) : Bool","location":{"filename":"src/chem/core_ext/float.cr","line_number":14,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/float.cr#L14"},"def":{"name":"close_to?","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Number"},{"name":"delta","doc":null,"default_value":"{{ @type.constant(\"EPSILON\") }}","external_name":"delta","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Bool","visibility":"Public","body":"(self - other).abs <= delta"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Indexable","path":"Indexable.html","kind":"module","full_name":"Indexable(T)","name":"Indexable","abstract":false,"superclass":null,"ancestors":[{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"locations":[{"filename":"src/chem/core_ext/indexable.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/indexable.cr#L1"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"chem.cr/Chem/ArrayView","kind":"module","full_name":"Chem::ArrayView(T)","name":"ArrayView"},{"html_id":"chem.cr/Chem/BondArray","kind":"class","full_name":"Chem::BondArray","name":"BondArray"},{"html_id":"chem.cr/Chem/Spatial/Grid","kind":"class","full_name":"Chem::Spatial::Grid","name":"Grid"},{"html_id":"chem.cr/Chem/Topology/BondType","kind":"class","full_name":"Chem::Topology::BondType","name":"BondType"}],"namespace":null,"doc":"A container that allows accessing elements via a numeric index.\n\nIndexing starts at `0`. A negative index is assumed to be\nrelative to the end of the container: `-1` indicates the last element,\n`-2` is the next to last element, and so on.\n\nTypes including this module are typically `Array`-like types.","summary":"<p>A container that allows accessing elements via a numeric index.</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"index!(ofobject,offset:Int=0):Int-instance-method","name":"index!","doc":null,"summary":null,"abstract":false,"args":[{"name":"object","doc":null,"default_value":"","external_name":"of","restriction":""},{"name":"offset","doc":null,"default_value":"0","external_name":"offset","restriction":"Int"}],"args_string":"(of object, offset : Int = 0) : Int","args_html":"(of object, offset : Int = <span class=\"n\">0</span>) : Int","location":{"filename":"src/chem/core_ext/indexable.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/indexable.cr#L2"},"def":{"name":"index!","args":[{"name":"object","doc":null,"default_value":"","external_name":"of","restriction":""},{"name":"offset","doc":null,"default_value":"0","external_name":"offset","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Int","visibility":"Public","body":"index!(offset) do |e|\n  e == object\nend"}},{"html_id":"index!(offset:Int=0,&block:T->Bool):Int-instance-method","name":"index!","doc":null,"summary":null,"abstract":false,"args":[{"name":"offset","doc":null,"default_value":"0","external_name":"offset","restriction":"Int"}],"args_string":"(offset : Int = 0, &block : T -> Bool) : Int","args_html":"(offset : Int = <span class=\"n\">0</span>, &block : T -> Bool) : Int","location":{"filename":"src/chem/core_ext/indexable.cr","line_number":6,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/indexable.cr#L6"},"def":{"name":"index!","args":[{"name":"offset","doc":null,"default_value":"0","external_name":"offset","restriction":"Int"}],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(T -> Bool)"},"return_type":"Int","visibility":"Public","body":"(index(offset, &block)) || (raise(IndexError.new))"}},{"html_id":"mean:Float64-instance-method","name":"mean","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Float64","args_html":" : Float64","location":{"filename":"src/chem/core_ext/indexable.cr","line_number":10,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/indexable.cr#L10"},"def":{"name":"mean","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"{% unless @type < Number\n  raise(\"#mean only works with numbers, not #{@type}\")\nend %}\n(sum(0)) / size\n"}},{"html_id":"mean(&:T->Number):Float64-instance-method","name":"mean","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"(& : T -> Number) : Float64","args_html":"(& : T -> <a href=\"Number.html\">Number</a>) : Float64","location":{"filename":"src/chem/core_ext/indexable.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/indexable.cr#L15"},"def":{"name":"mean","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":{"name":"","doc":null,"default_value":"","external_name":"","restriction":"(T -> Number)"},"return_type":"Float64","visibility":"Public","body":"sum do |ele|\n  yield ele\nend / size"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Number","path":"Number.html","kind":"struct","full_name":"Number","name":"Number","abstract":true,"superclass":{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"chem.cr/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core_ext/number.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/number.cr#L1"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[{"id":"DEGREE_TO_RADIAN","name":"DEGREE_TO_RADIAN","value":"Math::PI / 180","doc":null,"summary":null},{"id":"RADIAN_TO_DEGREE","name":"RADIAN_TO_DEGREE","value":"180 / Math::PI","doc":null,"summary":null}],"included_modules":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"}],"extended_modules":[],"subclasses":[{"html_id":"chem.cr/Float","kind":"struct","full_name":"Float","name":"Float"}],"including_types":[],"namespace":null,"doc":"The top-level number type.","summary":"<p>The top-level number type.</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"*(other:Chem::Spatial::Vec3):Chem::Spatial::Vec3-instance-method","name":"*","doc":null,"summary":null,"abstract":false,"args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Chem::Spatial::Vec3"}],"args_string":"(other : Chem::Spatial::Vec3) : Chem::Spatial::Vec3","args_html":"(other : <a href=\"Chem/Spatial/Vec3.html\">Chem::Spatial::Vec3</a>) : <a href=\"Chem/Spatial/Vec3.html\">Chem::Spatial::Vec3</a>","location":{"filename":"src/chem/core_ext/number.cr","line_number":5,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/number.cr#L5"},"def":{"name":"*","args":[{"name":"other","doc":null,"default_value":"","external_name":"other","restriction":"Chem::Spatial::Vec3"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Chem::Spatial::Vec3","visibility":"Public","body":"other * self"}},{"html_id":"degree-instance-method","name":"degree","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core_ext/number.cr","line_number":9,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/number.cr#L9"},"def":{"name":"degree","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"degrees"}},{"html_id":"degrees-instance-method","name":"degrees","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core_ext/number.cr","line_number":13,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/number.cr#L13"},"def":{"name":"degrees","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self * RADIAN_TO_DEGREE"}},{"html_id":"radian-instance-method","name":"radian","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core_ext/number.cr","line_number":17,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/number.cr#L17"},"def":{"name":"radian","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"radians"}},{"html_id":"radians-instance-method","name":"radians","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","args_html":"","location":{"filename":"src/chem/core_ext/number.cr","line_number":21,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/number.cr#L21"},"def":{"name":"radians","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"self * DEGREE_TO_RADIAN"}},{"html_id":"scale(min:Number,max:Number):Float64-instance-method","name":"scale","doc":"Scales the number into the given range. The result will be between\nzero and one.\n\n```\n10.scale(0, 100)   # => 0.1\n2.5.scale(0, 5)    # 0.5\n401.scale(50, 500) # => 0.78\n```","summary":"<p>Scales the number into the given range.</p>","abstract":false,"args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"args_string":"(min : Number, max : Number) : Float64","args_html":"(min : <a href=\"Number.html\">Number</a>, max : <a href=\"Number.html\">Number</a>) : Float64","location":{"filename":"src/chem/core_ext/number.cr","line_number":33,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/number.cr#L33"},"def":{"name":"scale","args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(self - min) / (max - min)"}},{"html_id":"scale(range:Range(Number,Number)):Float64-instance-method","name":"scale","doc":"Scales the number into the given range. The result will be between\nzero and one.\n\n```\n10.scale(0, 100)   # => 0.1\n2.5.scale(0, 5)    # 0.5\n401.scale(50, 500) # => 0.78\n```","summary":"<p>Scales the number into the given range.</p>","abstract":false,"args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Number, Number)"}],"args_string":"(range : Range(Number, Number)) : Float64","args_html":"(range : <a href=\"Range.html\">Range</a>(<a href=\"Number.html\">Number</a>, <a href=\"Number.html\">Number</a>)) : Float64","location":{"filename":"src/chem/core_ext/number.cr","line_number":38,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/number.cr#L38"},"def":{"name":"scale","args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Number, Number)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"scale(range.begin, range.end)"}},{"html_id":"unscale(min:Number,max:Number):Float64-instance-method","name":"unscale","doc":"Reverts the scaling in the given range.\n\n0.5.unscale(0, 100) # => 50.0\n0.1.unscale(0, 5) # => 0.05\n5.scale(-4, 20).unscale(-4, 20) # => 5.0","summary":"<p>Reverts the scaling in the given range.</p>","abstract":false,"args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"args_string":"(min : Number, max : Number) : Float64","args_html":"(min : <a href=\"Number.html\">Number</a>, max : <a href=\"Number.html\">Number</a>) : Float64","location":{"filename":"src/chem/core_ext/number.cr","line_number":47,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/number.cr#L47"},"def":{"name":"unscale","args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":"Number"},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":"Number"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"(self * (max - min)) + min"}},{"html_id":"unscale(range:Range(Number,Number)):Float64-instance-method","name":"unscale","doc":"Reverts the scaling in the given range.\n\n0.5.unscale(0, 100) # => 50.0\n0.1.unscale(0, 5) # => 0.05\n5.scale(-4, 20).unscale(-4, 20) # => 5.0","summary":"<p>Reverts the scaling in the given range.</p>","abstract":false,"args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Number, Number)"}],"args_string":"(range : Range(Number, Number)) : Float64","args_html":"(range : <a href=\"Range.html\">Range</a>(<a href=\"Number.html\">Number</a>, <a href=\"Number.html\">Number</a>)) : Float64","location":{"filename":"src/chem/core_ext/number.cr","line_number":52,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/number.cr#L52"},"def":{"name":"unscale","args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range(Number, Number)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Float64","visibility":"Public","body":"unscale(range.begin, range.end)"}}],"macros":[],"types":[]},{"html_id":"chem.cr/Range","path":"Range.html","kind":"struct","full_name":"Range(B, E)","name":"Range","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core_ext/range.cr","line_number":1,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/range.cr#L1"}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"aliased":null,"aliased_html":null,"const":false,"constants":[],"included_modules":[{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":"A `Range` represents an interval: a set of values with a beginning and an end.\n\nRanges may be constructed using the usual `new` method or with literals:\n\n```\nx..y  # an inclusive range, in mathematics: [x, y]\nx...y # an exclusive range, in mathematics: [x, y)\n(x..) # an endless range, in mathematics: >= x\n..y   # a beginless inclusive range, in mathematics: <= y\n...y  # a beginless exclusive range, in mathematics: < y\n```\n\nSee [`Range` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/range.html) in the language reference.\n\nAn easy way to remember which one is inclusive and which one is exclusive it\nto think of the extra dot as if it pushes *y* further away, thus leaving it outside of the range.\n\nRanges typically involve integers, but can be created using arbitrary objects\nas long as they define `succ` (or `pred` for `reverse_each`), to get the\nnext element in the range, and `<` and `==`, to know when the range reached the end:\n\n```\n# Represents a string of 'x's.\nstruct Xs\n  include Comparable(Xs)\n\n  getter size\n\n  def initialize(@size : Int32)\n  end\n\n  def succ\n    Xs.new(@size + 1)\n  end\n\n  def <=>(other)\n    @size <=> other.size\n  end\n\n  def inspect(io)\n    @size.times { io << 'x' }\n  end\n\n  def to_s(io)\n    io << @size << ' '\n    inspect(io)\n  end\nend\n```\n\nAn example of using `Xs` to construct a range:\n\n```\nr = Xs.new(3)..Xs.new(6)\nr.to_s                 # => \"xxx..xxxxxx\"\nr.to_a                 # => [Xs.new(3), Xs.new(4), Xs.new(5), Xs.new(6)]\nr.includes?(Xs.new(5)) # => true\n```","summary":"<p>A <code><a href=\"Range.html\">Range</a></code> represents an interval: a set of values with a beginning and an end.</p>","class_methods":[],"constructors":[],"instance_methods":[{"html_id":"clamp(min,max):Range-instance-method","name":"clamp","doc":null,"summary":null,"abstract":false,"args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":""},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":""}],"args_string":"(min, max) : Range","args_html":"(min, max) : <a href=\"Range.html\">Range</a>","location":{"filename":"src/chem/core_ext/range.cr","line_number":2,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/range.cr#L2"},"def":{"name":"clamp","args":[{"name":"min","doc":null,"default_value":"","external_name":"min","restriction":""},{"name":"max","doc":null,"default_value":"","external_name":"max","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Range","visibility":"Public","body":"if exclusive?\n  raise(ArgumentError.new(\"Can't clamp an exclusive range\"))\nend\nif (b = @begin) && (e = @end)\n  (b.clamp(min, max))..(e.clamp(min, max))\nelse\n  if b = @begin\n    (b.clamp(min, max))..max\n  else\n    if e = @end\n      min..(e.clamp(min, max))\n    else\n      min..max\n    end\n  end\nend\n"}},{"html_id":"clamp(range:Range):Range-instance-method","name":"clamp","doc":null,"summary":null,"abstract":false,"args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range"}],"args_string":"(range : Range) : Range","args_html":"(range : <a href=\"Range.html\">Range</a>) : <a href=\"Range.html\">Range</a>","location":{"filename":"src/chem/core_ext/range.cr","line_number":15,"url":"https://github.com/franciscoadasme/chem.cr/blob/560b6412bc590296299690d200482b548a051025/src/chem/core_ext/range.cr#L15"},"def":{"name":"clamp","args":[{"name":"range","doc":null,"default_value":"","external_name":"range","restriction":"Range"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Range","visibility":"Public","body":"if range.end.nil? || (!range.exclusive?)\n  clamp(range.begin, range.end)\nelse\n  raise(ArgumentError.new(\"Can't clamp by an exclusive range\"))\nend"}}],"macros":[],"types":[]}]}}