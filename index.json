{"repository_name":"chem.cr","body":"# chem.cr\n\n[![Crystal CI](https://github.com/franciscoadasme/chem.cr/actions/workflows/crystal.yml/badge.svg)](https://github.com/franciscoadasme/chem.cr/actions/workflows/crystal.yml)\n[![Version](https://img.shields.io/github/v/release/franciscoadasme/chem.cr.svg?label=version)](https://github.com/franciscoadasme/chem.cr/releases/latest)\n[![License](https://img.shields.io/github/license/franciscoadasme/chem.cr.svg)](https://github.com/franciscoadasme/chem.cr/blob/master/LICENSE)\n\n---\n\nA modern library written in [Crystal][1] primarily designed for\nmanipulating molecular files created by computational chemistry\nprograms. It aims to be both fast and easy to use.\n\n**NOTE**: PSIQUE can be found [here](https://github.com/franciscoadasme/chem.cr/wiki/PSIQUE)\n\n**IMPORTANT**: this library is in alpha stage, meaning that there is missing\nfunctionality, documentation, etc. and there will be breaking changes.\n\n[Features](#features) |\n[Installation](#installation) |\n[Usage](#usage) |\n[Tools](https://github.com/franciscoadasme/chem.cr/wiki#tools) |\n[Benchmarks](#benchmarks) |\n[Roadmap](#roadmap) |\n[Testing](#testing) |\n[Similar software](#similar-software) |\n[Contributing](#contributing) |\n[Contributors](#contributors) |\n[License](#license)\n\n## Features\n\n- Object-oriented API for accessing and manipulating molecules. It\n  follows the topology commonly used in [Protein Data Bank][2] (PDB)\n  file format: Structure (or model) → Chain → Residue → Atom.\n- Type safety (assigning a number to the atom's name will result in a\n  compilation error)\n- Support for periodic molecular structures\n- Support for several file formats (and many more to come...)\n- Iterator-based file reading (avoids reading all data into memory)\n- Fast performance (see Benchmarks below)\n\n## Installation\n\n**NOTE** Tools such as `psique` may be download separately from the\n[releases][7] page or built from source if required. Refer to the\n[Wiki](https://github.com/franciscoadasme/chem.cr/wiki) for more\ninformation.\n\nFirst check that the Crystal compiler is installed correctly:\n\n```sh\n$ crystal --version\nCrystal 0.35.1 [5999ae29b] (2020-06-19)\n\nLLVM: 8.0.0\nDefault target: x86_64-unknown-linux-gnu\n```\n\nIf the command fails, you need to install the crystal compiler by\nfollowing [these steps][3].\n\n### Using Shards\n\nCrystal handles dependencies by listing the packages on a `shard.yml`\nfile in a Crystal project. First, create a new project:\n\n```sh\n$ crystal init app myapp\n    create  myapp/.gitignore\n    create  myapp/.editorconfig\n    create  myapp/LICENSE\n    create  myapp/README.md\n    create  myapp/.travis.yml\n    create  myapp/shard.yml\n    create  myapp/src/myapp.cr\n    create  myapp/src/myapp/version.cr\n    create  myapp/spec/spec_helper.cr\n    create  myapp/spec/myapp_spec.cr\nInitialized empty Git repository in /home/crystal/myapp/.git/\n$ cd myapp\n```\n\nRead more about projects at the [Crystal guides][4]. Add this to your\napplication's `shard.yml`:\n\n```yaml\ndependencies:\n  chem:\n    github: franciscoadasme/chem.cr\n    version: ~> 0.1\n```\n\nThen, resolve and install missing dependencies:\n\n```sh\nshards install\n```\n\nDependencies are installed into the `lib` folder. More about\ndependencies at the [Shards guides][5].\n\n### Manual download\n\nEither clone the repository or download a copy of the `chem` module to\nyour local machine:\n\n```sh\ntag=$(curl -s https://api.github.com/repos/franciscoadasme/chem.cr/releases/latest | grep \"tag_name\" | cut -d\\\" -f4)\nwget https://github.com/franciscoadasme/chem.cr/archive/$tag.tar.gz -O chem.cr-${tag#v}.tar.gz\ntar xvf chem.cr-${tag#v}.tar.gz\n```\n\nThis will download the latest version of the `chem` module to a folder\nnamed `chem.cr-X.Y.Z`, where `X.Y.Z` stands for the current version.\n\n### Requirements\n\n- To run STRIDE analysis, you'll need to set `STRIDE_BIN` to the STRIDE\n  executable path.\n\n## Usage\n\nFirst require the `chem` module. If you used Shards to installed the\ndependencies:\n\n```crystal\nrequire \"chem\"\n```\n\nOr if you download a copy named `chem.cr-X.Y.Z` and it is placed at the\nparent directory:\n\n```crystal\nrequire \"../chem.cr-X.Y.Z/src/chem\"\n```\n\nRefer to the [Crystal guides][6] for more information about how to\nrequire other files. Either way, write the following to avoid typing the\n`Chem::` prefix:\n\n```crystal\ninclude Chem\n```\n\nLet's first read a structure:\n\n```crystal\nst = Structure.read \"/path/to/file.pdb\"\nst # => <Structure \"1cbn\": 644 atoms, 47 residues, periodic>\n```\n\nYou can also use a custom read method that accepts specific options:\n\n```crystal\nStructure.from_pdb \"/path/to/file.pdb\"\nStructure.from_pdb \"/path/to/file.pdb\", chains: ['A'] # read only chain A\nStructure.from_pdb \"/path/to/file.pdb\", het: false # skip HET atoms\nStructure.from_pdb \"/path/to/file.pdb\", alt_loc: 'A' # select alternate location A\n```\n\nYou can access PDB header information via the `#experiment` property:\n\n```crystal\nif expt = st.experiment # check if experiment data is present\n  expt.title # => \"ATOMIC RESOLUTION (0.83 ANGSTROMS) CRYSTAL STRUCTURE...\"\n  expt.kind # => XRayDiffraction\n  expt.resolution # => 0.83\n  expt.deposition_date # => 1991-10-11\n  ...\nend\n```\n\nYou can also read many structures at once:\n\n```crystal\n# read all models\nArray(Structure).from_pdb \"/path/to/file.pdb\"\n# read 2th and 5th models\nArray(Structure).from_pdb \"/path/to/file.pdb\", indexes: [1, 4]\n```\n\nAlternatively, you could use an IO iterator to read one by one:\n\n```crystal\nPDB::Parser.new(\"/path/to/file.pdb\").each { |st| ... }\nPDB::Parser.new(\"/path/to/file.pdb\").each(indexes: [1, 4]) { |st| ... }\n```\n\n### Topology access\n\nYou can access topology objects using the bracket syntax (like a hash or\nassociative array or dictionary):\n\n```crystal\nst['A'] # => <Chain A>\nst['A'][10] # => <Residue A:ARG10>\nst['A'][10][\"CA\"] # => <Atom A:ARG10:CA(146)>\n```\n\nAlternatively, you can use the `#dig` and `#dig?` methods:\n\n```crystal\nst.dig 'A' # => <Chain A>\nst.dig 'A', 10 # => <Residue A:ARG10>\nst.dig 'A', 10, \"CA\" # => <Atom A:ARG10:CA(146)>\n\nst.dig 'A', 10, \"CJ\" # causes an error because \"CJ\" doesn't exist\nst.dig? 'A', 10, \"CJ\" # => nil\n```\n\nEach topology object have several modifiable properties:\n\n```crystal\natom = st.dig 'A', 10, \"CA\"\natom.element.name # => Carbon\natom.coords # => [8.47 4.577 8.764]\natom.occupancy # => 1.0\natom.bonded_atoms.map &.name # => [\"N\", \"C\", \"HA\", \"CB\"]\n```\n\nThanks to Crystal's powerful standard library, manipulating topology objects is\nvery easy:\n\n```crystal\n# ramachandran angles\nst.residues.map { |r| {r.phi, r.psi} } # => [{129.5, 90.1}, ...]\n# renumber residues starting from 1\nst.residues.each_with_index { |res, i| res.number = i + 1 }\n# constrain Z-axis\nst.atoms.each { |atom| atom.constraint = :z }\n# total charge\nst.atoms.sum_of &.partial_charge\n# iterate over secondary structure elements\nst.residues.chunk(&.sec).each do |sec, residues|\n  sec # => HelixAlpha\n  residues # => [<Residue A:ARG1>, <Residue A:LEU2>, ...]\nend\n```\n\nHere `#residues` and `#atoms` return an array of `Residue` and `Atom` instances,\nrespectively. Collections also provide iterator-based access, e.g.,\n`#each_atom`, that avoids expensive memory allocations:\n\n```crystal\nst.atoms.any? &.constraint # array allocation to just check a condition\nst.each_atom.any? &.constraint # faster!\n```\n\n### Atom selection\n\nRight now, there is no custom language to select a subset of atoms. However,\nthanks to Crystal, one can achieve a similar result with an intuitive syntax:\n\n```crystal\nst.atoms.select { |atom| atom.partial_charge > 0 }\n# or\nst.atoms.select &.partial_charge.>(0)\n# compared to a custom language\nst.atoms.select \"partial_charge > 0\"\n\n# select atoms within a cylinder of radius = 4 A and centered at the origin\nst.atoms.select { |atom| atom.x**2 + atom.y**2 < 4 }\n# compared to a custom language\nst.atoms.select \"sqrt(x) + sqrt(y) < 4\" # or \"x**2 + y**2 < 4\"\n```\n\nOne advantage to using Crystal itself is that it provides type-safety: doing\nsomething like `atom.name**2` will result in a compilation error, whereas using\na custom language will probably produce a confusing error during runtime.\nAdditionally, the code block can be as big and complex as necessary with\nmultiple intermediary computations. Furthermore, a negative condition may be\nconfusing and not be trivial to write, but in Crystal you would simply use\n`#reject` instead.\n\nFinally, the above also works for chain and residue collections:\n\n```crystal\n# select protein chains\nst.chains.select &.each_residue.any?(&.protein?)\n# select only solvent residues\nst.residues.select &.solvent?\n# select residues with any atom within 5 A of the first CA atom\n# (this is equivalent to \"same residue as\" or \"fillres\" in other libraries)\nca = st.dig 'A', 1, \"CA\"\nst.residues.select do |res|\n  res.each_atom.any? { |atom| Spatial.distance(atom, ca) < 5 }\nend\n# or\nst.atoms.select { |atom| Spatial.distance(atom, ca) < 5 }.residues\n```\n\n### Coordinates manipulation\n\nAll coordinates manipulation is done using a `CoordinatesProxy` instance,\navailable for any atom collection (i.e., structure, chain or residue) via\n`#coords`:\n\n```crystal\n# geometric center\nst.coords.center\n# center at origin\nst.coords.translate! -st.coords.center\n# wraps atoms into the primary unit cell\nst.coords.wrap\n...\n```\n\n## Benchmarks\n\n`chem.cr` is implemented in pure Crystal, making it as fast or even faster than\nsome C-powered packages.\n\nThe benchmark is designed as follows:\n\n- The tests are implemented using the functionality documented by each library\n  in tutorials, examples, etc. Optimized versions may be faster but require\n  advanced (possibly undocumented) usage.\n- Tests are run ten times (except for 1HTQ, 3 times) and the elapsed time for\n  each run is averaged.\n- Parsing PDB files\n  - [1CRN](http://www.rcsb.org/pdb/explore/explore.do?structureId=1crn) -\n    hydrophobic protein (327 atoms).\n  - [3JYV](http://www.rcsb.org/pdb/explore/explore.do?structureId=3jyv) - 80S\n    rRNA (57,327 atoms).\n  - [1HTQ](http://www.rcsb.org/pdb/explore/explore.do?structureId=1htq) -\n    multicopy glutamine synthetase (10 models of 97,872 atoms).\n- Counting the number of alanine residues in adenylate kinase (1AKE, 3816\n  atoms).\n- Calculating the distance between residues 50 and 60 of chain A in adenylate\n  kinase (1AKE, 3816 atoms).\n- Calculating the Ramachandran phi/psi angles in adenylate kinase (1AKE, 3816\n  atoms).\n\n**IMPORTANT**: direct comparison of parsing times should be taken with a grain\nof salt because each library does something slightly different, e.g., error\nchecking. Some of this functionality is listed below. Nonetheless, these results\ngives an overall picture in terms of the expected performance.\n\n|                      | Biopython | chem.cr | Chemfiles | MDAnalysis | MDTraj | schrodinger |   VMD |\n| -------------------- | --------: | ------: | --------: | ---------: | -----: | ----------: | ----: |\n| Parse 1CRN [ms]      |     6.521 |   1.028 |     1.668 |      5.059 | 11.923 |      45.497 | 2.285 |\n| Parse 3JYV [s]       |     0.837 |   0.086 |     0.199 |      0.404 |  1.490 |       0.766 | 0.162 |\n| Parse 1HTQ [s]       |    16.146 |   1.673 |     2.540 |      1.387 | 18.969 |      11.997 | 0.236 |\n| Count [ms]           |     0.210 |   0.009 |     0.322 |      0.041 |  0.079 |      25.997 | 0.165 |\n| Distance [ms]        |     0.172 |   0.000 |     1.016 |      0.382 |  0.990 |      43.101 | 0.379 |\n| Ramachandran [ms]    |   110.450 |   0.607 |         - |    690.201 |  4.947 |      68.758 | 1.814 |\n|                      |           |         |           |            |        |             |       |\n| License              | Biopython |     MIT |       BSD |      GPLv2 |   LGPL | Proprietary |   VMD |\n| Parse Header         |       yes |     yes |       yes |         no |     no |          no |    no |\n| Parse CONECT         |        no |     yes |       yes |         no |    yes |         yes |   yes |\n| Guess bonds          |        no |      no |       yes |         no |    yes |         yes |   yes |\n| Hybrid36             |        no |     yes |        no |        yes |     no |          no |    no |\n| Hierarchical parsing |       yes |     yes |        no |         no |     no |          no |    no |\n| Supports disorder    |       yes |     yes |        no |         no |    yes |         yes |    no |\n\nLatest update: 2019-11-10\n\nScripts and details are provided at [pdb-bench](https://github.com/franciscoadasme/pdb-bench).\n\n## Roadmap\n\n### Topology manipulation\n\n- [x] Automatic connectivity detection (includes periodic systems)\n- [x] Automatic bond order assignment\n- [x] Residue templates (basic impl.)\n  - [ ] Custom terminal groups\n- [x] Automatic topology assignment (chain, residue names, atom names) based on\n      residue templates\n- [ ] Atom wildcards (`\"C*\"` will select `\"C\"`, `\"CA\"`, `\"CB\"`, etc.)\n- [ ] Atom selection language\n\n### Input and Output\n\n- [x] Automatic file format detection\n- [x] Support for per-file format options (e.g., select PDB chain)\n- [x] Friendly errors (message with error location)\n- [x] Iterator-based IO\n- [ ] Compressed files (.gz and .xz)\n- [ ] Trajectory support\n\n#### File formats\n\n- [x] DFTB+'s Gen format\n- [ ] Macromolecular Crystallographic Information Framework (CIF)\n- [ ] MacroMolecular Transmission Format (MMTF)\n- [x] PDB\n- [x] Tripos Mol2\n- [x] VASP's Poscar\n- [x] XYZ\n- [ ] and many more\n\n### Analysis\n\n- [x] Coordinates manipulation (via `CoordinatesProxy`)\n- [x] Spatial calculations (distance, angle, dihedral, quaternions, affine\n      transformations)\n- [x] Periodic boundary conditions (PBC) support (topology-aware wrap and\n      unwrap)\n- [x] Secondary structure assignment\n  - [x] DSSP (native implementation)\n  - [x] STRIDE (uses external program for now)\n- [x] Nearest neighbor search (via native k-d tree impl.)\n- [ ] RMSD\n- [ ] Structure superposition\n- [ ] Intermolecular interactions (H-bonds, etc.)\n- [ ] Volumetric data\n- [ ] Parallel processing\n\n### Other\n\n- [ ] Documentation\n- [ ] Guides\n- [ ] Workflows (handle calculation pipelines)\n- [ ] More tests\n\n## Testing\n\nRun the tests with `crystal spec`.\n\n## Similar software\n\nThere are several libraries providing similar functionality. Here we list some\nof them and provide one or more reasons for why we didn't use them. However,\neach one of them is good in their own right so please do check them out if\n`chem.cr` does not work for you.\n\n- [Chemfiles](http://chemfiles.org/) is a library for reading and writing\n  chemistry files written in C++, but can also be used from other languages such\n  as Python. It is mainly focused on simulation trajectories and does not\n  provide an object-oriented topology access.\n- [OpenBabel](https://openbabel.org/wiki/Main_Page) is a massive C++ library\n  providing support for more than 110 formats. Its API is very complex to use.\n- [MDTraj](http://mdtraj.org/latest/), [MDAnalysis](http://www.mdanalysis.org/),\n  [cclib](https://cclib.github.io), [pymatgen](https://pymatgen.org),\n  [prody](http://prody.csb.pitt.edu), [Biopython](https://biopython.org) and\n  more are written in Python, which usually means two things: (1) no type safety\n  makes them sometimes difficult to use if there is not enough documentation\n  (more common than one may think), (2) one usually have to deal with C for\n  performance critical code.\n- [VMD](http://www.ks.uiuc.edu/Research/vmd/) and\n  [Schrodinger](https://schrodinger.com/) are very popular software for\n  molecular visualization that provide an API in Tcl and/or Python to manipulate\n  molecules. However, these usually suffer from poor documentation.\n\n## Contributing\n\n1. Fork it (<https://github.com/franciscoadasme/chem.cr/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [franciscoadasme](https://github.com/franciscoadasme) Francisco Adasme -\n  creator, maintainer\n\n## License\n\nLicensed under the MIT license, see the separate LICENSE file.\n\n[1]: https://crystal-lang.org\n[2]: https://en.wikipedia.org/wiki/Protein_Data_Bank_(file_format)\n[3]: https://crystal-lang.org/install\n[4]: https://crystal-lang.org/reference/using_the_compiler/#creating-a-crystal-project\n[5]: https://crystal-lang.org/reference/the_shards_command/\n[6]: https://crystal-lang.org/reference/syntax_and_semantics/requiring_files.html\n[7]: https://github.com/franciscoadasme/chem.cr/releases/latest\n","program":{"html_id":"chem.cr/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"locations":[],"repository_name":"chem.cr","program":true,"enum":false,"alias":false,"const":false,"constants":[{"id":"VERSION","name":"VERSION","value":"\"1.1.2\""},{"id":"VERSION_DATE","name":"VERSION_DATE","value":"\"2020-11-16\""}],"types":[{"html_id":"chem.cr/Array","path":"Array.html","kind":"class","full_name":"Array(T)","name":"Array","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"},{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"lib/views/src/views/array_view.cr","line_number":41,"url":null},{"filename":"src/chem/core_ext/array.cr","line_number":1,"url":null},{"filename":"src/chem/register_format.cr","line_number":270,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Indexable/Mutable","kind":"module","full_name":"Indexable::Mutable","name":"Mutable"}],"doc":"An `Array` is an ordered, integer-indexed collection of objects of type T.\n\nArray indexing starts at 0. A negative index is assumed to be\nrelative to the end of the array: -1 indicates the last element,\n-2 is the next to last element, and so on.\n\nAn `Array` can be created using the usual `new` method (several are provided), or with an array literal:\n\n```\nArray(Int32).new  # => []\n[1, 2, 3]         # Array(Int32)\n[1, \"hello\", 'x'] # Array(Int32 | String | Char)\n```\n\nSee [`Array` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/array.html) in the language reference.\n\nAn `Array` can have mixed types, meaning T will be a union of types, but these are determined\nwhen the array is created, either by specifying T or by using an array literal. In the latter\ncase, T will be set to the union of the array literal elements' types.\n\nWhen creating an empty array you must always specify T:\n\n```\n[] of Int32 # same as Array(Int32)\n[]          # syntax error\n```\n\nAn `Array` is implemented using an internal buffer of some capacity\nand is reallocated when elements are pushed to it when more capacity\nis needed. This is normally known as a [dynamic array](http://en.wikipedia.org/wiki/Dynamic_array).\n\nYou can use a special array literal syntax with other types too, as long as they define an argless\n`new` method and a `<<` method. `Set` is one such type:\n\n```\nset = Set{1, 2, 3} # => Set{1, 2, 3}\nset.class          # => Set(Int32)\n```\n\nThe above is the same as this:\n\n```\nset = Set(typeof(1, 2, 3)).new\nset << 1\nset << 2\nset << 3\n```","summary":"<p>An <code><a href=\"Array.html\">Array</a></code> is an ordered, integer-indexed collection of objects of type T.</p>","constructors":[{"html_id":"from_mol2(input:IO|Path|String,indexes:Array(Int)):self-class-method","name":"from_mol2","doc":"Creates a new array of `Chem::Structure` with the entries at\n*indexes* encoded in *input* using the `Chem::Mol2` file\nformat. Arguments are fowarded to `Chem::Mol2::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries at <em>indexes</em> encoded in <em>input</em> using the <code><a href=\"Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","external_name":"indexes","restriction":"Array(Int)"}],"args_string":"(input : IO | Path | String, indexes : Array(Int)) : self","args_html":"(input : IO | Path | String, indexes : <a href=\"Array.html\">Array</a>(Int)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_mol2","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","external_name":"indexes","restriction":"Array(Int)"}],"return_type":"self","visibility":"Public","body":"Chem::Mol2::Reader.open(input) do |reader|\n  (Array(T).new(indexes.size)).tap do |ary|\n    reader.each(indexes) do |obj|\n      ary << obj\n    end\n  end\nend"}},{"html_id":"from_mol2(input:IO|Path|String):self-class-method","name":"from_mol2","doc":"Creates a new array of `Chem::Structure` with the entries\nencoded in *input* using the `Chem::Mol2` file format.\nArguments are fowarded to `Chem::Mol2::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries encoded in <em>input</em> using the <code><a href=\"Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_mol2","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"{% if (type = @type) <= Array(Chem::Structure) %}{% else %}\n              {% raise(\"undefined method '.from_mol2' for #{type}.class\") %}\n            {% end %}\nChem::Mol2::Reader.open(input) do |reader|\n  Array(T).new.tap do |ary|\n    reader.each do |obj|\n      ary << obj\n    end\n  end\nend\n"}},{"html_id":"from_pdb(input:IO|Path|String,alt_loc:Char|Nil=nil,chains:Enumerable(Char)|String|Nil=nil,guess_bonds:Bool=false,het:Bool=true):self-class-method","name":"from_pdb","doc":"Creates a new array of `Chem::Structure` with the entries\nencoded in *input* using the `Chem::PDB` file format.\nArguments are fowarded to `Chem::PDB::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries encoded in <em>input</em> using the <code><a href=\"Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"}],"args_string":"(input : IO | Path | String, alt_loc : Char | Nil = nil, chains : Enumerable(Char) | String | Nil = nil, guess_bonds : Bool = false, het : Bool = true) : self","args_html":"(input : IO | Path | String, alt_loc : <a href=\"Char.html\">Char</a> | Nil = <span class=\"n\">nil</span>, chains : <a href=\"Enumerable.html\">Enumerable</a>(<a href=\"Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, guess_bonds : Bool = <span class=\"n\">false</span>, het : Bool = <span class=\"n\">true</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_pdb","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"{% if (type = @type) <= Array(Chem::Structure) %}{% else %}\n              {% raise(\"undefined method '.from_pdb' for #{type}.class\") %}\n            {% end %}\nChem::PDB::Reader.open(input, alt_loc, chains, guess_bonds, het) do |reader|\n  Array(T).new.tap do |ary|\n    reader.each do |obj|\n      ary << obj\n    end\n  end\nend\n"}},{"html_id":"from_pdb(input:IO|Path|String,indexes:Array(Int),alt_loc:Char|Nil=nil,chains:Enumerable(Char)|String|Nil=nil,guess_bonds:Bool=false,het:Bool=true):self-class-method","name":"from_pdb","doc":"Creates a new array of `Chem::Structure` with the entries at\n*indexes* encoded in *input* using the `Chem::PDB` file\nformat. Arguments are fowarded to `Chem::PDB::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries at <em>indexes</em> encoded in <em>input</em> using the <code><a href=\"Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","external_name":"indexes","restriction":"Array(Int)"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"}],"args_string":"(input : IO | Path | String, indexes : Array(Int), alt_loc : Char | Nil = nil, chains : Enumerable(Char) | String | Nil = nil, guess_bonds : Bool = false, het : Bool = true) : self","args_html":"(input : IO | Path | String, indexes : <a href=\"Array.html\">Array</a>(Int), alt_loc : <a href=\"Char.html\">Char</a> | Nil = <span class=\"n\">nil</span>, chains : <a href=\"Enumerable.html\">Enumerable</a>(<a href=\"Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, guess_bonds : Bool = <span class=\"n\">false</span>, het : Bool = <span class=\"n\">true</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_pdb","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","external_name":"indexes","restriction":"Array(Int)"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"Chem::PDB::Reader.open(input, alt_loc, chains, guess_bonds, het) do |reader|\n  (Array(T).new(indexes.size)).tap do |ary|\n    reader.each(indexes) do |obj|\n      ary << obj\n    end\n  end\nend"}},{"html_id":"from_sdf(input:IO|Path|String,indexes:Array(Int)):self-class-method","name":"from_sdf","doc":"Creates a new array of `Chem::Structure` with the entries at\n*indexes* encoded in *input* using the `Chem::SDF` file\nformat. Arguments are fowarded to `Chem::SDF::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries at <em>indexes</em> encoded in <em>input</em> using the <code><a href=\"Chem/SDF.html\">Chem::SDF</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","external_name":"indexes","restriction":"Array(Int)"}],"args_string":"(input : IO | Path | String, indexes : Array(Int)) : self","args_html":"(input : IO | Path | String, indexes : <a href=\"Array.html\">Array</a>(Int)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_sdf","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","external_name":"indexes","restriction":"Array(Int)"}],"return_type":"self","visibility":"Public","body":"Chem::SDF::Reader.open(input) do |reader|\n  (Array(T).new(indexes.size)).tap do |ary|\n    reader.each(indexes) do |obj|\n      ary << obj\n    end\n  end\nend"}},{"html_id":"from_sdf(input:IO|Path|String):self-class-method","name":"from_sdf","doc":"Creates a new array of `Chem::Structure` with the entries\nencoded in *input* using the `Chem::SDF` file format.\nArguments are fowarded to `Chem::SDF::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries encoded in <em>input</em> using the <code><a href=\"Chem/SDF.html\">Chem::SDF</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_sdf","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"{% if (type = @type) <= Array(Chem::Structure) %}{% else %}\n              {% raise(\"undefined method '.from_sdf' for #{type}.class\") %}\n            {% end %}\nChem::SDF::Reader.open(input) do |reader|\n  Array(T).new.tap do |ary|\n    reader.each do |obj|\n      ary << obj\n    end\n  end\nend\n"}},{"html_id":"from_xyz(input:IO|Path|String,guess_bonds:Bool=false,guess_names:Bool=false):self-class-method","name":"from_xyz","doc":"Creates a new array of `Chem::Structure` with the entries\nencoded in *input* using the `Chem::XYZ` file format.\nArguments are fowarded to `Chem::XYZ::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries encoded in <em>input</em> using the <code><a href=\"Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"args_string":"(input : IO | Path | String, guess_bonds : Bool = false, guess_names : Bool = false) : self","args_html":"(input : IO | Path | String, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_xyz","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"{% if (type = @type) <= Array(Chem::Structure) %}{% else %}\n              {% raise(\"undefined method '.from_xyz' for #{type}.class\") %}\n            {% end %}\nChem::XYZ::Reader.open(input, guess_bonds, guess_names) do |reader|\n  Array(T).new.tap do |ary|\n    reader.each do |obj|\n      ary << obj\n    end\n  end\nend\n"}},{"html_id":"from_xyz(input:IO|Path|String,indexes:Array(Int),guess_bonds:Bool=false,guess_names:Bool=false):self-class-method","name":"from_xyz","doc":"Creates a new array of `Chem::Structure` with the entries at\n*indexes* encoded in *input* using the `Chem::XYZ` file\nformat. Arguments are fowarded to `Chem::XYZ::Reader.open`.","summary":"<p>Creates a new array of <code><a href=\"Chem/Structure.html\">Chem::Structure</a></code> with the entries at <em>indexes</em> encoded in <em>input</em> using the <code><a href=\"Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","external_name":"indexes","restriction":"Array(Int)"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"args_string":"(input : IO | Path | String, indexes : Array(Int), guess_bonds : Bool = false, guess_names : Bool = false) : self","args_html":"(input : IO | Path | String, indexes : <a href=\"Array.html\">Array</a>(Int), guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_xyz","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"indexes","external_name":"indexes","restriction":"Array(Int)"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"Chem::XYZ::Reader.open(input, guess_bonds, guess_names) do |reader|\n  (Array(T).new(indexes.size)).tap do |ary|\n    reader.each(indexes) do |obj|\n      ary << obj\n    end\n  end\nend"}},{"html_id":"read(input:IO|Path|String,format:String):self-class-method","name":"read","doc":"Returns the entries encoded in the specified file using *format*.\nRaises `ArgumentError` if *format* is invalid.","summary":"<p>Returns the entries encoded in the specified file using <em>format</em>.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"String"}],"args_string":"(input : IO | Path | String, format : String) : self","args_html":"(input : IO | Path | String, format : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"read","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"String"}],"return_type":"self","visibility":"Public","body":"read(input, Chem::Format.parse(format))"}},{"html_id":"read(input:IO|Path|String,format:Chem::Format):self-class-method","name":"read","doc":"Returns the entries encoded in the specified file using *format*.\nRaises `ArgumentError` if *format* cannot read the element type or\nit is write only.","summary":"<p>Returns the entries encoded in the specified file using <em>format</em>.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"Chem::Format"}],"args_string":"(input : IO | Path | String, format : Chem::Format) : self","args_html":"(input : IO | Path | String, format : <a href=\"Chem/Format.html\">Chem::Format</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"read","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"Chem::Format"}],"return_type":"self","visibility":"Public","body":"{% if ![Chem::Structure].any? do |etype|\n  @type.type_vars[0] <= etype\nend %}\n        {% raise(\"undefined method 'read' for #{@type}.class\") %}\n      {% end %}\ncase format\nwhen .cube?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self}\"))\nwhen .dx?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self}\"))\nwhen .gen?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self}\"))\nwhen .mol?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self}\"))\nwhen .mol2?\n  {% if @type.type_vars[0] <= Chem::Structure.resolve %}\n                  Chem::Mol2::Reader.open(input) do |reader|\n                    {{ @type }}.new.tap do |ary|\n                      reader.each do |obj|\n                        ary << obj\n                      end\n                    end\n                  end\n                {% else %}\n                  raise ArgumentError.new(\"#{format} format cannot read #{self}\")\n                {% end %}\nwhen .pdb?\n  {% if @type.type_vars[0] <= Chem::Structure.resolve %}\n                  Chem::PDB::Reader.open(input) do |reader|\n                    {{ @type }}.new.tap do |ary|\n                      reader.each do |obj|\n                        ary << obj\n                      end\n                    end\n                  end\n                {% else %}\n                  raise ArgumentError.new(\"#{format} format cannot read #{self}\")\n                {% end %}\nwhen .psf?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self}\"))\nwhen .sdf?\n  {% if @type.type_vars[0] <= Chem::Structure.resolve %}\n                  Chem::SDF::Reader.open(input) do |reader|\n                    {{ @type }}.new.tap do |ary|\n                      reader.each do |obj|\n                        ary << obj\n                      end\n                    end\n                  end\n                {% else %}\n                  raise ArgumentError.new(\"#{format} format cannot read #{self}\")\n                {% end %}\nwhen .xyz?\n  {% if @type.type_vars[0] <= Chem::Structure.resolve %}\n                  Chem::XYZ::Reader.open(input) do |reader|\n                    {{ @type }}.new.tap do |ary|\n                      reader.each do |obj|\n                        ary << obj\n                      end\n                    end\n                  end\n                {% else %}\n                  raise ArgumentError.new(\"#{format} format cannot read #{self}\")\n                {% end %}\nwhen .chgcar?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self}\"))\nwhen .locpot?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self}\"))\nwhen .poscar?\n  raise(ArgumentError.new(\"#{format} format cannot read #{self}\"))\nelse\n  raise(ArgumentError.new(\"#{format} format is write only\"))\nend\n"}},{"html_id":"read(path:Path|String):self-class-method","name":"read","doc":"Returns the entries encoded in the specified file. The file format\nis chosen based on the filename (see `Chem::Format#from_filename`).\nRaises `ArgumentError` if the file format cannot be determined.","summary":"<p>Returns the entries encoded in the specified file.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"read","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"read(path, Chem::Format.from_filename(path))"}}],"instance_methods":[{"html_id":"sort(range:Range(Int,Int)):self-instance-method","name":"sort","abstract":false,"args":[{"name":"range","external_name":"range","restriction":"Range(Int, Int)"}],"args_string":"(range : Range(Int, Int)) : self","args_html":"(range : <a href=\"Range.html\">Range</a>(Int, Int)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core_ext/array.cr","line_number":2,"url":null},"def":{"name":"sort","args":[{"name":"range","external_name":"range","restriction":"Range(Int, Int)"}],"return_type":"self","visibility":"Public","body":"dup.sort!(range)"}},{"html_id":"sort(range:Range(Int,Int),&block:T,T->Int32|Nil):self-instance-method","name":"sort","abstract":false,"args":[{"name":"range","external_name":"range","restriction":"Range(Int, Int)"}],"args_string":"(range : Range(Int, Int), &block : T, T -> Int32 | Nil) : self","args_html":"(range : <a href=\"Range.html\">Range</a>(Int, Int), &block : T, T -> Int32 | Nil) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core_ext/array.cr","line_number":6,"url":null},"def":{"name":"sort","args":[{"name":"range","external_name":"range","restriction":"Range(Int, Int)"}],"yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(T, T -> Int32 | ::Nil)"},"return_type":"self","visibility":"Public","body":"dup.sort!(range, &block)"}},{"html_id":"sort!(range:Range(Int,Int)):self-instance-method","name":"sort!","abstract":false,"args":[{"name":"range","external_name":"range","restriction":"Range(Int, Int)"}],"args_string":"(range : Range(Int, Int)) : self","args_html":"(range : <a href=\"Range.html\">Range</a>(Int, Int)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core_ext/array.cr","line_number":10,"url":null},"def":{"name":"sort!","args":[{"name":"range","external_name":"range","restriction":"Range(Int, Int)"}],"return_type":"self","visibility":"Public","body":"start, count = (Indexable.range_to_index_and_count(range, size)) || (raise(IndexError.new))\nif start >= size\n  raise(IndexError.new)\nend\ncount = Math.min(count, size - start)\nif count > 1\n  (Slice.new(to_unsafe + start, count)).sort!\nend\nself\n"}},{"html_id":"sort!(range:Range(Int,Int),&block:T,T->Int32|Nil):self-instance-method","name":"sort!","abstract":false,"args":[{"name":"range","external_name":"range","restriction":"Range(Int, Int)"}],"args_string":"(range : Range(Int, Int), &block : T, T -> Int32 | Nil) : self","args_html":"(range : <a href=\"Range.html\">Range</a>(Int, Int), &block : T, T -> Int32 | Nil) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core_ext/array.cr","line_number":18,"url":null},"def":{"name":"sort!","args":[{"name":"range","external_name":"range","restriction":"Range(Int, Int)"}],"yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(T, T -> Int32 | ::Nil)"},"return_type":"self","visibility":"Public","body":"start, count = (Indexable.range_to_index_and_count(range, size)) || (raise(IndexError.new))\nif start >= size\n  raise(IndexError.new)\nend\ncount = Math.min(count, size - start)\nif count > 1\n  (Slice.new(to_unsafe + start, count)).sort!(&block)\nend\nself\n"}},{"html_id":"to_mol2(output:IO|Path|String):Nil-instance-method","name":"to_mol2","doc":"Writes the elements to *output* using the `Chem::Mol2` file\nformat. Arguments are fowarded to `Chem::Mol2::Writer.open`.","summary":"<p>Writes the elements to <em>output</em> using the <code><a href=\"Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_mol2","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"return_type":"Nil","visibility":"Public","body":"Chem::Mol2::Writer.open(output, total_entries: size) do |writer|\n  each do |obj|\n    writer << obj\n  end\nend"}},{"html_id":"to_mol2:String-instance-method","name":"to_mol2","doc":"Returns a string representation of the elements encoded in\nthe `Chem::Mol2` file format. Arguments are fowarded to\n`Chem::Mol2::Writer.open`.","summary":"<p>Returns a string representation of the elements encoded in the <code><a href=\"Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_mol2","return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_mol2(io)\nend"}},{"html_id":"to_pdb(bonds:Chem::PDB::Writer::BondOptions=Chem::PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,ter_on_fragment:Bool=false):String-instance-method","name":"to_pdb","doc":"Returns a string representation of the elements encoded in\nthe `Chem::PDB` file format. Arguments are fowarded to\n`Chem::PDB::Writer.open`.","summary":"<p>Returns a string representation of the elements encoded in the <code><a href=\"Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"}],"args_string":"(bonds : Chem::PDB::Writer::BondOptions = Chem::PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, ter_on_fragment : Bool = false) : String","args_html":"(bonds : <a href=\"Chem/PDB/Writer/BondOptions.html\">Chem::PDB::Writer::BondOptions</a> = <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, ter_on_fragment : Bool = <span class=\"n\">false</span>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_pdb","args":[{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"}],"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_pdb(io, bonds, renumber, ter_on_fragment)\nend"}},{"html_id":"to_pdb(output:IO|Path|String,bonds:Chem::PDB::Writer::BondOptions=Chem::PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,ter_on_fragment:Bool=false):Nil-instance-method","name":"to_pdb","doc":"Writes the elements to *output* using the `Chem::PDB` file\nformat. Arguments are fowarded to `Chem::PDB::Writer.open`.","summary":"<p>Writes the elements to <em>output</em> using the <code><a href=\"Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"}],"args_string":"(output : IO | Path | String, bonds : Chem::PDB::Writer::BondOptions = Chem::PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, ter_on_fragment : Bool = false) : Nil","args_html":"(output : IO | Path | String, bonds : <a href=\"Chem/PDB/Writer/BondOptions.html\">Chem::PDB::Writer::BondOptions</a> = <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, ter_on_fragment : Bool = <span class=\"n\">false</span>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_pdb","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"}],"return_type":"Nil","visibility":"Public","body":"Chem::PDB::Writer.open(output, bonds, renumber, ter_on_fragment, total_entries: size) do |writer|\n  each do |obj|\n    writer << obj\n  end\nend"}},{"html_id":"to_xyz(output:IO|Path|String):Nil-instance-method","name":"to_xyz","doc":"Writes the elements to *output* using the `Chem::XYZ` file\nformat. Arguments are fowarded to `Chem::XYZ::Writer.open`.","summary":"<p>Writes the elements to <em>output</em> using the <code><a href=\"Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_xyz","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"return_type":"Nil","visibility":"Public","body":"Chem::XYZ::Writer.open(output, total_entries: size) do |writer|\n  each do |obj|\n    writer << obj\n  end\nend"}},{"html_id":"to_xyz:String-instance-method","name":"to_xyz","doc":"Returns a string representation of the elements encoded in\nthe `Chem::XYZ` file format. Arguments are fowarded to\n`Chem::XYZ::Writer.open`.","summary":"<p>Returns a string representation of the elements encoded in the <code><a href=\"Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_xyz","return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_xyz(io)\nend"}},{"html_id":"write(output:IO|Path|String,format:String):Nil-instance-method","name":"write","doc":"Writes the elements to *output* using *format*. Raises\n`ArgumentError` if *format* is invalid.","summary":"<p>Writes the elements to <em>output</em> using <em>format</em>.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"String"}],"args_string":"(output : IO | Path | String, format : String) : Nil","args_html":"(output : IO | Path | String, format : String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"write","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"write(output, Chem::Format.parse(format))"}},{"html_id":"write(output:IO|Path|String,format:Chem::Format):Nil-instance-method","name":"write","doc":"Writes the elements to *output* using *format*. Raises\n`ArgumentError` if *format* cannot write the element type or it is\nread only.","summary":"<p>Writes the elements to <em>output</em> using <em>format</em>.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"Chem::Format"}],"args_string":"(output : IO | Path | String, format : Chem::Format) : Nil","args_html":"(output : IO | Path | String, format : <a href=\"Chem/Format.html\">Chem::Format</a>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"write","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"Chem::Format"}],"return_type":"Nil","visibility":"Public","body":"{% if ![Chem::AtomCollection].any? do |etype|\n  @type.type_vars[0] <= etype\nend %}\n        {% raise(\"undefined method 'write' for #{@type}\") %}\n      {% end %}\ncase format\nwhen .cube?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .dx?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .gen?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .mol2?\n  {% if @type.type_vars[0] <= Chem::AtomCollection.resolve %}\n                  Chem::Mol2::Writer.open(output, total_entries: size) do |writer|\n                    each do |obj|\n                      writer << obj\n                    end\n                  end\n                {% else %}\n                  raise ArgumentError.new(\"#{format} format cannot write #{self.class}\")\n                {% end %}\nwhen .pdb?\n  {% if @type.type_vars[0] <= Chem::AtomCollection.resolve %}\n                  Chem::PDB::Writer.open(output, total_entries: size) do |writer|\n                    each do |obj|\n                      writer << obj\n                    end\n                  end\n                {% else %}\n                  raise ArgumentError.new(\"#{format} format cannot write #{self.class}\")\n                {% end %}\nwhen .pymol?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .vmd?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .xyz?\n  {% if @type.type_vars[0] <= Chem::AtomCollection.resolve %}\n                  Chem::XYZ::Writer.open(output, total_entries: size) do |writer|\n                    each do |obj|\n                      writer << obj\n                    end\n                  end\n                {% else %}\n                  raise ArgumentError.new(\"#{format} format cannot write #{self.class}\")\n                {% end %}\nwhen .stride?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .chgcar?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .locpot?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nwhen .poscar?\n  raise(ArgumentError.new(\"#{format} format cannot write #{self.class}\"))\nelse\n  raise(ArgumentError.new(\"#{format} format is read only\"))\nend\n"}},{"html_id":"write(path:Path|String):Nil-instance-method","name":"write","doc":"Writes the elements to the specified file. The file format is chosen\nbased on the filename (see `Chem::Format#from_filename`). Raises\n`ArgumentError` if the file format cannot be determined.","summary":"<p>Writes the elements to the specified file.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : Nil","args_html":"(path : Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"write","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"Nil","visibility":"Public","body":"write(path, Chem::Format.from_filename(path))"}}]},{"html_id":"chem.cr/Char","path":"Char.html","kind":"struct","full_name":"Char","name":"Char","abstract":false,"superclass":{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"chem.cr/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core_ext/char.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"}],"doc":"A `Char` represents a [Unicode](http://en.wikipedia.org/wiki/Unicode) [code point](http://en.wikipedia.org/wiki/Code_point).\nIt occupies 32 bits.\n\nIt is created by enclosing an UTF-8 character in single quotes.\n\n```\n'a'\n'z'\n'0'\n'_'\n'あ'\n```\n\nYou can use a backslash to denote some characters:\n\n```\n'\\'' # single quote\n'\\\\' # backslash\n'\\e' # escape\n'\\f' # form feed\n'\\n' # newline\n'\\r' # carriage return\n'\\t' # tab\n'\\v' # vertical tab\n```\n\nYou can use a backslash followed by an *u* and four hexadecimal characters to denote a unicode codepoint written:\n\n```\n'\\u0041' # == 'A'\n```\n\nOr you can use curly braces and specify up to four hexadecimal numbers:\n\n```\n'\\u{41}' # == 'A'\n```\n\nSee [`Char` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/char.html) in the language reference.","summary":"<p>A <code><a href=\"Char.html\">Char</a></code> represents a <a href=\"http://en.wikipedia.org/wiki/Unicode\">Unicode</a> <a href=\"http://en.wikipedia.org/wiki/Code_point\">code point</a>.</p>","instance_methods":[{"html_id":"presence-instance-method","name":"presence","abstract":false,"location":{"filename":"src/chem/core_ext/char.cr","line_number":2,"url":null},"def":{"name":"presence","visibility":"Public","body":"if ascii_whitespace?\nelse\n  self\nend"}}]},{"html_id":"chem.cr/Chem","path":"Chem.html","kind":"module","full_name":"Chem","name":"Chem","abstract":false,"locations":[{"filename":"src/chem.cr","line_number":37,"url":null},{"filename":"src/chem/connectivity.cr","line_number":1,"url":null},{"filename":"src/chem/core/atom.cr","line_number":1,"url":null},{"filename":"src/chem/core/atom_collection.cr","line_number":1,"url":null},{"filename":"src/chem/core/atom_view.cr","line_number":1,"url":null},{"filename":"src/chem/core/bias.cr","line_number":1,"url":null},{"filename":"src/chem/core/bond_array.cr","line_number":1,"url":null},{"filename":"src/chem/core/chain.cr","line_number":1,"url":null},{"filename":"src/chem/core/chain_collection.cr","line_number":1,"url":null},{"filename":"src/chem/core/chain_view.cr","line_number":1,"url":null},{"filename":"src/chem/core/residue_collection.cr","line_number":1,"url":null},{"filename":"src/chem/core/residue_view.cr","line_number":1,"url":null},{"filename":"src/chem/core/structure.cr","line_number":1,"url":null},{"filename":"src/chem/core/structure/builder.cr","line_number":1,"url":null},{"filename":"src/chem/format.cr","line_number":1,"url":null},{"filename":"src/chem/format_reader.cr","line_number":1,"url":null},{"filename":"src/chem/format_writer.cr","line_number":1,"url":null},{"filename":"src/chem/pull_parser.cr","line_number":1,"url":null},{"filename":"src/chem/register_format.cr","line_number":1,"url":null},{"filename":"src/chem/spatial/transform.cr","line_number":1,"url":null},{"filename":"src/chem/version.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"Log","name":"Log","value":"::Log.for(\"chem\")"},{"id":"VERSION","name":"VERSION","value":"\"0.1.0\""}],"types":[{"html_id":"chem.cr/Chem/Angle","path":"Chem/Angle.html","kind":"struct","full_name":"Chem::Angle","name":"Angle","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Chem/Connectivity","kind":"module","full_name":"Chem::Connectivity","name":"Connectivity"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/connectivity.cr","line_number":192,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/Connectivity","kind":"module","full_name":"Chem::Connectivity","name":"Connectivity"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"An `Angle` provides a canonical representation of an angle between\nthree bonded atoms.\n\nAn angle is defined by two contiguous bonds:\n\n    A       C\n      \\   /\n        B\n\nIt measures the angle between the two vectors defined by the atoms\n(A,B) and (B,C).","summary":"<p>An <code><a href=\"../Chem/Angle.html\">Angle</a></code> provides a canonical representation of an angle between three bonded atoms.</p>","constructors":[{"html_id":"new(a1:Atom,a2:Atom,a3:Atom)-class-method","name":"new","doc":"Creates a new *Angle* with the given atoms.","summary":"<p>Creates a new <em>Angle</em> with the given atoms.</p>","abstract":false,"args":[{"name":"a1","external_name":"a1","restriction":"Atom"},{"name":"a2","external_name":"a2","restriction":"Atom"},{"name":"a3","external_name":"a3","restriction":"Atom"}],"args_string":"(a1 : Atom, a2 : Atom, a3 : Atom)","args_html":"(a1 : <a href=\"../Chem/Atom.html\">Atom</a>, a2 : <a href=\"../Chem/Atom.html\">Atom</a>, a3 : <a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/connectivity.cr","line_number":196,"url":null},"def":{"name":"new","args":[{"name":"a1","external_name":"a1","restriction":"Atom"},{"name":"a2","external_name":"a2","restriction":"Atom"},{"name":"a3","external_name":"a3","restriction":"Atom"}],"visibility":"Public","body":"_ = allocate\n_.initialize(a1, a2, a3)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"measure:Float64-instance-method","name":"measure","doc":"Returns the current value of the angle in radians.","summary":"<p>Returns the current value of the angle in radians.</p>","abstract":false,"location":{"filename":"src/chem/connectivity.cr","line_number":203,"url":null},"def":{"name":"measure","return_type":"Float64","visibility":"Public","body":"Spatial.angle(*@atoms.map(&.coords))"}}]},{"html_id":"chem.cr/Chem/Atom","path":"Chem/Atom.html","kind":"class","full_name":"Chem::Atom","name":"Atom","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/atom.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"constructors":[{"html_id":"new(residue:Residue,serial:Int32,element:Element,name:String,coords:Spatial::Vec3,typename:String|Nil=nil,formal_charge:Int32=0,mass:Float64=element.mass,occupancy:Float64=1,partial_charge:Float64=0.0,temperature_factor:Float64=0,vdw_radius:Float64=element.vdw_radius)-class-method","name":"new","abstract":false,"args":[{"name":"residue","external_name":"residue","restriction":"Residue"},{"name":"serial","external_name":"serial","restriction":"Int32"},{"name":"element","external_name":"element","restriction":"Element"},{"name":"name","external_name":"name","restriction":"String"},{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"},{"name":"typename","default_value":"nil","external_name":"typename","restriction":"String | ::Nil"},{"name":"formal_charge","default_value":"0","external_name":"formal_charge","restriction":"Int32"},{"name":"mass","default_value":"element.mass","external_name":"mass","restriction":"Float64"},{"name":"occupancy","default_value":"1","external_name":"occupancy","restriction":"Float64"},{"name":"partial_charge","default_value":"0.0","external_name":"partial_charge","restriction":"Float64"},{"name":"temperature_factor","default_value":"0","external_name":"temperature_factor","restriction":"Float64"},{"name":"vdw_radius","default_value":"element.vdw_radius","external_name":"vdw_radius","restriction":"Float64"}],"args_string":"(residue : Residue, serial : Int32, element : Element, name : String, coords : Spatial::Vec3, typename : String | Nil = nil, formal_charge : Int32 = 0, mass : Float64 = element.mass, occupancy : Float64 = 1, partial_charge : Float64 = 0.0, temperature_factor : Float64 = 0, vdw_radius : Float64 = element.vdw_radius)","args_html":"(residue : <a href=\"../Chem/Residue.html\">Residue</a>, serial : Int32, element : <a href=\"../Chem/Element.html\">Element</a>, name : String, coords : <a href=\"../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, typename : String | Nil = <span class=\"n\">nil</span>, formal_charge : Int32 = <span class=\"n\">0</span>, mass : Float64 = element.mass, occupancy : Float64 = <span class=\"n\">1</span>, partial_charge : Float64 = <span class=\"n\">0.0</span>, temperature_factor : Float64 = <span class=\"n\">0</span>, vdw_radius : Float64 = element.vdw_radius)","location":{"filename":"src/chem/core/atom.cr","line_number":26,"url":null},"def":{"name":"new","args":[{"name":"residue","external_name":"residue","restriction":"Residue"},{"name":"serial","external_name":"serial","restriction":"Int32"},{"name":"element","external_name":"element","restriction":"Element"},{"name":"name","external_name":"name","restriction":"String"},{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"},{"name":"typename","default_value":"nil","external_name":"typename","restriction":"String | ::Nil"},{"name":"formal_charge","default_value":"0","external_name":"formal_charge","restriction":"Int32"},{"name":"mass","default_value":"element.mass","external_name":"mass","restriction":"Float64"},{"name":"occupancy","default_value":"1","external_name":"occupancy","restriction":"Float64"},{"name":"partial_charge","default_value":"0.0","external_name":"partial_charge","restriction":"Float64"},{"name":"temperature_factor","default_value":"0","external_name":"temperature_factor","restriction":"Float64"},{"name":"vdw_radius","default_value":"element.vdw_radius","external_name":"vdw_radius","restriction":"Float64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(residue, serial, element, name, coords, typename, formal_charge, mass, occupancy, partial_charge, temperature_factor, vdw_radius)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<=>(other:self):Int32-instance-method","name":"<=>","doc":"The comparison operator.\n\nReturns `-1`, `0` or `1` depending on whether `self` precedes\n*rhs*, equals to *rhs* or comes after *rhs*. The comparison is\ndone based on atom serial.\n\n```\natoms = Structure.read(\"peptide.pdb\").atoms\n\natoms[0] <=> atoms[1] # => -1\natoms[1] <=> atoms[1] # => 0\natoms[2] <=> atoms[1] # => 1\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Int32","args_html":"(other : <span class=\"k\">self</span>) : Int32","location":{"filename":"src/chem/core/atom.cr","line_number":97,"url":null},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Int32","visibility":"Public","body":"@serial <=> other.serial"}},{"html_id":"===(atom_t:Templates::Atom):Bool-instance-method","name":"===","doc":"Case equality. This is equivalent to `#matches?`.\n\n```\nstructure = Structure.read \"peptide.pdb\"\ndesc = case structure.dig('A', 5, \"CA\")\n       when Templates::Atom(\"C\")  then \"carbonyl carbon\"\n       when Templates::Atom(\"CA\") then \"alpha carbon\"\n       when Templates::Atom(\"CB\") then \"beta carbon\"\n       when Templates::Atom(\"CG\") then \"gamma carbon\"\n       when Templates::Atom(\"CD\") then \"delta carbon\"\n       when PeriodicTable::C         then \"carbon\"\n       else                               \"non-carbon\"\n       end\ndesc # => \"alpha carbon\"\n```","summary":"<p>Case equality.</p>","abstract":false,"args":[{"name":"atom_t","external_name":"atom_t","restriction":"Templates::Atom"}],"args_string":"(atom_t : Templates::Atom) : Bool","args_html":"(atom_t : <a href=\"../Chem/Templates/Atom.html\">Templates::Atom</a>) : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":60,"url":null},"def":{"name":"===","args":[{"name":"atom_t","external_name":"atom_t","restriction":"Templates::Atom"}],"return_type":"Bool","visibility":"Public","body":"matches?(atom_t)"}},{"html_id":"===(element:Element):Bool-instance-method","name":"===","doc":"Case equality. Returns true if atom's element is *element*,\notherwise false.\n\n```\nstructure = Structure.read \"peptide.pdb\"\ndesc = case structure.dig('A', 5, \"CK\")\n       when Templates::Atom(\"C\")  then \"carbonyl carbon\"\n       when Templates::Atom(\"CA\") then \"alpha carbon\"\n       when Templates::Atom(\"CB\") then \"beta carbon\"\n       when Templates::Atom(\"CG\") then \"gamma carbon\"\n       when Templates::Atom(\"CD\") then \"delta carbon\"\n       when PeriodicTable::C         then \"carbon\"\n       else                               \"non-carbon\"\n       end\ndesc # => \"non-carbon\"\n```","summary":"<p>Case equality.</p>","abstract":false,"args":[{"name":"element","external_name":"element","restriction":"Element"}],"args_string":"(element : Element) : Bool","args_html":"(element : <a href=\"../Chem/Element.html\">Element</a>) : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":80,"url":null},"def":{"name":"===","args":[{"name":"element","external_name":"element","restriction":"Element"}],"return_type":"Bool","visibility":"Public","body":"@element == element"}},{"html_id":"actinium?-instance-method","name":"actinium?","doc":"Returns `true` if the atom's element is \"Actinium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Actinium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"actinium?","visibility":"Public","body":"@element.actinium?"}},{"html_id":"aluminum?-instance-method","name":"aluminum?","doc":"Returns `true` if the atom's element is \"Aluminum\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Aluminum&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"aluminum?","visibility":"Public","body":"@element.aluminum?"}},{"html_id":"americium?-instance-method","name":"americium?","doc":"Returns `true` if the atom's element is \"Americium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Americium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"americium?","visibility":"Public","body":"@element.americium?"}},{"html_id":"antimony?-instance-method","name":"antimony?","doc":"Returns `true` if the atom's element is \"Antimony\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Antimony&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"antimony?","visibility":"Public","body":"@element.antimony?"}},{"html_id":"argon?-instance-method","name":"argon?","doc":"Returns `true` if the atom's element is \"Argon\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Argon&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"argon?","visibility":"Public","body":"@element.argon?"}},{"html_id":"arsenic?-instance-method","name":"arsenic?","doc":"Returns `true` if the atom's element is \"Arsenic\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Arsenic&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"arsenic?","visibility":"Public","body":"@element.arsenic?"}},{"html_id":"astatine?-instance-method","name":"astatine?","doc":"Returns `true` if the atom's element is \"Astatine\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Astatine&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"astatine?","visibility":"Public","body":"@element.astatine?"}},{"html_id":"atomic_number(*args,**options)-instance-method","name":"atomic_number","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":24,"url":null},"def":{"name":"atomic_number","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@element.atomic_number(*args, **options)"}},{"html_id":"atomic_number(*args,**options,&)-instance-method","name":"atomic_number","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":24,"url":null},"def":{"name":"atomic_number","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@element.atomic_number(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"barium?-instance-method","name":"barium?","doc":"Returns `true` if the atom's element is \"Barium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Barium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"barium?","visibility":"Public","body":"@element.barium?"}},{"html_id":"berkelium?-instance-method","name":"berkelium?","doc":"Returns `true` if the atom's element is \"Berkelium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Berkelium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"berkelium?","visibility":"Public","body":"@element.berkelium?"}},{"html_id":"beryllium?-instance-method","name":"beryllium?","doc":"Returns `true` if the atom's element is \"Beryllium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Beryllium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"beryllium?","visibility":"Public","body":"@element.beryllium?"}},{"html_id":"bismuth?-instance-method","name":"bismuth?","doc":"Returns `true` if the atom's element is \"Bismuth\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Bismuth&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"bismuth?","visibility":"Public","body":"@element.bismuth?"}},{"html_id":"bohrium?-instance-method","name":"bohrium?","doc":"Returns `true` if the atom's element is \"Bohrium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Bohrium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"bohrium?","visibility":"Public","body":"@element.bohrium?"}},{"html_id":"bonded?(toother:self):Bool-instance-method","name":"bonded?","abstract":false,"args":[{"name":"other","external_name":"to","restriction":"self"}],"args_string":"(to other : self) : Bool","args_html":"(to other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":101,"url":null},"def":{"name":"bonded?","args":[{"name":"other","external_name":"to","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"bonds.any? do |__arg0|\n  (__arg0.other(self)) == other\nend"}},{"html_id":"bonded_atoms:Array(Atom)-instance-method","name":"bonded_atoms","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":105,"url":null},"def":{"name":"bonded_atoms","return_type":"Array(Atom)","visibility":"Public","body":"bonds.map(&.other(self))"}},{"html_id":"bonds:BondArray-instance-method","name":"bonds","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":5,"url":null},"def":{"name":"bonds","return_type":"BondArray","visibility":"Public","body":"if (value = @bonds).nil?\n  @bonds = (BondArray.new(self))\nelse\n  value\nend"}},{"html_id":"boron?-instance-method","name":"boron?","doc":"Returns `true` if the atom's element is \"Boron\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Boron&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"boron?","visibility":"Public","body":"@element.boron?"}},{"html_id":"bromine?-instance-method","name":"bromine?","doc":"Returns `true` if the atom's element is \"Bromine\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Bromine&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"bromine?","visibility":"Public","body":"@element.bromine?"}},{"html_id":"cadmium?-instance-method","name":"cadmium?","doc":"Returns `true` if the atom's element is \"Cadmium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Cadmium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"cadmium?","visibility":"Public","body":"@element.cadmium?"}},{"html_id":"calcium?-instance-method","name":"calcium?","doc":"Returns `true` if the atom's element is \"Calcium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Calcium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"calcium?","visibility":"Public","body":"@element.calcium?"}},{"html_id":"californium?-instance-method","name":"californium?","doc":"Returns `true` if the atom's element is \"Californium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Californium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"californium?","visibility":"Public","body":"@element.californium?"}},{"html_id":"carbon?-instance-method","name":"carbon?","doc":"Returns `true` if the atom's element is \"Carbon\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Carbon&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"carbon?","visibility":"Public","body":"@element.carbon?"}},{"html_id":"cerium?-instance-method","name":"cerium?","doc":"Returns `true` if the atom's element is \"Cerium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Cerium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"cerium?","visibility":"Public","body":"@element.cerium?"}},{"html_id":"cesium?-instance-method","name":"cesium?","doc":"Returns `true` if the atom's element is \"Cesium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Cesium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"cesium?","visibility":"Public","body":"@element.cesium?"}},{"html_id":"chain(*args,**options)-instance-method","name":"chain","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":23,"url":null},"def":{"name":"chain","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@residue.chain(*args, **options)"}},{"html_id":"chain(*args,**options,&)-instance-method","name":"chain","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":23,"url":null},"def":{"name":"chain","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@residue.chain(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"chlorine?-instance-method","name":"chlorine?","doc":"Returns `true` if the atom's element is \"Chlorine\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Chlorine&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"chlorine?","visibility":"Public","body":"@element.chlorine?"}},{"html_id":"chromium?-instance-method","name":"chromium?","doc":"Returns `true` if the atom's element is \"Chromium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Chromium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"chromium?","visibility":"Public","body":"@element.chromium?"}},{"html_id":"cobalt?-instance-method","name":"cobalt?","doc":"Returns `true` if the atom's element is \"Cobalt\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Cobalt&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"cobalt?","visibility":"Public","body":"@element.cobalt?"}},{"html_id":"constraint:Constraint|Nil-instance-method","name":"constraint","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":6,"url":null},"def":{"name":"constraint","return_type":"Constraint | ::Nil","visibility":"Public","body":"@constraint"}},{"html_id":"constraint=(constraint:Constraint|Nil)-instance-method","name":"constraint=","abstract":false,"args":[{"name":"constraint","external_name":"constraint","restriction":"Constraint | ::Nil"}],"args_string":"(constraint : Constraint | Nil)","args_html":"(constraint : <a href=\"../Chem/Constraint.html\">Constraint</a> | Nil)","location":{"filename":"src/chem/core/atom.cr","line_number":6,"url":null},"def":{"name":"constraint=","args":[{"name":"constraint","external_name":"constraint","restriction":"Constraint | ::Nil"}],"visibility":"Public","body":"@constraint = constraint"}},{"html_id":"coords:Spatial::Vec3-instance-method","name":"coords","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":7,"url":null},"def":{"name":"coords","return_type":"Spatial::Vec3","visibility":"Public","body":"@coords"}},{"html_id":"coords=(coords:Spatial::Vec3)-instance-method","name":"coords=","abstract":false,"args":[{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"}],"args_string":"(coords : Spatial::Vec3)","args_html":"(coords : <a href=\"../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>)","location":{"filename":"src/chem/core/atom.cr","line_number":7,"url":null},"def":{"name":"coords=","args":[{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"}],"visibility":"Public","body":"@coords = coords"}},{"html_id":"copernicium?-instance-method","name":"copernicium?","doc":"Returns `true` if the atom's element is \"Copernicium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Copernicium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"copernicium?","visibility":"Public","body":"@element.copernicium?"}},{"html_id":"copper?-instance-method","name":"copper?","doc":"Returns `true` if the atom's element is \"Copper\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Copper&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"copper?","visibility":"Public","body":"@element.copper?"}},{"html_id":"covalent_radius(*args,**options)-instance-method","name":"covalent_radius","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":24,"url":null},"def":{"name":"covalent_radius","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@element.covalent_radius(*args, **options)"}},{"html_id":"covalent_radius(*args,**options,&)-instance-method","name":"covalent_radius","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":24,"url":null},"def":{"name":"covalent_radius","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@element.covalent_radius(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"curium?-instance-method","name":"curium?","doc":"Returns `true` if the atom's element is \"Curium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Curium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"curium?","visibility":"Public","body":"@element.curium?"}},{"html_id":"darmstadtium?-instance-method","name":"darmstadtium?","doc":"Returns `true` if the atom's element is \"Darmstadtium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Darmstadtium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"darmstadtium?","visibility":"Public","body":"@element.darmstadtium?"}},{"html_id":"degree:Int32-instance-method","name":"degree","doc":"Returns the number of bonds.","summary":"<p>Returns the number of bonds.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":110,"url":null},"def":{"name":"degree","return_type":"Int32","visibility":"Public","body":"bonds.size"}},{"html_id":"dna?:Bool-instance-method","name":"dna?","doc":"Returns `true` if the atom belongs to a dna\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a dna residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":203,"url":null},"def":{"name":"dna?","return_type":"Bool","visibility":"Public","body":"@residue.dna?"}},{"html_id":"dubnium?-instance-method","name":"dubnium?","doc":"Returns `true` if the atom's element is \"Dubnium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Dubnium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"dubnium?","visibility":"Public","body":"@element.dubnium?"}},{"html_id":"dysprosium?-instance-method","name":"dysprosium?","doc":"Returns `true` if the atom's element is \"Dysprosium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Dysprosium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"dysprosium?","visibility":"Public","body":"@element.dysprosium?"}},{"html_id":"each_bonded_atom:Iterator(Atom)-instance-method","name":"each_bonded_atom","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":114,"url":null},"def":{"name":"each_bonded_atom","return_type":"Iterator(Atom)","visibility":"Public","body":"bonds.each.map(&.other(self))"}},{"html_id":"each_bonded_atom(&:self->):Nil-instance-method","name":"each_bonded_atom","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":118,"url":null},"def":{"name":"each_bonded_atom","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"return_type":"Nil","visibility":"Public","body":"bonds.each do |bond|\n  yield bond.other(self)\nend"}},{"html_id":"einsteinium?-instance-method","name":"einsteinium?","doc":"Returns `true` if the atom's element is \"Einsteinium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Einsteinium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"einsteinium?","visibility":"Public","body":"@element.einsteinium?"}},{"html_id":"element:Element-instance-method","name":"element","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":8,"url":null},"def":{"name":"element","return_type":"Element","visibility":"Public","body":"@element"}},{"html_id":"element=(element:Element)-instance-method","name":"element=","abstract":false,"args":[{"name":"element","external_name":"element","restriction":"Element"}],"args_string":"(element : Element)","args_html":"(element : <a href=\"../Chem/Element.html\">Element</a>)","location":{"filename":"src/chem/core/atom.cr","line_number":8,"url":null},"def":{"name":"element=","args":[{"name":"element","external_name":"element","restriction":"Element"}],"visibility":"Public","body":"@element = element"}},{"html_id":"erbium?-instance-method","name":"erbium?","doc":"Returns `true` if the atom's element is \"Erbium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Erbium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"erbium?","visibility":"Public","body":"@element.erbium?"}},{"html_id":"europium?-instance-method","name":"europium?","doc":"Returns `true` if the atom's element is \"Europium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Europium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"europium?","visibility":"Public","body":"@element.europium?"}},{"html_id":"fermium?-instance-method","name":"fermium?","doc":"Returns `true` if the atom's element is \"Fermium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Fermium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"fermium?","visibility":"Public","body":"@element.fermium?"}},{"html_id":"flerovium?-instance-method","name":"flerovium?","doc":"Returns `true` if the atom's element is \"Flerovium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Flerovium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"flerovium?","visibility":"Public","body":"@element.flerovium?"}},{"html_id":"fluorine?-instance-method","name":"fluorine?","doc":"Returns `true` if the atom's element is \"Fluorine\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Fluorine&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"fluorine?","visibility":"Public","body":"@element.fluorine?"}},{"html_id":"formal_charge:Int32-instance-method","name":"formal_charge","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":9,"url":null},"def":{"name":"formal_charge","return_type":"Int32","visibility":"Public","body":"@formal_charge"}},{"html_id":"formal_charge=(formal_charge:Int32)-instance-method","name":"formal_charge=","abstract":false,"args":[{"name":"formal_charge","external_name":"formal_charge","restriction":"Int32"}],"args_string":"(formal_charge : Int32)","args_html":"(formal_charge : Int32)","location":{"filename":"src/chem/core/atom.cr","line_number":9,"url":null},"def":{"name":"formal_charge=","args":[{"name":"formal_charge","external_name":"formal_charge","restriction":"Int32"}],"visibility":"Public","body":"@formal_charge = formal_charge"}},{"html_id":"francium?-instance-method","name":"francium?","doc":"Returns `true` if the atom's element is \"Francium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Francium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"francium?","visibility":"Public","body":"@element.francium?"}},{"html_id":"gadolinium?-instance-method","name":"gadolinium?","doc":"Returns `true` if the atom's element is \"Gadolinium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Gadolinium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"gadolinium?","visibility":"Public","body":"@element.gadolinium?"}},{"html_id":"gallium?-instance-method","name":"gallium?","doc":"Returns `true` if the atom's element is \"Gallium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Gallium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"gallium?","visibility":"Public","body":"@element.gallium?"}},{"html_id":"germanium?-instance-method","name":"germanium?","doc":"Returns `true` if the atom's element is \"Germanium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Germanium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"germanium?","visibility":"Public","body":"@element.germanium?"}},{"html_id":"gold?-instance-method","name":"gold?","doc":"Returns `true` if the atom's element is \"Gold\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Gold&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"gold?","visibility":"Public","body":"@element.gold?"}},{"html_id":"hafnium?-instance-method","name":"hafnium?","doc":"Returns `true` if the atom's element is \"Hafnium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Hafnium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"hafnium?","visibility":"Public","body":"@element.hafnium?"}},{"html_id":"hassium?-instance-method","name":"hassium?","doc":"Returns `true` if the atom's element is \"Hassium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Hassium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"hassium?","visibility":"Public","body":"@element.hassium?"}},{"html_id":"heavy?(*args,**options)-instance-method","name":"heavy?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":24,"url":null},"def":{"name":"heavy?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@element.heavy?(*args, **options)"}},{"html_id":"heavy?(*args,**options,&)-instance-method","name":"heavy?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":24,"url":null},"def":{"name":"heavy?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@element.heavy?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"helium?-instance-method","name":"helium?","doc":"Returns `true` if the atom's element is \"Helium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Helium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"helium?","visibility":"Public","body":"@element.helium?"}},{"html_id":"het?:Bool-instance-method","name":"het?","doc":"Returns `true` if the atom belongs to a non-standard (HET)\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a non-standard (HET) residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":126,"url":null},"def":{"name":"het?","return_type":"Bool","visibility":"Public","body":"@residue.het?"}},{"html_id":"holmium?-instance-method","name":"holmium?","doc":"Returns `true` if the atom's element is \"Holmium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Holmium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"holmium?","visibility":"Public","body":"@element.holmium?"}},{"html_id":"hydrogen?-instance-method","name":"hydrogen?","doc":"Returns `true` if the atom's element is \"Hydrogen\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Hydrogen&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"hydrogen?","visibility":"Public","body":"@element.hydrogen?"}},{"html_id":"indium?-instance-method","name":"indium?","doc":"Returns `true` if the atom's element is \"Indium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Indium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"indium?","visibility":"Public","body":"@element.indium?"}},{"html_id":"iodine?-instance-method","name":"iodine?","doc":"Returns `true` if the atom's element is \"Iodine\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Iodine&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"iodine?","visibility":"Public","body":"@element.iodine?"}},{"html_id":"ion?:Bool-instance-method","name":"ion?","doc":"Returns `true` if the atom belongs to a ion\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a ion residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":203,"url":null},"def":{"name":"ion?","return_type":"Bool","visibility":"Public","body":"@residue.ion?"}},{"html_id":"iridium?-instance-method","name":"iridium?","doc":"Returns `true` if the atom's element is \"Iridium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Iridium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"iridium?","visibility":"Public","body":"@element.iridium?"}},{"html_id":"iron?-instance-method","name":"iron?","doc":"Returns `true` if the atom's element is \"Iron\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Iron&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"iron?","visibility":"Public","body":"@element.iron?"}},{"html_id":"krypton?-instance-method","name":"krypton?","doc":"Returns `true` if the atom's element is \"Krypton\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Krypton&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"krypton?","visibility":"Public","body":"@element.krypton?"}},{"html_id":"lanthanum?-instance-method","name":"lanthanum?","doc":"Returns `true` if the atom's element is \"Lanthanum\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Lanthanum&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"lanthanum?","visibility":"Public","body":"@element.lanthanum?"}},{"html_id":"lawrencium?-instance-method","name":"lawrencium?","doc":"Returns `true` if the atom's element is \"Lawrencium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Lawrencium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"lawrencium?","visibility":"Public","body":"@element.lawrencium?"}},{"html_id":"lead?-instance-method","name":"lead?","doc":"Returns `true` if the atom's element is \"Lead\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Lead&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"lead?","visibility":"Public","body":"@element.lead?"}},{"html_id":"lithium?-instance-method","name":"lithium?","doc":"Returns `true` if the atom's element is \"Lithium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Lithium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"lithium?","visibility":"Public","body":"@element.lithium?"}},{"html_id":"livermorium?-instance-method","name":"livermorium?","doc":"Returns `true` if the atom's element is \"Livermorium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Livermorium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"livermorium?","visibility":"Public","body":"@element.livermorium?"}},{"html_id":"lutetium?-instance-method","name":"lutetium?","doc":"Returns `true` if the atom's element is \"Lutetium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Lutetium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"lutetium?","visibility":"Public","body":"@element.lutetium?"}},{"html_id":"magnesium?-instance-method","name":"magnesium?","doc":"Returns `true` if the atom's element is \"Magnesium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Magnesium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"magnesium?","visibility":"Public","body":"@element.magnesium?"}},{"html_id":"manganese?-instance-method","name":"manganese?","doc":"Returns `true` if the atom's element is \"Manganese\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Manganese&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"manganese?","visibility":"Public","body":"@element.manganese?"}},{"html_id":"mass:Float64-instance-method","name":"mass","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":11,"url":null},"def":{"name":"mass","return_type":"Float64","visibility":"Public","body":"@mass"}},{"html_id":"mass=(mass:Float64)-instance-method","name":"mass=","abstract":false,"args":[{"name":"mass","external_name":"mass","restriction":"Float64"}],"args_string":"(mass : Float64)","args_html":"(mass : Float64)","location":{"filename":"src/chem/core/atom.cr","line_number":11,"url":null},"def":{"name":"mass=","args":[{"name":"mass","external_name":"mass","restriction":"Float64"}],"visibility":"Public","body":"@mass = mass"}},{"html_id":"matches?(atom_t:Templates::Atom):Bool-instance-method","name":"matches?","doc":"Returns `true` if the atom matches the given template, else\n`false`.\n\nChecking for a match considers both atom name and element.\n\n```\natom = Structure.read(\"peptide.pdb\").dig 'A', 1, \"CA\"\natom.match?(Templates::Atom.new(\"CA\"))               # => true\natom.match?(Templates::Atom.new(\"CA\", element: \"N\")) # => false\natom.match?(Templates::Atom.new(\"ND2\"))              # => false\n```\nTODO: compare topology via Templates::Atom#top_spec","summary":"<p>Returns <code>true</code> if the atom matches the given template, else <code>false</code>.</p>","abstract":false,"args":[{"name":"atom_t","external_name":"atom_t","restriction":"Templates::Atom"}],"args_string":"(atom_t : Templates::Atom) : Bool","args_html":"(atom_t : <a href=\"../Chem/Templates/Atom.html\">Templates::Atom</a>) : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":142,"url":null},"def":{"name":"matches?","args":[{"name":"atom_t","external_name":"atom_t","restriction":"Templates::Atom"}],"return_type":"Bool","visibility":"Public","body":"(@name == atom_t.name) && (@element == atom_t.element)"}},{"html_id":"max_valence(*args,**options)-instance-method","name":"max_valence","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":24,"url":null},"def":{"name":"max_valence","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@element.max_valence(*args, **options)"}},{"html_id":"max_valence(*args,**options,&)-instance-method","name":"max_valence","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":24,"url":null},"def":{"name":"max_valence","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@element.max_valence(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"meitnerium?-instance-method","name":"meitnerium?","doc":"Returns `true` if the atom's element is \"Meitnerium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Meitnerium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"meitnerium?","visibility":"Public","body":"@element.meitnerium?"}},{"html_id":"membrane?:Bool-instance-method","name":"membrane?","doc":"Returns `true` if the atom belongs to a membrane\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a membrane residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":203,"url":null},"def":{"name":"membrane?","return_type":"Bool","visibility":"Public","body":"@residue.membrane?"}},{"html_id":"mendelevium?-instance-method","name":"mendelevium?","doc":"Returns `true` if the atom's element is \"Mendelevium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Mendelevium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"mendelevium?","visibility":"Public","body":"@element.mendelevium?"}},{"html_id":"mercury?-instance-method","name":"mercury?","doc":"Returns `true` if the atom's element is \"Mercury\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Mercury&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"mercury?","visibility":"Public","body":"@element.mercury?"}},{"html_id":"missing_valence:Int32-instance-method","name":"missing_valence","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":146,"url":null},"def":{"name":"missing_valence","return_type":"Int32","visibility":"Public","body":"(target_valence - valence).clamp(0..)"}},{"html_id":"molybdenum?-instance-method","name":"molybdenum?","doc":"Returns `true` if the atom's element is \"Molybdenum\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Molybdenum&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"molybdenum?","visibility":"Public","body":"@element.molybdenum?"}},{"html_id":"moscovium?-instance-method","name":"moscovium?","doc":"Returns `true` if the atom's element is \"Moscovium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Moscovium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"moscovium?","visibility":"Public","body":"@element.moscovium?"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":10,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"name=(name:String)-instance-method","name":"name=","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String)","args_html":"(name : String)","location":{"filename":"src/chem/core/atom.cr","line_number":10,"url":null},"def":{"name":"name=","args":[{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"@name = name"}},{"html_id":"neodymium?-instance-method","name":"neodymium?","doc":"Returns `true` if the atom's element is \"Neodymium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Neodymium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"neodymium?","visibility":"Public","body":"@element.neodymium?"}},{"html_id":"neon?-instance-method","name":"neon?","doc":"Returns `true` if the atom's element is \"Neon\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Neon&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"neon?","visibility":"Public","body":"@element.neon?"}},{"html_id":"neptunium?-instance-method","name":"neptunium?","doc":"Returns `true` if the atom's element is \"Neptunium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Neptunium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"neptunium?","visibility":"Public","body":"@element.neptunium?"}},{"html_id":"nickel?-instance-method","name":"nickel?","doc":"Returns `true` if the atom's element is \"Nickel\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Nickel&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"nickel?","visibility":"Public","body":"@element.nickel?"}},{"html_id":"nihonium?-instance-method","name":"nihonium?","doc":"Returns `true` if the atom's element is \"Nihonium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Nihonium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"nihonium?","visibility":"Public","body":"@element.nihonium?"}},{"html_id":"niobium?-instance-method","name":"niobium?","doc":"Returns `true` if the atom's element is \"Niobium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Niobium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"niobium?","visibility":"Public","body":"@element.niobium?"}},{"html_id":"nitrogen?-instance-method","name":"nitrogen?","doc":"Returns `true` if the atom's element is \"Nitrogen\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Nitrogen&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"nitrogen?","visibility":"Public","body":"@element.nitrogen?"}},{"html_id":"nobelium?-instance-method","name":"nobelium?","doc":"Returns `true` if the atom's element is \"Nobelium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Nobelium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"nobelium?","visibility":"Public","body":"@element.nobelium?"}},{"html_id":"occupancy:Float64-instance-method","name":"occupancy","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":12,"url":null},"def":{"name":"occupancy","return_type":"Float64","visibility":"Public","body":"@occupancy"}},{"html_id":"occupancy=(occupancy:Float64)-instance-method","name":"occupancy=","abstract":false,"args":[{"name":"occupancy","external_name":"occupancy","restriction":"Float64"}],"args_string":"(occupancy : Float64)","args_html":"(occupancy : Float64)","location":{"filename":"src/chem/core/atom.cr","line_number":12,"url":null},"def":{"name":"occupancy=","args":[{"name":"occupancy","external_name":"occupancy","restriction":"Float64"}],"visibility":"Public","body":"@occupancy = occupancy"}},{"html_id":"oganesson?-instance-method","name":"oganesson?","doc":"Returns `true` if the atom's element is \"Oganesson\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Oganesson&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"oganesson?","visibility":"Public","body":"@element.oganesson?"}},{"html_id":"osmium?-instance-method","name":"osmium?","doc":"Returns `true` if the atom's element is \"Osmium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Osmium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"osmium?","visibility":"Public","body":"@element.osmium?"}},{"html_id":"other?:Bool-instance-method","name":"other?","doc":"Returns `true` if the atom belongs to a other\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a other residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":203,"url":null},"def":{"name":"other?","return_type":"Bool","visibility":"Public","body":"@residue.other?"}},{"html_id":"oxygen?-instance-method","name":"oxygen?","doc":"Returns `true` if the atom's element is \"Oxygen\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Oxygen&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"oxygen?","visibility":"Public","body":"@element.oxygen?"}},{"html_id":"palladium?-instance-method","name":"palladium?","doc":"Returns `true` if the atom's element is \"Palladium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Palladium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"palladium?","visibility":"Public","body":"@element.palladium?"}},{"html_id":"partial_charge:Float64-instance-method","name":"partial_charge","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":13,"url":null},"def":{"name":"partial_charge","return_type":"Float64","visibility":"Public","body":"@partial_charge"}},{"html_id":"partial_charge=(partial_charge:Float64)-instance-method","name":"partial_charge=","abstract":false,"args":[{"name":"partial_charge","external_name":"partial_charge","restriction":"Float64"}],"args_string":"(partial_charge : Float64)","args_html":"(partial_charge : Float64)","location":{"filename":"src/chem/core/atom.cr","line_number":13,"url":null},"def":{"name":"partial_charge=","args":[{"name":"partial_charge","external_name":"partial_charge","restriction":"Float64"}],"visibility":"Public","body":"@partial_charge = partial_charge"}},{"html_id":"phosphorus?-instance-method","name":"phosphorus?","doc":"Returns `true` if the atom's element is \"Phosphorus\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Phosphorus&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"phosphorus?","visibility":"Public","body":"@element.phosphorus?"}},{"html_id":"platinum?-instance-method","name":"platinum?","doc":"Returns `true` if the atom's element is \"Platinum\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Platinum&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"platinum?","visibility":"Public","body":"@element.platinum?"}},{"html_id":"plutonium?-instance-method","name":"plutonium?","doc":"Returns `true` if the atom's element is \"Plutonium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Plutonium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"plutonium?","visibility":"Public","body":"@element.plutonium?"}},{"html_id":"polonium?-instance-method","name":"polonium?","doc":"Returns `true` if the atom's element is \"Polonium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Polonium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"polonium?","visibility":"Public","body":"@element.polonium?"}},{"html_id":"potassium?-instance-method","name":"potassium?","doc":"Returns `true` if the atom's element is \"Potassium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Potassium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"potassium?","visibility":"Public","body":"@element.potassium?"}},{"html_id":"praseodymium?-instance-method","name":"praseodymium?","doc":"Returns `true` if the atom's element is \"Praseodymium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Praseodymium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"praseodymium?","visibility":"Public","body":"@element.praseodymium?"}},{"html_id":"proactinium?-instance-method","name":"proactinium?","doc":"Returns `true` if the atom's element is \"Proactinium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Proactinium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"proactinium?","visibility":"Public","body":"@element.proactinium?"}},{"html_id":"promethium?-instance-method","name":"promethium?","doc":"Returns `true` if the atom's element is \"Promethium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Promethium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"promethium?","visibility":"Public","body":"@element.promethium?"}},{"html_id":"protein?:Bool-instance-method","name":"protein?","doc":"Returns `true` if the atom belongs to a protein\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a protein residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":203,"url":null},"def":{"name":"protein?","return_type":"Bool","visibility":"Public","body":"@residue.protein?"}},{"html_id":"radium?-instance-method","name":"radium?","doc":"Returns `true` if the atom's element is \"Radium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Radium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"radium?","visibility":"Public","body":"@element.radium?"}},{"html_id":"radon?-instance-method","name":"radon?","doc":"Returns `true` if the atom's element is \"Radon\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Radon&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"radon?","visibility":"Public","body":"@element.radon?"}},{"html_id":"residue:Residue-instance-method","name":"residue","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":14,"url":null},"def":{"name":"residue","return_type":"Residue","visibility":"Public","body":"@residue"}},{"html_id":"residue=(new_res:Residue):Residue-instance-method","name":"residue=","abstract":false,"args":[{"name":"new_res","external_name":"new_res","restriction":"Residue"}],"args_string":"(new_res : Residue) : Residue","args_html":"(new_res : <a href=\"../Chem/Residue.html\">Residue</a>) : <a href=\"../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/atom.cr","line_number":150,"url":null},"def":{"name":"residue=","args":[{"name":"new_res","external_name":"new_res","restriction":"Residue"}],"return_type":"Residue","visibility":"Public","body":"@residue.delete(self)\n@residue = new_res\nnew_res << self\n"}},{"html_id":"rhenium?-instance-method","name":"rhenium?","doc":"Returns `true` if the atom's element is \"Rhenium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Rhenium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"rhenium?","visibility":"Public","body":"@element.rhenium?"}},{"html_id":"rhodium?-instance-method","name":"rhodium?","doc":"Returns `true` if the atom's element is \"Rhodium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Rhodium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"rhodium?","visibility":"Public","body":"@element.rhodium?"}},{"html_id":"roentgenium?-instance-method","name":"roentgenium?","doc":"Returns `true` if the atom's element is \"Roentgenium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Roentgenium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"roentgenium?","visibility":"Public","body":"@element.roentgenium?"}},{"html_id":"rubidium?-instance-method","name":"rubidium?","doc":"Returns `true` if the atom's element is \"Rubidium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Rubidium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"rubidium?","visibility":"Public","body":"@element.rubidium?"}},{"html_id":"ruthenium?-instance-method","name":"ruthenium?","doc":"Returns `true` if the atom's element is \"Ruthenium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Ruthenium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"ruthenium?","visibility":"Public","body":"@element.ruthenium?"}},{"html_id":"rutherfordium?-instance-method","name":"rutherfordium?","doc":"Returns `true` if the atom's element is \"Rutherfordium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Rutherfordium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"rutherfordium?","visibility":"Public","body":"@element.rutherfordium?"}},{"html_id":"samarium?-instance-method","name":"samarium?","doc":"Returns `true` if the atom's element is \"Samarium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Samarium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"samarium?","visibility":"Public","body":"@element.samarium?"}},{"html_id":"scandium?-instance-method","name":"scandium?","doc":"Returns `true` if the atom's element is \"Scandium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Scandium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"scandium?","visibility":"Public","body":"@element.scandium?"}},{"html_id":"seaborgium?-instance-method","name":"seaborgium?","doc":"Returns `true` if the atom's element is \"Seaborgium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Seaborgium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"seaborgium?","visibility":"Public","body":"@element.seaborgium?"}},{"html_id":"selenium?-instance-method","name":"selenium?","doc":"Returns `true` if the atom's element is \"Selenium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Selenium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"selenium?","visibility":"Public","body":"@element.selenium?"}},{"html_id":"serial:Int32-instance-method","name":"serial","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":15,"url":null},"def":{"name":"serial","return_type":"Int32","visibility":"Public","body":"@serial"}},{"html_id":"serial=(serial:Int32)-instance-method","name":"serial=","abstract":false,"args":[{"name":"serial","external_name":"serial","restriction":"Int32"}],"args_string":"(serial : Int32)","args_html":"(serial : Int32)","location":{"filename":"src/chem/core/atom.cr","line_number":15,"url":null},"def":{"name":"serial=","args":[{"name":"serial","external_name":"serial","restriction":"Int32"}],"visibility":"Public","body":"@serial = serial"}},{"html_id":"silicon?-instance-method","name":"silicon?","doc":"Returns `true` if the atom's element is \"Silicon\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Silicon&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"silicon?","visibility":"Public","body":"@element.silicon?"}},{"html_id":"silver?-instance-method","name":"silver?","doc":"Returns `true` if the atom's element is \"Silver\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Silver&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"silver?","visibility":"Public","body":"@element.silver?"}},{"html_id":"sodium?-instance-method","name":"sodium?","doc":"Returns `true` if the atom's element is \"Sodium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Sodium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"sodium?","visibility":"Public","body":"@element.sodium?"}},{"html_id":"solvent?:Bool-instance-method","name":"solvent?","doc":"Returns `true` if the atom belongs to a solvent\nresidue, else `false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a solvent residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":203,"url":null},"def":{"name":"solvent?","return_type":"Bool","visibility":"Public","body":"@residue.solvent?"}},{"html_id":"spec(io:IO):Nil-instance-method","name":"spec","doc":"Writes the atom specification to the given IO.\n\nAtom specification is a short string representation encoding atom\ninformation including chain, residue, atom name, and atom number.","summary":"<p>Writes the atom specification to the given IO.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/core/atom.cr","line_number":170,"url":null},"def":{"name":"spec","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"@residue.spec(io)\n((((io << ':') << @name) << '(') << @serial) << ')'\n"}},{"html_id":"spec:String-instance-method","name":"spec","doc":"Returns the atom specification.\n\nAtom specification is a short string representation encoding atom\ninformation including chain, residue, atom name, and atom number.","summary":"<p>Returns the atom specification.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":160,"url":null},"def":{"name":"spec","return_type":"String","visibility":"Public","body":"String.build do |io|\n  spec(io)\nend"}},{"html_id":"strontium?-instance-method","name":"strontium?","doc":"Returns `true` if the atom's element is \"Strontium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Strontium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"strontium?","visibility":"Public","body":"@element.strontium?"}},{"html_id":"sulfur?-instance-method","name":"sulfur?","doc":"Returns `true` if the atom's element is \"Sulfur\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Sulfur&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"sulfur?","visibility":"Public","body":"@element.sulfur?"}},{"html_id":"tantalum?-instance-method","name":"tantalum?","doc":"Returns `true` if the atom's element is \"Tantalum\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Tantalum&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"tantalum?","visibility":"Public","body":"@element.tantalum?"}},{"html_id":"target_valence:Int32-instance-method","name":"target_valence","doc":"Returns the target valence based on the effective valence. This is\nuseful for multi-valent elements (e.g., sulfur, phosphorus).","summary":"<p>Returns the target valence based on the effective valence.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":177,"url":null},"def":{"name":"target_valence","return_type":"Int32","visibility":"Public","body":"@element.target_valence(valence)"}},{"html_id":"technetium?-instance-method","name":"technetium?","doc":"Returns `true` if the atom's element is \"Technetium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Technetium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"technetium?","visibility":"Public","body":"@element.technetium?"}},{"html_id":"tellurium?-instance-method","name":"tellurium?","doc":"Returns `true` if the atom's element is \"Tellurium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Tellurium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"tellurium?","visibility":"Public","body":"@element.tellurium?"}},{"html_id":"temperature_factor:Float64-instance-method","name":"temperature_factor","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":16,"url":null},"def":{"name":"temperature_factor","return_type":"Float64","visibility":"Public","body":"@temperature_factor"}},{"html_id":"temperature_factor=(temperature_factor:Float64)-instance-method","name":"temperature_factor=","abstract":false,"args":[{"name":"temperature_factor","external_name":"temperature_factor","restriction":"Float64"}],"args_string":"(temperature_factor : Float64)","args_html":"(temperature_factor : Float64)","location":{"filename":"src/chem/core/atom.cr","line_number":16,"url":null},"def":{"name":"temperature_factor=","args":[{"name":"temperature_factor","external_name":"temperature_factor","restriction":"Float64"}],"visibility":"Public","body":"@temperature_factor = temperature_factor"}},{"html_id":"tennessine?-instance-method","name":"tennessine?","doc":"Returns `true` if the atom's element is \"Tennessine\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Tennessine&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"tennessine?","visibility":"Public","body":"@element.tennessine?"}},{"html_id":"terbium?-instance-method","name":"terbium?","doc":"Returns `true` if the atom's element is \"Terbium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Terbium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"terbium?","visibility":"Public","body":"@element.terbium?"}},{"html_id":"thallium?-instance-method","name":"thallium?","doc":"Returns `true` if the atom's element is \"Thallium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Thallium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"thallium?","visibility":"Public","body":"@element.thallium?"}},{"html_id":"thorium?-instance-method","name":"thorium?","doc":"Returns `true` if the atom's element is \"Thorium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Thorium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"thorium?","visibility":"Public","body":"@element.thorium?"}},{"html_id":"thulium?-instance-method","name":"thulium?","doc":"Returns `true` if the atom's element is \"Thulium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Thulium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"thulium?","visibility":"Public","body":"@element.thulium?"}},{"html_id":"tin?-instance-method","name":"tin?","doc":"Returns `true` if the atom's element is \"Tin\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Tin&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"tin?","visibility":"Public","body":"@element.tin?"}},{"html_id":"titanium?-instance-method","name":"titanium?","doc":"Returns `true` if the atom's element is \"Titanium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Titanium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"titanium?","visibility":"Public","body":"@element.titanium?"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/core/atom.cr","line_number":181,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"((io << '<') << ({{ (@type.name.split(\"::\")).last }})) << ' '\nspec(io)\nio << '>'\n"}},{"html_id":"tungsten?-instance-method","name":"tungsten?","doc":"Returns `true` if the atom's element is \"Tungsten\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Tungsten&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"tungsten?","visibility":"Public","body":"@element.tungsten?"}},{"html_id":"typename:String|Nil-instance-method","name":"typename","doc":"Atom typename. Usually specifies the atomic parameter set assigned\nto this atom within a given force field.","summary":"<p>Atom typename.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":19,"url":null},"def":{"name":"typename","return_type":"String | ::Nil","visibility":"Public","body":"@typename"}},{"html_id":"typename=(typename:String|Nil)-instance-method","name":"typename=","doc":"Atom typename. Usually specifies the atomic parameter set assigned\nto this atom within a given force field.","summary":"<p>Atom typename.</p>","abstract":false,"args":[{"name":"typename","external_name":"typename","restriction":"String | ::Nil"}],"args_string":"(typename : String | Nil)","args_html":"(typename : String | Nil)","location":{"filename":"src/chem/core/atom.cr","line_number":19,"url":null},"def":{"name":"typename=","args":[{"name":"typename","external_name":"typename","restriction":"String | ::Nil"}],"visibility":"Public","body":"@typename = typename"}},{"html_id":"uranium?-instance-method","name":"uranium?","doc":"Returns `true` if the atom's element is \"Uranium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Uranium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"uranium?","visibility":"Public","body":"@element.uranium?"}},{"html_id":"valence:Int32-instance-method","name":"valence","doc":"Returns the effective valence. This is equivalent to the sum of\nthe bond orders.","summary":"<p>Returns the effective valence.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":189,"url":null},"def":{"name":"valence","return_type":"Int32","visibility":"Public","body":"bonds.sum() do |__arg3|\n  __arg3.order.to_i\nend"}},{"html_id":"valence_electrons(*args,**options)-instance-method","name":"valence_electrons","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":24,"url":null},"def":{"name":"valence_electrons","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@element.valence_electrons(*args, **options)"}},{"html_id":"valence_electrons(*args,**options,&)-instance-method","name":"valence_electrons","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":24,"url":null},"def":{"name":"valence_electrons","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@element.valence_electrons(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"vanadium?-instance-method","name":"vanadium?","doc":"Returns `true` if the atom's element is \"Vanadium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Vanadium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"vanadium?","visibility":"Public","body":"@element.vanadium?"}},{"html_id":"vdw_radius:Float64-instance-method","name":"vdw_radius","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":20,"url":null},"def":{"name":"vdw_radius","return_type":"Float64","visibility":"Public","body":"@vdw_radius"}},{"html_id":"vdw_radius=(vdw_radius:Float64)-instance-method","name":"vdw_radius=","abstract":false,"args":[{"name":"vdw_radius","external_name":"vdw_radius","restriction":"Float64"}],"args_string":"(vdw_radius : Float64)","args_html":"(vdw_radius : Float64)","location":{"filename":"src/chem/core/atom.cr","line_number":20,"url":null},"def":{"name":"vdw_radius=","args":[{"name":"vdw_radius","external_name":"vdw_radius","restriction":"Float64"}],"visibility":"Public","body":"@vdw_radius = vdw_radius"}},{"html_id":"water?:Bool-instance-method","name":"water?","doc":"Returns `true` if the atom belongs to a water residue, else\n`false`.","summary":"<p>Returns <code>true</code> if the atom belongs to a water residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":195,"url":null},"def":{"name":"water?","return_type":"Bool","visibility":"Public","body":"@residue.water?"}},{"html_id":"within_covalent_distance?(rhs:self):Bool-instance-method","name":"within_covalent_distance?","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Bool","args_html":"(rhs : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/core/atom.cr","line_number":199,"url":null},"def":{"name":"within_covalent_distance?","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"(Spatial.distance2(self, rhs)) <= (PeriodicTable.covalent_cutoff(self, rhs))"}},{"html_id":"x(*args,**options)-instance-method","name":"x","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":22,"url":null},"def":{"name":"x","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@coords.x(*args, **options)"}},{"html_id":"x(*args,**options,&)-instance-method","name":"x","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":22,"url":null},"def":{"name":"x","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@coords.x(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"xenon?-instance-method","name":"xenon?","doc":"Returns `true` if the atom's element is \"Xenon\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Xenon&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"xenon?","visibility":"Public","body":"@element.xenon?"}},{"html_id":"y(*args,**options)-instance-method","name":"y","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":22,"url":null},"def":{"name":"y","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@coords.y(*args, **options)"}},{"html_id":"y(*args,**options,&)-instance-method","name":"y","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":22,"url":null},"def":{"name":"y","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@coords.y(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"ytterbium?-instance-method","name":"ytterbium?","doc":"Returns `true` if the atom's element is \"Ytterbium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Ytterbium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"ytterbium?","visibility":"Public","body":"@element.ytterbium?"}},{"html_id":"yttrium?-instance-method","name":"yttrium?","doc":"Returns `true` if the atom's element is \"Yttrium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Yttrium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"yttrium?","visibility":"Public","body":"@element.yttrium?"}},{"html_id":"z(*args,**options)-instance-method","name":"z","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/atom.cr","line_number":22,"url":null},"def":{"name":"z","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@coords.z(*args, **options)"}},{"html_id":"z(*args,**options,&)-instance-method","name":"z","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/atom.cr","line_number":22,"url":null},"def":{"name":"z","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@coords.z(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"zinc?-instance-method","name":"zinc?","doc":"Returns `true` if the atom's element is \"Zinc\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Zinc&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"zinc?","visibility":"Public","body":"@element.zinc?"}},{"html_id":"zirconium?-instance-method","name":"zirconium?","doc":"Returns `true` if the atom's element is \"Zirconium\", else\n`false`.","summary":"<p>Returns <code>true</code> if the atom's element is &quot;Zirconium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/atom.cr","line_number":211,"url":null},"def":{"name":"zirconium?","visibility":"Public","body":"@element.zirconium?"}}]},{"html_id":"chem.cr/Chem/AtomCollection","path":"Chem/AtomCollection.html","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection","abstract":false,"locations":[{"filename":"src/chem/core/atom_collection.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":270,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"chem.cr/Chem/AtomView","kind":"struct","full_name":"Chem::AtomView","name":"AtomView"},{"html_id":"chem.cr/Chem/Chain","kind":"class","full_name":"Chem::Chain","name":"Chain"},{"html_id":"chem.cr/Chem/ChainView","kind":"struct","full_name":"Chem::ChainView","name":"ChainView"},{"html_id":"chem.cr/Chem/Residue","kind":"class","full_name":"Chem::Residue","name":"Residue"},{"html_id":"chem.cr/Chem/ResidueView","kind":"struct","full_name":"Chem::ResidueView","name":"ResidueView"},{"html_id":"chem.cr/Chem/Structure","kind":"class","full_name":"Chem::Structure","name":"Structure"},{"html_id":"chem.cr/Chem/Topology","kind":"class","full_name":"Chem::Topology","name":"Topology"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"instance_methods":[{"html_id":"atoms:AtomView-instance-method","name":"atoms","abstract":false,"location":{"filename":"src/chem/core/atom_collection.cr","line_number":7,"url":null},"def":{"name":"atoms","return_type":"AtomView","visibility":"Public","body":"atoms = Array(Atom).new(n_atoms)\neach_atom do |atom|\n  atoms << atom\nend\nAtomView.new(atoms)\n"}},{"html_id":"bonds:Array(Bond)-instance-method","name":"bonds","abstract":false,"location":{"filename":"src/chem/core/atom_collection.cr","line_number":13,"url":null},"def":{"name":"bonds","return_type":"Array(Bond)","visibility":"Public","body":"bonds = Set(Bond).new\neach_atom do |atom|\n  bonds.concat(atom.bonds)\nend\nbonds.to_a\n"}},{"html_id":"coords:Spatial::CoordinatesProxy-instance-method","name":"coords","abstract":false,"location":{"filename":"src/chem/core/atom_collection.cr","line_number":19,"url":null},"def":{"name":"coords","return_type":"Spatial::CoordinatesProxy","visibility":"Public","body":"Spatial::CoordinatesProxy.new(self)"}},{"html_id":"coords=(coords:Enumerable(Spatial::Vec3)):Enumerable(Spatial::Vec3)-instance-method","name":"coords=","doc":"Sets the atom coordinates.","summary":"<p>Sets the atom coordinates.</p>","abstract":false,"args":[{"name":"coords","external_name":"coords","restriction":"Enumerable(Spatial::Vec3)"}],"args_string":"(coords : Enumerable(Spatial::Vec3)) : Enumerable(Spatial::Vec3)","args_html":"(coords : <a href=\"../Enumerable.html\">Enumerable</a>(<a href=\"../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>)) : <a href=\"../Enumerable.html\">Enumerable</a>(<a href=\"../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>)","location":{"filename":"src/chem/core/atom_collection.cr","line_number":24,"url":null},"def":{"name":"coords=","args":[{"name":"coords","external_name":"coords","restriction":"Enumerable(Spatial::Vec3)"}],"return_type":"Enumerable(Spatial::Vec3)","visibility":"Public","body":"each_atom.zip(coords) do |atom, vec|\n  atom.coords = vec\nend\ncoords\n"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","abstract":true,"location":{"filename":"src/chem/core/atom_collection.cr","line_number":3,"url":null},"def":{"name":"each_atom","return_type":"Iterator(Atom)","visibility":"Public","body":""}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","abstract":true,"location":{"filename":"src/chem/core/atom_collection.cr","line_number":4,"url":null},"def":{"name":"each_atom","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Atom ->)"},"visibility":"Public","body":""}},{"html_id":"each_fragment(&:AtomView->):Nil-instance-method","name":"each_fragment","abstract":false,"location":{"filename":"src/chem/core/atom_collection.cr","line_number":31,"url":null},"def":{"name":"each_fragment","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(AtomView ->)"},"return_type":"Nil","visibility":"Public","body":"atoms = (Set(Atom).new(n_atoms)).concat(each_atom)\neach_atom do |atom|\n  if atom.in?(atoms)\n  else\n    next\n  end\n  atoms.delete(atom)\n  fragment = [atom]\n  fragment.each do |a|\n    a.each_bonded_atom do |b|\n      if b.in?(atoms)\n      else\n        next\n      end\n      fragment << b\n      atoms.delete(b)\n    end\n  end\n  yield (AtomView.new(fragment)).sort_by(&.serial)\nend\n"}},{"html_id":"formal_charge:Int32-instance-method","name":"formal_charge","abstract":false,"location":{"filename":"src/chem/core/atom_collection.cr","line_number":48,"url":null},"def":{"name":"formal_charge","return_type":"Int32","visibility":"Public","body":"each_atom.sum(&.formal_charge)"}},{"html_id":"formal_charges:Array(Int32)-instance-method","name":"formal_charges","abstract":false,"location":{"filename":"src/chem/core/atom_collection.cr","line_number":52,"url":null},"def":{"name":"formal_charges","return_type":"Array(Int32)","visibility":"Public","body":"each_atom.map(&.formal_charge).to_a"}},{"html_id":"fragments:Array(AtomView)-instance-method","name":"fragments","abstract":false,"location":{"filename":"src/chem/core/atom_collection.cr","line_number":56,"url":null},"def":{"name":"fragments","return_type":"Array(AtomView)","visibility":"Public","body":"fragments = [] of AtomView\neach_fragment do |fragment|\n  fragments << fragment\nend\nfragments\n"}},{"html_id":"has_hydrogens?:Bool-instance-method","name":"has_hydrogens?","abstract":false,"location":{"filename":"src/chem/core/atom_collection.cr","line_number":62,"url":null},"def":{"name":"has_hydrogens?","return_type":"Bool","visibility":"Public","body":"each_atom.any?() do |__arg3|\n  __arg3.element.hydrogen?\nend"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","abstract":true,"location":{"filename":"src/chem/core/atom_collection.cr","line_number":5,"url":null},"def":{"name":"n_atoms","return_type":"Int32","visibility":"Public","body":""}},{"html_id":"to_gen(fractional:Bool=false):String-instance-method","name":"to_gen","doc":"Returns a string representation of the atom collection using\nthe `Chem::Gen` file format. Arguments are fowarded to\n`Chem::Gen::Writer.open`.","summary":"<p>Returns a string representation of the atom collection using the <code><a href=\"../Chem/Gen.html\">Chem::Gen</a></code> file format.</p>","abstract":false,"args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false) : String","args_html":"(fractional : Bool = <span class=\"n\">false</span>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_gen","args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_gen(io, fractional)\nend"}},{"html_id":"to_gen(output:IO|Path|String,fractional:Bool=false):Nil-instance-method","name":"to_gen","doc":"Writes the atom collection to *output* using the `Chem::Gen`\nfile format. Arguments are fowarded to `Chem::Gen::Writer.open`.","summary":"<p>Writes the atom collection to <em>output</em> using the <code><a href=\"../Chem/Gen.html\">Chem::Gen</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(output : IO | Path | String, fractional : Bool = false) : Nil","args_html":"(output : IO | Path | String, fractional : Bool = <span class=\"n\">false</span>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_gen","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"return_type":"Nil","visibility":"Public","body":"Chem::Gen::Writer.open(output, fractional) do |writer|\n  writer << self\nend"}},{"html_id":"to_mol2(output:IO|Path|String):Nil-instance-method","name":"to_mol2","doc":"Writes the atom collection to *output* using the `Chem::Mol2`\nfile format. Arguments are fowarded to `Chem::Mol2::Writer.open`.","summary":"<p>Writes the atom collection to <em>output</em> using the <code><a href=\"../Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_mol2","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"return_type":"Nil","visibility":"Public","body":"Chem::Mol2::Writer.open(output, total_entries: 1) do |writer|\n  writer << self\nend"}},{"html_id":"to_mol2:String-instance-method","name":"to_mol2","doc":"Returns a string representation of the atom collection using\nthe `Chem::Mol2` file format. Arguments are fowarded to\n`Chem::Mol2::Writer.open`.","summary":"<p>Returns a string representation of the atom collection using the <code><a href=\"../Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_mol2","return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_mol2(io)\nend"}},{"html_id":"to_pdb(bonds:Chem::PDB::Writer::BondOptions=Chem::PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,ter_on_fragment:Bool=false):String-instance-method","name":"to_pdb","doc":"Returns a string representation of the atom collection using\nthe `Chem::PDB` file format. Arguments are fowarded to\n`Chem::PDB::Writer.open`.","summary":"<p>Returns a string representation of the atom collection using the <code><a href=\"../Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"}],"args_string":"(bonds : Chem::PDB::Writer::BondOptions = Chem::PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, ter_on_fragment : Bool = false) : String","args_html":"(bonds : <a href=\"../Chem/PDB/Writer/BondOptions.html\">Chem::PDB::Writer::BondOptions</a> = <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, ter_on_fragment : Bool = <span class=\"n\">false</span>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_pdb","args":[{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"}],"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_pdb(io, bonds, renumber, ter_on_fragment)\nend"}},{"html_id":"to_pdb(output:IO|Path|String,bonds:Chem::PDB::Writer::BondOptions=Chem::PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,ter_on_fragment:Bool=false):Nil-instance-method","name":"to_pdb","doc":"Writes the atom collection to *output* using the `Chem::PDB`\nfile format. Arguments are fowarded to `Chem::PDB::Writer.open`.","summary":"<p>Writes the atom collection to <em>output</em> using the <code><a href=\"../Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"}],"args_string":"(output : IO | Path | String, bonds : Chem::PDB::Writer::BondOptions = Chem::PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, ter_on_fragment : Bool = false) : Nil","args_html":"(output : IO | Path | String, bonds : <a href=\"../Chem/PDB/Writer/BondOptions.html\">Chem::PDB::Writer::BondOptions</a> = <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, ter_on_fragment : Bool = <span class=\"n\">false</span>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_pdb","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"}],"return_type":"Nil","visibility":"Public","body":"Chem::PDB::Writer.open(output, bonds, renumber, ter_on_fragment, total_entries: 1) do |writer|\n  writer << self\nend"}},{"html_id":"to_xyz(output:IO|Path|String):Nil-instance-method","name":"to_xyz","doc":"Writes the atom collection to *output* using the `Chem::XYZ`\nfile format. Arguments are fowarded to `Chem::XYZ::Writer.open`.","summary":"<p>Writes the atom collection to <em>output</em> using the <code><a href=\"../Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_xyz","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"return_type":"Nil","visibility":"Public","body":"Chem::XYZ::Writer.open(output, total_entries: 1) do |writer|\n  writer << self\nend"}},{"html_id":"to_xyz:String-instance-method","name":"to_xyz","doc":"Returns a string representation of the atom collection using\nthe `Chem::XYZ` file format. Arguments are fowarded to\n`Chem::XYZ::Writer.open`.","summary":"<p>Returns a string representation of the atom collection using the <code><a href=\"../Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_xyz","return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_xyz(io)\nend"}},{"html_id":"write(output:IO|Path|String,format:Chem::Format|String):Nil-instance-method","name":"write","doc":"Writes the atom collection to *output* using *format*. Raises\n`ArgumentError` if *format* has required arguments or cannot\nwrite `Chem::AtomCollection`.\n\nThe supported file formats are `Chem::Gen`, `Chem::Mol2`, `Chem::PDB`, `Chem::XYZ`. Use the\n`#to_*` methods to customize how the object is written in the\ncorresponding file format if possible.","summary":"<p>Writes the atom collection to <em>output</em> using <em>format</em>.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(output : IO | Path | String, format : Chem::Format | String) : Nil","args_html":"(output : IO | Path | String, format : <a href=\"../Chem/Format.html\">Chem::Format</a> | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"write","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"return_type":"Nil","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .gen?\n  to_gen(output)\nwhen .mol2?\n  to_mol2(output)\nwhen .pdb?\n  to_pdb(output)\nwhen .xyz?\n  to_xyz(output)\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::AtomCollection\"))\nend\n"}},{"html_id":"write(path:Path|String):Nil-instance-method","name":"write","doc":"Writes the atom collection to the specified file. The file\nformat is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nThe supported file formats are the following:\n\n- `Chem::Gen` (.gen)\n- `Chem::Mol2` (.mol2)\n- `Chem::PDB` (.ent, .pdb)\n- `Chem::XYZ` (.xyz)\n\nUse the `#to_*` methods to customize how the object is written\nin the corresponding file format if possible.","summary":"<p>Writes the atom collection to the specified file.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : Nil","args_html":"(path : Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"write","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"Nil","visibility":"Public","body":"write(path, ::Chem::Format.from_filename(path))"}}]},{"html_id":"chem.cr/Chem/AtomView","path":"Chem/AtomView.html","kind":"struct","full_name":"Chem::AtomView","name":"AtomView","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Array/Wrapper","kind":"module","full_name":"Array::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Wrapper","kind":"module","full_name":"Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/atom_view.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Array/Wrapper","kind":"module","full_name":"Array::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"instance_methods":[{"html_id":"[](name:String):Atom|Nil-instance-method","name":"[]","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom | Nil","args_html":"(name : String) : <a href=\"../Chem/Atom.html\">Atom</a> | Nil","location":{"filename":"src/chem/core/atom_view.cr","line_number":12,"url":null},"def":{"name":"[]","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Atom | ::Nil","visibility":"Public","body":"(self[name: name]?) || (raise(KeyError.new))"}},{"html_id":"[](*,serial:Int):Atom-instance-method","name":"[]","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"serial","external_name":"serial","restriction":"Int"}],"args_string":"(*, serial : Int) : Atom","args_html":"(*, serial : Int) : <a href=\"../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/atom_view.cr","line_number":8,"url":null},"def":{"name":"[]","args":[{"name":"","external_name":"","restriction":""},{"name":"serial","external_name":"serial","restriction":"Int"}],"splat_index":0,"return_type":"Atom","visibility":"Public","body":"(self[serial: serial]?) || (raise(IndexError.new))"}},{"html_id":"[]?(name:String):Atom|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom | Nil","args_html":"(name : String) : <a href=\"../Chem/Atom.html\">Atom</a> | Nil","location":{"filename":"src/chem/core/atom_view.cr","line_number":20,"url":null},"def":{"name":"[]?","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Atom | ::Nil","visibility":"Public","body":"find do |__arg1|\n  __arg1.name == name\nend"}},{"html_id":"[]?(*,serial:Int):Atom|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"serial","external_name":"serial","restriction":"Int"}],"args_string":"(*, serial : Int) : Atom | Nil","args_html":"(*, serial : Int) : <a href=\"../Chem/Atom.html\">Atom</a> | Nil","location":{"filename":"src/chem/core/atom_view.cr","line_number":16,"url":null},"def":{"name":"[]?","args":[{"name":"","external_name":"","restriction":""},{"name":"serial","external_name":"serial","restriction":"Int"}],"splat_index":0,"return_type":"Atom | ::Nil","visibility":"Public","body":"find do |__arg0|\n  __arg0.serial == serial\nend"}},{"html_id":"atoms:self-instance-method","name":"atoms","abstract":false,"location":{"filename":"src/chem/core/atom_view.cr","line_number":24,"url":null},"def":{"name":"atoms","return_type":"self","visibility":"Public","body":"self"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/core/atom_view.cr","line_number":28,"url":null},"def":{"name":"each_atom","return_type":"Iterator(Atom)","visibility":"Public","body":"each"}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/core/atom_view.cr","line_number":32,"url":null},"def":{"name":"each_atom","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Atom ->)"},"visibility":"Public","body":"each do |atom|\n  yield atom\nend"}},{"html_id":"each_chain:Iterator(Chain)-instance-method","name":"each_chain","abstract":false,"location":{"filename":"src/chem/core/atom_view.cr","line_number":38,"url":null},"def":{"name":"each_chain","return_type":"Iterator(Chain)","visibility":"Public","body":"each.map(&.chain).uniq"}},{"html_id":"each_chain(&block:Chain->)-instance-method","name":"each_chain","abstract":false,"location":{"filename":"src/chem/core/atom_view.cr","line_number":42,"url":null},"def":{"name":"each_chain","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Chain ->)"},"visibility":"Public","body":"chains = Set(Chain).new\neach do |atom|\n  if atom.chain.in?(chains)\n  else\n    yield atom.chain\n  end\n  chains << atom.chain\nend\n"}},{"html_id":"each_residue:Iterator(Residue)-instance-method","name":"each_residue","abstract":false,"location":{"filename":"src/chem/core/atom_view.cr","line_number":50,"url":null},"def":{"name":"each_residue","return_type":"Iterator(Residue)","visibility":"Public","body":"each.map(&.residue).uniq"}},{"html_id":"each_residue(&block:Residue->)-instance-method","name":"each_residue","abstract":false,"location":{"filename":"src/chem/core/atom_view.cr","line_number":54,"url":null},"def":{"name":"each_residue","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Residue ->)"},"visibility":"Public","body":"residues = Set(Residue).new\neach do |atom|\n  if atom.residue.in?(residues)\n  else\n    yield atom.residue\n  end\n  residues << atom.residue\nend\n"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","abstract":false,"location":{"filename":"src/chem/core/atom_view.cr","line_number":62,"url":null},"def":{"name":"n_atoms","return_type":"Int32","visibility":"Public","body":"size"}},{"html_id":"n_chains:Int32-instance-method","name":"n_chains","abstract":false,"location":{"filename":"src/chem/core/atom_view.cr","line_number":66,"url":null},"def":{"name":"n_chains","return_type":"Int32","visibility":"Public","body":"each_chain.sum do\n  1\nend"}},{"html_id":"n_residues:Int32-instance-method","name":"n_residues","abstract":false,"location":{"filename":"src/chem/core/atom_view.cr","line_number":70,"url":null},"def":{"name":"n_residues","return_type":"Int32","visibility":"Public","body":"each_residue.sum do\n  1\nend"}}]},{"html_id":"chem.cr/Chem/Bias","path":"Chem/Bias.html","kind":"struct","full_name":"Chem::Bias","name":"Bias","abstract":true,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/bias.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"constructors":[{"html_id":"new-class-method","name":"new","abstract":false,"location":{"filename":"src/chem/core/bias.cr","line_number":2,"url":null},"def":{"name":"new","visibility":"Public","body":"x = allocate\nif x.responds_to?(:finalize)\n  ::GC.add_finalizer(x)\nend\nx\n"}}],"instance_methods":[{"html_id":"initialize-instance-method","name":"initialize","abstract":false,"location":{"filename":"src/chem/core/bias.cr","line_number":2,"url":null},"def":{"name":"initialize","visibility":"Public","body":""}}]},{"html_id":"chem.cr/Chem/Bond","path":"Chem/Bond.html","kind":"class","full_name":"Chem::Bond","name":"Bond","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/Connectivity","kind":"module","full_name":"Chem::Connectivity","name":"Connectivity"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/connectivity.cr","line_number":116,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/Connectivity","kind":"module","full_name":"Chem::Connectivity","name":"Connectivity"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"A `Bond` provides a canonical representation of a covalent bond\nbetween two atoms.","summary":"<p>A <code><a href=\"../Chem/Bond.html\">Bond</a></code> provides a canonical representation of a covalent bond between two atoms.</p>","constructors":[{"html_id":"new(atom:Atom,other:Atom,order:BondOrder=:single)-class-method","name":"new","doc":"Creates a new `Bond` with the given atoms and *order*.","summary":"<p>Creates a new <code><a href=\"../Chem/Bond.html\">Bond</a></code> with the given atoms and <em>order</em>.</p>","abstract":false,"args":[{"name":"atom","external_name":"atom","restriction":"Atom"},{"name":"other","external_name":"other","restriction":"Atom"},{"name":"order","default_value":":single","external_name":"order","restriction":"BondOrder"}],"args_string":"(atom : Atom, other : Atom, order : BondOrder = :single)","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>, other : <a href=\"../Chem/Atom.html\">Atom</a>, order : <a href=\"../Chem/BondOrder.html\">BondOrder</a> = <span class=\"n\">:single</span>)","location":{"filename":"src/chem/connectivity.cr","line_number":123,"url":null},"def":{"name":"new","args":[{"name":"atom","external_name":"atom","restriction":"Atom"},{"name":"other","external_name":"other","restriction":"Atom"},{"name":"order","default_value":":single","external_name":"order","restriction":"BondOrder"}],"visibility":"Public","body":"_ = allocate\n_.initialize(atom, other, order)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"===(bond_t:Templates::Bond):Bool-instance-method","name":"===","doc":"Case equality. This is equivalent to `#match?`.","summary":"<p>Case equality.</p>","abstract":false,"args":[{"name":"bond_t","external_name":"bond_t","restriction":"Templates::Bond"}],"args_string":"(bond_t : Templates::Bond) : Bool","args_html":"(bond_t : <a href=\"../Chem/Templates/Bond.html\">Templates::Bond</a>) : Bool","location":{"filename":"src/chem/connectivity.cr","line_number":130,"url":null},"def":{"name":"===","args":[{"name":"bond_t","external_name":"bond_t","restriction":"Templates::Bond"}],"return_type":"Bool","visibility":"Public","body":"matches?(bond_t)"}},{"html_id":"bonded?(other:self):Bool-instance-method","name":"bonded?","doc":"Returns `true` if the bond shares an atom with *other*, else\n`false`.","summary":"<p>Returns <code>true</code> if the bond shares an atom with <em>other</em>, else <code>false</code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/connectivity.cr","line_number":136,"url":null},"def":{"name":"bonded?","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"@atoms.any?(&.in?(other))"}},{"html_id":"double?(*args,**options)-instance-method","name":"double?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/connectivity.cr","line_number":120,"url":null},"def":{"name":"double?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@order.double?(*args, **options)"}},{"html_id":"double?(*args,**options,&)-instance-method","name":"double?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/connectivity.cr","line_number":120,"url":null},"def":{"name":"double?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@order.double?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Appends a String representation of this object\nwhich includes its class name, its object address\nand the values of all instance variables.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).inspect # => #<Person:0x10fd31f20 @name=\"John\", @age=32>\n```","summary":"<p>Appends a String representation of this object which includes its class name, its object address and the values of all instance variables.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/connectivity.cr","line_number":140,"url":null},"def":{"name":"inspect","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << \"<Bond \"\n@atoms[0].spec(io)\nio << @order.to_char\n@atoms[1].spec(io)\nio << '>'\n"}},{"html_id":"matches?(bond_t:Templates::Bond):Bool-instance-method","name":"matches?","doc":"Returns `true` if the bond matches the given template, else\n`false`.\n\nCheck considers both atom matching (see `Atom#match?`) and bond\norder.","summary":"<p>Returns <code>true</code> if the bond matches the given template, else <code>false</code>.</p>","abstract":false,"args":[{"name":"bond_t","external_name":"bond_t","restriction":"Templates::Bond"}],"args_string":"(bond_t : Templates::Bond) : Bool","args_html":"(bond_t : <a href=\"../Chem/Templates/Bond.html\">Templates::Bond</a>) : Bool","location":{"filename":"src/chem/connectivity.cr","line_number":153,"url":null},"def":{"name":"matches?","args":[{"name":"bond_t","external_name":"bond_t","restriction":"Templates::Bond"}],"return_type":"Bool","visibility":"Public","body":"((@atoms === bond_t.atoms) || (@atoms.reverse === bond_t.atoms)) && (@order == bond_t.order)"}},{"html_id":"measure:Float64-instance-method","name":"measure","doc":"Returns the current value of the bond in angstroms.","summary":"<p>Returns the current value of the bond in angstroms.</p>","abstract":false,"location":{"filename":"src/chem/connectivity.cr","line_number":159,"url":null},"def":{"name":"measure","return_type":"Float64","visibility":"Public","body":"Spatial.distance(*@atoms.map(&.coords))"}},{"html_id":"order:BondOrder-instance-method","name":"order","abstract":false,"location":{"filename":"src/chem/connectivity.cr","line_number":119,"url":null},"def":{"name":"order","return_type":"BondOrder","visibility":"Public","body":"@order"}},{"html_id":"order=(order:BondOrder)-instance-method","name":"order=","abstract":false,"args":[{"name":"order","external_name":"order","restriction":"BondOrder"}],"args_string":"(order : BondOrder)","args_html":"(order : <a href=\"../Chem/BondOrder.html\">BondOrder</a>)","location":{"filename":"src/chem/connectivity.cr","line_number":119,"url":null},"def":{"name":"order=","args":[{"name":"order","external_name":"order","restriction":"BondOrder"}],"visibility":"Public","body":"@order = order"}},{"html_id":"other(atom:Atom):Atom-instance-method","name":"other","doc":"Returns the atom bonded to *atom*. Raises `Error` if *atom* is not\nincluded in the bond.","summary":"<p>Returns the atom bonded to <em>atom</em>.</p>","abstract":false,"args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"args_string":"(atom : Atom) : Atom","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>) : <a href=\"../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/connectivity.cr","line_number":165,"url":null},"def":{"name":"other","args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"return_type":"Atom","visibility":"Public","body":"case atom\nwhen @atoms[0]\n  @atoms[1]\nwhen @atoms[1]\n  @atoms[0]\nelse\n  raise(Error.new(\"Bond doesn't include #{atom}\"))\nend"}},{"html_id":"single?(*args,**options)-instance-method","name":"single?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/connectivity.cr","line_number":120,"url":null},"def":{"name":"single?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@order.single?(*args, **options)"}},{"html_id":"single?(*args,**options,&)-instance-method","name":"single?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/connectivity.cr","line_number":120,"url":null},"def":{"name":"single?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@order.single?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/connectivity.cr","line_number":176,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"((io << @atoms[0].name) << @order.to_char) << @atoms[1].name"}},{"html_id":"triple?(*args,**options)-instance-method","name":"triple?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/connectivity.cr","line_number":120,"url":null},"def":{"name":"triple?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@order.triple?(*args, **options)"}},{"html_id":"triple?(*args,**options,&)-instance-method","name":"triple?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/connectivity.cr","line_number":120,"url":null},"def":{"name":"triple?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@order.triple?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"zero?(*args,**options)-instance-method","name":"zero?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/connectivity.cr","line_number":120,"url":null},"def":{"name":"zero?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@order.zero?(*args, **options)"}},{"html_id":"zero?(*args,**options,&)-instance-method","name":"zero?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/connectivity.cr","line_number":120,"url":null},"def":{"name":"zero?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@order.zero?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"chem.cr/Chem/BondArray","path":"Chem/BondArray.html","kind":"class","full_name":"Chem::BondArray","name":"BondArray","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/bond_array.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"constructors":[{"html_id":"new(atom:Atom)-class-method","name":"new","abstract":false,"args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"args_string":"(atom : Atom)","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/core/bond_array.cr","line_number":10,"url":null},"def":{"name":"new","args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"visibility":"Public","body":"_ = allocate\n_.initialize(atom)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<<(bond:Bond)-instance-method","name":"<<","abstract":false,"args":[{"name":"bond","external_name":"bond","restriction":"Bond"}],"args_string":"(bond : Bond)","args_html":"(bond : <a href=\"../Chem/Bond.html\">Bond</a>)","location":{"filename":"src/chem/core/bond_array.cr","line_number":23,"url":null},"def":{"name":"<<","args":[{"name":"bond","external_name":"bond","restriction":"Bond"}],"visibility":"Public","body":"add(bond)"}},{"html_id":"[](atom:Atom):Bond-instance-method","name":"[]","abstract":false,"args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"args_string":"(atom : Atom) : Bond","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>) : <a href=\"../Chem/Bond.html\">Bond</a>","location":{"filename":"src/chem/core/bond_array.cr","line_number":14,"url":null},"def":{"name":"[]","args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"return_type":"Bond","visibility":"Public","body":"self[atom]? || (raise(Error.new(\"Atom #{@atom.serial} is not bonded to atom #{atom.serial}\")))"}},{"html_id":"[]?(atom:Atom):Bond|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"args_string":"(atom : Atom) : Bond | Nil","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>) : <a href=\"../Chem/Bond.html\">Bond</a> | Nil","location":{"filename":"src/chem/core/bond_array.cr","line_number":19,"url":null},"def":{"name":"[]?","args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"return_type":"Bond | ::Nil","visibility":"Public","body":"find(&.includes?(atom))"}},{"html_id":"add(bond:Bond):Bond-instance-method","name":"add","abstract":false,"args":[{"name":"bond","external_name":"bond","restriction":"Bond"}],"args_string":"(bond : Bond) : Bond","args_html":"(bond : <a href=\"../Chem/Bond.html\">Bond</a>) : <a href=\"../Chem/Bond.html\">Bond</a>","location":{"filename":"src/chem/core/bond_array.cr","line_number":27,"url":null},"def":{"name":"add","args":[{"name":"bond","external_name":"bond","restriction":"Bond"}],"return_type":"Bond","visibility":"Public","body":"if bond.in?(@bonds)\nelse\n  other_bonds = (bond.other(@atom)).bonds\n  push(bond)\n  other_bonds.push(bond)\nend\nbond\n"}},{"html_id":"add(other:Atom,order:BondOrder=:single):Bond-instance-method","name":"add","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Atom"},{"name":"order","default_value":":single","external_name":"order","restriction":"BondOrder"}],"args_string":"(other : Atom, order : BondOrder = :single) : Bond","args_html":"(other : <a href=\"../Chem/Atom.html\">Atom</a>, order : <a href=\"../Chem/BondOrder.html\">BondOrder</a> = <span class=\"n\">:single</span>) : <a href=\"../Chem/Bond.html\">Bond</a>","location":{"filename":"src/chem/core/bond_array.cr","line_number":36,"url":null},"def":{"name":"add","args":[{"name":"other","external_name":"other","restriction":"Atom"},{"name":"order","default_value":":single","external_name":"order","restriction":"BondOrder"}],"return_type":"Bond","visibility":"Public","body":"if bond = @bonds.find(&.includes?(other))\n  bond\nelse\n  add(Bond.new(@atom, other, order))\nend"}},{"html_id":"delete(other:Atom)-instance-method","name":"delete","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Atom"}],"args_string":"(other : Atom)","args_html":"(other : <a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/core/bond_array.cr","line_number":44,"url":null},"def":{"name":"delete","args":[{"name":"other","external_name":"other","restriction":"Atom"}],"visibility":"Public","body":"if bond = self[other]?\n  delete(bond)\nend"}},{"html_id":"delete(bond:Bond)-instance-method","name":"delete","abstract":false,"args":[{"name":"bond","external_name":"bond","restriction":"Bond"}],"args_string":"(bond : Bond)","args_html":"(bond : <a href=\"../Chem/Bond.html\">Bond</a>)","location":{"filename":"src/chem/core/bond_array.cr","line_number":50,"url":null},"def":{"name":"delete","args":[{"name":"bond","external_name":"bond","restriction":"Bond"}],"visibility":"Public","body":"if bond.in?(@bonds)\nelse\n  return\nend\n@bonds.delete(bond)\n(bond.other(@atom)).bonds.delete(bond)\n"}},{"html_id":"size(*args,**options)-instance-method","name":"size","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/bond_array.cr","line_number":8,"url":null},"def":{"name":"size","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@bonds.size(*args, **options)"}},{"html_id":"size(*args,**options,&)-instance-method","name":"size","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/bond_array.cr","line_number":8,"url":null},"def":{"name":"size","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@bonds.size(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"unsafe_fetch(*args,**options)-instance-method","name":"unsafe_fetch","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/bond_array.cr","line_number":8,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@bonds.unsafe_fetch(*args, **options)"}},{"html_id":"unsafe_fetch(*args,**options,&)-instance-method","name":"unsafe_fetch","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/bond_array.cr","line_number":8,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@bonds.unsafe_fetch(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"chem.cr/Chem/BondOrder","path":"Chem/BondOrder.html","kind":"enum","full_name":"Chem::BondOrder","name":"BondOrder","abstract":false,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/connectivity.cr","line_number":63,"url":null}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Zero","name":"Zero","value":"0","doc":"Zero bond order, e.g., Schrodinger represents bonds between metals\nas zero-order bonds. May also indicate unknown or unspecified\norder.","summary":"<p>Zero bond order, e.g., Schrodinger represents bonds between metals as zero-order bonds.</p>"},{"id":"Single","name":"Single","value":"1","doc":"Single bond order","summary":"<p>Single bond order</p>"},{"id":"Double","name":"Double","value":"2","doc":"Double bond order","summary":"<p>Double bond order</p>"},{"id":"Triple","name":"Triple","value":"3","doc":"Triple bond order","summary":"<p>Triple bond order</p>"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"A `BondOrder` provides a type-safe representation of the bond order\nof a covalent between two atoms.","summary":"<p>A <code><a href=\"../Chem/BondOrder.html\">BondOrder</a></code> provides a type-safe representation of the bond order of a covalent between two atoms.</p>","instance_methods":[{"html_id":"==(rhs:Int):Bool-instance-method","name":"==","doc":"Returns `true` if the integer representation of the bond order is\nequal to *rhs*, else `false`.","summary":"<p>Returns <code>true</code> if the integer representation of the bond order is equal to <em>rhs</em>, else <code>false</code>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Int"}],"args_string":"(rhs : Int) : Bool","args_html":"(rhs : Int) : Bool","location":{"filename":"src/chem/connectivity.cr","line_number":77,"url":null},"def":{"name":"==","args":[{"name":"rhs","external_name":"rhs","restriction":"Int"}],"return_type":"Bool","visibility":"Public","body":"to_i == rhs"}},{"html_id":"double?-instance-method","name":"double?","abstract":false,"location":{"filename":"src/chem/connectivity.cr","line_number":71,"url":null},"def":{"name":"double?","visibility":"Public","body":"self == Double"}},{"html_id":"pred:self-instance-method","name":"pred","doc":"Decreases the bond order. Raises `Error` if the bond order is\nzero.","summary":"<p>Decreases the bond order.</p>","abstract":false,"location":{"filename":"src/chem/connectivity.cr","line_number":83,"url":null},"def":{"name":"pred","return_type":"self","visibility":"Public","body":"case self\nin .zero?\n  raise(Error.new(\"Cannot decrease order\"))\nin .single?\n  Zero\nin .double?\n  Single\nin .triple?\n  Double\nend"}},{"html_id":"single?-instance-method","name":"single?","abstract":false,"location":{"filename":"src/chem/connectivity.cr","line_number":69,"url":null},"def":{"name":"single?","visibility":"Public","body":"self == Single"}},{"html_id":"succ:self-instance-method","name":"succ","doc":"Increases the bond order. Raises `Error` if the bond order is\ntriple.","summary":"<p>Increases the bond order.</p>","abstract":false,"location":{"filename":"src/chem/connectivity.cr","line_number":94,"url":null},"def":{"name":"succ","return_type":"self","visibility":"Public","body":"case self\nin .zero?\n  Single\nin .single?\n  Double\nin .double?\n  Triple\nin .triple?\n  raise(Error.new(\"Cannot increase order\"))\nend"}},{"html_id":"to_char:Char-instance-method","name":"to_char","doc":"Returns the char representation of the bond order.","summary":"<p>Returns the char representation of the bond order.</p>","abstract":false,"location":{"filename":"src/chem/connectivity.cr","line_number":104,"url":null},"def":{"name":"to_char","return_type":"Char","visibility":"Public","body":"case self\nin .zero?\n  '·'\nin .single?\n  '-'\nin .double?\n  '='\nin .triple?\n  '#'\nend"}},{"html_id":"triple?-instance-method","name":"triple?","abstract":false,"location":{"filename":"src/chem/connectivity.cr","line_number":73,"url":null},"def":{"name":"triple?","visibility":"Public","body":"self == Triple"}},{"html_id":"zero?-instance-method","name":"zero?","abstract":false,"location":{"filename":"src/chem/connectivity.cr","line_number":67,"url":null},"def":{"name":"zero?","visibility":"Public","body":"self == Zero"}}]},{"html_id":"chem.cr/Chem/Chain","path":"Chem/Chain.html","kind":"class","full_name":"Chem::Chain","name":"Chain","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/chain.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"constructors":[{"html_id":"new(top:Topology,id:Char)-class-method","name":"new","abstract":false,"args":[{"name":"top","external_name":"top","restriction":"Topology"},{"name":"id","external_name":"id","restriction":"Char"}],"args_string":"(top : Topology, id : Char)","args_html":"(top : <a href=\"../Chem/Topology.html\">Topology</a>, id : <a href=\"../Char.html\">Char</a>)","location":{"filename":"src/chem/core/chain.cr","line_number":13,"url":null},"def":{"name":"new","args":[{"name":"top","external_name":"top","restriction":"Topology"},{"name":"id","external_name":"id","restriction":"Char"}],"visibility":"Public","body":"_ = allocate\n_.initialize(top, id)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<=>(rhs:self):Int32-instance-method","name":"<=>","doc":"The comparison operator.\n\nReturns `-1`, `0` or `1` depending on whether `self` precedes\n*rhs*, equals to *rhs* or comes after *rhs*. The comparison is\ndone based on chain identifier.\n\n```\nchains = Structure.read(\"peptide.pdb\").chains\n\nchains[0] <=> chains[1] # => -1\nchains[1] <=> chains[1] # => 0\nchains[2] <=> chains[1] # => 1\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Int32","args_html":"(rhs : <span class=\"k\">self</span>) : Int32","location":{"filename":"src/chem/core/chain.cr","line_number":37,"url":null},"def":{"name":"<=>","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"Int32","visibility":"Public","body":"@id <=> rhs.id"}},{"html_id":"[](number:Int32,insertion_code:Char|Nil=nil):Residue-instance-method","name":"[]","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","default_value":"nil","external_name":"insertion_code","restriction":"Char | ::Nil"}],"args_string":"(number : Int32, insertion_code : Char | Nil = nil) : Residue","args_html":"(number : Int32, insertion_code : <a href=\"../Char.html\">Char</a> | Nil = <span class=\"n\">nil</span>) : <a href=\"../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/chain.cr","line_number":41,"url":null},"def":{"name":"[]","args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","default_value":"nil","external_name":"insertion_code","restriction":"Char | ::Nil"}],"return_type":"Residue","visibility":"Public","body":"@residue_table[{number, insertion_code}]"}},{"html_id":"[]?(number:Int32,insertion_code:Char|Nil=nil):Residue|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","default_value":"nil","external_name":"insertion_code","restriction":"Char | ::Nil"}],"args_string":"(number : Int32, insertion_code : Char | Nil = nil) : Residue | Nil","args_html":"(number : Int32, insertion_code : <a href=\"../Char.html\">Char</a> | Nil = <span class=\"n\">nil</span>) : <a href=\"../Chem/Residue.html\">Residue</a> | Nil","location":{"filename":"src/chem/core/chain.cr","line_number":45,"url":null},"def":{"name":"[]?","args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","default_value":"nil","external_name":"insertion_code","restriction":"Char | ::Nil"}],"return_type":"Residue | ::Nil","visibility":"Public","body":"@residue_table[{number, insertion_code}]?"}},{"html_id":"clear:self-instance-method","name":"clear","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":49,"url":null},"def":{"name":"clear","return_type":"self","visibility":"Public","body":"@residue_table.clear\n@residues.clear\nself\n"}},{"html_id":"delete(residue:Residue):Residue|Nil-instance-method","name":"delete","abstract":false,"args":[{"name":"residue","external_name":"residue","restriction":"Residue"}],"args_string":"(residue : Residue) : Residue | Nil","args_html":"(residue : <a href=\"../Chem/Residue.html\">Residue</a>) : <a href=\"../Chem/Residue.html\">Residue</a> | Nil","location":{"filename":"src/chem/core/chain.cr","line_number":55,"url":null},"def":{"name":"delete","args":[{"name":"residue","external_name":"residue","restriction":"Residue"}],"return_type":"Residue | ::Nil","visibility":"Public","body":"residue = @residues.delete(residue)\nif residue\n  resid = {residue.number, residue.insertion_code}\n  if @residue_table[resid]?.same?(residue)\n    @residue_table.delete(resid)\n  end\nend\nresidue\n"}},{"html_id":"dig(number:Int32,insertion_code:Char|Nil):Residue-instance-method","name":"dig","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","external_name":"insertion_code","restriction":"Char | ::Nil"}],"args_string":"(number : Int32, insertion_code : Char | Nil) : Residue","args_html":"(number : Int32, insertion_code : <a href=\"../Char.html\">Char</a> | Nil) : <a href=\"../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/chain.cr","line_number":72,"url":null},"def":{"name":"dig","args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","external_name":"insertion_code","restriction":"Char | ::Nil"}],"return_type":"Residue","visibility":"Public","body":"self[number, insertion_code]"}},{"html_id":"dig(number:Int32,insertion_code:Char|Nil,*subindexes)-instance-method","name":"dig","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","external_name":"insertion_code","restriction":"Char | ::Nil"},{"name":"subindexes","external_name":"subindexes","restriction":""}],"args_string":"(number : Int32, insertion_code : Char | Nil, *subindexes)","args_html":"(number : Int32, insertion_code : <a href=\"../Char.html\">Char</a> | Nil, *subindexes)","location":{"filename":"src/chem/core/chain.cr","line_number":76,"url":null},"def":{"name":"dig","args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","external_name":"insertion_code","restriction":"Char | ::Nil"},{"name":"subindexes","external_name":"subindexes","restriction":""}],"splat_index":2,"visibility":"Public","body":"self[number, insertion_code].dig(*subindexes)"}},{"html_id":"dig(number:Int32):Residue-instance-method","name":"dig","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"}],"args_string":"(number : Int32) : Residue","args_html":"(number : Int32) : <a href=\"../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/chain.cr","line_number":64,"url":null},"def":{"name":"dig","args":[{"name":"number","external_name":"number","restriction":"Int32"}],"return_type":"Residue","visibility":"Public","body":"self[number]"}},{"html_id":"dig(number:Int32,*subindexes)-instance-method","name":"dig","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"subindexes","external_name":"subindexes","restriction":""}],"args_string":"(number : Int32, *subindexes)","args_html":"(number : Int32, *subindexes)","location":{"filename":"src/chem/core/chain.cr","line_number":68,"url":null},"def":{"name":"dig","args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"subindexes","external_name":"subindexes","restriction":""}],"splat_index":1,"visibility":"Public","body":"self[number].dig(*subindexes)"}},{"html_id":"dig?(number:Int32,insertion_code:Char|Nil):Residue|Nil-instance-method","name":"dig?","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","external_name":"insertion_code","restriction":"Char | ::Nil"}],"args_string":"(number : Int32, insertion_code : Char | Nil) : Residue | Nil","args_html":"(number : Int32, insertion_code : <a href=\"../Char.html\">Char</a> | Nil) : <a href=\"../Chem/Residue.html\">Residue</a> | Nil","location":{"filename":"src/chem/core/chain.cr","line_number":90,"url":null},"def":{"name":"dig?","args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","external_name":"insertion_code","restriction":"Char | ::Nil"}],"return_type":"Residue | ::Nil","visibility":"Public","body":"self[number, insertion_code]?"}},{"html_id":"dig?(number:Int32,insertion_code:Char|Nil,*subindexes)-instance-method","name":"dig?","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","external_name":"insertion_code","restriction":"Char | ::Nil"},{"name":"subindexes","external_name":"subindexes","restriction":""}],"args_string":"(number : Int32, insertion_code : Char | Nil, *subindexes)","args_html":"(number : Int32, insertion_code : <a href=\"../Char.html\">Char</a> | Nil, *subindexes)","location":{"filename":"src/chem/core/chain.cr","line_number":94,"url":null},"def":{"name":"dig?","args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","external_name":"insertion_code","restriction":"Char | ::Nil"},{"name":"subindexes","external_name":"subindexes","restriction":""}],"splat_index":2,"visibility":"Public","body":"if residue = self[number, insertion_code]?\n  residue.dig?(*subindexes)\nend"}},{"html_id":"dig?(number:Int32):Residue|Nil-instance-method","name":"dig?","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"}],"args_string":"(number : Int32) : Residue | Nil","args_html":"(number : Int32) : <a href=\"../Chem/Residue.html\">Residue</a> | Nil","location":{"filename":"src/chem/core/chain.cr","line_number":80,"url":null},"def":{"name":"dig?","args":[{"name":"number","external_name":"number","restriction":"Int32"}],"return_type":"Residue | ::Nil","visibility":"Public","body":"self[number]?"}},{"html_id":"dig?(number:Int32,*subindexes)-instance-method","name":"dig?","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"subindexes","external_name":"subindexes","restriction":""}],"args_string":"(number : Int32, *subindexes)","args_html":"(number : Int32, *subindexes)","location":{"filename":"src/chem/core/chain.cr","line_number":84,"url":null},"def":{"name":"dig?","args":[{"name":"number","external_name":"number","restriction":"Int32"},{"name":"subindexes","external_name":"subindexes","restriction":""}],"splat_index":1,"visibility":"Public","body":"if residue = self[number]?\n  residue.dig?(*subindexes)\nend"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":100,"url":null},"def":{"name":"each_atom","return_type":"Iterator(Atom)","visibility":"Public","body":"Iterator.chain(each_residue.map(&.each_atom).to_a)"}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":104,"url":null},"def":{"name":"each_atom","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Atom ->)"},"visibility":"Public","body":"each_residue do |residue|\n  residue.each_atom do |atom|\n    yield atom\n  end\nend"}},{"html_id":"each_residue:Iterator(Residue)-instance-method","name":"each_residue","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":112,"url":null},"def":{"name":"each_residue","return_type":"Iterator(Residue)","visibility":"Public","body":"@residues.each"}},{"html_id":"each_residue(&block:Residue->)-instance-method","name":"each_residue","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":116,"url":null},"def":{"name":"each_residue","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Residue ->)"},"visibility":"Public","body":"@residues.each do |residue|\n  yield residue\nend"}},{"html_id":"id:Char-instance-method","name":"id","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":9,"url":null},"def":{"name":"id","return_type":"Char","visibility":"Public","body":"@id"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":126,"url":null},"def":{"name":"n_atoms","return_type":"Int32","visibility":"Public","body":"each_residue.map(&.n_atoms).sum"}},{"html_id":"n_residues:Int32-instance-method","name":"n_residues","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":130,"url":null},"def":{"name":"n_residues","return_type":"Int32","visibility":"Public","body":"@residues.size"}},{"html_id":"polymer?:Bool-instance-method","name":"polymer?","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":122,"url":null},"def":{"name":"polymer?","return_type":"Bool","visibility":"Public","body":"@residues.any?(&.polymer?)"}},{"html_id":"renumber_residues_by(&:Residue->_):Nil-instance-method","name":"renumber_residues_by","doc":"Renumber residues based on the order by the output value of the\nblock.","summary":"<p>Renumber residues based on the order by the output value of the block.</p>","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":136,"url":null},"def":{"name":"renumber_residues_by","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Residue -> _)"},"return_type":"Nil","visibility":"Public","body":"@residues.sort_by do |residue|\n  yield residue\nend.each_with_index do |residue, i|\n  residue.number = i + 1\nend\nreset_cache\n"}},{"html_id":"renumber_residues_by_connectivity:Nil-instance-method","name":"renumber_residues_by_connectivity","doc":"Renumber residues based on bond information. Residue ordering is\ncomputed based on the link bond if available.","summary":"<p>Renumber residues based on bond information.</p>","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":149,"url":null},"def":{"name":"renumber_residues_by_connectivity","return_type":"Nil","visibility":"Public","body":"num = 0\nresidues = @residues.to_set\nwhile residue = residues.find() do |__arg3|\n  __arg3.pred?(strict: false, use_numbering: false).nil?\nend || residues.first?\n  while residue && (residue.in?(residues))\n    residue.number = (    num = num + 1)\n    residues.delete(residue)\n    residue = residue.succ?(strict: false, use_numbering: false) || residue.bonded_residues.find(&.in?(residues))\n  end\nend\nreset_cache\n"}},{"html_id":"reset_cache:Nil-instance-method","name":"reset_cache","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":198,"url":null},"def":{"name":"reset_cache","return_type":"Nil","visibility":"Public","body":"@residues.sort!\n@residue_table.clear\n@residues.each do |residue|\n  @residue_table[{residue.number, residue.insertion_code}] = residue\nend\n"}},{"html_id":"spec(io:IO):Nil-instance-method","name":"spec","doc":"Writes the chain specification to the given IO.\n\nChain specification is a short string representation encoding\nchain information including the id.","summary":"<p>Writes the chain specification to the given IO.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/core/chain.cr","line_number":178,"url":null},"def":{"name":"spec","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << @id"}},{"html_id":"spec:String-instance-method","name":"spec","doc":"Returns the chain specification.\n\nChain specification is a short string representation encoding\nchain information including the id.","summary":"<p>Returns the chain specification.</p>","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":168,"url":null},"def":{"name":"spec","return_type":"String","visibility":"Public","body":"String.build do |io|\n  spec(io)\nend"}},{"html_id":"structure(*args,**options)-instance-method","name":"structure","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/chain.cr","line_number":11,"url":null},"def":{"name":"structure","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@top.structure(*args, **options)"}},{"html_id":"structure(*args,**options,&)-instance-method","name":"structure","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/chain.cr","line_number":11,"url":null},"def":{"name":"structure","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@top.structure(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/core/chain.cr","line_number":182,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"((io << '<') << ({{ (@type.name.split(\"::\")).last }})) << ' '\nspec(io)\nio << '>'\n"}},{"html_id":"top:Topology-instance-method","name":"top","abstract":false,"location":{"filename":"src/chem/core/chain.cr","line_number":10,"url":null},"def":{"name":"top","return_type":"Topology","visibility":"Public","body":"@top"}}]},{"html_id":"chem.cr/Chem/ChainCollection","path":"Chem/ChainCollection.html","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection","abstract":false,"locations":[{"filename":"src/chem/core/chain_collection.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"chem.cr/Chem/AtomView","kind":"struct","full_name":"Chem::AtomView","name":"AtomView"},{"html_id":"chem.cr/Chem/ChainView","kind":"struct","full_name":"Chem::ChainView","name":"ChainView"},{"html_id":"chem.cr/Chem/ResidueView","kind":"struct","full_name":"Chem::ResidueView","name":"ResidueView"},{"html_id":"chem.cr/Chem/Structure","kind":"class","full_name":"Chem::Structure","name":"Structure"},{"html_id":"chem.cr/Chem/Topology","kind":"class","full_name":"Chem::Topology","name":"Topology"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"instance_methods":[{"html_id":"chains:ChainView-instance-method","name":"chains","abstract":false,"location":{"filename":"src/chem/core/chain_collection.cr","line_number":7,"url":null},"def":{"name":"chains","return_type":"ChainView","visibility":"Public","body":"chains = Array(Chain).new(n_chains)\neach_chain do |chain|\n  chains << chain\nend\nChainView.new(chains)\n"}},{"html_id":"each_chain:Iterator(Chain)-instance-method","name":"each_chain","abstract":true,"location":{"filename":"src/chem/core/chain_collection.cr","line_number":3,"url":null},"def":{"name":"each_chain","return_type":"Iterator(Chain)","visibility":"Public","body":""}},{"html_id":"each_chain(&block:Chain->)-instance-method","name":"each_chain","abstract":true,"location":{"filename":"src/chem/core/chain_collection.cr","line_number":4,"url":null},"def":{"name":"each_chain","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Chain ->)"},"visibility":"Public","body":""}},{"html_id":"n_chains:Int32-instance-method","name":"n_chains","abstract":true,"location":{"filename":"src/chem/core/chain_collection.cr","line_number":5,"url":null},"def":{"name":"n_chains","return_type":"Int32","visibility":"Public","body":""}}]},{"html_id":"chem.cr/Chem/ChainView","path":"Chem/ChainView.html","kind":"struct","full_name":"Chem::ChainView","name":"ChainView","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Array/Wrapper","kind":"module","full_name":"Array::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Wrapper","kind":"module","full_name":"Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/chain_view.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Array/Wrapper","kind":"module","full_name":"Array::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"instance_methods":[{"html_id":"[](id:Char):Chain-instance-method","name":"[]","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Char"}],"args_string":"(id : Char) : Chain","args_html":"(id : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Chain.html\">Chain</a>","location":{"filename":"src/chem/core/chain_view.cr","line_number":8,"url":null},"def":{"name":"[]","args":[{"name":"id","external_name":"id","restriction":"Char"}],"return_type":"Chain","visibility":"Public","body":"self[id]? || (raise(IndexError.new))"}},{"html_id":"[]?(id:Char):Chain|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Char"}],"args_string":"(id : Char) : Chain | Nil","args_html":"(id : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Chain.html\">Chain</a> | Nil","location":{"filename":"src/chem/core/chain_view.cr","line_number":12,"url":null},"def":{"name":"[]?","args":[{"name":"id","external_name":"id","restriction":"Char"}],"return_type":"Chain | ::Nil","visibility":"Public","body":"find do |__arg0|\n  __arg0.id == id\nend"}},{"html_id":"chains:self-instance-method","name":"chains","abstract":false,"location":{"filename":"src/chem/core/chain_view.cr","line_number":16,"url":null},"def":{"name":"chains","return_type":"self","visibility":"Public","body":"self"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/core/chain_view.cr","line_number":20,"url":null},"def":{"name":"each_atom","return_type":"Iterator(Atom)","visibility":"Public","body":"iterators = [] of Iterator(Atom)\neach do |chain|\n  chain.each_residue do |residue|\n    iterators << residue.each_atom\n  end\nend\nIterator.chain(iterators)\n"}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/core/chain_view.cr","line_number":30,"url":null},"def":{"name":"each_atom","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Atom ->)"},"visibility":"Public","body":"each do |chain|\n  chain.each_atom do |atom|\n    yield atom\n  end\nend"}},{"html_id":"each_chain:Iterator(Chain)-instance-method","name":"each_chain","abstract":false,"location":{"filename":"src/chem/core/chain_view.cr","line_number":38,"url":null},"def":{"name":"each_chain","return_type":"Iterator(Chain)","visibility":"Public","body":"each"}},{"html_id":"each_chain(&block:Chain->)-instance-method","name":"each_chain","abstract":false,"location":{"filename":"src/chem/core/chain_view.cr","line_number":42,"url":null},"def":{"name":"each_chain","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Chain ->)"},"visibility":"Public","body":"each do |chain|\n  yield chain\nend"}},{"html_id":"each_residue:Iterator(Residue)-instance-method","name":"each_residue","abstract":false,"location":{"filename":"src/chem/core/chain_view.cr","line_number":48,"url":null},"def":{"name":"each_residue","return_type":"Iterator(Residue)","visibility":"Public","body":"Iterator.chain(each.map(&.each_residue).to_a)"}},{"html_id":"each_residue(&block:Residue->)-instance-method","name":"each_residue","abstract":false,"location":{"filename":"src/chem/core/chain_view.cr","line_number":52,"url":null},"def":{"name":"each_residue","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Residue ->)"},"visibility":"Public","body":"each do |chain|\n  chain.each_residue do |residue|\n    yield residue\n  end\nend"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","abstract":false,"location":{"filename":"src/chem/core/chain_view.cr","line_number":60,"url":null},"def":{"name":"n_atoms","return_type":"Int32","visibility":"Public","body":"sum(&.n_atoms)"}},{"html_id":"n_chains:Int32-instance-method","name":"n_chains","abstract":false,"location":{"filename":"src/chem/core/chain_view.cr","line_number":64,"url":null},"def":{"name":"n_chains","return_type":"Int32","visibility":"Public","body":"size"}},{"html_id":"n_residues:Int32-instance-method","name":"n_residues","abstract":false,"location":{"filename":"src/chem/core/chain_view.cr","line_number":68,"url":null},"def":{"name":"n_residues","return_type":"Int32","visibility":"Public","body":"sum(&.n_residues)"}}]},{"html_id":"chem.cr/Chem/Connectivity","path":"Chem/Connectivity.html","kind":"module","full_name":"Chem::Connectivity(T)","name":"Connectivity","abstract":false,"ancestors":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"locations":[{"filename":"src/chem/connectivity.cr","line_number":4,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"including_types":[{"html_id":"chem.cr/Chem/Angle","kind":"struct","full_name":"Chem::Angle","name":"Angle"},{"html_id":"chem.cr/Chem/Bond","kind":"class","full_name":"Chem::Bond","name":"Bond"},{"html_id":"chem.cr/Chem/Dihedral","kind":"struct","full_name":"Chem::Dihedral","name":"Dihedral"},{"html_id":"chem.cr/Chem/Improper","kind":"struct","full_name":"Chem::Improper","name":"Improper"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"The `Connectivity` mixin provides base functionality for types\nenclosing bonded atoms such an angle.","summary":"<p>The <code><a href=\"../Chem/Connectivity.html\">Connectivity</a></code> mixin provides base functionality for types enclosing bonded atoms such an angle.</p>","instance_methods":[{"html_id":"<=>(rhs:self):Int32-instance-method","name":"<=>","doc":"The comparison operator. Returns `0` if the two objects are equal,\na negative number if this object is considered less than *other*,\na positive number if this object is considered greater than\n*other*, or `nil` if the two objects are not comparable.\n\n```\n# Sort in a descending way:\n[3, 1, 2].sort { |x, y| y <=> x } # => [3, 2, 1]\n\n# Sort in an ascending way:\n[3, 1, 2].sort { |x, y| x <=> y } # => [1, 2, 3]\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Int32","args_html":"(rhs : <span class=\"k\">self</span>) : Int32","location":{"filename":"src/chem/connectivity.cr","line_number":25,"url":null},"def":{"name":"<=>","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"Int32","visibility":"Public","body":"@atoms <=> rhs.atoms"}},{"html_id":"atoms:T-instance-method","name":"atoms","doc":"Returns the bonded atoms.","summary":"<p>Returns the bonded atoms.</p>","abstract":false,"location":{"filename":"src/chem/connectivity.cr","line_number":11,"url":null},"def":{"name":"atoms","return_type":"T","visibility":"Public","body":"@atoms"}},{"html_id":"includes?(atom:Atom):Bool-instance-method","name":"includes?","doc":"Returns `true` if the connectivity involves *atom*, else `false`.","summary":"<p>Returns <code>true</code> if the connectivity involves <em>atom</em>, else <code>false</code>.</p>","abstract":false,"args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"args_string":"(atom : Atom) : Bool","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>) : Bool","location":{"filename":"src/chem/connectivity.cr","line_number":39,"url":null},"def":{"name":"includes?","args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"return_type":"Bool","visibility":"Public","body":"atom.in?(@atoms)"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/connectivity.cr","line_number":43,"url":null},"def":{"name":"inspect","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"(io << self.class.name) << '{'\n@atoms.join(io, \", \", &.to_s(io))\nio << '}'\n"}},{"html_id":"measure:Float64-instance-method","name":"measure","doc":"Returns the current value of the measurement.","summary":"<p>Returns the current value of the measurement.</p>","abstract":true,"location":{"filename":"src/chem/connectivity.cr","line_number":8,"url":null},"def":{"name":"measure","return_type":"Float64","visibility":"Public","body":""}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/connectivity.cr","line_number":54,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"(io << self.class.name) << '{'\n@atoms.join(io, \", \", &.spec(io))\nio << '}'\n"}}]},{"html_id":"chem.cr/Chem/Constraint","path":"Chem/Constraint.html","kind":"enum","full_name":"Chem::Constraint","name":"Constraint","abstract":false,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/bias.cr","line_number":4,"url":null}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"None","name":"None","value":"0"},{"id":"X","name":"X","value":"1"},{"id":"Y","name":"Y","value":"2"},{"id":"Z","name":"Z","value":"3"},{"id":"XY","name":"XY","value":"4"},{"id":"XZ","name":"XZ","value":"5"},{"id":"YZ","name":"YZ","value":"6"},{"id":"XYZ","name":"XYZ","value":"7"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"instance_methods":[{"html_id":"includes?(axis:Symbol):Bool-instance-method","name":"includes?","abstract":false,"args":[{"name":"axis","external_name":"axis","restriction":"Symbol"}],"args_string":"(axis : Symbol) : Bool","args_html":"(axis : Symbol) : Bool","location":{"filename":"src/chem/core/bias.cr","line_number":14,"url":null},"def":{"name":"includes?","args":[{"name":"axis","external_name":"axis","restriction":"Symbol"}],"return_type":"Bool","visibility":"Public","body":"case axis\nwhen :x\n  ((xyz? || x?) || xy?) || xz?\nwhen :y\n  ((xyz? || y?) || xy?) || yz?\nwhen :z\n  ((xyz? || z?) || xz?) || yz?\nelse\n  false\nend"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/chem/core/bias.cr","line_number":5,"url":null},"def":{"name":"none?","visibility":"Public","body":"self == None"}},{"html_id":"x?-instance-method","name":"x?","abstract":false,"location":{"filename":"src/chem/core/bias.cr","line_number":6,"url":null},"def":{"name":"x?","visibility":"Public","body":"self == X"}},{"html_id":"xy?-instance-method","name":"xy?","abstract":false,"location":{"filename":"src/chem/core/bias.cr","line_number":9,"url":null},"def":{"name":"xy?","visibility":"Public","body":"self == XY"}},{"html_id":"xyz?-instance-method","name":"xyz?","abstract":false,"location":{"filename":"src/chem/core/bias.cr","line_number":12,"url":null},"def":{"name":"xyz?","visibility":"Public","body":"self == XYZ"}},{"html_id":"xz?-instance-method","name":"xz?","abstract":false,"location":{"filename":"src/chem/core/bias.cr","line_number":10,"url":null},"def":{"name":"xz?","visibility":"Public","body":"self == XZ"}},{"html_id":"y?-instance-method","name":"y?","abstract":false,"location":{"filename":"src/chem/core/bias.cr","line_number":7,"url":null},"def":{"name":"y?","visibility":"Public","body":"self == Y"}},{"html_id":"yz?-instance-method","name":"yz?","abstract":false,"location":{"filename":"src/chem/core/bias.cr","line_number":11,"url":null},"def":{"name":"yz?","visibility":"Public","body":"self == YZ"}},{"html_id":"z?-instance-method","name":"z?","abstract":false,"location":{"filename":"src/chem/core/bias.cr","line_number":8,"url":null},"def":{"name":"z?","visibility":"Public","body":"self == Z"}}]},{"html_id":"chem.cr/Chem/Cube","path":"Chem/Cube.html","kind":"module","full_name":"Chem::Cube","name":"Cube","abstract":false,"locations":[{"filename":"src/chem/formats/cube.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"types":[{"html_id":"chem.cr/Chem/Cube/Reader","path":"Chem/Cube/Reader.html","kind":"class","full_name":"Chem::Cube::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader/Attached","kind":"module","full_name":"Chem::FormatReader::Attached","name":"Attached"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/cube.cr","line_number":3,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"BOHR_TO_ANGS","name":"BOHR_TO_ANGS","value":"0.529177210859"}],"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/Attached","kind":"module","full_name":"Chem::FormatReader::Attached","name":"Attached"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"}],"namespace":{"html_id":"chem.cr/Chem/Cube","kind":"module","full_name":"Chem::Cube","name":"Cube"},"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/cube.cr","line_number":12,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}],"instance_methods":[{"html_id":"read_attached:Structure-instance-method","name":"read_attached","doc":"Reads the attached object from the IO. Raises `IO::Error` if the\nreader is closed or `ParseException` if the object cannot be\ndecoded.","summary":"<p>Reads the attached object from the IO.</p>","abstract":false,"location":{"filename":"src/chem/formats/cube.cr","line_number":16,"url":null},"def":{"name":"read_attached","return_type":"Structure","visibility":"Public","body":"read_header\n@attached || (raise(\"BUG: @attached is nil after reading header\"))\n"}}]},{"html_id":"chem.cr/Chem/Cube/Writer","path":"Chem/Cube/Writer.html","kind":"class","full_name":"Chem::Cube::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/cube.cr","line_number":77,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"ANGS_TO_BOHR","name":"ANGS_TO_BOHR","value":"1.88972612478289694072"}],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"namespace":{"html_id":"chem.cr/Chem/Cube","kind":"module","full_name":"Chem::Cube","name":"Cube"},"class_methods":[{"html_id":"open(io:IO,atoms:AtomCollection,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, atoms : AtomCollection, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, atoms, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,atoms:AtomCollection,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"}],"args_string":"(path : Path | String, atoms : AtomCollection, & : self -> )","args_html":"(path : Path | String, atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path, atoms)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,atoms:AtomCollection,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, atoms : AtomCollection, sync_close : Bool = false)","args_html":"(io : IO, atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/cube.cr","line_number":82,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, atoms, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,atoms:AtomCollection):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"}],"args_string":"(path : Path | String, atoms : AtomCollection) : self","args_html":"(path : Path | String, atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), atoms, sync_close: true)"}}]}]},{"html_id":"chem.cr/Chem/Dihedral","path":"Chem/Dihedral.html","kind":"struct","full_name":"Chem::Dihedral","name":"Dihedral","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Chem/Connectivity","kind":"module","full_name":"Chem::Connectivity","name":"Connectivity"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/connectivity.cr","line_number":219,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/Connectivity","kind":"module","full_name":"Chem::Connectivity","name":"Connectivity"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"A `Dihedral` provides a canonical representation of a dihedral angle\nbetween four bonded atoms.\n\nA dihedral angle is defined by three contiguous bonds:\n\n    A       C\n      \\   /   \\\n        B      D\n\nIt measures the angle between the two planes defined by the atoms\n(A,B,C) and (B,C,D).","summary":"<p>A <code><a href=\"../Chem/Dihedral.html\">Dihedral</a></code> provides a canonical representation of a dihedral angle between four bonded atoms.</p>","constructors":[{"html_id":"new(a1:Atom,a2:Atom,a3:Atom,a4:Atom)-class-method","name":"new","doc":"Creates a new *Dihedral* with the given atoms.","summary":"<p>Creates a new <em>Dihedral</em> with the given atoms.</p>","abstract":false,"args":[{"name":"a1","external_name":"a1","restriction":"Atom"},{"name":"a2","external_name":"a2","restriction":"Atom"},{"name":"a3","external_name":"a3","restriction":"Atom"},{"name":"a4","external_name":"a4","restriction":"Atom"}],"args_string":"(a1 : Atom, a2 : Atom, a3 : Atom, a4 : Atom)","args_html":"(a1 : <a href=\"../Chem/Atom.html\">Atom</a>, a2 : <a href=\"../Chem/Atom.html\">Atom</a>, a3 : <a href=\"../Chem/Atom.html\">Atom</a>, a4 : <a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/connectivity.cr","line_number":223,"url":null},"def":{"name":"new","args":[{"name":"a1","external_name":"a1","restriction":"Atom"},{"name":"a2","external_name":"a2","restriction":"Atom"},{"name":"a3","external_name":"a3","restriction":"Atom"},{"name":"a4","external_name":"a4","restriction":"Atom"}],"visibility":"Public","body":"_ = allocate\n_.initialize(a1, a2, a3, a4)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"measure:Float64-instance-method","name":"measure","doc":"Returns the current value of the dihedral angle in radians.","summary":"<p>Returns the current value of the dihedral angle in radians.</p>","abstract":false,"location":{"filename":"src/chem/connectivity.cr","line_number":230,"url":null},"def":{"name":"measure","return_type":"Float64","visibility":"Public","body":"Spatial.dihedral(*@atoms.map(&.coords))"}}]},{"html_id":"chem.cr/Chem/DX","path":"Chem/DX.html","kind":"module","full_name":"Chem::DX","name":"DX","abstract":false,"locations":[{"filename":"src/chem/formats/dx.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"types":[{"html_id":"chem.cr/Chem/DX/Reader","path":"Chem/DX/Reader.html","kind":"class","full_name":"Chem::DX::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/dx.cr","line_number":3,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"}],"namespace":{"html_id":"chem.cr/Chem/DX","kind":"module","full_name":"Chem::DX","name":"DX"},"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/dx.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}]},{"html_id":"chem.cr/Chem/DX/Writer","path":"Chem/DX/Writer.html","kind":"class","full_name":"Chem::DX::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/dx.cr","line_number":51,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"namespace":{"html_id":"chem.cr/Chem/DX","kind":"module","full_name":"Chem::DX","name":"DX"},"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","doc":"Creates a new object from the given *io*.","summary":"<p>Creates a new object from the given <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}]}]},{"html_id":"chem.cr/Chem/Element","path":"Chem/Element.html","kind":"class","full_name":"Chem::Element","name":"Element","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/element.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"instance_methods":[{"html_id":"actinium?-instance-method","name":"actinium?","doc":"Returns `true` if the element is \"Actinium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Actinium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"actinium?","visibility":"Public","body":"same?(PeriodicTable::Ac)"}},{"html_id":"aluminum?-instance-method","name":"aluminum?","doc":"Returns `true` if the element is \"Aluminum\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Aluminum&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"aluminum?","visibility":"Public","body":"same?(PeriodicTable::Al)"}},{"html_id":"americium?-instance-method","name":"americium?","doc":"Returns `true` if the element is \"Americium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Americium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"americium?","visibility":"Public","body":"same?(PeriodicTable::Am)"}},{"html_id":"antimony?-instance-method","name":"antimony?","doc":"Returns `true` if the element is \"Antimony\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Antimony&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"antimony?","visibility":"Public","body":"same?(PeriodicTable::Sb)"}},{"html_id":"argon?-instance-method","name":"argon?","doc":"Returns `true` if the element is \"Argon\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Argon&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"argon?","visibility":"Public","body":"same?(PeriodicTable::Ar)"}},{"html_id":"arsenic?-instance-method","name":"arsenic?","doc":"Returns `true` if the element is \"Arsenic\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Arsenic&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"arsenic?","visibility":"Public","body":"same?(PeriodicTable::As)"}},{"html_id":"astatine?-instance-method","name":"astatine?","doc":"Returns `true` if the element is \"Astatine\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Astatine&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"astatine?","visibility":"Public","body":"same?(PeriodicTable::At)"}},{"html_id":"atomic_number:Int32-instance-method","name":"atomic_number","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":2,"url":null},"def":{"name":"atomic_number","return_type":"Int32","visibility":"Public","body":"@atomic_number"}},{"html_id":"barium?-instance-method","name":"barium?","doc":"Returns `true` if the element is \"Barium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Barium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"barium?","visibility":"Public","body":"same?(PeriodicTable::Ba)"}},{"html_id":"berkelium?-instance-method","name":"berkelium?","doc":"Returns `true` if the element is \"Berkelium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Berkelium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"berkelium?","visibility":"Public","body":"same?(PeriodicTable::Bk)"}},{"html_id":"beryllium?-instance-method","name":"beryllium?","doc":"Returns `true` if the element is \"Beryllium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Beryllium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"beryllium?","visibility":"Public","body":"same?(PeriodicTable::Be)"}},{"html_id":"bismuth?-instance-method","name":"bismuth?","doc":"Returns `true` if the element is \"Bismuth\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Bismuth&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"bismuth?","visibility":"Public","body":"same?(PeriodicTable::Bi)"}},{"html_id":"bohrium?-instance-method","name":"bohrium?","doc":"Returns `true` if the element is \"Bohrium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Bohrium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"bohrium?","visibility":"Public","body":"same?(PeriodicTable::Bh)"}},{"html_id":"boron?-instance-method","name":"boron?","doc":"Returns `true` if the element is \"Boron\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Boron&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"boron?","visibility":"Public","body":"same?(PeriodicTable::B)"}},{"html_id":"bromine?-instance-method","name":"bromine?","doc":"Returns `true` if the element is \"Bromine\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Bromine&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"bromine?","visibility":"Public","body":"same?(PeriodicTable::Br)"}},{"html_id":"cadmium?-instance-method","name":"cadmium?","doc":"Returns `true` if the element is \"Cadmium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Cadmium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"cadmium?","visibility":"Public","body":"same?(PeriodicTable::Cd)"}},{"html_id":"calcium?-instance-method","name":"calcium?","doc":"Returns `true` if the element is \"Calcium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Calcium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"calcium?","visibility":"Public","body":"same?(PeriodicTable::Ca)"}},{"html_id":"californium?-instance-method","name":"californium?","doc":"Returns `true` if the element is \"Californium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Californium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"californium?","visibility":"Public","body":"same?(PeriodicTable::Cf)"}},{"html_id":"carbon?-instance-method","name":"carbon?","doc":"Returns `true` if the element is \"Carbon\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Carbon&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"carbon?","visibility":"Public","body":"same?(PeriodicTable::C)"}},{"html_id":"cerium?-instance-method","name":"cerium?","doc":"Returns `true` if the element is \"Cerium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Cerium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"cerium?","visibility":"Public","body":"same?(PeriodicTable::Ce)"}},{"html_id":"cesium?-instance-method","name":"cesium?","doc":"Returns `true` if the element is \"Cesium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Cesium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"cesium?","visibility":"Public","body":"same?(PeriodicTable::Cs)"}},{"html_id":"chlorine?-instance-method","name":"chlorine?","doc":"Returns `true` if the element is \"Chlorine\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Chlorine&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"chlorine?","visibility":"Public","body":"same?(PeriodicTable::Cl)"}},{"html_id":"chromium?-instance-method","name":"chromium?","doc":"Returns `true` if the element is \"Chromium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Chromium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"chromium?","visibility":"Public","body":"same?(PeriodicTable::Cr)"}},{"html_id":"cobalt?-instance-method","name":"cobalt?","doc":"Returns `true` if the element is \"Cobalt\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Cobalt&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"cobalt?","visibility":"Public","body":"same?(PeriodicTable::Co)"}},{"html_id":"copernicium?-instance-method","name":"copernicium?","doc":"Returns `true` if the element is \"Copernicium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Copernicium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"copernicium?","visibility":"Public","body":"same?(PeriodicTable::Cn)"}},{"html_id":"copper?-instance-method","name":"copper?","doc":"Returns `true` if the element is \"Copper\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Copper&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"copper?","visibility":"Public","body":"same?(PeriodicTable::Cu)"}},{"html_id":"covalent_radius:Float64-instance-method","name":"covalent_radius","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":3,"url":null},"def":{"name":"covalent_radius","return_type":"Float64","visibility":"Public","body":"@covalent_radius"}},{"html_id":"curium?-instance-method","name":"curium?","doc":"Returns `true` if the element is \"Curium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Curium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"curium?","visibility":"Public","body":"same?(PeriodicTable::Cm)"}},{"html_id":"darmstadtium?-instance-method","name":"darmstadtium?","doc":"Returns `true` if the element is \"Darmstadtium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Darmstadtium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"darmstadtium?","visibility":"Public","body":"same?(PeriodicTable::Ds)"}},{"html_id":"dubnium?-instance-method","name":"dubnium?","doc":"Returns `true` if the element is \"Dubnium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Dubnium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"dubnium?","visibility":"Public","body":"same?(PeriodicTable::Db)"}},{"html_id":"dysprosium?-instance-method","name":"dysprosium?","doc":"Returns `true` if the element is \"Dysprosium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Dysprosium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"dysprosium?","visibility":"Public","body":"same?(PeriodicTable::Dy)"}},{"html_id":"einsteinium?-instance-method","name":"einsteinium?","doc":"Returns `true` if the element is \"Einsteinium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Einsteinium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"einsteinium?","visibility":"Public","body":"same?(PeriodicTable::Es)"}},{"html_id":"erbium?-instance-method","name":"erbium?","doc":"Returns `true` if the element is \"Erbium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Erbium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"erbium?","visibility":"Public","body":"same?(PeriodicTable::Er)"}},{"html_id":"europium?-instance-method","name":"europium?","doc":"Returns `true` if the element is \"Europium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Europium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"europium?","visibility":"Public","body":"same?(PeriodicTable::Eu)"}},{"html_id":"fermium?-instance-method","name":"fermium?","doc":"Returns `true` if the element is \"Fermium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Fermium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"fermium?","visibility":"Public","body":"same?(PeriodicTable::Fm)"}},{"html_id":"flerovium?-instance-method","name":"flerovium?","doc":"Returns `true` if the element is \"Flerovium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Flerovium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"flerovium?","visibility":"Public","body":"same?(PeriodicTable::Fl)"}},{"html_id":"fluorine?-instance-method","name":"fluorine?","doc":"Returns `true` if the element is \"Fluorine\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Fluorine&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"fluorine?","visibility":"Public","body":"same?(PeriodicTable::F)"}},{"html_id":"francium?-instance-method","name":"francium?","doc":"Returns `true` if the element is \"Francium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Francium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"francium?","visibility":"Public","body":"same?(PeriodicTable::Fr)"}},{"html_id":"gadolinium?-instance-method","name":"gadolinium?","doc":"Returns `true` if the element is \"Gadolinium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Gadolinium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"gadolinium?","visibility":"Public","body":"same?(PeriodicTable::Gd)"}},{"html_id":"gallium?-instance-method","name":"gallium?","doc":"Returns `true` if the element is \"Gallium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Gallium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"gallium?","visibility":"Public","body":"same?(PeriodicTable::Ga)"}},{"html_id":"germanium?-instance-method","name":"germanium?","doc":"Returns `true` if the element is \"Germanium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Germanium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"germanium?","visibility":"Public","body":"same?(PeriodicTable::Ge)"}},{"html_id":"gold?-instance-method","name":"gold?","doc":"Returns `true` if the element is \"Gold\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Gold&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"gold?","visibility":"Public","body":"same?(PeriodicTable::Au)"}},{"html_id":"hafnium?-instance-method","name":"hafnium?","doc":"Returns `true` if the element is \"Hafnium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Hafnium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"hafnium?","visibility":"Public","body":"same?(PeriodicTable::Hf)"}},{"html_id":"hassium?-instance-method","name":"hassium?","doc":"Returns `true` if the element is \"Hassium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Hassium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"hassium?","visibility":"Public","body":"same?(PeriodicTable::Hs)"}},{"html_id":"heavy?:Bool-instance-method","name":"heavy?","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":25,"url":null},"def":{"name":"heavy?","return_type":"Bool","visibility":"Public","body":"!hydrogen?"}},{"html_id":"helium?-instance-method","name":"helium?","doc":"Returns `true` if the element is \"Helium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Helium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"helium?","visibility":"Public","body":"same?(PeriodicTable::He)"}},{"html_id":"holmium?-instance-method","name":"holmium?","doc":"Returns `true` if the element is \"Holmium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Holmium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"holmium?","visibility":"Public","body":"same?(PeriodicTable::Ho)"}},{"html_id":"hydrogen?-instance-method","name":"hydrogen?","doc":"Returns `true` if the element is \"Hydrogen\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Hydrogen&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"hydrogen?","visibility":"Public","body":"same?(PeriodicTable::H)"}},{"html_id":"indium?-instance-method","name":"indium?","doc":"Returns `true` if the element is \"Indium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Indium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"indium?","visibility":"Public","body":"same?(PeriodicTable::In)"}},{"html_id":"iodine?-instance-method","name":"iodine?","doc":"Returns `true` if the element is \"Iodine\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Iodine&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"iodine?","visibility":"Public","body":"same?(PeriodicTable::I)"}},{"html_id":"iridium?-instance-method","name":"iridium?","doc":"Returns `true` if the element is \"Iridium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Iridium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"iridium?","visibility":"Public","body":"same?(PeriodicTable::Ir)"}},{"html_id":"iron?-instance-method","name":"iron?","doc":"Returns `true` if the element is \"Iron\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Iron&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"iron?","visibility":"Public","body":"same?(PeriodicTable::Fe)"}},{"html_id":"krypton?-instance-method","name":"krypton?","doc":"Returns `true` if the element is \"Krypton\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Krypton&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"krypton?","visibility":"Public","body":"same?(PeriodicTable::Kr)"}},{"html_id":"lanthanum?-instance-method","name":"lanthanum?","doc":"Returns `true` if the element is \"Lanthanum\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Lanthanum&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"lanthanum?","visibility":"Public","body":"same?(PeriodicTable::La)"}},{"html_id":"lawrencium?-instance-method","name":"lawrencium?","doc":"Returns `true` if the element is \"Lawrencium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Lawrencium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"lawrencium?","visibility":"Public","body":"same?(PeriodicTable::Lr)"}},{"html_id":"lead?-instance-method","name":"lead?","doc":"Returns `true` if the element is \"Lead\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Lead&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"lead?","visibility":"Public","body":"same?(PeriodicTable::Pb)"}},{"html_id":"lithium?-instance-method","name":"lithium?","doc":"Returns `true` if the element is \"Lithium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Lithium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"lithium?","visibility":"Public","body":"same?(PeriodicTable::Li)"}},{"html_id":"livermorium?-instance-method","name":"livermorium?","doc":"Returns `true` if the element is \"Livermorium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Livermorium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"livermorium?","visibility":"Public","body":"same?(PeriodicTable::Lv)"}},{"html_id":"lutetium?-instance-method","name":"lutetium?","doc":"Returns `true` if the element is \"Lutetium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Lutetium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"lutetium?","visibility":"Public","body":"same?(PeriodicTable::Lu)"}},{"html_id":"magnesium?-instance-method","name":"magnesium?","doc":"Returns `true` if the element is \"Magnesium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Magnesium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"magnesium?","visibility":"Public","body":"same?(PeriodicTable::Mg)"}},{"html_id":"manganese?-instance-method","name":"manganese?","doc":"Returns `true` if the element is \"Manganese\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Manganese&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"manganese?","visibility":"Public","body":"same?(PeriodicTable::Mn)"}},{"html_id":"mass:Float64-instance-method","name":"mass","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":4,"url":null},"def":{"name":"mass","return_type":"Float64","visibility":"Public","body":"@mass"}},{"html_id":"max_bonds:Int32-instance-method","name":"max_bonds","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":5,"url":null},"def":{"name":"max_bonds","return_type":"Int32","visibility":"Public","body":"@max_bonds"}},{"html_id":"max_valence:Int32|Nil-instance-method","name":"max_valence","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":29,"url":null},"def":{"name":"max_valence","return_type":"Int32 | ::Nil","visibility":"Public","body":"case valence = @valence\nin Int32, Nil\n  valence\nin Array\n  valence.last\nend"}},{"html_id":"meitnerium?-instance-method","name":"meitnerium?","doc":"Returns `true` if the element is \"Meitnerium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Meitnerium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"meitnerium?","visibility":"Public","body":"same?(PeriodicTable::Mt)"}},{"html_id":"mendelevium?-instance-method","name":"mendelevium?","doc":"Returns `true` if the element is \"Mendelevium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Mendelevium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"mendelevium?","visibility":"Public","body":"same?(PeriodicTable::Md)"}},{"html_id":"mercury?-instance-method","name":"mercury?","doc":"Returns `true` if the element is \"Mercury\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Mercury&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"mercury?","visibility":"Public","body":"same?(PeriodicTable::Hg)"}},{"html_id":"molybdenum?-instance-method","name":"molybdenum?","doc":"Returns `true` if the element is \"Molybdenum\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Molybdenum&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"molybdenum?","visibility":"Public","body":"same?(PeriodicTable::Mo)"}},{"html_id":"moscovium?-instance-method","name":"moscovium?","doc":"Returns `true` if the element is \"Moscovium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Moscovium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"moscovium?","visibility":"Public","body":"same?(PeriodicTable::Mc)"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":6,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"neodymium?-instance-method","name":"neodymium?","doc":"Returns `true` if the element is \"Neodymium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Neodymium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"neodymium?","visibility":"Public","body":"same?(PeriodicTable::Nd)"}},{"html_id":"neon?-instance-method","name":"neon?","doc":"Returns `true` if the element is \"Neon\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Neon&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"neon?","visibility":"Public","body":"same?(PeriodicTable::Ne)"}},{"html_id":"neptunium?-instance-method","name":"neptunium?","doc":"Returns `true` if the element is \"Neptunium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Neptunium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"neptunium?","visibility":"Public","body":"same?(PeriodicTable::Np)"}},{"html_id":"nickel?-instance-method","name":"nickel?","doc":"Returns `true` if the element is \"Nickel\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Nickel&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"nickel?","visibility":"Public","body":"same?(PeriodicTable::Ni)"}},{"html_id":"nihonium?-instance-method","name":"nihonium?","doc":"Returns `true` if the element is \"Nihonium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Nihonium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"nihonium?","visibility":"Public","body":"same?(PeriodicTable::Nh)"}},{"html_id":"niobium?-instance-method","name":"niobium?","doc":"Returns `true` if the element is \"Niobium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Niobium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"niobium?","visibility":"Public","body":"same?(PeriodicTable::Nb)"}},{"html_id":"nitrogen?-instance-method","name":"nitrogen?","doc":"Returns `true` if the element is \"Nitrogen\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Nitrogen&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"nitrogen?","visibility":"Public","body":"same?(PeriodicTable::N)"}},{"html_id":"nobelium?-instance-method","name":"nobelium?","doc":"Returns `true` if the element is \"Nobelium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Nobelium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"nobelium?","visibility":"Public","body":"same?(PeriodicTable::No)"}},{"html_id":"oganesson?-instance-method","name":"oganesson?","doc":"Returns `true` if the element is \"Oganesson\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Oganesson&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"oganesson?","visibility":"Public","body":"same?(PeriodicTable::Og)"}},{"html_id":"osmium?-instance-method","name":"osmium?","doc":"Returns `true` if the element is \"Osmium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Osmium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"osmium?","visibility":"Public","body":"same?(PeriodicTable::Os)"}},{"html_id":"oxygen?-instance-method","name":"oxygen?","doc":"Returns `true` if the element is \"Oxygen\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Oxygen&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"oxygen?","visibility":"Public","body":"same?(PeriodicTable::O)"}},{"html_id":"palladium?-instance-method","name":"palladium?","doc":"Returns `true` if the element is \"Palladium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Palladium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"palladium?","visibility":"Public","body":"same?(PeriodicTable::Pd)"}},{"html_id":"phosphorus?-instance-method","name":"phosphorus?","doc":"Returns `true` if the element is \"Phosphorus\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Phosphorus&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"phosphorus?","visibility":"Public","body":"same?(PeriodicTable::P)"}},{"html_id":"platinum?-instance-method","name":"platinum?","doc":"Returns `true` if the element is \"Platinum\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Platinum&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"platinum?","visibility":"Public","body":"same?(PeriodicTable::Pt)"}},{"html_id":"plutonium?-instance-method","name":"plutonium?","doc":"Returns `true` if the element is \"Plutonium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Plutonium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"plutonium?","visibility":"Public","body":"same?(PeriodicTable::Pu)"}},{"html_id":"polonium?-instance-method","name":"polonium?","doc":"Returns `true` if the element is \"Polonium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Polonium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"polonium?","visibility":"Public","body":"same?(PeriodicTable::Po)"}},{"html_id":"potassium?-instance-method","name":"potassium?","doc":"Returns `true` if the element is \"Potassium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Potassium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"potassium?","visibility":"Public","body":"same?(PeriodicTable::K)"}},{"html_id":"praseodymium?-instance-method","name":"praseodymium?","doc":"Returns `true` if the element is \"Praseodymium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Praseodymium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"praseodymium?","visibility":"Public","body":"same?(PeriodicTable::Pr)"}},{"html_id":"proactinium?-instance-method","name":"proactinium?","doc":"Returns `true` if the element is \"Proactinium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Proactinium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"proactinium?","visibility":"Public","body":"same?(PeriodicTable::Pa)"}},{"html_id":"promethium?-instance-method","name":"promethium?","doc":"Returns `true` if the element is \"Promethium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Promethium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"promethium?","visibility":"Public","body":"same?(PeriodicTable::Pm)"}},{"html_id":"radium?-instance-method","name":"radium?","doc":"Returns `true` if the element is \"Radium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Radium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"radium?","visibility":"Public","body":"same?(PeriodicTable::Ra)"}},{"html_id":"radon?-instance-method","name":"radon?","doc":"Returns `true` if the element is \"Radon\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Radon&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"radon?","visibility":"Public","body":"same?(PeriodicTable::Rn)"}},{"html_id":"rhenium?-instance-method","name":"rhenium?","doc":"Returns `true` if the element is \"Rhenium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Rhenium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"rhenium?","visibility":"Public","body":"same?(PeriodicTable::Re)"}},{"html_id":"rhodium?-instance-method","name":"rhodium?","doc":"Returns `true` if the element is \"Rhodium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Rhodium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"rhodium?","visibility":"Public","body":"same?(PeriodicTable::Rh)"}},{"html_id":"roentgenium?-instance-method","name":"roentgenium?","doc":"Returns `true` if the element is \"Roentgenium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Roentgenium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"roentgenium?","visibility":"Public","body":"same?(PeriodicTable::Rg)"}},{"html_id":"rubidium?-instance-method","name":"rubidium?","doc":"Returns `true` if the element is \"Rubidium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Rubidium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"rubidium?","visibility":"Public","body":"same?(PeriodicTable::Rb)"}},{"html_id":"ruthenium?-instance-method","name":"ruthenium?","doc":"Returns `true` if the element is \"Ruthenium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Ruthenium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"ruthenium?","visibility":"Public","body":"same?(PeriodicTable::Ru)"}},{"html_id":"rutherfordium?-instance-method","name":"rutherfordium?","doc":"Returns `true` if the element is \"Rutherfordium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Rutherfordium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"rutherfordium?","visibility":"Public","body":"same?(PeriodicTable::Rf)"}},{"html_id":"samarium?-instance-method","name":"samarium?","doc":"Returns `true` if the element is \"Samarium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Samarium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"samarium?","visibility":"Public","body":"same?(PeriodicTable::Sm)"}},{"html_id":"scandium?-instance-method","name":"scandium?","doc":"Returns `true` if the element is \"Scandium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Scandium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"scandium?","visibility":"Public","body":"same?(PeriodicTable::Sc)"}},{"html_id":"seaborgium?-instance-method","name":"seaborgium?","doc":"Returns `true` if the element is \"Seaborgium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Seaborgium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"seaborgium?","visibility":"Public","body":"same?(PeriodicTable::Sg)"}},{"html_id":"selenium?-instance-method","name":"selenium?","doc":"Returns `true` if the element is \"Selenium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Selenium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"selenium?","visibility":"Public","body":"same?(PeriodicTable::Se)"}},{"html_id":"silicon?-instance-method","name":"silicon?","doc":"Returns `true` if the element is \"Silicon\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Silicon&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"silicon?","visibility":"Public","body":"same?(PeriodicTable::Si)"}},{"html_id":"silver?-instance-method","name":"silver?","doc":"Returns `true` if the element is \"Silver\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Silver&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"silver?","visibility":"Public","body":"same?(PeriodicTable::Ag)"}},{"html_id":"sodium?-instance-method","name":"sodium?","doc":"Returns `true` if the element is \"Sodium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Sodium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"sodium?","visibility":"Public","body":"same?(PeriodicTable::Na)"}},{"html_id":"strontium?-instance-method","name":"strontium?","doc":"Returns `true` if the element is \"Strontium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Strontium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"strontium?","visibility":"Public","body":"same?(PeriodicTable::Sr)"}},{"html_id":"sulfur?-instance-method","name":"sulfur?","doc":"Returns `true` if the element is \"Sulfur\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Sulfur&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"sulfur?","visibility":"Public","body":"same?(PeriodicTable::S)"}},{"html_id":"symbol:String-instance-method","name":"symbol","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":7,"url":null},"def":{"name":"symbol","return_type":"String","visibility":"Public","body":"@symbol"}},{"html_id":"tantalum?-instance-method","name":"tantalum?","doc":"Returns `true` if the element is \"Tantalum\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Tantalum&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"tantalum?","visibility":"Public","body":"same?(PeriodicTable::Ta)"}},{"html_id":"target_electrons(valence:Int32):Int32-instance-method","name":"target_electrons","doc":"Returns the total number of electrons in the valence shell.\n\nThis method follows the octet rule (duet for hydrogen and helium),\naccounting for the expanded octet in the cases of phosphorus,\nsulfur, etc.","summary":"<p>Returns the total number of electrons in the valence shell.</p>","abstract":false,"args":[{"name":"valence","external_name":"valence","restriction":"Int32"}],"args_string":"(valence : Int32) : Int32","args_html":"(valence : Int32) : Int32","location":{"filename":"src/chem/core/element.cr","line_number":41,"url":null},"def":{"name":"target_electrons","args":[{"name":"valence","external_name":"valence","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":"case self\nwhen .hydrogen?, .helium?\n  2\nwhen .phosphorus?, .arsenic?\n  case valence\n  when 0..4\n    8\n  when 5\n    10\n  else\n    12\n  end\nwhen .sulfur?, .selenium?\n  case valence\n  when 0..3\n    8\n  when 4\n    10\n  else\n    12\n  end\nelse\n  8\nend"}},{"html_id":"target_valence(effective_valence:Int):Int32-instance-method","name":"target_valence","doc":"Returns the target valence given the effective valence. This is\nuseful for multi-valent elements (e.g., sulfur, phosphorus).","summary":"<p>Returns the target valence given the effective valence.</p>","abstract":false,"args":[{"name":"effective_valence","external_name":"effective_valence","restriction":"Int"}],"args_string":"(effective_valence : Int) : Int32","args_html":"(effective_valence : Int) : Int32","location":{"filename":"src/chem/core/element.cr","line_number":64,"url":null},"def":{"name":"target_valence","args":[{"name":"effective_valence","external_name":"effective_valence","restriction":"Int"}],"return_type":"Int32","visibility":"Public","body":"case valence = @valence\nin Int32\n  valence\nin Array\n  valence.find(&.>=(effective_valence)) || valence.last\nin Nil\n  effective_valence\nend"}},{"html_id":"technetium?-instance-method","name":"technetium?","doc":"Returns `true` if the element is \"Technetium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Technetium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"technetium?","visibility":"Public","body":"same?(PeriodicTable::Tc)"}},{"html_id":"tellurium?-instance-method","name":"tellurium?","doc":"Returns `true` if the element is \"Tellurium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Tellurium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"tellurium?","visibility":"Public","body":"same?(PeriodicTable::Te)"}},{"html_id":"tennessine?-instance-method","name":"tennessine?","doc":"Returns `true` if the element is \"Tennessine\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Tennessine&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"tennessine?","visibility":"Public","body":"same?(PeriodicTable::Ts)"}},{"html_id":"terbium?-instance-method","name":"terbium?","doc":"Returns `true` if the element is \"Terbium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Terbium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"terbium?","visibility":"Public","body":"same?(PeriodicTable::Tb)"}},{"html_id":"thallium?-instance-method","name":"thallium?","doc":"Returns `true` if the element is \"Thallium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Thallium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"thallium?","visibility":"Public","body":"same?(PeriodicTable::Tl)"}},{"html_id":"thorium?-instance-method","name":"thorium?","doc":"Returns `true` if the element is \"Thorium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Thorium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"thorium?","visibility":"Public","body":"same?(PeriodicTable::Th)"}},{"html_id":"thulium?-instance-method","name":"thulium?","doc":"Returns `true` if the element is \"Thulium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Thulium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"thulium?","visibility":"Public","body":"same?(PeriodicTable::Tm)"}},{"html_id":"tin?-instance-method","name":"tin?","doc":"Returns `true` if the element is \"Tin\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Tin&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"tin?","visibility":"Public","body":"same?(PeriodicTable::Sn)"}},{"html_id":"titanium?-instance-method","name":"titanium?","doc":"Returns `true` if the element is \"Titanium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Titanium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"titanium?","visibility":"Public","body":"same?(PeriodicTable::Ti)"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/core/element.cr","line_number":93,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"((((io << '<') << ({{ (@type.name.split(\"::\")).last }})) << ' ') << @symbol) << '>'"}},{"html_id":"tungsten?-instance-method","name":"tungsten?","doc":"Returns `true` if the element is \"Tungsten\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Tungsten&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"tungsten?","visibility":"Public","body":"same?(PeriodicTable::W)"}},{"html_id":"uranium?-instance-method","name":"uranium?","doc":"Returns `true` if the element is \"Uranium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Uranium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"uranium?","visibility":"Public","body":"same?(PeriodicTable::U)"}},{"html_id":"valence:Int32|Nil-instance-method","name":"valence","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":75,"url":null},"def":{"name":"valence","return_type":"Int32 | ::Nil","visibility":"Public","body":"case valence = @valence\nin Int32, Nil\n  valence\nin Array\n  valence.first\nend"}},{"html_id":"valence_electrons:Int32-instance-method","name":"valence_electrons","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":9,"url":null},"def":{"name":"valence_electrons","return_type":"Int32","visibility":"Public","body":"@valence_electrons"}},{"html_id":"valences:Array(Int32)-instance-method","name":"valences","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":82,"url":null},"def":{"name":"valences","return_type":"Array(Int32)","visibility":"Public","body":"case valence = @valence\nin Int32\n  [valence]\nin Array\n  valence\nin Nil\n  [] of Int32\nend"}},{"html_id":"vanadium?-instance-method","name":"vanadium?","doc":"Returns `true` if the element is \"Vanadium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Vanadium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"vanadium?","visibility":"Public","body":"same?(PeriodicTable::V)"}},{"html_id":"vdw_radius:Float64-instance-method","name":"vdw_radius","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":10,"url":null},"def":{"name":"vdw_radius","return_type":"Float64","visibility":"Public","body":"@vdw_radius"}},{"html_id":"xenon?-instance-method","name":"xenon?","doc":"Returns `true` if the element is \"Xenon\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Xenon&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"xenon?","visibility":"Public","body":"same?(PeriodicTable::Xe)"}},{"html_id":"ytterbium?-instance-method","name":"ytterbium?","doc":"Returns `true` if the element is \"Ytterbium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Ytterbium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"ytterbium?","visibility":"Public","body":"same?(PeriodicTable::Yb)"}},{"html_id":"yttrium?-instance-method","name":"yttrium?","doc":"Returns `true` if the element is \"Yttrium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Yttrium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"yttrium?","visibility":"Public","body":"same?(PeriodicTable::Y)"}},{"html_id":"zinc?-instance-method","name":"zinc?","doc":"Returns `true` if the element is \"Zinc\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Zinc&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"zinc?","visibility":"Public","body":"same?(PeriodicTable::Zn)"}},{"html_id":"zirconium?-instance-method","name":"zirconium?","doc":"Returns `true` if the element is \"Zirconium\", else `false`.","summary":"<p>Returns <code>true</code> if the element is &quot;Zirconium&quot;, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/element.cr","line_number":97,"url":null},"def":{"name":"zirconium?","visibility":"Public","body":"same?(PeriodicTable::Zr)"}}]},{"html_id":"chem.cr/Chem/Error","path":"Chem/Error.html","kind":"class","full_name":"Chem::Error","name":"Error","abstract":false,"superclass":{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem.cr","line_number":41,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"chem.cr/Chem/ParseException","kind":"class","full_name":"Chem::ParseException","name":"ParseException"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"Base class for Chem errors.","summary":"<p>Base class for Chem errors.</p>"},{"html_id":"chem.cr/Chem/Format","path":"Chem/Format.html","kind":"enum","full_name":"Chem::Format","name":"Format","abstract":false,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/format.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Chgcar","name":"Chgcar","value":"0","doc":"The Chgcar format implemented by `Chem::VASP::Chgcar`.","summary":"<p>The Chgcar format implemented by <code><a href=\"../Chem/VASP/Chgcar.html\">Chem::VASP::Chgcar</a></code>.</p>"},{"id":"Cube","name":"Cube","value":"1","doc":"The Cube format implemented by `Chem::Cube`.","summary":"<p>The Cube format implemented by <code><a href=\"../Chem/Cube.html\">Chem::Cube</a></code>.</p>"},{"id":"DX","name":"DX","value":"2","doc":"The DX format implemented by `Chem::DX`.","summary":"<p>The DX format implemented by <code><a href=\"../Chem/DX.html\">Chem::DX</a></code>.</p>"},{"id":"Gen","name":"Gen","value":"3","doc":"The Gen format implemented by `Chem::Gen`.","summary":"<p>The Gen format implemented by <code><a href=\"../Chem/Gen.html\">Chem::Gen</a></code>.</p>"},{"id":"Locpot","name":"Locpot","value":"4","doc":"The Locpot format implemented by `Chem::VASP::Locpot`.","summary":"<p>The Locpot format implemented by <code><a href=\"../Chem/VASP/Locpot.html\">Chem::VASP::Locpot</a></code>.</p>"},{"id":"Mol","name":"Mol","value":"5","doc":"The Mol format implemented by `Chem::Mol`.","summary":"<p>The Mol format implemented by <code><a href=\"../Chem/Mol.html\">Chem::Mol</a></code>.</p>"},{"id":"Mol2","name":"Mol2","value":"6","doc":"The Mol2 format implemented by `Chem::Mol2`.","summary":"<p>The Mol2 format implemented by <code><a href=\"../Chem/Mol2.html\">Chem::Mol2</a></code>.</p>"},{"id":"PDB","name":"PDB","value":"7","doc":"The PDB format implemented by `Chem::PDB`.","summary":"<p>The PDB format implemented by <code><a href=\"../Chem/PDB.html\">Chem::PDB</a></code>.</p>"},{"id":"PSF","name":"PSF","value":"8","doc":"The PSF format implemented by `Chem::PSF`.","summary":"<p>The PSF format implemented by <code><a href=\"../Chem/PSF.html\">Chem::PSF</a></code>.</p>"},{"id":"Poscar","name":"Poscar","value":"9","doc":"The Poscar format implemented by `Chem::VASP::Poscar`.","summary":"<p>The Poscar format implemented by <code><a href=\"../Chem/VASP/Poscar.html\">Chem::VASP::Poscar</a></code>.</p>"},{"id":"PyMOL","name":"PyMOL","value":"10","doc":"The PyMOL format implemented by `Chem::PyMOL`.","summary":"<p>The PyMOL format implemented by <code><a href=\"../Chem/PyMOL.html\">Chem::PyMOL</a></code>.</p>"},{"id":"SDF","name":"SDF","value":"11","doc":"The SDF format implemented by `Chem::SDF`.","summary":"<p>The SDF format implemented by <code><a href=\"../Chem/SDF.html\">Chem::SDF</a></code>.</p>"},{"id":"Stride","name":"Stride","value":"12","doc":"The Stride format implemented by `Chem::Protein::Stride`.","summary":"<p>The Stride format implemented by <code><a href=\"../Chem/Protein/Stride.html\">Chem::Protein::Stride</a></code>.</p>"},{"id":"VMD","name":"VMD","value":"13","doc":"The VMD format implemented by `Chem::VMD`.","summary":"<p>The VMD format implemented by <code><a href=\"../Chem/VMD.html\">Chem::VMD</a></code>.</p>"},{"id":"XYZ","name":"XYZ","value":"14","doc":"The XYZ format implemented by `Chem::XYZ`.","summary":"<p>The XYZ format implemented by <code><a href=\"../Chem/XYZ.html\">Chem::XYZ</a></code>.</p>"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"List of the registered file formats.\n\nThis enum is populated based on the `RegisterFormat` annotation.\nMethods that deals with extensions and file patterns uses the\ninformation declared in the annotations.\n\n```\n@[Chem::RegisterFormat(ext: %w(.jpg .jpeg .jpe)), names: %w(IMG*)]\nmodule JPEG; end\n\n@[Chem::RegisterFormat(ext: %w(.tiff .tif))]\nmodule TIFF; end\n\nChem::Format.names                 # => [\"JPEG\", \"TIFF\"]\nChem::Format::JPEG                 # => JPEG\nChem::Format::JPEG.extnames        # => [\".jpg\", \".jpeg\", \".jpe\"]\nChem::Format::JPEG.file_patterns   # => [\"IMG*\"]\nChem::Format::TIFF.extnames        # => [\".tiff\", \".tif\"]\nChem::Format::TIFF.file_patterns   # => []\n\nChem::Format.from_ext(\"foo.jpg\")   # => JPEG\nChem::Format.from_ext(\"foo.tiff\")  # => TIFF\nChem::Format.from_stem(\"IMG_2015\") # => JPEG\n```","summary":"<p>List of the registered file formats.</p>","class_methods":[{"html_id":"from_ext?(extname:String):self|Nil-class-method","name":"from_ext?","doc":"Returns the file format registered to the file extension, or\n`nil` otherwise.\n\n```\n@[Chem::RegisterFormat(ext: %w(.jpg .jpeg .jpe))]\nmodule JPEG; end\n\nChem::Format.from_ext?(\".jpg\")  # => JPEG\nChem::Format.from_ext?(\".JPG\")  # => JPEG\nChem::Format.from_ext?(\".jpeg\") # => JPEG\nChem::Format.from_ext?(\".jpe\")  # => JPEG\nChem::Format.from_ext?(\".txt\")  # => nil\n```\n\nNOTE: It performs a case-insensitive search so .jpg and .JPG\nreturn the same.","summary":"<p>Returns the file format registered to the file extension, or <code>nil</code> otherwise.</p>","abstract":false,"args":[{"name":"extname","external_name":"extname","restriction":"String"}],"args_string":"(extname : String) : self | Nil","args_html":"(extname : String) : <span class=\"k\">self</span> | Nil","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"from_ext?","args":[{"name":"extname","external_name":"extname","restriction":"String"}],"return_type":"self | ::Nil","visibility":"Public","body":"case extname.downcase\nwhen \".cube\"\n  Cube\nwhen \".dx\"\n  DX\nwhen \".gen\"\n  Gen\nwhen \".mol\"\n  Mol\nwhen \".mol2\"\n  Mol2\nwhen \".ent\", \".pdb\"\n  PDB\nwhen \".psf\"\n  PSF\nwhen \".pml\"\n  PyMOL\nwhen \".sdf\"\n  SDF\nwhen \".vmd\"\n  VMD\nwhen \".xyz\"\n  XYZ\nwhen \".stride\"\n  Stride\nwhen \".poscar\"\n  Poscar\nend"}},{"html_id":"from_filename?(filename:Path|String):self|Nil-class-method","name":"from_filename?","doc":"Returns the file format associated with *filename*, or `nil`\notherwise.\n\nIt first looks up the file format associated with the extension\nof *filename* via the `.from_ext?` method. If the latter returns\n`nil`, then it executes a case-insensitive search with the stem\nof *filename* via `.from_stem?`.\n\n```\n@[Chem::RegisterFormat(ext: %w(.jpg .jpeg .jpe), names: %w(IMG*))]\nmodule JPEG; end\n\nChem::Format.from_filename?(\"foo.jpg\")      # => JPEG\nChem::Format.from_filename?(\"foo.JPG\")      # => JPEG\nChem::Format.from_filename?(\"IMG_2314.jpg\") # => JPEG\nChem::Format.from_filename?(\"IMG_2314.png\") # => JPEG\nChem::Format.from_filename?(\"IMG_2314\")     # => JPEG\nChem::Format.from_filename?(\"img_2314\")     # => JPEG\nChem::Format.from_filename?(\"img2314\")      # => JPEG\nChem::Format.from_filename?(\"foo\")          # => nil\n```","summary":"<p>Returns the file format associated with <em>filename</em>, or <code>nil</code> otherwise.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"Path | String"}],"args_string":"(filename : Path | String) : self | Nil","args_html":"(filename : Path | String) : <span class=\"k\">self</span> | Nil","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"from_filename?","args":[{"name":"filename","external_name":"filename","restriction":"Path | String"}],"return_type":"self | ::Nil","visibility":"Public","body":"if filename.is_a?(Path)\nelse\n  filename = Path[filename]\nend\nextname = filename.extension\n(from_ext?(extname)) || (from_stem?(filename.basename(extname)))\n"}},{"html_id":"from_stem?(stem:String):self|Nil-class-method","name":"from_stem?","doc":"Returns the file format that matches the file stem, or `nil`\notherwise.\n\nThe file stem is matched against the file patterns registered by\nthe file formats until one match is found. File patterns can\ncontain valid filename characters and the `*` wildcard, which\nmatches an unlimited number of arbitrary characters:\n\n- `\"c*\"` matches file stems beginning with `c`.\n- `\"*c\"` matches file stems ending with `c`.\n- `\"*c*\"` matches file stems that have `c` in them (including at\n  the beginning or end).\n\n```\n@[Chem::RegisterFormat(names: %w(IMG*))]\nmodule JPEG; end\n\nChem::Format.from_stem?(\"IMG_2314\") # => JPEG\nChem::Format.from_stem?(\"img_2314\") # => JPEG\nChem::Format.from_stem?(\"img2314\")  # => JPEG\nChem::Format.from_stem?(\"himg\")     # => nil\nChem::Format.from_stem?(\"foo\")      # => nil\n```\n\nNOTE: The comparison is made using `String#camelcase` and\n`String#downcase`, so the file pattern `FooBar` will match\n`FOOBAR`, `FooBar`, `foobar`, `FOO_BAR` and `foo_bar`.","summary":"<p>Returns the file format that matches the file stem, or <code>nil</code> otherwise.</p>","abstract":false,"args":[{"name":"stem","external_name":"stem","restriction":"String"}],"args_string":"(stem : String) : self | Nil","args_html":"(stem : String) : <span class=\"k\">self</span> | Nil","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"from_stem?","args":[{"name":"stem","external_name":"stem","restriction":"String"}],"return_type":"self | ::Nil","visibility":"Public","body":"case stem.camelcase.downcase\nwhen .starts_with?(\"chgcar\")\n  Chgcar\nwhen .starts_with?(\"locpot\")\n  Locpot\nwhen .starts_with?(\"contcar\")\n  Poscar\nwhen .starts_with?(\"poscar\")\n  Poscar\nend"}}],"constructors":[{"html_id":"from_ext(extname:String):self-class-method","name":"from_ext","doc":"Returns the file format registered to the file extension, or\nraises `ArgumentError` otherwise.\n\n```\n@[Chem::RegisterFormat(ext: %w(.jpg .jpeg .jpe))]\nmodule JPEG; end\n\nChem::Format.from_ext(\".jpg\")  # => JPEG\nChem::Format.from_ext(\".JPG\")  # => JPEG\nChem::Format.from_ext(\".jpeg\") # => JPEG\nChem::Format.from_ext(\".jpe\")  # => JPEG\nChem::Format.from_ext(\".txt\")  # raises ArgumentError\n```\n\nNOTE: It performs a case-insensitive search so .jpg and .JPG\nreturn the same.","summary":"<p>Returns the file format registered to the file extension, or raises <code>ArgumentError</code> otherwise.</p>","abstract":false,"args":[{"name":"extname","external_name":"extname","restriction":"String"}],"args_string":"(extname : String) : self","args_html":"(extname : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"from_ext","args":[{"name":"extname","external_name":"extname","restriction":"String"}],"return_type":"self","visibility":"Public","body":"(from_ext?(extname)) || (raise(ArgumentError.new(\"File format not found for #{extname}\")))"}},{"html_id":"from_filename(filename:Path|String):self-class-method","name":"from_filename","doc":"Returns the file format associated with *filename*, or raises\n`ArgumentError` otherwise.\n\nIt first looks up the file format associated with the extension\nof *filename* via the `.from_ext?` method. If the latter returns\n`nil`, then it executes a case-insensitive search with the stem\nof *filename* via `.from_stem?`.\n\n```\n@[Chem::RegisterFormat(ext: %w(.jpg .jpeg .jpe), names: %w(IMG*))]\nmodule JPEG; end\n\nChem::Format.from_filename(\"foo.jpg\")      # => JPEG\nChem::Format.from_filename(\"foo.JPG\")      # => JPEG\nChem::Format.from_filename(\"IMG_2314.jpg\") # => JPEG\nChem::Format.from_filename(\"IMG_2314.png\") # => JPEG\nChem::Format.from_filename(\"IMG_2314\")     # => JPEG\nChem::Format.from_filename(\"img_2314\")     # => JPEG\nChem::Format.from_filename(\"img2314\")      # => JPEG\nChem::Format.from_filename(\"foo\")          # raises ArgumentError\n```","summary":"<p>Returns the file format associated with <em>filename</em>, or raises <code>ArgumentError</code> otherwise.</p>","abstract":false,"args":[{"name":"filename","external_name":"filename","restriction":"Path | String"}],"args_string":"(filename : Path | String) : self","args_html":"(filename : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"from_filename","args":[{"name":"filename","external_name":"filename","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"format = from_filename?(filename)\nformat || (raise(ArgumentError.new(\"File format not found for #{filename}\")))\n"}},{"html_id":"from_stem(stem:Path|String):self-class-method","name":"from_stem","doc":"Returns the file format that matches the file stem, or raises\n`ArgumentError` otherwise.\n\nThe file stem is matched against the file patterns registered by\nthe file formats until one match is found. File patterns can\ncontain valid filename characters and the `*` wildcard, which\nmatches an unlimited number of arbitrary characters:\n\n- `\"c*\"` matches file stems beginning with `c`.\n- `\"*c\"` matches file stems ending with `c`.\n- `\"*c*\"` matches file stems that have `c` in them (including at\n  the beginning or end).\n\n```\n@[Chem::RegisterFormat(names: %w(IMG*))]\nmodule JPEG; end\n\nChem::Format.from_stem(\"IMG_2314\") # => JPEG\nChem::Format.from_stem(\"img_2314\") # => JPEG\nChem::Format.from_stem(\"img2314\")  # => JPEG\nChem::Format.from_stem(\"himg\")     # raises ArgumentError\nChem::Format.from_stem(\"foo\")      # raises ArgumentError\n```\n\nNOTE: The comparison is made using `String#camelcase` and\n`String#downcase`, so the file pattern `FooBar` will match\n`FOOBAR`, `FooBar`, `foobar`, `FOO_BAR` and `foo_bar`.","summary":"<p>Returns the file format that matches the file stem, or raises <code>ArgumentError</code> otherwise.</p>","abstract":false,"args":[{"name":"stem","external_name":"stem","restriction":"Path | String"}],"args_string":"(stem : Path | String) : self","args_html":"(stem : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"from_stem","args":[{"name":"stem","external_name":"stem","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"(from_stem?(stem)) || (raise(ArgumentError.new(\"File format not found for #{stem}\")))"}}],"instance_methods":[{"html_id":"chgcar?:Bool-instance-method","name":"chgcar?","doc":"Returns `true` if the member is the `Chgcar` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Chgcar\">Chgcar</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"chgcar?","return_type":"Bool","visibility":"Public","body":"self == Chgcar"}},{"html_id":"cube?:Bool-instance-method","name":"cube?","doc":"Returns `true` if the member is the `Cube` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Cube\">Cube</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"cube?","return_type":"Bool","visibility":"Public","body":"self == Cube"}},{"html_id":"dx?:Bool-instance-method","name":"dx?","doc":"Returns `true` if the member is the `DX` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#DX\">DX</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"dx?","return_type":"Bool","visibility":"Public","body":"self == DX"}},{"html_id":"encodes?(type:Array(T).class):BoolforallT-instance-method","name":"encodes?","doc":"Returns `true` if the format can write an instance of *type*.\n\n```\nChem::Format::XYZ.encodes?(Chem::AtomCollection)      # => true\nChem::Format::XYZ.encodes?(Chem::Structure)           # => true\nChem::Format::XYZ.encodes?(Array(Chem::Structure))    # => true\nChem::Format::Poscar.encodes?(Chem::AtomCollection)   # => false\nChem::Format::Poscar.encodes?(Chem::Structure)        # => true\nChem::Format::Poscar.encodes?(Array(Chem::Structure)) # => false\nChem::Format::XYZ.encodes?(Int32)                     # => false\nChem::Format::XYZ.encodes?(Array(Int32))              # => false\n```","summary":"<p>Returns <code>true</code> if the format can write an instance of <em>type</em>.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Array(T).class"}],"args_string":"(type : Array(T).class) : Bool forall T","args_html":"(type : <span class=\"t\">Array</span>(<span class=\"t\">T</span>).<span class=\"k\">class</span>) : Bool forall T","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"encodes?","args":[{"name":"type","external_name":"type","restriction":"Array(T).class"}],"return_type":"Bool","visibility":"Public","body":"case self\nin Cube\n  T <= Chem::Spatial::Grid && false\nin DX\n  T <= Chem::Spatial::Grid && false\nin Gen\n  T <= Chem::AtomCollection && false\nin Mol\n  false\nin Mol2\n  T <= Chem::AtomCollection && true\nin PDB\n  T <= Chem::AtomCollection && true\nin PSF\n  false\nin PyMOL\n  T <= Chem::Structure && false\nin SDF\n  false\nin VMD\n  T <= Chem::Structure && false\nin XYZ\n  T <= Chem::AtomCollection && true\nin Stride\n  T <= Chem::Structure && false\nin Chgcar\n  T <= Chem::Spatial::Grid && false\nin Locpot\n  T <= Chem::Spatial::Grid && false\nin Poscar\n  T <= Chem::Structure && false\nend"}},{"html_id":"encodes?(type:T.class):BoolforallT-instance-method","name":"encodes?","doc":"Returns `true` if the format can write an instance of *type*.\n\n```\nChem::Format::XYZ.encodes?(Chem::AtomCollection)      # => true\nChem::Format::XYZ.encodes?(Chem::Structure)           # => true\nChem::Format::XYZ.encodes?(Array(Chem::Structure))    # => true\nChem::Format::Poscar.encodes?(Chem::AtomCollection)   # => false\nChem::Format::Poscar.encodes?(Chem::Structure)        # => true\nChem::Format::Poscar.encodes?(Array(Chem::Structure)) # => false\nChem::Format::XYZ.encodes?(Int32)                     # => false\nChem::Format::XYZ.encodes?(Array(Int32))              # => false\n```","summary":"<p>Returns <code>true</code> if the format can write an instance of <em>type</em>.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"T.class"}],"args_string":"(type : T.class) : Bool forall T","args_html":"(type : <span class=\"t\">T</span>.<span class=\"k\">class</span>) : Bool forall T","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"encodes?","args":[{"name":"type","external_name":"type","restriction":"T.class"}],"return_type":"Bool","visibility":"Public","body":"case self\nin Cube\n  type <= Chem::Spatial::Grid\nin DX\n  type <= Chem::Spatial::Grid\nin Gen\n  type <= Chem::AtomCollection\nin Mol\n  false\nin Mol2\n  type <= Chem::AtomCollection\nin PDB\n  type <= Chem::AtomCollection\nin PSF\n  false\nin PyMOL\n  type <= Chem::Structure\nin SDF\n  false\nin VMD\n  type <= Chem::Structure\nin XYZ\n  type <= Chem::AtomCollection\nin Stride\n  type <= Chem::Structure\nin Chgcar\n  type <= Chem::Spatial::Grid\nin Locpot\n  type <= Chem::Spatial::Grid\nin Poscar\n  type <= Chem::Structure\nend"}},{"html_id":"extnames:Array(String)-instance-method","name":"extnames","doc":"Returns the file extensions associated with the file format.\n\n```\n@[Chem::RegisterFormat(ext: %w(.jpg .jpeg .jpe))]\nmodule JPEG; end\n\nChem::Format::JPEG.extnames # => [\".jpg\", \".jpeg\", \".jpe\"]\n```","summary":"<p>Returns the file extensions associated with the file format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"extnames","return_type":"Array(String)","visibility":"Public","body":"case self\nwhen Cube\n  [\".cube\"] of ::String\nwhen DX\n  [\".dx\"] of ::String\nwhen Gen\n  [\".gen\"] of ::String\nwhen Mol\n  [\".mol\"] of ::String\nwhen Mol2\n  [\".mol2\"] of ::String\nwhen PDB\n  [\".ent\", \".pdb\"] of ::String\nwhen PSF\n  [\".psf\"] of ::String\nwhen PyMOL\n  [\".pml\"] of ::String\nwhen SDF\n  [\".sdf\"] of ::String\nwhen VMD\n  [\".vmd\"] of ::String\nwhen XYZ\n  [\".xyz\"] of ::String\nwhen Stride\n  [\".stride\"] of ::String\nwhen Poscar\n  [\".poscar\"] of ::String\nelse\n  [] of String\nend"}},{"html_id":"file_patterns:Array(String)-instance-method","name":"file_patterns","doc":"Returns the file patterns associated with the file format.\n\n```\n@[Chem::RegisterFormat(names: %w(IMG*))]\nmodule JPEG; end\n\nChem::Format::JPEG.file_patterns # => [\"IMG*\"]\n```","summary":"<p>Returns the file patterns associated with the file format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"file_patterns","return_type":"Array(String)","visibility":"Public","body":"case self\nwhen Chgcar\n  [\"CHGCAR*\"] of ::String\nwhen Locpot\n  [\"LOCPOT*\"] of ::String\nwhen Poscar\n  [\"POSCAR*\", \"CONTCAR*\"] of ::String\nelse\n  [] of String\nend"}},{"html_id":"gen?:Bool-instance-method","name":"gen?","doc":"Returns `true` if the member is the `Gen` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Gen\">Gen</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"gen?","return_type":"Bool","visibility":"Public","body":"self == Gen"}},{"html_id":"locpot?:Bool-instance-method","name":"locpot?","doc":"Returns `true` if the member is the `Locpot` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Locpot\">Locpot</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"locpot?","return_type":"Bool","visibility":"Public","body":"self == Locpot"}},{"html_id":"mol2?:Bool-instance-method","name":"mol2?","doc":"Returns `true` if the member is the `Mol2` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Mol2\">Mol2</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"mol2?","return_type":"Bool","visibility":"Public","body":"self == Mol2"}},{"html_id":"mol?:Bool-instance-method","name":"mol?","doc":"Returns `true` if the member is the `Mol` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Mol\">Mol</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"mol?","return_type":"Bool","visibility":"Public","body":"self == Mol"}},{"html_id":"pdb?:Bool-instance-method","name":"pdb?","doc":"Returns `true` if the member is the `PDB` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#PDB\">PDB</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"pdb?","return_type":"Bool","visibility":"Public","body":"self == PDB"}},{"html_id":"poscar?:Bool-instance-method","name":"poscar?","doc":"Returns `true` if the member is the `Poscar` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Poscar\">Poscar</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"poscar?","return_type":"Bool","visibility":"Public","body":"self == Poscar"}},{"html_id":"psf?:Bool-instance-method","name":"psf?","doc":"Returns `true` if the member is the `PSF` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#PSF\">PSF</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"psf?","return_type":"Bool","visibility":"Public","body":"self == PSF"}},{"html_id":"py_mol?-instance-method","name":"py_mol?","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"py_mol?","visibility":"Public","body":"self == PyMOL"}},{"html_id":"pymol?:Bool-instance-method","name":"pymol?","doc":"Returns `true` if the member is the `PyMOL` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#PyMOL\">PyMOL</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"pymol?","return_type":"Bool","visibility":"Public","body":"self == PyMOL"}},{"html_id":"reader(type:Chem::Spatial::Grid.class)-instance-method","name":"reader","doc":"Returns the reader associated with the format. Raises\n`ArgumentError` if the format does not decode *type* or it is\nwrite only.\n\n```\nChem::Format::XYZ.reader(Chem::Structure)           # => Chem::XYZ::Reader\nChem::Format::DX.reader(Chem::Spatial::Grid)        # => Chem::DX::Reader\nChem::Format::XYZ.reader(Array(Chem::Structure))    # => Chem::XYZ::Reader\nChem::Format::DX.reader(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::VMD.reader(Chem::Structure)           # raises ArgumentError\nChem::Format::XYZ.reader(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the reader associated with the format.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Chem::Spatial::Grid.class"}],"args_string":"(type : Chem::Spatial::Grid.class)","args_html":"(type : <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">Spatial</span><span class=\"t\">::</span><span class=\"t\">Grid</span>.<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"reader","args":[{"name":"type","external_name":"type","restriction":"Chem::Spatial::Grid.class"}],"visibility":"Public","body":"case self\nwhen Cube\n  ::Chem::Cube::Reader\nwhen DX\n  ::Chem::DX::Reader\nwhen Gen\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Mol\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Mol2\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen PDB\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen PSF\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen SDF\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen XYZ\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Chgcar\n  ::Chem::VASP::Chgcar::Reader\nwhen Locpot\n  ::Chem::VASP::Locpot::Reader\nwhen Poscar\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nelse\n  raise(ArgumentError.new(\"#{self} format is write only\"))\nend"}},{"html_id":"reader(type:Chem::Structure.class)-instance-method","name":"reader","doc":"Returns the reader associated with the format. Raises\n`ArgumentError` if the format does not decode *type* or it is\nwrite only.\n\n```\nChem::Format::XYZ.reader(Chem::Structure)           # => Chem::XYZ::Reader\nChem::Format::DX.reader(Chem::Spatial::Grid)        # => Chem::DX::Reader\nChem::Format::XYZ.reader(Array(Chem::Structure))    # => Chem::XYZ::Reader\nChem::Format::DX.reader(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::VMD.reader(Chem::Structure)           # raises ArgumentError\nChem::Format::XYZ.reader(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the reader associated with the format.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Chem::Structure.class"}],"args_string":"(type : Chem::Structure.class)","args_html":"(type : <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">Structure</span>.<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"reader","args":[{"name":"type","external_name":"type","restriction":"Chem::Structure.class"}],"visibility":"Public","body":"case self\nwhen Cube\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen DX\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Gen\n  ::Chem::Gen::Reader\nwhen Mol\n  ::Chem::Mol::Reader\nwhen Mol2\n  ::Chem::Mol2::Reader\nwhen PDB\n  ::Chem::PDB::Reader\nwhen PSF\n  ::Chem::PSF::Reader\nwhen SDF\n  ::Chem::SDF::Reader\nwhen XYZ\n  ::Chem::XYZ::Reader\nwhen Chgcar\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Locpot\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Poscar\n  ::Chem::VASP::Poscar::Reader\nelse\n  raise(ArgumentError.new(\"#{self} format is write only\"))\nend"}},{"html_id":"reader(type:Array(Chem::Structure).class)-instance-method","name":"reader","doc":"Returns the reader associated with the format. Raises\n`ArgumentError` if the format does not decode *type* or it is\nwrite only.\n\n```\nChem::Format::XYZ.reader(Chem::Structure)           # => Chem::XYZ::Reader\nChem::Format::DX.reader(Chem::Spatial::Grid)        # => Chem::DX::Reader\nChem::Format::XYZ.reader(Array(Chem::Structure))    # => Chem::XYZ::Reader\nChem::Format::DX.reader(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::VMD.reader(Chem::Structure)           # raises ArgumentError\nChem::Format::XYZ.reader(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the reader associated with the format.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Array(Chem::Structure).class"}],"args_string":"(type : Array(Chem::Structure).class)","args_html":"(type : <span class=\"t\">Array</span>(<span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">Structure</span>).<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"reader","args":[{"name":"type","external_name":"type","restriction":"Array(Chem::Structure).class"}],"visibility":"Public","body":"case self\nwhen Cube\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen DX\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Gen\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Mol\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Mol2\n  ::Chem::Mol2::Reader\nwhen PDB\n  ::Chem::PDB::Reader\nwhen PSF\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen SDF\n  ::Chem::SDF::Reader\nwhen XYZ\n  ::Chem::XYZ::Reader\nwhen Chgcar\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Locpot\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nwhen Poscar\n  raise(ArgumentError.new(\"#{self} format cannot read #{type}\"))\nelse\n  raise(ArgumentError.new(\"#{self} format is write only\"))\nend"}},{"html_id":"sdf?:Bool-instance-method","name":"sdf?","doc":"Returns `true` if the member is the `SDF` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#SDF\">SDF</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"sdf?","return_type":"Bool","visibility":"Public","body":"self == SDF"}},{"html_id":"stride?:Bool-instance-method","name":"stride?","doc":"Returns `true` if the member is the `Stride` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#Stride\">Stride</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"stride?","return_type":"Bool","visibility":"Public","body":"self == Stride"}},{"html_id":"vmd?:Bool-instance-method","name":"vmd?","doc":"Returns `true` if the member is the `VMD` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#VMD\">VMD</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"vmd?","return_type":"Bool","visibility":"Public","body":"self == VMD"}},{"html_id":"writer(type:Chem::Spatial::Grid.class)-instance-method","name":"writer","doc":"Returns the writer associated with the format. Raises\n`ArgumentError` if the format does not encode *type* or it is\nread only.\n\n```\nChem::Format::XYZ.writer(Chem::Structure)           # => Chem::XYZ::Writer\nChem::Format::DX.writer(Chem::Spatial::Grid)        # => Chem::DX::Writer\nChem::Format::XYZ.writer(Array(Chem::Structure))    # => Chem::XYZ::Writer\nChem::Format::DX.writer(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::XYZ.writer(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the writer associated with the format.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Chem::Spatial::Grid.class"}],"args_string":"(type : Chem::Spatial::Grid.class)","args_html":"(type : <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">Spatial</span><span class=\"t\">::</span><span class=\"t\">Grid</span>.<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"writer","args":[{"name":"type","external_name":"type","restriction":"Chem::Spatial::Grid.class"}],"visibility":"Public","body":"case self\nwhen Cube\n  ::Chem::Cube::Writer\nwhen DX\n  ::Chem::DX::Writer\nwhen Gen\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Mol2\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen PDB\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen PyMOL\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen VMD\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen XYZ\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Stride\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Chgcar\n  ::Chem::VASP::Chgcar::Writer\nwhen Locpot\n  ::Chem::VASP::Locpot::Writer\nwhen Poscar\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nelse\n  raise(ArgumentError.new(\"#{self} format is read only\"))\nend"}},{"html_id":"writer(type:Chem::Structure.class)-instance-method","name":"writer","doc":"Returns the writer associated with the format. Raises\n`ArgumentError` if the format does not encode *type* or it is\nread only.\n\n```\nChem::Format::XYZ.writer(Chem::Structure)           # => Chem::XYZ::Writer\nChem::Format::DX.writer(Chem::Spatial::Grid)        # => Chem::DX::Writer\nChem::Format::XYZ.writer(Array(Chem::Structure))    # => Chem::XYZ::Writer\nChem::Format::DX.writer(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::XYZ.writer(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the writer associated with the format.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Chem::Structure.class"}],"args_string":"(type : Chem::Structure.class)","args_html":"(type : <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">Structure</span>.<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"writer","args":[{"name":"type","external_name":"type","restriction":"Chem::Structure.class"}],"visibility":"Public","body":"case self\nwhen Cube\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen DX\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Gen\n  ::Chem::Gen::Writer\nwhen Mol2\n  ::Chem::Mol2::Writer\nwhen PDB\n  ::Chem::PDB::Writer\nwhen PyMOL\n  ::Chem::PyMOL::Writer\nwhen VMD\n  ::Chem::VMD::Writer\nwhen XYZ\n  ::Chem::XYZ::Writer\nwhen Stride\n  ::Chem::Protein::Stride::Writer\nwhen Chgcar\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Locpot\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Poscar\n  ::Chem::VASP::Poscar::Writer\nelse\n  raise(ArgumentError.new(\"#{self} format is read only\"))\nend"}},{"html_id":"writer(type:Chem::AtomCollection.class)-instance-method","name":"writer","doc":"Returns the writer associated with the format. Raises\n`ArgumentError` if the format does not encode *type* or it is\nread only.\n\n```\nChem::Format::XYZ.writer(Chem::Structure)           # => Chem::XYZ::Writer\nChem::Format::DX.writer(Chem::Spatial::Grid)        # => Chem::DX::Writer\nChem::Format::XYZ.writer(Array(Chem::Structure))    # => Chem::XYZ::Writer\nChem::Format::DX.writer(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::XYZ.writer(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the writer associated with the format.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Chem::AtomCollection.class"}],"args_string":"(type : Chem::AtomCollection.class)","args_html":"(type : <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">AtomCollection</span>.<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"writer","args":[{"name":"type","external_name":"type","restriction":"Chem::AtomCollection.class"}],"visibility":"Public","body":"case self\nwhen Cube\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen DX\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Gen\n  ::Chem::Gen::Writer\nwhen Mol2\n  ::Chem::Mol2::Writer\nwhen PDB\n  ::Chem::PDB::Writer\nwhen PyMOL\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen VMD\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen XYZ\n  ::Chem::XYZ::Writer\nwhen Stride\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Chgcar\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Locpot\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Poscar\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nelse\n  raise(ArgumentError.new(\"#{self} format is read only\"))\nend"}},{"html_id":"writer(type:Array(Chem::AtomCollection).class)-instance-method","name":"writer","doc":"Returns the writer associated with the format. Raises\n`ArgumentError` if the format does not encode *type* or it is\nread only.\n\n```\nChem::Format::XYZ.writer(Chem::Structure)           # => Chem::XYZ::Writer\nChem::Format::DX.writer(Chem::Spatial::Grid)        # => Chem::DX::Writer\nChem::Format::XYZ.writer(Array(Chem::Structure))    # => Chem::XYZ::Writer\nChem::Format::DX.writer(Array(Chem::Spatial::Grid)) # raises ArgumentError\nChem::Format::XYZ.writer(Int32)                     # raises ArgumentError\n```","summary":"<p>Returns the writer associated with the format.</p>","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"Array(Chem::AtomCollection).class"}],"args_string":"(type : Array(Chem::AtomCollection).class)","args_html":"(type : <span class=\"t\">Array</span>(<span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">AtomCollection</span>).<span class=\"k\">class</span>)","location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"writer","args":[{"name":"type","external_name":"type","restriction":"Array(Chem::AtomCollection).class"}],"visibility":"Public","body":"case self\nwhen Cube\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen DX\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Gen\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Mol2\n  ::Chem::Mol2::Writer\nwhen PDB\n  ::Chem::PDB::Writer\nwhen PyMOL\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen VMD\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen XYZ\n  ::Chem::XYZ::Writer\nwhen Stride\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Chgcar\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Locpot\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nwhen Poscar\n  raise(ArgumentError.new(\"#{self} format cannot write #{type}\"))\nelse\n  raise(ArgumentError.new(\"#{self} format is read only\"))\nend"}},{"html_id":"xyz?:Bool-instance-method","name":"xyz?","doc":"Returns `true` if the member is the `XYZ` format.","summary":"<p>Returns <code>true</code> if the member is the <code><a href=\"../Chem/Format.html#XYZ\">XYZ</a></code> format.</p>","abstract":false,"location":{"filename":"src/chem/format.cr","line_number":2,"url":null},"def":{"name":"xyz?","return_type":"Bool","visibility":"Public","body":"self == XYZ"}}]},{"html_id":"chem.cr/Chem/FormatReader","path":"Chem/FormatReader.html","kind":"module","full_name":"Chem::FormatReader(T)","name":"FormatReader","abstract":false,"ancestors":[{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"}],"locations":[{"filename":"src/chem/format_reader.cr","line_number":43,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"}],"including_types":[{"html_id":"chem.cr/Chem/Cube/Reader","kind":"class","full_name":"Chem::Cube::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/DX/Reader","kind":"class","full_name":"Chem::DX::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/Gen/Reader","kind":"class","full_name":"Chem::Gen::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/Mol2/Reader","kind":"class","full_name":"Chem::Mol2::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/Mol/Reader","kind":"class","full_name":"Chem::Mol::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/PDB/Reader","kind":"class","full_name":"Chem::PDB::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/PSF/Reader","kind":"class","full_name":"Chem::PSF::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/SDF/Reader","kind":"class","full_name":"Chem::SDF::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Chgcar/Reader","kind":"class","full_name":"Chem::VASP::Chgcar::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Locpot/Reader","kind":"class","full_name":"Chem::VASP::Locpot::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Poscar/Reader","kind":"class","full_name":"Chem::VASP::Poscar::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/XYZ/Reader","kind":"class","full_name":"Chem::XYZ::Reader","name":"Reader"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"Declares a common interface for reading an object encoded in a file\nformat.\n\nIncluding types must implement the `#decode_entry : T` protected\nmethod, where the type variable `T` indicates the encoded type. Upon\nparsing issues, including types are expected to raise a\n`ParseException` exception.\n\nIncluding types will behave like an IO wrapper via the `IO::Wrapper`\nmixin, which provides convenience constructors. Initialization\narguments are gathered from the designated `#initialize` method\nlooked up on concrete types at compilation time. The underlying IO\ncan be accessed through the `@io` instance variable.\n\n```\nstruct Foo\n  getter num : Int32\n  getter str : String\n\n  def initialize(@num : Int32, @str : String); end\nend\n\nclass Foo::Reader\n  include Chem::FormatReader(Foo)\n\n  def decode_entry : Foo\n    Foo.new num: @io.read_line.to_i, str: @io.read_line\n  end\nend\n\nio = IO::Memory.new \"123\\nbar\\n\"\nreader = Foo::Reader.new io\nreader.read? # => false\nobj = reader.read_entry\nobj.num           # => 123\nobj.str           # => \"bar\"\nreader.read?      # => true\nreader.read_entry # raises IO::Error (entry was already read)\nreader.close\nreader.read_entry # raises IO::Error (closed IO)\n```","summary":"<p>Declares a common interface for reading an object encoded in a file format.</p>","instance_methods":[{"html_id":"read?:Bool-instance-method","name":"read?","doc":"Returns `true` if this encoded object was already read.","summary":"<p>Returns <code>true</code> if this encoded object was already read.</p>","abstract":false,"location":{"filename":"src/chem/format_reader.cr","line_number":47,"url":null},"def":{"name":"read?","return_type":"Bool","visibility":"Public","body":"@read"}},{"html_id":"read_entry:T-instance-method","name":"read_entry","doc":"Reads the encoded object of type `T` from the IO. Raises\n`IO::Error` if the reader is closed or the encoded object has been\nalready read, or `ParseException` if an object cannot be read.","summary":"<p>Reads the encoded object of type <code>T</code> from the IO.</p>","abstract":false,"location":{"filename":"src/chem/format_reader.cr","line_number":59,"url":null},"def":{"name":"read_entry","return_type":"T","visibility":"Public","body":"check_open\ncheck_read\nobj = decode_entry\n@read = true\nobj\n"}}],"types":[{"html_id":"chem.cr/Chem/FormatReader/Attached","path":"Chem/FormatReader/Attached.html","kind":"module","full_name":"Chem::FormatReader::Attached(T)","name":"Attached","abstract":false,"locations":[{"filename":"src/chem/format_reader.cr","line_number":117,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"chem.cr/Chem/Cube/Reader","kind":"class","full_name":"Chem::Cube::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Chgcar/Reader","kind":"class","full_name":"Chem::VASP::Chgcar::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Locpot/Reader","kind":"class","full_name":"Chem::VASP::Locpot::Reader","name":"Reader"}],"namespace":{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader(T)","name":"FormatReader"},"doc":"Declares a common interface for reading the attached object encoded\nin a file format. This is useful for cases when a file format also\nencodes an additional object but it is not part of the main content\n(e.g., some volumetric data file formats used in computational\nchemistry also include information of the molecule structure).\n\nIncluding types must implement the `#decode_attached : T` protected\nmethod, where the type variable `T` indicates the attached object\ntype. Upon parsing issues, including types are expected to raise a\n`ParseException` exception.","summary":"<p>Declares a common interface for reading the attached object encoded in a file format.</p>","instance_methods":[{"html_id":"read_attached:T-instance-method","name":"read_attached","doc":"Reads the attached object from the IO. Raises `IO::Error` if the\nreader is closed or `ParseException` if the object cannot be\ndecoded.","summary":"<p>Reads the attached object from the IO.</p>","abstract":false,"location":{"filename":"src/chem/format_reader.cr","line_number":130,"url":null},"def":{"name":"read_attached","return_type":"T","visibility":"Public","body":"@attached || (@attached = (begin\n  check_open\n  decode_attached\nend))"}}]},{"html_id":"chem.cr/Chem/FormatReader/Headed","path":"Chem/FormatReader/Headed.html","kind":"module","full_name":"Chem::FormatReader::Headed(T)","name":"Headed","abstract":false,"locations":[{"filename":"src/chem/format_reader.cr","line_number":86,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"chem.cr/Chem/Cube/Reader","kind":"class","full_name":"Chem::Cube::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/DX/Reader","kind":"class","full_name":"Chem::DX::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/PDB/Reader","kind":"class","full_name":"Chem::PDB::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Chgcar/Reader","kind":"class","full_name":"Chem::VASP::Chgcar::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Locpot/Reader","kind":"class","full_name":"Chem::VASP::Locpot::Reader","name":"Reader"}],"namespace":{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader(T)","name":"FormatReader"},"doc":"Declares a common interface for reading the header information\nencoded in a file format. This is useful for cases when a file\nformat includes valuable information (by itself) in the header.\n\nIncluding types must implement the `#decode_header : T` protected\nmethod, where the type variable `T` indicates the header type. Upon\nparsing issues, including types are expected to raise a\n`ParseException` exception.","summary":"<p>Declares a common interface for reading the header information encoded in a file format.</p>","instance_methods":[{"html_id":"read_header:T-instance-method","name":"read_header","doc":"Reads the header object from the IO. Raises `IO::Error` if the\nreader is closed or `ParseException` if the header cannot be\ndecoded.","summary":"<p>Reads the header object from the IO.</p>","abstract":false,"location":{"filename":"src/chem/format_reader.cr","line_number":99,"url":null},"def":{"name":"read_header","return_type":"T","visibility":"Public","body":"@header || (@header = (begin\n  check_open\n  decode_header\nend))"}}]},{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","path":"Chem/FormatReader/MultiEntry.html","kind":"module","full_name":"Chem::FormatReader::MultiEntry(T)","name":"MultiEntry","abstract":false,"locations":[{"filename":"src/chem/format_reader.cr","line_number":143,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"chem.cr/Chem/Mol2/Reader","kind":"class","full_name":"Chem::Mol2::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/PDB/Reader","kind":"class","full_name":"Chem::PDB::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/SDF/Reader","kind":"class","full_name":"Chem::SDF::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/XYZ/Reader","kind":"class","full_name":"Chem::XYZ::Reader","name":"Reader"}],"namespace":{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader(T)","name":"FormatReader"},"doc":"Declares a common interface for reading a variable number of objects\nencoded in a file format.\n\nIncluding types must implement the `#skip_entry` method to discard\nthe next entry in the IO.","summary":"<p>Declares a common interface for reading a variable number of objects encoded in a file format.</p>","instance_methods":[{"html_id":"each(indexes:Enumerable(Int),&:T->)-instance-method","name":"each","doc":"Yields entries at the specified *indexes* in the IO to the given\nblock. Raises `IndexError` when an index is out of bounds.","summary":"<p>Yields entries at the specified <em>indexes</em> in the IO to the given block.</p>","abstract":false,"args":[{"name":"indexes","external_name":"indexes","restriction":"Enumerable(Int)"}],"args_string":"(indexes : Enumerable(Int), & : T -> )","args_html":"(indexes : <a href=\"../../Enumerable.html\">Enumerable</a>(Int), & : T -> )","location":{"filename":"src/chem/format_reader.cr","line_number":156,"url":null},"def":{"name":"each","args":[{"name":"indexes","external_name":"indexes","restriction":"Enumerable(Int)"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(T ->)"},"visibility":"Public","body":"prev_i = -1\nindexes.each do |i|\n  ((i - prev_i) - 1).times do\n    skip_entry\n  end\n  obj = next_entry\n  if obj\n  else\n    raise(IndexError.new)\n  end\n  yield obj\n  prev_i = i\nend\n"}},{"html_id":"each(&:T->):Nil-instance-method","name":"each","doc":"Yields each entry in the IO to the given block.","summary":"<p>Yields each entry in the IO to the given block.</p>","abstract":false,"location":{"filename":"src/chem/format_reader.cr","line_number":148,"url":null},"def":{"name":"each","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(T ->)"},"return_type":"Nil","visibility":"Public","body":"while obj = next_entry\n  yield obj\nend"}},{"html_id":"next_entry:T|Nil-instance-method","name":"next_entry","doc":"Returns the next entry in the IO, or `nil` if there are no more\nentries.","summary":"<p>Returns the next entry in the IO, or <code>nil</code> if there are no more entries.</p>","abstract":false,"location":{"filename":"src/chem/format_reader.cr","line_number":169,"url":null},"def":{"name":"next_entry","return_type":"T | ::Nil","visibility":"Public","body":"begin\n  check_open\n  obj = decode_entry\n  @read = true\n  obj\nrescue IO::EOFError\n  nil\nend"}},{"html_id":"read_entry:T-instance-method","name":"read_entry","doc":"Returns the next entry in the IO. Raises `ParseException` if there\nare no more entries.","summary":"<p>Returns the next entry in the IO.</p>","abstract":false,"location":{"filename":"src/chem/format_reader.cr","line_number":180,"url":null},"def":{"name":"read_entry","return_type":"T","visibility":"Public","body":"next_entry || (parse_exception(@read ? \"No more entries\" : \"Empty content\"))"}},{"html_id":"skip_entry:Nil-instance-method","name":"skip_entry","doc":"Discards the next entry in the IO without fully parsing it.","summary":"<p>Discards the next entry in the IO without fully parsing it.</p>","abstract":true,"location":{"filename":"src/chem/format_reader.cr","line_number":145,"url":null},"def":{"name":"skip_entry","return_type":"Nil","visibility":"Public","body":""}}]}]},{"html_id":"chem.cr/Chem/FormatWriter","path":"Chem/FormatWriter.html","kind":"module","full_name":"Chem::FormatWriter(T)","name":"FormatWriter","abstract":false,"ancestors":[{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"}],"locations":[{"filename":"src/chem/format_writer.cr","line_number":41,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"FILE_MODE","name":"FILE_MODE","value":"\"w\"","doc":"File open mode. May be overriden by including types.","summary":"<p>File open mode.</p>"}],"included_modules":[{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"}],"including_types":[{"html_id":"chem.cr/Chem/Cube/Writer","kind":"class","full_name":"Chem::Cube::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/DX/Writer","kind":"class","full_name":"Chem::DX::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/Gen/Writer","kind":"class","full_name":"Chem::Gen::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/Mol2/Writer","kind":"class","full_name":"Chem::Mol2::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/PDB/Writer","kind":"class","full_name":"Chem::PDB::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/Protein/Stride/Writer","kind":"class","full_name":"Chem::Protein::Stride::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/PyMOL/Writer","kind":"class","full_name":"Chem::PyMOL::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/VASP/Chgcar/Writer","kind":"class","full_name":"Chem::VASP::Chgcar::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/VASP/Locpot/Writer","kind":"class","full_name":"Chem::VASP::Locpot::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/VASP/Poscar/Writer","kind":"class","full_name":"Chem::VASP::Poscar::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/VMD/Writer","kind":"class","full_name":"Chem::VMD::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/XYZ/Writer","kind":"class","full_name":"Chem::XYZ::Writer","name":"Writer"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"Declares a common interface for writing an object encoded in a file\nformat.\n\nIncluding types must implement the `#encode_entry(T)` protected\nmethod, where the type variable `T` indicates the encoded type.\n\nIncluding types will behave like an IO wrapper via the `IO::Wrapper`\nmixin, which provides convenience constructors. Initialization\narguments are gathered from the designated `#initialize` method\nlooked up on concrete types at compilation time. The underlying IO\ncan be accessed through the `@io` instance variable.\n\n```\nstruct Foo\n  getter num : Int32\n  getter str : String\n\n  def initialize(@num : Int32, @str : String); end\nend\n\nclass Foo::Writer\n  include Chem::FormatWriter(Foo)\n\n  def encode_entry(foo : Foo) : Nil\n    @io.puts foo.num\n    @io.puts foo.str\n  end\nend\n\nio = IO::Memory.new\nwriter = Foo::Writer.new io\nwriter.written? # => false\nwriter << Foo.new(123, \"bar\")\nio.to_s                       # => \"123\\nbar\\n\"\nwriter.written?               # => true\nwriter << Foo.new(456, \"baz\") # raises IO::Error (an entry was already written)\nwriter.close\nwriter << Foo.new(789, \"foo\") # raises IO::Error (closed IO)\n```","summary":"<p>Declares a common interface for writing an object encoded in a file format.</p>","instance_methods":[{"html_id":"<<(obj:T):Nil-instance-method","name":"<<","doc":"Writes the given object into the `IO`. Raises `IO::Error` if the\n`IO` is closed or if an entry was already written.","summary":"<p>Writes the given object into the <code>IO</code>.</p>","abstract":false,"args":[{"name":"obj","external_name":"obj","restriction":"T"}],"args_string":"(obj : T) : Nil","args_html":"(obj : T) : Nil","location":{"filename":"src/chem/format_writer.cr","line_number":57,"url":null},"def":{"name":"<<","args":[{"name":"obj","external_name":"obj","restriction":"T"}],"return_type":"Nil","visibility":"Public","body":"check_open\ncheck_write\nencode_entry(obj)\n@written = true\n"}},{"html_id":"format(str:String,*args,**options):Nil-instance-method","name":"format","doc":"Writes a formatted string to the enclosed `IO`. For details on the\nformat string, see top-level `sprintf`.","summary":"<p>Writes a formatted string to the enclosed <code>IO</code>.</p>","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"args","external_name":"args","restriction":""}],"args_string":"(str : String, *args, **options) : Nil","args_html":"(str : String, *args, **options) : Nil","location":{"filename":"src/chem/format_writer.cr","line_number":66,"url":null},"def":{"name":"format","args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":1,"return_type":"Nil","visibility":"Public","body":"@io.printf(str, *args, **options)"}},{"html_id":"formatl(str:String,*args,**options):Nil-instance-method","name":"formatl","doc":"Writes a formatted string followed by a newline to the enclosed\n`IO`. For details on the format string, see top-level `sprintf`.","summary":"<p>Writes a formatted string followed by a newline to the enclosed <code>IO</code>.</p>","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"args","external_name":"args","restriction":""}],"args_string":"(str : String, *args, **options) : Nil","args_html":"(str : String, *args, **options) : Nil","location":{"filename":"src/chem/format_writer.cr","line_number":72,"url":null},"def":{"name":"formatl","args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":1,"return_type":"Nil","visibility":"Public","body":"format(str, *args, **options)\n@io << '\\n'\n"}},{"html_id":"written?:Bool-instance-method","name":"written?","doc":"Returns `true` if an object was already written.","summary":"<p>Returns <code>true</code> if an object was already written.</p>","abstract":false,"location":{"filename":"src/chem/format_writer.cr","line_number":45,"url":null},"def":{"name":"written?","return_type":"Bool","visibility":"Public","body":"@written"}}],"types":[{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","path":"Chem/FormatWriter/MultiEntry.html","kind":"module","full_name":"Chem::FormatWriter::MultiEntry(T)","name":"MultiEntry","abstract":false,"locations":[{"filename":"src/chem/format_writer.cr","line_number":90,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"chem.cr/Chem/Mol2/Writer","kind":"class","full_name":"Chem::Mol2::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/PDB/Writer","kind":"class","full_name":"Chem::PDB::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/XYZ/Writer","kind":"class","full_name":"Chem::XYZ::Writer","name":"Writer"}],"namespace":{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter(T)","name":"FormatWriter"},"doc":"The `MultiEntry` mixin provides an interface for writing in a file\nformat that can hold a variable number of objects.\n\nIt holds the total number of entries (`#total_entries`) and\nreimplements the `<<` operator to track how many of them has been\nwritten so far.","summary":"<p>The <code><a href=\"../../Chem/FormatWriter/MultiEntry.html\">MultiEntry</a></code> mixin provides an interface for writing in a file format that can hold a variable number of objects.</p>","constructors":[{"html_id":"new(io:IO,total_entries:Int32|Nil=nil,sync_close:Bool=false)-class-method","name":"new","doc":"Creates a new object from the given *io*. If the number of entries\nto be written is known, pass *total_entries*, otherwise set it to\n`nil`.","summary":"<p>Creates a new object from the given <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, total_entries : Int32 | Nil = nil, sync_close : Bool = false)","args_html":"(io : IO, total_entries : Int32 | Nil = <span class=\"n\">nil</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/format_writer.cr","line_number":100,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, total_entries, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"<<(obj:T):self-instance-method","name":"<<","doc":"Writes *obj* to the `IO`. It keeps count of the number of entries\nwritten to the `IO`.","summary":"<p>Writes <em>obj</em> to the <code>IO</code>.</p>","abstract":false,"args":[{"name":"obj","external_name":"obj","restriction":"T"}],"args_string":"(obj : T) : self","args_html":"(obj : T) : <span class=\"k\">self</span>","location":{"filename":"src/chem/format_writer.cr","line_number":106,"url":null},"def":{"name":"<<","args":[{"name":"obj","external_name":"obj","restriction":"T"}],"return_type":"self","visibility":"Public","body":"check_open\nencode_entry(obj)\n@entry_index = @entry_index + 1\n@written = true\nself\n"}},{"html_id":"multi?:Bool-instance-method","name":"multi?","doc":"Returns `true` if multiple entries or an indeterminate number of\nentries are to be written, else `false`.","summary":"<p>Returns <code>true</code> if multiple entries or an indeterminate number of entries are to be written, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/format_writer.cr","line_number":116,"url":null},"def":{"name":"multi?","return_type":"Bool","visibility":"Public","body":"(@total_entries || Int32::MAX) > 1"}}]}]},{"html_id":"chem.cr/Chem/Gen","path":"Chem/Gen.html","kind":"module","full_name":"Chem::Gen","name":"Gen","abstract":false,"locations":[{"filename":"src/chem/formats/gen.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"types":[{"html_id":"chem.cr/Chem/Gen/Reader","path":"Chem/Gen/Reader.html","kind":"class","full_name":"Chem::Gen::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/gen.cr","line_number":3,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"}],"namespace":{"html_id":"chem.cr/Chem/Gen","kind":"module","full_name":"Chem::Gen","name":"Gen"},"class_methods":[{"html_id":"open(io:IO,guess_bonds:Bool=false,guess_names:Bool=false,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, guess_bonds : Bool = false, guess_names : Bool = false, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, guess_bonds, guess_names, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,guess_bonds:Bool=false,guess_names:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"args_string":"(path : Path | String, guess_bonds : Bool = false, guess_names : Bool = false, & : self -> )","args_html":"(path : Path | String, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path, guess_bonds, guess_names)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,guess_bonds:Bool=false,guess_names:Bool=false,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, guess_bonds : Bool = false, guess_names : Bool = false, sync_close : Bool = false)","args_html":"(io : IO, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/gen.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, guess_bonds, guess_names, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,guess_bonds:Bool=false,guess_names:Bool=false):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"args_string":"(path : Path | String, guess_bonds : Bool = false, guess_names : Bool = false) : self","args_html":"(path : Path | String, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), guess_bonds, guess_names, sync_close: true)"}}]},{"html_id":"chem.cr/Chem/Gen/Writer","path":"Chem/Gen/Writer.html","kind":"class","full_name":"Chem::Gen::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/gen.cr","line_number":67,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"namespace":{"html_id":"chem.cr/Chem/Gen","kind":"module","full_name":"Chem::Gen","name":"Gen"},"class_methods":[{"html_id":"open(io:IO,fractional:Bool=false,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, fractional : Bool = false, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, fractional : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, fractional, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,fractional:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(path : Path | String, fractional : Bool = false, & : self -> )","args_html":"(path : Path | String, fractional : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path, fractional)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,fractional:Bool=false,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, fractional : Bool = false, sync_close : Bool = false)","args_html":"(io : IO, fractional : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/gen.cr","line_number":70,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, fractional, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,fractional:Bool=false):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(path : Path | String, fractional : Bool = false) : self","args_html":"(path : Path | String, fractional : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), fractional, sync_close: true)"}}]}]},{"html_id":"chem.cr/Chem/Improper","path":"Chem/Improper.html","kind":"struct","full_name":"Chem::Improper","name":"Improper","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Chem/Connectivity","kind":"module","full_name":"Chem::Connectivity","name":"Connectivity"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/connectivity.cr","line_number":255,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/Connectivity","kind":"module","full_name":"Chem::Connectivity","name":"Connectivity"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"An `Improper` provides a canonical representation of an improper\ndihedral angle between four bonded atoms.\n\nAn improper dihedral angle is defined by three bonds around a\ncentral atom:\n\n    A       C\n      \\   /\n        B\n        |\n        D\n\nIt measures the angle between the two planes defined by the atoms\n(A,B,C) and (C,B,D).","summary":"<p>An <code><a href=\"../Chem/Improper.html\">Improper</a></code> provides a canonical representation of an improper dihedral angle between four bonded atoms.</p>","constructors":[{"html_id":"new(a1:Atom,a2:Atom,a3:Atom,a4:Atom)-class-method","name":"new","doc":"Creates a new *Improper* with the given atoms.","summary":"<p>Creates a new <em>Improper</em> with the given atoms.</p>","abstract":false,"args":[{"name":"a1","external_name":"a1","restriction":"Atom"},{"name":"a2","external_name":"a2","restriction":"Atom"},{"name":"a3","external_name":"a3","restriction":"Atom"},{"name":"a4","external_name":"a4","restriction":"Atom"}],"args_string":"(a1 : Atom, a2 : Atom, a3 : Atom, a4 : Atom)","args_html":"(a1 : <a href=\"../Chem/Atom.html\">Atom</a>, a2 : <a href=\"../Chem/Atom.html\">Atom</a>, a3 : <a href=\"../Chem/Atom.html\">Atom</a>, a4 : <a href=\"../Chem/Atom.html\">Atom</a>)","location":{"filename":"src/chem/connectivity.cr","line_number":259,"url":null},"def":{"name":"new","args":[{"name":"a1","external_name":"a1","restriction":"Atom"},{"name":"a2","external_name":"a2","restriction":"Atom"},{"name":"a3","external_name":"a3","restriction":"Atom"},{"name":"a4","external_name":"a4","restriction":"Atom"}],"visibility":"Public","body":"_ = allocate\n_.initialize(a1, a2, a3, a4)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"measure:Float64-instance-method","name":"measure","doc":"Returns the current value of the improper dihedral angle in\nradians.","summary":"<p>Returns the current value of the improper dihedral angle in radians.</p>","abstract":false,"location":{"filename":"src/chem/connectivity.cr","line_number":267,"url":null},"def":{"name":"measure","return_type":"Float64","visibility":"Public","body":"Spatial.improper(*@atoms.map(&.coords))"}}]},{"html_id":"chem.cr/Chem/Metadata","path":"Chem/Metadata.html","kind":"class","full_name":"Chem::Metadata","name":"Metadata","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem.cr","line_number":120,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"instance_methods":[{"html_id":"[](key:String):Any-instance-method","name":"[]","doc":"Returns the value for the given key. Raises `KeyError` if not\nfound.","summary":"<p>Returns the value for the given key.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String) : Any","args_html":"(key : String) : <a href=\"../Chem/Metadata/Any.html\">Any</a>","location":{"filename":"src/chem.cr","line_number":215,"url":null},"def":{"name":"[]","args":[{"name":"key","external_name":"key","restriction":"String"}],"return_type":"Any","visibility":"Public","body":"@data[key]"}},{"html_id":"[]=(key:String,value:Bool):Bool-instance-method","name":"[]=","doc":"Sets the value of *key* to the given value.","summary":"<p>Sets the value of <em>key</em> to the given value.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"value","external_name":"value","restriction":"Bool"}],"args_string":"(key : String, value : Bool) : Bool","args_html":"(key : String, value : Bool) : Bool","location":{"filename":"src/chem.cr","line_number":219,"url":null},"def":{"name":"[]=","args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"value","external_name":"value","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"@data[key] = Any.new(value)\nvalue\n"}},{"html_id":"[]=(key:String,value:Float64):Float64-instance-method","name":"[]=","doc":"Sets the value of *key* to the given value.","summary":"<p>Sets the value of <em>key</em> to the given value.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"value","external_name":"value","restriction":"Float64"}],"args_string":"(key : String, value : Float64) : Float64","args_html":"(key : String, value : Float64) : Float64","location":{"filename":"src/chem.cr","line_number":219,"url":null},"def":{"name":"[]=","args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"value","external_name":"value","restriction":"Float64"}],"return_type":"Float64","visibility":"Public","body":"@data[key] = Any.new(value)\nvalue\n"}},{"html_id":"[]=(key:String,value:Int32):Int32-instance-method","name":"[]=","doc":"Sets the value of *key* to the given value.","summary":"<p>Sets the value of <em>key</em> to the given value.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"value","external_name":"value","restriction":"Int32"}],"args_string":"(key : String, value : Int32) : Int32","args_html":"(key : String, value : Int32) : Int32","location":{"filename":"src/chem.cr","line_number":219,"url":null},"def":{"name":"[]=","args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"value","external_name":"value","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":"@data[key] = Any.new(value)\nvalue\n"}},{"html_id":"[]=(key:String,value:String):String-instance-method","name":"[]=","doc":"Sets the value of *key* to the given value.","summary":"<p>Sets the value of <em>key</em> to the given value.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"value","external_name":"value","restriction":"String"}],"args_string":"(key : String, value : String) : String","args_html":"(key : String, value : String) : String","location":{"filename":"src/chem.cr","line_number":219,"url":null},"def":{"name":"[]=","args":[{"name":"key","external_name":"key","restriction":"String"},{"name":"value","external_name":"value","restriction":"String"}],"return_type":"String","visibility":"Public","body":"@data[key] = Any.new(value)\nvalue\n"}},{"html_id":"[]?(key:String):Any|Nil-instance-method","name":"[]?","doc":"Returns the value for the given key. Returns `nil` if not found.","summary":"<p>Returns the value for the given key.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String) : Any | Nil","args_html":"(key : String) : <a href=\"../Chem/Metadata/Any.html\">Any</a> | Nil","location":{"filename":"src/chem.cr","line_number":228,"url":null},"def":{"name":"[]?","args":[{"name":"key","external_name":"key","restriction":"String"}],"return_type":"Any | ::Nil","visibility":"Public","body":"@data[key]?"}},{"html_id":"clear:self-instance-method","name":"clear","doc":"Empties the `Metadata` and returns it.","summary":"<p>Empties the <code><a href=\"../Chem/Metadata.html\">Metadata</a></code> and returns it.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":243,"url":null},"def":{"name":"clear","return_type":"self","visibility":"Public","body":"@data.clear"}},{"html_id":"delete(key:String):Any|Nil-instance-method","name":"delete","doc":"Deletes the key-value pair and returns the value. Returns `nil` if\n*key* does not exist.","summary":"<p>Deletes the key-value pair and returns the value.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String) : Any | Nil","args_html":"(key : String) : <a href=\"../Chem/Metadata/Any.html\">Any</a> | Nil","location":{"filename":"src/chem.cr","line_number":249,"url":null},"def":{"name":"delete","args":[{"name":"key","external_name":"key","restriction":"String"}],"return_type":"Any | ::Nil","visibility":"Public","body":"@data.delete(key)"}},{"html_id":"delete(key:String,&:String->):Any|Nil-instance-method","name":"delete","doc":"Deletes the key-value pair and returns the value. Yields *key* and\nreturns the value returned by the given block if *key* does not\nexist.","summary":"<p>Deletes the key-value pair and returns the value.</p>","abstract":false,"args":[{"name":"key","external_name":"key","restriction":"String"}],"args_string":"(key : String, & : String -> ) : Any | Nil","args_html":"(key : String, & : String -> ) : <a href=\"../Chem/Metadata/Any.html\">Any</a> | Nil","location":{"filename":"src/chem.cr","line_number":256,"url":null},"def":{"name":"delete","args":[{"name":"key","external_name":"key","restriction":"String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(String ->)"},"return_type":"Any | ::Nil","visibility":"Public","body":"@data.delete(key) do |key|\n  yield key\nend"}},{"html_id":"each(&:Tuple(String,Type)->):Nil-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":232,"url":null},"def":{"name":"each","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(::Tuple(String, Type) ->)"},"return_type":"Nil","visibility":"Public","body":"@data.each do |keyvalue|\n  yield keyvalue\nend"}},{"html_id":"each:Iterator(Tuple(String,Type))-instance-method","name":"each","doc":"Must return an `Iterator` over the elements in this collection.","summary":"<p>Must return an <code>Iterator</code> over the elements in this collection.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":238,"url":null},"def":{"name":"each","return_type":"Iterator(::Tuple(String, Type))","visibility":"Public","body":"@data.each"}},{"html_id":"each_key(&:String->):Nil-instance-method","name":"each_key","doc":"Yields each key to the given block.\n\nThe enumeration follows the order the keys were inserted.","summary":"<p>Yields each key to the given block.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":263,"url":null},"def":{"name":"each_key","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(String ->)"},"return_type":"Nil","visibility":"Public","body":"@data.each_key do |key|\n  yield key\nend"}},{"html_id":"each_key:Iterator(String)-instance-method","name":"each_key","doc":"Returns an iterator over the keys.","summary":"<p>Returns an iterator over the keys.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":268,"url":null},"def":{"name":"each_key","return_type":"Iterator(String)","visibility":"Public","body":"@data.each_key"}},{"html_id":"each_value(&:Any->):Nil-instance-method","name":"each_value","doc":"Yields each value to the given block.\n\nThe enumeration follows the order the keys were inserted.","summary":"<p>Yields each value to the given block.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":275,"url":null},"def":{"name":"each_value","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Any ->)"},"return_type":"Nil","visibility":"Public","body":"@data.each_value do |value|\n  yield value\nend"}},{"html_id":"each_value:Iterator(Any)-instance-method","name":"each_value","doc":"Returns an iterator over the values.","summary":"<p>Returns an iterator over the values.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":280,"url":null},"def":{"name":"each_value","return_type":"Iterator(Any)","visibility":"Public","body":"@data.each_value"}},{"html_id":"empty?:Bool-instance-method","name":"empty?","doc":"Returns `true` when the metadata contains no key-value pairs, else\n`false`.","summary":"<p>Returns <code>true</code> when the metadata contains no key-value pairs, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":286,"url":null},"def":{"name":"empty?","return_type":"Bool","visibility":"Public","body":"@data.empty?"}},{"html_id":"fetch?:Bool-instance-method","name":"fetch?","doc":"Returns `true` when the metadata contains no key-value pairs, else\n`false`.","summary":"<p>Returns <code>true</code> when the metadata contains no key-value pairs, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":292,"url":null},"def":{"name":"fetch?","return_type":"Bool","visibility":"Public","body":"@data.empty?"}}],"types":[{"html_id":"chem.cr/Chem/Metadata/Any","path":"Chem/Metadata/Any.html","kind":"struct","full_name":"Chem::Metadata::Any","name":"Any","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem.cr","line_number":129,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Metadata","kind":"class","full_name":"Chem::Metadata","name":"Metadata"},"doc":"`Any` is a value wrapper to encapsulate all possible metadata\ntypes (`ValueType`). It provides convenient `#as_*` cast methods.","summary":"<p><code><a href=\"../../Chem/Metadata/Any.html\">Any</a></code> is a value wrapper to encapsulate all possible metadata types (<code><a href=\"../../Chem/Metadata/ValueType.html\">ValueType</a></code>).</p>","constructors":[{"html_id":"new(raw:ValueType)-class-method","name":"new","doc":"Creates a new `Any` instance by enclosing the given value.","summary":"<p>Creates a new <code><a href=\"../../Chem/Metadata/Any.html\">Any</a></code> instance by enclosing the given value.</p>","abstract":false,"args":[{"name":"raw","external_name":"raw","restriction":"ValueType"}],"args_string":"(raw : ValueType)","args_html":"(raw : <a href=\"../../Chem/Metadata/ValueType.html\">ValueType</a>)","location":{"filename":"src/chem.cr","line_number":133,"url":null},"def":{"name":"new","args":[{"name":"raw","external_name":"raw","restriction":"ValueType"}],"visibility":"Public","body":"_ = allocate\n_.initialize(raw)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(rhs:self):Bool-instance-method","name":"==","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Bool","args_html":"(rhs : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem.cr","line_number":136,"url":null},"def":{"name":"==","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"@raw == rhs.raw"}},{"html_id":"==(rhs):Bool-instance-method","name":"==","doc":"Returns `true` if this struct is equal to *other*.\n\nBoth structs' instance vars are compared to each other. Thus, two\nstructs are considered equal if each of their instance variables are\nequal. Subclasses should override this method to provide specific\nequality semantics.\n\n```\nstruct Point\n  def initialize(@x : Int32, @y : Int32)\n  end\nend\n\np1 = Point.new 1, 2\np2 = Point.new 1, 2\np3 = Point.new 3, 4\n\np1 == p2 # => true\np1 == p3 # => false\n```","summary":"<p>Returns <code>true</code> if this struct is equal to <em>other</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":""}],"args_string":"(rhs) : Bool","args_html":"(rhs) : Bool","location":{"filename":"src/chem.cr","line_number":140,"url":null},"def":{"name":"==","args":[{"name":"rhs","external_name":"rhs","restriction":""}],"return_type":"Bool","visibility":"Public","body":"@raw == rhs"}},{"html_id":"as_bool:Bool-instance-method","name":"as_bool","doc":"Returns the enclosed value as a bool. Raises `TypeCastError` if\nit's not a bool.","summary":"<p>Returns the enclosed value as a bool.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":146,"url":null},"def":{"name":"as_bool","return_type":"Bool","visibility":"Public","body":"@raw.as(Bool)"}},{"html_id":"as_bool?:Bool|Nil-instance-method","name":"as_bool?","doc":"Returns the enclosed value as a bool. Returns `nil` if it's not a\nbool.","summary":"<p>Returns the enclosed value as a bool.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":152,"url":null},"def":{"name":"as_bool?","return_type":"Bool | ::Nil","visibility":"Public","body":"@raw.as?(Bool)"}},{"html_id":"as_f:Float64-instance-method","name":"as_f","doc":"Returns the enclosed value as a float. Raises `TypeCastError` if\nit's not a float.","summary":"<p>Returns the enclosed value as a float.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":158,"url":null},"def":{"name":"as_f","return_type":"Float64","visibility":"Public","body":"case raw = @raw\nwhen Int\n  raw.to_f\nelse\n  raw.as(Float64)\nend"}},{"html_id":"as_f?:Float64|Nil-instance-method","name":"as_f?","doc":"Returns the enclosed value as float. Returns `nil` if it's not a\nfloat.","summary":"<p>Returns the enclosed value as float.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":169,"url":null},"def":{"name":"as_f?","return_type":"Float64 | ::Nil","visibility":"Public","body":"case raw = @raw\nwhen Int\n  raw.to_f\nelse\n  raw.as?(Float64)\nend"}},{"html_id":"as_i:Int32-instance-method","name":"as_i","doc":"Returns the enclosed value as an integer. Raises `TypeCastError`\nif it's not an integer.","summary":"<p>Returns the enclosed value as an integer.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":180,"url":null},"def":{"name":"as_i","return_type":"Int32","visibility":"Public","body":"(@raw.as(Int)).to_i"}},{"html_id":"as_i?:Int32|Nil-instance-method","name":"as_i?","doc":"Returns the enclosed value as an integer. Returns `nil` if it's\nnot an integer.","summary":"<p>Returns the enclosed value as an integer.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":186,"url":null},"def":{"name":"as_i?","return_type":"Int32 | ::Nil","visibility":"Public","body":"(@raw.as?(Int)).try(&.to_i)"}},{"html_id":"as_s:String-instance-method","name":"as_s","doc":"Returns the enclosed value as a string. Raises `TypeCastError` if\nit's not a string.","summary":"<p>Returns the enclosed value as a string.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":192,"url":null},"def":{"name":"as_s","return_type":"String","visibility":"Public","body":"@raw.as(String)"}},{"html_id":"as_s?:String|Nil-instance-method","name":"as_s?","doc":"Returns the enclosed value as a string. Returns `nil` if it's not\na string.","summary":"<p>Returns the enclosed value as a string.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":198,"url":null},"def":{"name":"as_s?","return_type":"String | ::Nil","visibility":"Public","body":"@raw.as?(String)"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Appends this struct's name and instance variables names and values\nto the given IO.\n\n```\nstruct Point\n  def initialize(@x : Int32, @y : Int32)\n  end\nend\n\np1 = Point.new 1, 2\np1.to_s    # \"Point(@x=1, @y=2)\"\np1.inspect # \"Point(@x=1, @y=2)\"\n```","summary":"<p>Appends this struct's name and instance variables names and values to the given IO.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem.cr","line_number":202,"url":null},"def":{"name":"inspect","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"(((io << self.class.name) << '(') << @raw) << ')'"}},{"html_id":"raw:ValueType-instance-method","name":"raw","abstract":false,"location":{"filename":"src/chem.cr","line_number":130,"url":null},"def":{"name":"raw","return_type":"ValueType","visibility":"Public","body":"@raw"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code><a href=\"../../Chem/Metadata/Any.html#inspect%28io%3AIO%29%3ANil-instance-method\">#inspect(io)</a></code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem.cr","line_number":206,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"@raw.to_s(io)"}}]},{"html_id":"chem.cr/Chem/Metadata/ValueType","path":"Chem/Metadata/ValueType.html","kind":"alias","full_name":"Chem::Metadata::ValueType","name":"ValueType","abstract":false,"locations":[{"filename":"src/chem.cr","line_number":122,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":true,"aliased":"(Bool | Float64 | Int32 | String)","aliased_html":"Bool | Float64 | Int32 | String","const":false,"namespace":{"html_id":"chem.cr/Chem/Metadata","kind":"class","full_name":"Chem::Metadata","name":"Metadata"},"doc":"Union of possible metadata types.","summary":"<p>Union of possible metadata types.</p>"}]},{"html_id":"chem.cr/Chem/Mol","path":"Chem/Mol.html","kind":"module","full_name":"Chem::Mol","name":"Mol","abstract":false,"locations":[{"filename":"src/chem/formats/mol.cr","line_number":17,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"This module provides support for reading MDL Mol files, including the\nvariants V2000 and V3000.\n\nFormat specification found in the [CTFile\nFormats](http://bit.ly/3WiuePn) document published by BIOVIA.\n\nNOTE: The title in the MOL file will be used as residue name if it\ncontains 3-4 uppercase letters and numbers only. In such case, the\ncomment line will be set as the title of the structure.\n\nWARNING: Basic support only. MDL valence model (implicit hydrogens),\nconnectivity information besides bonds, stereochemistry information\n(e.g., chirality, 3D), advanced properties like Sgroup, reaction data,\netc. are unsupported/ignored. Therefore, **hydrogens are expected to\nbe defined explicitly**.","summary":"<p>This module provides support for reading MDL Mol files, including the variants V2000 and V3000.</p>","types":[{"html_id":"chem.cr/Chem/Mol/Reader","path":"Chem/Mol/Reader.html","kind":"class","full_name":"Chem::Mol::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/mol.cr","line_number":18,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"}],"namespace":{"html_id":"chem.cr/Chem/Mol","kind":"module","full_name":"Chem::Mol","name":"Mol"},"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/mol.cr","line_number":21,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}]}]},{"html_id":"chem.cr/Chem/Mol2","path":"Chem/Mol2.html","kind":"module","full_name":"Chem::Mol2","name":"Mol2","abstract":false,"locations":[{"filename":"src/chem/formats/mol2.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"types":[{"html_id":"chem.cr/Chem/Mol2/Reader","path":"Chem/Mol2/Reader.html","kind":"class","full_name":"Chem::Mol2::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/mol2.cr","line_number":3,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"}],"namespace":{"html_id":"chem.cr/Chem/Mol2","kind":"module","full_name":"Chem::Mol2","name":"Mol2"},"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/mol2.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}],"instance_methods":[{"html_id":"skip_entry:Nil-instance-method","name":"skip_entry","doc":"Discards the next entry in the IO without fully parsing it.","summary":"<p>Discards the next entry in the IO without fully parsing it.</p>","abstract":false,"location":{"filename":"src/chem/formats/mol2.cr","line_number":11,"url":null},"def":{"name":"skip_entry","return_type":"Nil","visibility":"Public","body":"if @pull.next_s == \"@<TRIPOS>MOLECULE\"\n  @pull.next_line\nend\nskip_to_tag(\"@<TRIPOS>MOLECULE\")\n"}}]},{"html_id":"chem.cr/Chem/Mol2/Writer","path":"Chem/Mol2/Writer.html","kind":"class","full_name":"Chem::Mol2::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","kind":"module","full_name":"Chem::FormatWriter::MultiEntry","name":"MultiEntry"},{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/mol2.cr","line_number":102,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","kind":"module","full_name":"Chem::FormatWriter::MultiEntry","name":"MultiEntry"}],"namespace":{"html_id":"chem.cr/Chem/Mol2","kind":"module","full_name":"Chem::Mol2","name":"Mol2"},"class_methods":[{"html_id":"open(io:IO,total_entries:Int32|Nil=nil,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, total_entries : Int32 | Nil = nil, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, total_entries : Int32 | Nil = <span class=\"n\">nil</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, total_entries, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,total_entries:Int32|Nil=nil,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"args_string":"(path : Path | String, total_entries : Int32 | Nil = nil, & : self -> )","args_html":"(path : Path | String, total_entries : Int32 | Nil = <span class=\"n\">nil</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path, total_entries)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(path:Path|String,total_entries:Int32|Nil=nil):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"args_string":"(path : Path | String, total_entries : Int32 | Nil = nil) : self","args_html":"(path : Path | String, total_entries : Int32 | Nil = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), total_entries, sync_close: true)"}}]}]},{"html_id":"chem.cr/Chem/ParseException","path":"Chem/ParseException.html","kind":"class","full_name":"Chem::ParseException","name":"ParseException","abstract":false,"superclass":{"html_id":"chem.cr/Chem/Error","kind":"class","full_name":"Chem::Error","name":"Error"},"ancestors":[{"html_id":"chem.cr/Chem/Error","kind":"class","full_name":"Chem::Error","name":"Error"},{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem.cr","line_number":68,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"Exception thrown upon parsing issues. Primarly used by `PullParser`.\n\nIt can hold the location of the issue found in a text document. Call\n`#inspect_with_location` to print a human-friendly error showing\nsuch information.\n\n```\nex = ParseException.new(\n  message: \"Invalid letters\",\n  path: \"path/to/file\",\n  line: \"abc def 123456 ABC DEF\",\n  location: {247, 8, 6}\n)\nputs ex.inspect_with_location\n```\n\nPrints out:\n\n```text\nFound a parsing issue in path/to/file:\n\n 247 | abc def 123456 ABC DEF\n               ^^^^^^\nError: Invalid letters\n```","summary":"<p>Exception thrown upon parsing issues.</p>","constructors":[{"html_id":"new(message:String,source_file:String|Nil,line:String,location:Tuple(Int32,Int32,Int32))-class-method","name":"new","doc":"Creates a new exception with location, which is a triplet\ncontaining line number, column number (starting at zero), and\ncursor size. The latter may be zero to represent the beginning\n(column number = 0) or end of line.","summary":"<p>Creates a new exception with location, which is a triplet containing line number, column number (starting at zero), and cursor size.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"},{"name":"source_file","external_name":"source_file","restriction":"String | ::Nil"},{"name":"line","external_name":"line","restriction":"String"},{"name":"location","external_name":"location","restriction":"Tuple(Int32, Int32, Int32)"}],"args_string":"(message : String, source_file : String | Nil, line : String, location : Tuple(Int32, Int32, Int32))","args_html":"(message : String, source_file : String | Nil, line : String, location : Tuple(Int32, Int32, Int32))","location":{"filename":"src/chem.cr","line_number":84,"url":null},"def":{"name":"new","args":[{"name":"message","external_name":"message","restriction":"String"},{"name":"source_file","external_name":"source_file","restriction":"String | ::Nil"},{"name":"line","external_name":"line","restriction":"String"},{"name":"location","external_name":"location","restriction":"Tuple(Int32, Int32, Int32)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message, source_file, line, location)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(message:String)-class-method","name":"new","doc":"Creates a new exception without location.","summary":"<p>Creates a new exception without location.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String)","args_html":"(message : String)","location":{"filename":"src/chem.cr","line_number":78,"url":null},"def":{"name":"new","args":[{"name":"message","external_name":"message","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"inspect_with_location(io:IO):Nil-instance-method","name":"inspect_with_location","doc":"Writes a string representation of the error including the location\nto *io*.","summary":"<p>Writes a string representation of the error including the location to <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem.cr","line_number":100,"url":null},"def":{"name":"inspect_with_location","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << \"Found a parsing issue\"\nif @source_file\n  (io << \" in \") << @source_file\nend\n((io << ':') << '\\n') << '\\n'\nif location = @location\n  line_number, column_number, cursor_size = location\n  if cursor_size == 0\n    if column_number == 0\n      column_number = column_number - 1\n    end\n    cursor_size = 1\n  end\n  ((((io << ' ') << line_number) << \" | \") << @line) << '\\n'\n  ((column_number + line_number.to_s.bytesize) + 4).times do\n    io << ' '\n  end\n  cursor_size.times do\n    io << '^'\n  end\n  io << '\\n'\nend\n(io << \"Error: \") << @message\nio.flush\n"}},{"html_id":"inspect_with_location:String-instance-method","name":"inspect_with_location","doc":"Returns a string representation of the error including the\nlocation.","summary":"<p>Returns a string representation of the error including the location.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":92,"url":null},"def":{"name":"inspect_with_location","return_type":"String","visibility":"Public","body":"String.build do |io|\n  inspect_with_location(io)\nend"}},{"html_id":"line:String|Nil-instance-method","name":"line","doc":"Line (if any) where the issue was found.","summary":"<p>Line (if any) where the issue was found.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":70,"url":null},"def":{"name":"line","return_type":"String | ::Nil","visibility":"Public","body":"@line"}},{"html_id":"location:Tuple(Int32,Int32,Int32)|Nil-instance-method","name":"location","doc":"Error location (if any). It is a triplet containing line number,\ncolumn number, and cursor size where the issue is located.","summary":"<p>Error location (if any).</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":73,"url":null},"def":{"name":"location","return_type":"Tuple(Int32, Int32, Int32) | ::Nil","visibility":"Public","body":"@location"}},{"html_id":"source_file:String|Nil-instance-method","name":"source_file","doc":"Path to file (if any) that produced the error.","summary":"<p>Path to file (if any) that produced the error.</p>","abstract":false,"location":{"filename":"src/chem.cr","line_number":75,"url":null},"def":{"name":"source_file","return_type":"String | ::Nil","visibility":"Public","body":"@source_file"}}]},{"html_id":"chem.cr/Chem/PDB","path":"Chem/PDB.html","kind":"module","full_name":"Chem::PDB","name":"PDB","abstract":false,"locations":[{"filename":"src/chem/formats/pdb.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"types":[{"html_id":"chem.cr/Chem/PDB/Hybrid36","path":"Chem/PDB/Hybrid36.html","kind":"module","full_name":"Chem::PDB::Hybrid36","name":"Hybrid36","abstract":false,"locations":[{"filename":"src/chem/formats/pdb.cr","line_number":614,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"extended_modules":[{"html_id":"chem.cr/Chem/PDB/Hybrid36","kind":"module","full_name":"Chem::PDB::Hybrid36","name":"Hybrid36"}],"namespace":{"html_id":"chem.cr/Chem/PDB","kind":"module","full_name":"Chem::PDB","name":"PDB"},"instance_methods":[{"html_id":"decode(str:String,width:Int):Int32-instance-method","name":"decode","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"width","external_name":"width","restriction":"Int"}],"args_string":"(str : String, width : Int) : Int32","args_html":"(str : String, width : Int) : Int32","location":{"filename":"src/chem/formats/pdb.cr","line_number":621,"url":null},"def":{"name":"decode","args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"width","external_name":"width","restriction":"Int"}],"return_type":"Int32","visibility":"Public","body":"(decode?(str, width)) || (invalid_literal(str))"}},{"html_id":"decode(str:String):Int32|Nil-instance-method","name":"decode","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"}],"args_string":"(str : String) : Int32 | Nil","args_html":"(str : String) : Int32 | Nil","location":{"filename":"src/chem/formats/pdb.cr","line_number":617,"url":null},"def":{"name":"decode","args":[{"name":"str","external_name":"str","restriction":"String"}],"return_type":"Int32 | ::Nil","visibility":"Public","body":"decode(str, str.size)"}},{"html_id":"decode?(str:String,width:Int):Int32|Nil-instance-method","name":"decode?","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"width","external_name":"width","restriction":"Int"}],"args_string":"(str : String, width : Int) : Int32 | Nil","args_html":"(str : String, width : Int) : Int32 | Nil","location":{"filename":"src/chem/formats/pdb.cr","line_number":629,"url":null},"def":{"name":"decode?","args":[{"name":"str","external_name":"str","restriction":"String"},{"name":"width","external_name":"width","restriction":"Int"}],"return_type":"Int32 | ::Nil","visibility":"Public","body":"if str.size == width\nelse\n  return\nend\nif str.blank?\n  return 0\nend\nchr = str[0]\nif ((chr == '-') || (chr == ' ')) || chr.ascii_number?\n  return str.to_i?\nend\nif num = str.to_i?(base: 36)\nelse\n  return\nend\ncase chr\nwhen .ascii_uppercase?\n  (num - (10 * (36 ** (width - 1)))) + (10 ** width)\nwhen .ascii_lowercase?\n  (num + (16 * (36 ** (width - 1)))) + (10 ** width)\nend\n"}},{"html_id":"decode?(str:String):Int32|Nil-instance-method","name":"decode?","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"}],"args_string":"(str : String) : Int32 | Nil","args_html":"(str : String) : Int32 | Nil","location":{"filename":"src/chem/formats/pdb.cr","line_number":625,"url":null},"def":{"name":"decode?","args":[{"name":"str","external_name":"str","restriction":"String"}],"return_type":"Int32 | ::Nil","visibility":"Public","body":"decode?(str, str.size)"}},{"html_id":"encode(io:IO,num:Int,width:Int):Nil-instance-method","name":"encode","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"num","external_name":"num","restriction":"Int"},{"name":"width","external_name":"width","restriction":"Int"}],"args_string":"(io : IO, num : Int, width : Int) : Nil","args_html":"(io : IO, num : Int, width : Int) : Nil","location":{"filename":"src/chem/formats/pdb.cr","line_number":649,"url":null},"def":{"name":"encode","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"num","external_name":"num","restriction":"Int"},{"name":"width","external_name":"width","restriction":"Int"}],"return_type":"Nil","visibility":"Public","body":"if num < (1 - (10 ** (width - 1)))\n  out_of_range(num)\nend\nif num < (10 ** width)\n  return io.printf(\"%#{width}d\", num)\nend\nnum = num - (10 ** width)\nif num < (26 * (36 ** (width - 1)))\n  return (num + (10 * (36 ** (width - 1)))).to_s(io, base: 36, upcase: true)\nend\nnum = num - (26 * (36 ** (width - 1)))\nif num < (26 * (36 ** (width - 1)))\n  return (num + (10 * (36 ** (width - 1)))).to_s(io, base: 36)\nend\nout_of_range(num)\n"}},{"html_id":"encode(num:Int,width:Int):String-instance-method","name":"encode","abstract":false,"args":[{"name":"num","external_name":"num","restriction":"Int"},{"name":"width","external_name":"width","restriction":"Int"}],"args_string":"(num : Int, width : Int) : String","args_html":"(num : Int, width : Int) : String","location":{"filename":"src/chem/formats/pdb.cr","line_number":643,"url":null},"def":{"name":"encode","args":[{"name":"num","external_name":"num","restriction":"Int"},{"name":"width","external_name":"width","restriction":"Int"}],"return_type":"String","visibility":"Public","body":"String.build do |io|\n  encode(io, num, width)\nend"}}]},{"html_id":"chem.cr/Chem/PDB/Reader","path":"Chem/PDB/Reader.html","kind":"class","full_name":"Chem::PDB::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/pdb.cr","line_number":3,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"HELIX_TYPES","name":"HELIX_TYPES","value":"{1 => Sec::RightHandedHelixAlpha, 3 => Sec::RightHandedHelixPi, 5 => Sec::RightHandedHelix3_10}"}],"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"}],"namespace":{"html_id":"chem.cr/Chem/PDB","kind":"module","full_name":"Chem::PDB","name":"PDB"},"class_methods":[{"html_id":"open(io:IO,alt_loc:Char|Nil=nil,chains:Enumerable(Char)|String|Nil=nil,guess_bonds:Bool=false,het:Bool=true,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, alt_loc : Char | Nil = nil, chains : Enumerable(Char) | String | Nil = nil, guess_bonds : Bool = false, het : Bool = true, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, alt_loc : <a href=\"../../Char.html\">Char</a> | Nil = <span class=\"n\">nil</span>, chains : <a href=\"../../Enumerable.html\">Enumerable</a>(<a href=\"../../Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, guess_bonds : Bool = <span class=\"n\">false</span>, het : Bool = <span class=\"n\">true</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, alt_loc, chains, guess_bonds, het, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,alt_loc:Char|Nil=nil,chains:Enumerable(Char)|String|Nil=nil,guess_bonds:Bool=false,het:Bool=true,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"}],"args_string":"(path : Path | String, alt_loc : Char | Nil = nil, chains : Enumerable(Char) | String | Nil = nil, guess_bonds : Bool = false, het : Bool = true, & : self -> )","args_html":"(path : Path | String, alt_loc : <a href=\"../../Char.html\">Char</a> | Nil = <span class=\"n\">nil</span>, chains : <a href=\"../../Enumerable.html\">Enumerable</a>(<a href=\"../../Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, guess_bonds : Bool = <span class=\"n\">false</span>, het : Bool = <span class=\"n\">true</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path, alt_loc, chains, guess_bonds, het)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,alt_loc:Char|Nil=nil,chains:Enumerable(Char)|String|Nil=nil,guess_bonds:Bool=false,het:Bool=true,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, alt_loc : Char | Nil = nil, chains : Enumerable(Char) | String | Nil = nil, guess_bonds : Bool = false, het : Bool = true, sync_close : Bool = false)","args_html":"(io : IO, alt_loc : <a href=\"../../Char.html\">Char</a> | Nil = <span class=\"n\">nil</span>, chains : <a href=\"../../Enumerable.html\">Enumerable</a>(<a href=\"../../Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, guess_bonds : Bool = <span class=\"n\">false</span>, het : Bool = <span class=\"n\">true</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/pdb.cr","line_number":28,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, alt_loc, chains, guess_bonds, het, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,alt_loc:Char|Nil=nil,chains:Enumerable(Char)|String|Nil=nil,guess_bonds:Bool=false,het:Bool=true):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"}],"args_string":"(path : Path | String, alt_loc : Char | Nil = nil, chains : Enumerable(Char) | String | Nil = nil, guess_bonds : Bool = false, het : Bool = true) : self","args_html":"(path : Path | String, alt_loc : <a href=\"../../Char.html\">Char</a> | Nil = <span class=\"n\">nil</span>, chains : <a href=\"../../Enumerable.html\">Enumerable</a>(<a href=\"../../Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, guess_bonds : Bool = <span class=\"n\">false</span>, het : Bool = <span class=\"n\">true</span>) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), alt_loc, chains, guess_bonds, het, sync_close: true)"}}],"instance_methods":[{"html_id":"next_entry:Structure|Nil-instance-method","name":"next_entry","doc":"Returns the next entry in the IO, or `nil` if there are no more\nentries.","summary":"<p>Returns the next entry in the IO, or <code>nil</code> if there are no more entries.</p>","abstract":false,"location":{"filename":"src/chem/formats/pdb.cr","line_number":38,"url":null},"def":{"name":"next_entry","return_type":"Structure | ::Nil","visibility":"Public","body":"if @header_decoded\nelse\n  decode_header\nend\n@pull.each_line do\n  case (@pull.at(0, 6)).str\n  when \"ATOM  \", \"HETATM\", \"MODEL \"\n    obj = decode_entry\n    @read = true\n    return obj\n  when \"END   \", \"MASTER\"\n    break\n  end\nend\n"}},{"html_id":"read_header:Structure::Experiment-instance-method","name":"read_header","doc":"Reads the header object from the IO. Raises `IO::Error` if the\nreader is closed or `ParseException` if the header cannot be\ndecoded.","summary":"<p>Reads the header object from the IO.</p>","abstract":false,"location":{"filename":"src/chem/formats/pdb.cr","line_number":66,"url":null},"def":{"name":"read_header","return_type":"Structure::Experiment","visibility":"Public","body":"if @header_decoded\nelse\n  decode_header\nend\n@header || (@pull.error(\"Empty header\"))\n"}},{"html_id":"skip_entry:Nil-instance-method","name":"skip_entry","doc":"Discards the next entry in the IO without fully parsing it.","summary":"<p>Discards the next entry in the IO without fully parsing it.</p>","abstract":false,"location":{"filename":"src/chem/formats/pdb.cr","line_number":52,"url":null},"def":{"name":"skip_entry","return_type":"Nil","visibility":"Public","body":"if @header_decoded\nelse\n  decode_header\nend\nif (@pull.at(0, 6)).str == \"MODEL \"\n  @pull.next_line\nend\n@pull.each_line do\n  case (@pull.at(0, 6)).str\n  when \"ENDMDL\"\n    @pull.next_line\n    break\n  when \"MODEL \", \"END   \", \"MASTER\"\n    break\n  end\nend\n"}}]},{"html_id":"chem.cr/Chem/PDB/Writer","path":"Chem/PDB/Writer.html","kind":"class","full_name":"Chem::PDB::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","kind":"module","full_name":"Chem::FormatWriter::MultiEntry","name":"MultiEntry"},{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/pdb.cr","line_number":322,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"LINE_WIDTH","name":"LINE_WIDTH","value":"80"},{"id":"PDB_VERSION","name":"PDB_VERSION","value":"\"3.30\""},{"id":"PDB_VERSION_DATE","name":"PDB_VERSION_DATE","value":"Time.local(2011, 7, 13)"},{"id":"WHITESPACE","name":"WHITESPACE","value":"' '"}],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","kind":"module","full_name":"Chem::FormatWriter::MultiEntry","name":"MultiEntry"}],"namespace":{"html_id":"chem.cr/Chem/PDB","kind":"module","full_name":"Chem::PDB","name":"PDB"},"class_methods":[{"html_id":"open(io:IO,bonds:Chem::PDB::Writer::BondOptions=Chem::PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,ter_on_fragment:Bool=false,total_entries:Int32|Nil=nil,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, bonds : Chem::PDB::Writer::BondOptions = Chem::PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, ter_on_fragment : Bool = false, total_entries : Int32 | Nil = nil, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, bonds : <a href=\"../../Chem/PDB/Writer/BondOptions.html\">Chem::PDB::Writer::BondOptions</a> = <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, ter_on_fragment : Bool = <span class=\"n\">false</span>, total_entries : Int32 | Nil = <span class=\"n\">nil</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, bonds, renumber, ter_on_fragment, total_entries, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,bonds:Chem::PDB::Writer::BondOptions=Chem::PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,ter_on_fragment:Bool=false,total_entries:Int32|Nil=nil,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"args_string":"(path : Path | String, bonds : Chem::PDB::Writer::BondOptions = Chem::PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, ter_on_fragment : Bool = false, total_entries : Int32 | Nil = nil, & : self -> )","args_html":"(path : Path | String, bonds : <a href=\"../../Chem/PDB/Writer/BondOptions.html\">Chem::PDB::Writer::BondOptions</a> = <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, ter_on_fragment : Bool = <span class=\"n\">false</span>, total_entries : Int32 | Nil = <span class=\"n\">nil</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path, bonds, renumber, ter_on_fragment, total_entries)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,bonds:Chem::PDB::Writer::BondOptions=Chem::PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,ter_on_fragment:Bool=false,total_entries:Int32|Nil=nil,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, bonds : Chem::PDB::Writer::BondOptions = Chem::PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, ter_on_fragment : Bool = false, total_entries : Int32 | Nil = nil, sync_close : Bool = false)","args_html":"(io : IO, bonds : <a href=\"../../Chem/PDB/Writer/BondOptions.html\">Chem::PDB::Writer::BondOptions</a> = <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, ter_on_fragment : Bool = <span class=\"n\">false</span>, total_entries : Int32 | Nil = <span class=\"n\">nil</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/pdb.cr","line_number":346,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, bonds, renumber, ter_on_fragment, total_entries, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,bonds:Chem::PDB::Writer::BondOptions=Chem::PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,ter_on_fragment:Bool=false,total_entries:Int32|Nil=nil):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"args_string":"(path : Path | String, bonds : Chem::PDB::Writer::BondOptions = Chem::PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, ter_on_fragment : Bool = false, total_entries : Int32 | Nil = nil) : self","args_html":"(path : Path | String, bonds : <a href=\"../../Chem/PDB/Writer/BondOptions.html\">Chem::PDB::Writer::BondOptions</a> = <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, ter_on_fragment : Bool = <span class=\"n\">false</span>, total_entries : Int32 | Nil = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), bonds, renumber, ter_on_fragment, total_entries, sync_close: true)"}}],"instance_methods":[{"html_id":"close:Nil-instance-method","name":"close","doc":"Closes this object. If *sync_close* is true, it will also close the\nenclosed `IO`.","summary":"<p>Closes this object.</p>","abstract":false,"location":{"filename":"src/chem/formats/pdb.cr","line_number":358,"url":null},"def":{"name":"close","return_type":"Nil","visibility":"Public","body":"@io.printf(\"%-#{LINE_WIDTH}s\\n\", \"END\")\nsuper()\n"}}],"types":[{"html_id":"chem.cr/Chem/PDB/Writer/BondOptions","path":"Chem/PDB/Writer/BondOptions.html","kind":"enum","full_name":"Chem::PDB::Writer::BondOptions","name":"BondOptions","abstract":false,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/pdb.cr","line_number":333,"url":null}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Standard","name":"Standard","value":"1","doc":"Write CONECT records for standard residues (including water)","summary":"<p>Write CONECT records for standard residues (including water)</p>"},{"id":"Disulfide","name":"Disulfide","value":"2","doc":"Write CONECT records for disulfide bridges","summary":"<p>Write CONECT records for disulfide bridges</p>"},{"id":"Het","name":"Het","value":"4","doc":"Write CONECT records for non-standard (HET) groups excluding\nwater (both intra- and inter-residue bonds)","summary":"<p>Write CONECT records for non-standard (HET) groups excluding water (both intra- and inter-residue bonds)</p>"}],"namespace":{"html_id":"chem.cr/Chem/PDB/Writer","kind":"class","full_name":"Chem::PDB::Writer","name":"Writer"},"doc":"Controls which bonds are written to a PDB.","summary":"<p>Controls which bonds are written to a PDB.</p>","instance_methods":[{"html_id":"disulfide?-instance-method","name":"disulfide?","abstract":false,"location":{"filename":"src/chem/formats/pdb.cr","line_number":337,"url":null},"def":{"name":"disulfide?","visibility":"Public","body":"self.includes?(Disulfide)"}},{"html_id":"het?-instance-method","name":"het?","abstract":false,"location":{"filename":"src/chem/formats/pdb.cr","line_number":340,"url":null},"def":{"name":"het?","visibility":"Public","body":"self.includes?(Het)"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/chem/formats/pdb.cr","line_number":333,"url":null},"def":{"name":"none?","visibility":"Public","body":"value == 0"}},{"html_id":"standard?-instance-method","name":"standard?","abstract":false,"location":{"filename":"src/chem/formats/pdb.cr","line_number":335,"url":null},"def":{"name":"standard?","visibility":"Public","body":"self.includes?(Standard)"}}]}]}]},{"html_id":"chem.cr/Chem/PeriodicTable","path":"Chem/PeriodicTable.html","kind":"module","full_name":"Chem::PeriodicTable","name":"PeriodicTable","abstract":false,"locations":[{"filename":"src/chem/core/periodic_table.cr","line_number":14,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"Ac","name":"Ac","value":"Element.new(atomic_number: 89, symbol: \"Ac\", name: \"Actinium\", mass: 227.0, covalent_radius: 2.15, vdw_radius: 2.80, valence_electrons: 3, valence: nil, max_bonds: 6)"},{"id":"Ag","name":"Ag","value":"Element.new(atomic_number: 47, symbol: \"Ag\", name: \"Silver\", mass: 107.8682, covalent_radius: 1.45, vdw_radius: 2.53, valence_electrons: 11, valence: nil, max_bonds: 6)"},{"id":"Al","name":"Al","value":"Element.new(atomic_number: 13, symbol: \"Al\", name: \"Aluminum\", mass: 26.9815, covalent_radius: 1.21, vdw_radius: 2.25, valence_electrons: 3, valence: [3, 6], max_bonds: 6)"},{"id":"Am","name":"Am","value":"Element.new(atomic_number: 95, symbol: \"Am\", name: \"Americium\", mass: 243.0, covalent_radius: 1.80, vdw_radius: 2.83, valence_electrons: 7, valence: nil, max_bonds: 6)"},{"id":"Ar","name":"Ar","value":"Element.new(atomic_number: 18, symbol: \"Ar\", name: \"Argon\", mass: 39.948, covalent_radius: 1.06, vdw_radius: 1.83, valence_electrons: 8, valence: 0, max_bonds: 0)"},{"id":"As","name":"As","value":"Element.new(atomic_number: 33, symbol: \"As\", name: \"Arsenic\", mass: 74.9216, covalent_radius: 1.19, vdw_radius: 1.88, valence_electrons: 5, valence: [3, 5, 7], max_bonds: 3)"},{"id":"At","name":"At","value":"Element.new(atomic_number: 85, symbol: \"At\", name: \"Astatine\", mass: 210.0, covalent_radius: 1.50, vdw_radius: 1.50 + 0.9, valence_electrons: 7, valence: [1, 3, 5], max_bonds: 1)"},{"id":"Au","name":"Au","value":"Element.new(atomic_number: 79, symbol: \"Au\", name: \"Gold\", mass: 196.9666, covalent_radius: 1.36, vdw_radius: 2.32, valence_electrons: 11, valence: nil, max_bonds: 6)"},{"id":"B","name":"B","value":"Element.new(atomic_number: 5, symbol: \"B\", name: \"Boron\", mass: 10.811, covalent_radius: 0.84, vdw_radius: 1.91, valence_electrons: 3, valence: 3, max_bonds: 4)"},{"id":"Ba","name":"Ba","value":"Element.new(atomic_number: 56, symbol: \"Ba\", name: \"Barium\", mass: 137.327, covalent_radius: 2.15, vdw_radius: 3.03, valence_electrons: 2, valence: 2, max_bonds: 2)"},{"id":"Be","name":"Be","value":"Element.new(atomic_number: 4, symbol: \"Be\", name: \"Beryllium\", mass: 9.0122, covalent_radius: 0.96, vdw_radius: 1.98, valence_electrons: 2, valence: 2, max_bonds: 2)"},{"id":"Bh","name":"Bh","value":"Element.new(atomic_number: 107, symbol: \"Bh\", name: \"Bohrium\", mass: 264.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Bi","name":"Bi","value":"Element.new(atomic_number: 83, symbol: \"Bi\", name: \"Bismuth\", mass: 208.9804, covalent_radius: 1.48, vdw_radius: 2.54, valence_electrons: 5, valence: [3, 5, 7], max_bonds: 3)"},{"id":"Bk","name":"Bk","value":"Element.new(atomic_number: 97, symbol: \"Bk\", name: \"Berkelium\", mass: 247.0, covalent_radius: 1.5, vdw_radius: 3.40, valence_electrons: 9, valence: nil, max_bonds: 6)"},{"id":"Br","name":"Br","value":"Element.new(atomic_number: 35, symbol: \"Br\", name: \"Bromine\", mass: 79.904, covalent_radius: 1.20, vdw_radius: 1.86, valence_electrons: 7, valence: 1, max_bonds: 1)"},{"id":"C","name":"C","value":"Element.new(atomic_number: 6, symbol: \"C\", name: \"Carbon\", mass: 12.0107, covalent_radius: 0.76, vdw_radius: 1.77, valence_electrons: 4, valence: 4, max_bonds: 4)"},{"id":"Ca","name":"Ca","value":"Element.new(atomic_number: 20, symbol: \"Ca\", name: \"Calcium\", mass: 40.078, covalent_radius: 1.76, vdw_radius: 2.62, valence_electrons: 2, valence: 2, max_bonds: 2)"},{"id":"Cd","name":"Cd","value":"Element.new(atomic_number: 48, symbol: \"Cd\", name: \"Cadmium\", mass: 112.411, covalent_radius: 1.44, vdw_radius: 2.49, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Ce","name":"Ce","value":"Element.new(atomic_number: 58, symbol: \"Ce\", name: \"Cerium\", mass: 140.116, covalent_radius: 2.04, vdw_radius: 2.88, valence_electrons: 4, valence: nil, max_bonds: 6)"},{"id":"Cf","name":"Cf","value":"Element.new(atomic_number: 98, symbol: \"Cf\", name: \"Californium\", mass: 251.0, covalent_radius: 1.5, vdw_radius: 3.05, valence_electrons: 10, valence: nil, max_bonds: 6)"},{"id":"Cl","name":"Cl","value":"Element.new(atomic_number: 17, symbol: \"Cl\", name: \"Chlorine\", mass: 35.453, covalent_radius: 1.02, vdw_radius: 1.82, valence_electrons: 7, valence: 1, max_bonds: 1)"},{"id":"Cm","name":"Cm","value":"Element.new(atomic_number: 96, symbol: \"Cm\", name: \"Curium\", mass: 247.0, covalent_radius: 1.69, vdw_radius: 3.05, valence_electrons: 8, valence: nil, max_bonds: 6)"},{"id":"Cn","name":"Cn","value":"Element.new(atomic_number: 112, symbol: \"Cn\", name: \"Copernicium\", mass: 285.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Co","name":"Co","value":"Element.new(atomic_number: 27, symbol: \"Co\", name: \"Cobalt\", mass: 58.9331, covalent_radius: 1.50, vdw_radius: 2.40, valence_electrons: 9, valence: nil, max_bonds: 6)"},{"id":"Cr","name":"Cr","value":"Element.new(atomic_number: 24, symbol: \"Cr\", name: \"Chromium\", mass: 51.9961, covalent_radius: 1.39, vdw_radius: 2.45, valence_electrons: 6, valence: nil, max_bonds: 6)"},{"id":"Cs","name":"Cs","value":"Element.new(atomic_number: 55, symbol: \"Cs\", name: \"Cesium\", mass: 132.9055, covalent_radius: 2.44, vdw_radius: 3.48, valence_electrons: 1, valence: 1, max_bonds: 1)"},{"id":"Cu","name":"Cu","value":"Element.new(atomic_number: 29, symbol: \"Cu\", name: \"Copper\", mass: 63.546, covalent_radius: 1.32, vdw_radius: 2.38, valence_electrons: 11, valence: nil, max_bonds: 6)"},{"id":"Db","name":"Db","value":"Element.new(atomic_number: 105, symbol: \"Db\", name: \"Dubnium\", mass: 262.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Ds","name":"Ds","value":"Element.new(atomic_number: 110, symbol: \"Ds\", name: \"Darmstadtium\", mass: 281.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Dy","name":"Dy","value":"Element.new(atomic_number: 66, symbol: \"Dy\", name: \"Dysprosium\", mass: 162.5, covalent_radius: 1.92, vdw_radius: 2.87, valence_electrons: 10, valence: nil, max_bonds: 6)"},{"id":"Er","name":"Er","value":"Element.new(atomic_number: 68, symbol: \"Er\", name: \"Erbium\", mass: 167.259, covalent_radius: 1.89, vdw_radius: 2.83, valence_electrons: 12, valence: nil, max_bonds: 6)"},{"id":"Es","name":"Es","value":"Element.new(atomic_number: 99, symbol: \"Es\", name: \"Einsteinium\", mass: 252.0, covalent_radius: 1.5, vdw_radius: 2.70, valence_electrons: 11, valence: nil, max_bonds: 6)"},{"id":"Eu","name":"Eu","value":"Element.new(atomic_number: 63, symbol: \"Eu\", name: \"Europium\", mass: 151.964, covalent_radius: 1.98, vdw_radius: 2.87, valence_electrons: 7, valence: nil, max_bonds: 6)"},{"id":"F","name":"F","value":"Element.new(atomic_number: 9, symbol: \"F\", name: \"Fluorine\", mass: 18.9984, covalent_radius: 0.57, vdw_radius: 1.46, valence_electrons: 7, valence: 1, max_bonds: 1)"},{"id":"Fe","name":"Fe","value":"Element.new(atomic_number: 26, symbol: \"Fe\", name: \"Iron\", mass: 55.845, covalent_radius: 1.52, vdw_radius: 2.44, valence_electrons: 8, valence: nil, max_bonds: 6)"},{"id":"Fl","name":"Fl","value":"Element.new(atomic_number: 114, symbol: \"Fl\", name: \"Flerovium\", mass: 289.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Fm","name":"Fm","value":"Element.new(atomic_number: 100, symbol: \"Fm\", name: \"Fermium\", mass: 257.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 12, valence: nil, max_bonds: 6)"},{"id":"Fr","name":"Fr","value":"Element.new(atomic_number: 87, symbol: \"Fr\", name: \"Francium\", mass: 223.0, covalent_radius: 2.60, vdw_radius: 2.60 + 0.9, valence_electrons: 1, valence: 1, max_bonds: 1)"},{"id":"Ga","name":"Ga","value":"Element.new(atomic_number: 31, symbol: \"Ga\", name: \"Gallium\", mass: 69.723, covalent_radius: 1.22, vdw_radius: 2.32, valence_electrons: 3, valence: 3, max_bonds: 3)"},{"id":"Gd","name":"Gd","value":"Element.new(atomic_number: 64, symbol: \"Gd\", name: \"Gadolinium\", mass: 157.25, covalent_radius: 1.96, vdw_radius: 2.83, valence_electrons: 8, valence: nil, max_bonds: 6)"},{"id":"Ge","name":"Ge","value":"Element.new(atomic_number: 32, symbol: \"Ge\", name: \"Germanium\", mass: 72.64, covalent_radius: 1.20, vdw_radius: 2.29, valence_electrons: 4, valence: 4, max_bonds: 4)"},{"id":"H","name":"H","value":"Element.new(atomic_number: 1, symbol: \"H\", name: \"Hydrogen\", mass: 1.0079, covalent_radius: 0.31, vdw_radius: 1.20, valence_electrons: 1, valence: 1, max_bonds: 1)"},{"id":"He","name":"He","value":"Element.new(atomic_number: 2, symbol: \"He\", name: \"Helium\", mass: 4.0026, covalent_radius: 0.20, vdw_radius: 1.43, valence_electrons: 2, valence: 0, max_bonds: 0)"},{"id":"Hf","name":"Hf","value":"Element.new(atomic_number: 72, symbol: \"Hf\", name: \"Hafnium\", mass: 178.49, covalent_radius: 1.75, vdw_radius: 2.63, valence_electrons: 4, valence: nil, max_bonds: 6)"},{"id":"Hg","name":"Hg","value":"Element.new(atomic_number: 80, symbol: \"Hg\", name: \"Mercury\", mass: 200.59, covalent_radius: 1.32, vdw_radius: 2.45, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Ho","name":"Ho","value":"Element.new(atomic_number: 67, symbol: \"Ho\", name: \"Holmium\", mass: 164.9303, covalent_radius: 1.92, vdw_radius: 2.81, valence_electrons: 11, valence: nil, max_bonds: 6)"},{"id":"Hs","name":"Hs","value":"Element.new(atomic_number: 108, symbol: \"Hs\", name: \"Hassium\", mass: 277.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"I","name":"I","value":"Element.new(atomic_number: 53, symbol: \"I\", name: \"Iodine\", mass: 126.9045, covalent_radius: 1.39, vdw_radius: 2.04, valence_electrons: 7, valence: [1, 3, 5], max_bonds: 1)"},{"id":"In","name":"In","value":"Element.new(atomic_number: 49, symbol: \"In\", name: \"Indium\", mass: 114.818, covalent_radius: 1.42, vdw_radius: 2.43, valence_electrons: 3, valence: 3, max_bonds: 3)"},{"id":"Ir","name":"Ir","value":"Element.new(atomic_number: 77, symbol: \"Ir\", name: \"Iridium\", mass: 192.217, covalent_radius: 1.41, vdw_radius: 2.41, valence_electrons: 9, valence: nil, max_bonds: 6)"},{"id":"K","name":"K","value":"Element.new(atomic_number: 19, symbol: \"K\", name: \"Potassium\", mass: 39.0983, covalent_radius: 2.03, vdw_radius: 2.73, valence_electrons: 1, valence: 1, max_bonds: 1)"},{"id":"Kr","name":"Kr","value":"Element.new(atomic_number: 36, symbol: \"Kr\", name: \"Krypton\", mass: 83.798, covalent_radius: 1.16, vdw_radius: 2.25, valence_electrons: 8, valence: 0, max_bonds: 0)"},{"id":"La","name":"La","value":"Element.new(atomic_number: 57, symbol: \"La\", name: \"Lanthanum\", mass: 138.9055, covalent_radius: 2.07, vdw_radius: 2.98, valence_electrons: 3, valence: nil, max_bonds: 2)"},{"id":"Li","name":"Li","value":"Element.new(atomic_number: 3, symbol: \"Li\", name: \"Lithium\", mass: 6.941, covalent_radius: 1.28, vdw_radius: 2.12, valence_electrons: 1, valence: 1, max_bonds: 1)"},{"id":"Lr","name":"Lr","value":"Element.new(atomic_number: 103, symbol: \"Lr\", name: \"Lawrencium\", mass: 262.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 15, valence: nil, max_bonds: 6)"},{"id":"Lu","name":"Lu","value":"Element.new(atomic_number: 71, symbol: \"Lu\", name: \"Lutetium\", mass: 174.967, covalent_radius: 1.87, vdw_radius: 2.74, valence_electrons: 15, valence: nil, max_bonds: 6)"},{"id":"Lv","name":"Lv","value":"Element.new(atomic_number: 116, symbol: \"Lv\", name: \"Livermorium\", mass: 292.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Mc","name":"Mc","value":"Element.new(atomic_number: 115, symbol: \"Mc\", name: \"Moscovium\", mass: 288.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Md","name":"Md","value":"Element.new(atomic_number: 101, symbol: \"Md\", name: \"Mendelevium\", mass: 258.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 13, valence: nil, max_bonds: 6)"},{"id":"Mg","name":"Mg","value":"Element.new(atomic_number: 12, symbol: \"Mg\", name: \"Magnesium\", mass: 24.305, covalent_radius: 1.41, vdw_radius: 2.51, valence_electrons: 2, valence: 2, max_bonds: 2)"},{"id":"Mn","name":"Mn","value":"Element.new(atomic_number: 25, symbol: \"Mn\", name: \"Manganese\", mass: 54.938, covalent_radius: 1.61, vdw_radius: 2.45, valence_electrons: 7, valence: nil, max_bonds: 8)"},{"id":"Mo","name":"Mo","value":"Element.new(atomic_number: 42, symbol: \"Mo\", name: \"Molybdenum\", mass: 95.94, covalent_radius: 1.54, vdw_radius: 2.45, valence_electrons: 6, valence: nil, max_bonds: 6)"},{"id":"Mt","name":"Mt","value":"Element.new(atomic_number: 109, symbol: \"Mt\", name: \"Meitnerium\", mass: 268.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"N","name":"N","value":"Element.new(atomic_number: 7, symbol: \"N\", name: \"Nitrogen\", mass: 14.0067, covalent_radius: 0.71, vdw_radius: 1.66, valence_electrons: 5, valence: 3, max_bonds: 4)"},{"id":"Na","name":"Na","value":"Element.new(atomic_number: 11, symbol: \"Na\", name: \"Sodium\", mass: 22.9898, covalent_radius: 1.66, vdw_radius: 2.50, valence_electrons: 1, valence: 1, max_bonds: 1)"},{"id":"Nb","name":"Nb","value":"Element.new(atomic_number: 41, symbol: \"Nb\", name: \"Niobium\", mass: 92.9064, covalent_radius: 1.64, vdw_radius: 2.56, valence_electrons: 5, valence: nil, max_bonds: 6)"},{"id":"Nd","name":"Nd","value":"Element.new(atomic_number: 60, symbol: \"Nd\", name: \"Neodymium\", mass: 144.242, covalent_radius: 2.01, vdw_radius: 2.95, valence_electrons: 4, valence: nil, max_bonds: 6)"},{"id":"Ne","name":"Ne","value":"Element.new(atomic_number: 10, symbol: \"Ne\", name: \"Neon\", mass: 20.1797, covalent_radius: 0.50, vdw_radius: 1.58, valence_electrons: 8, valence: 0, max_bonds: 0)"},{"id":"Nh","name":"Nh","value":"Element.new(atomic_number: 113, symbol: \"Nh\", name: \"Nihonium\", mass: 284.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Ni","name":"Ni","value":"Element.new(atomic_number: 28, symbol: \"Ni\", name: \"Nickel\", mass: 58.6934, covalent_radius: 1.24, vdw_radius: 2.40, valence_electrons: 10, valence: nil, max_bonds: 6)"},{"id":"No","name":"No","value":"Element.new(atomic_number: 102, symbol: \"No\", name: \"Nobelium\", mass: 259.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 14, valence: nil, max_bonds: 6)"},{"id":"Np","name":"Np","value":"Element.new(atomic_number: 93, symbol: \"Np\", name: \"Neptunium\", mass: 237.0, covalent_radius: 1.90, vdw_radius: 2.82, valence_electrons: 5, valence: nil, max_bonds: 6)"},{"id":"O","name":"O","value":"Element.new(atomic_number: 8, symbol: \"O\", name: \"Oxygen\", mass: 15.9994, covalent_radius: 0.66, vdw_radius: 1.50, valence_electrons: 6, valence: 2, max_bonds: 2)"},{"id":"Og","name":"Og","value":"Element.new(atomic_number: 118, symbol: \"Og\", name: \"Oganesson\", mass: 294.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Os","name":"Os","value":"Element.new(atomic_number: 76, symbol: \"Os\", name: \"Osmium\", mass: 190.23, covalent_radius: 1.44, vdw_radius: 2.48, valence_electrons: 8, valence: nil, max_bonds: 6)"},{"id":"P","name":"P","value":"Element.new(atomic_number: 15, symbol: \"P\", name: \"Phosphorus\", mass: 30.9738, covalent_radius: 1.07, vdw_radius: 1.90, valence_electrons: 5, valence: [3, 5, 7], max_bonds: 6)"},{"id":"Pa","name":"Pa","value":"Element.new(atomic_number: 91, symbol: \"Pa\", name: \"Proactinium\", mass: 231.0359, covalent_radius: 2.00, vdw_radius: 2.88, valence_electrons: 3, valence: nil, max_bonds: 6)"},{"id":"Pb","name":"Pb","value":"Element.new(atomic_number: 82, symbol: \"Pb\", name: \"Lead\", mass: 207.2, covalent_radius: 1.46, vdw_radius: 2.60, valence_electrons: 4, valence: [2, 4], max_bonds: 4)"},{"id":"Pd","name":"Pd","value":"Element.new(atomic_number: 46, symbol: \"Pd\", name: \"Palladium\", mass: 106.42, covalent_radius: 1.39, vdw_radius: 2.15, valence_electrons: 10, valence: nil, max_bonds: 6)"},{"id":"Pm","name":"Pm","value":"Element.new(atomic_number: 61, symbol: \"Pm\", name: \"Promethium\", mass: 145.0, covalent_radius: 1.90, vdw_radius: 1.90 + 0.9, valence_electrons: 5, valence: nil, max_bonds: 6)"},{"id":"Po","name":"Po","value":"Element.new(atomic_number: 84, symbol: \"Po\", name: \"Polonium\", mass: 209.0, covalent_radius: 1.40, vdw_radius: 1.40 + 0.9, valence_electrons: 6, valence: [2, 4, 6], max_bonds: 2)"},{"id":"Pr","name":"Pr","value":"Element.new(atomic_number: 59, symbol: \"Pr\", name: \"Praseodymium\", mass: 140.9077, covalent_radius: 2.03, vdw_radius: 2.92, valence_electrons: 3, valence: nil, max_bonds: 6)"},{"id":"Pt","name":"Pt","value":"Element.new(atomic_number: 78, symbol: \"Pt\", name: \"Platinum\", mass: 195.084, covalent_radius: 1.36, vdw_radius: 2.29, valence_electrons: 10, valence: nil, max_bonds: 6)"},{"id":"Pu","name":"Pu","value":"Element.new(atomic_number: 94, symbol: \"Pu\", name: \"Plutonium\", mass: 244.0, covalent_radius: 1.87, vdw_radius: 2.81, valence_electrons: 6, valence: nil, max_bonds: 6)"},{"id":"Ra","name":"Ra","value":"Element.new(atomic_number: 88, symbol: \"Ra\", name: \"Radium\", mass: 226.0, covalent_radius: 2.21, vdw_radius: 2.21 + 0.9, valence_electrons: 2, valence: 2, max_bonds: 2)"},{"id":"Rb","name":"Rb","value":"Element.new(atomic_number: 37, symbol: \"Rb\", name: \"Rubidium\", mass: 85.4678, covalent_radius: 2.20, vdw_radius: 3.21, valence_electrons: 1, valence: 1, max_bonds: 1)"},{"id":"Re","name":"Re","value":"Element.new(atomic_number: 75, symbol: \"Re\", name: \"Rhenium\", mass: 186.207, covalent_radius: 1.51, vdw_radius: 2.49, valence_electrons: 7, valence: nil, max_bonds: 6)"},{"id":"Rf","name":"Rf","value":"Element.new(atomic_number: 104, symbol: \"Rf\", name: \"Rutherfordium\", mass: 261.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Rg","name":"Rg","value":"Element.new(atomic_number: 111, symbol: \"Rg\", name: \"Roentgenium\", mass: 272.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Rh","name":"Rh","value":"Element.new(atomic_number: 45, symbol: \"Rh\", name: \"Rhodium\", mass: 102.9055, covalent_radius: 1.42, vdw_radius: 2.44, valence_electrons: 9, valence: nil, max_bonds: 6)"},{"id":"Rn","name":"Rn","value":"Element.new(atomic_number: 86, symbol: \"Rn\", name: \"Radon\", mass: 222.0, covalent_radius: 1.50, vdw_radius: 1.50 + 0.9, valence_electrons: 8, valence: 0, max_bonds: 0)"},{"id":"Ru","name":"Ru","value":"Element.new(atomic_number: 44, symbol: \"Ru\", name: \"Ruthenium\", mass: 101.07, covalent_radius: 1.46, vdw_radius: 2.46, valence_electrons: 8, valence: nil, max_bonds: 6)"},{"id":"S","name":"S","value":"Element.new(atomic_number: 16, symbol: \"S\", name: \"Sulfur\", mass: 32.065, covalent_radius: 1.05, vdw_radius: 1.89, valence_electrons: 6, valence: [2, 4, 6], max_bonds: 6)"},{"id":"Sb","name":"Sb","value":"Element.new(atomic_number: 51, symbol: \"Sb\", name: \"Antimony\", mass: 121.76, covalent_radius: 1.39, vdw_radius: 2.47, valence_electrons: 5, valence: [3, 5, 7], max_bonds: 3)"},{"id":"Sc","name":"Sc","value":"Element.new(atomic_number: 21, symbol: \"Sc\", name: \"Scandium\", mass: 44.9559, covalent_radius: 1.70, vdw_radius: 2.58, valence_electrons: 3, valence: nil, max_bonds: 6)"},{"id":"Se","name":"Se","value":"Element.new(atomic_number: 34, symbol: \"Se\", name: \"Selenium\", mass: 78.96, covalent_radius: 1.20, vdw_radius: 1.82, valence_electrons: 6, valence: [2, 4, 6], max_bonds: 2)"},{"id":"Sg","name":"Sg","value":"Element.new(atomic_number: 106, symbol: \"Sg\", name: \"Seaborgium\", mass: 266.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Si","name":"Si","value":"Element.new(atomic_number: 14, symbol: \"Si\", name: \"Silicon\", mass: 28.0855, covalent_radius: 1.11, vdw_radius: 2.19, valence_electrons: 4, valence: [4, 6], max_bonds: 6)"},{"id":"Sm","name":"Sm","value":"Element.new(atomic_number: 62, symbol: \"Sm\", name: \"Samarium\", mass: 150.36, covalent_radius: 1.98, vdw_radius: 2.90, valence_electrons: 6, valence: nil, max_bonds: 6)"},{"id":"Sn","name":"Sn","value":"Element.new(atomic_number: 50, symbol: \"Sn\", name: \"Tin\", mass: 118.71, covalent_radius: 1.39, vdw_radius: 2.42, valence_electrons: 4, valence: [2, 4], max_bonds: 4)"},{"id":"Sr","name":"Sr","value":"Element.new(atomic_number: 38, symbol: \"Sr\", name: \"Strontium\", mass: 87.62, covalent_radius: 1.95, vdw_radius: 2.84, valence_electrons: 2, valence: 2, max_bonds: 2)"},{"id":"Ta","name":"Ta","value":"Element.new(atomic_number: 73, symbol: \"Ta\", name: \"Tantalum\", mass: 180.9479, covalent_radius: 1.70, vdw_radius: 2.53, valence_electrons: 5, valence: nil, max_bonds: 6)"},{"id":"Tb","name":"Tb","value":"Element.new(atomic_number: 65, symbol: \"Tb\", name: \"Terbium\", mass: 158.9254, covalent_radius: 1.94, vdw_radius: 2.79, valence_electrons: 9, valence: nil, max_bonds: 6)"},{"id":"Tc","name":"Tc","value":"Element.new(atomic_number: 43, symbol: \"Tc\", name: \"Technetium\", mass: 98.0, covalent_radius: 1.47, vdw_radius: 2.44, valence_electrons: 7, valence: nil, max_bonds: 6)"},{"id":"Te","name":"Te","value":"Element.new(atomic_number: 52, symbol: \"Te\", name: \"Tellurium\", mass: 127.6, covalent_radius: 1.38, vdw_radius: 1.99, valence_electrons: 6, valence: [2, 4, 6], max_bonds: 2)"},{"id":"Th","name":"Th","value":"Element.new(atomic_number: 90, symbol: \"Th\", name: \"Thorium\", mass: 232.0381, covalent_radius: 2.06, vdw_radius: 2.93, valence_electrons: 4, valence: nil, max_bonds: 6)"},{"id":"Ti","name":"Ti","value":"Element.new(atomic_number: 22, symbol: \"Ti\", name: \"Titanium\", mass: 47.867, covalent_radius: 1.60, vdw_radius: 2.46, valence_electrons: 4, valence: nil, max_bonds: 6)"},{"id":"Tl","name":"Tl","value":"Element.new(atomic_number: 81, symbol: \"Tl\", name: \"Thallium\", mass: 204.3833, covalent_radius: 1.45, vdw_radius: 2.47, valence_electrons: 3, valence: 3, max_bonds: 3)"},{"id":"Tm","name":"Tm","value":"Element.new(atomic_number: 69, symbol: \"Tm\", name: \"Thulium\", mass: 168.9342, covalent_radius: 1.90, vdw_radius: 2.79, valence_electrons: 13, valence: nil, max_bonds: 6)"},{"id":"Ts","name":"Ts","value":"Element.new(atomic_number: 117, symbol: \"Ts\", name: \"Tennessine\", mass: 291.0, covalent_radius: 1.5, vdw_radius: 1.5 + 0.9, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"U","name":"U","value":"Element.new(atomic_number: 92, symbol: \"U\", name: \"Uranium\", mass: 238.0289, covalent_radius: 1.96, vdw_radius: 2.71, valence_electrons: 4, valence: nil, max_bonds: 6)"},{"id":"V","name":"V","value":"Element.new(atomic_number: 23, symbol: \"V\", name: \"Vanadium\", mass: 50.9415, covalent_radius: 1.53, vdw_radius: 2.42, valence_electrons: 5, valence: nil, max_bonds: 6)"},{"id":"W","name":"W","value":"Element.new(atomic_number: 74, symbol: \"W\", name: \"Tungsten\", mass: 183.84, covalent_radius: 1.62, vdw_radius: 2.57, valence_electrons: 6, valence: nil, max_bonds: 6)"},{"id":"Xe","name":"Xe","value":"Element.new(atomic_number: 54, symbol: \"Xe\", name: \"Xenon\", mass: 131.293, covalent_radius: 1.40, vdw_radius: 2.06, valence_electrons: 8, valence: [0, 2, 4, 6], max_bonds: 0)"},{"id":"Y","name":"Y","value":"Element.new(atomic_number: 39, symbol: \"Y\", name: \"Yttrium\", mass: 88.9059, covalent_radius: 1.90, vdw_radius: 2.75, valence_electrons: 3, valence: nil, max_bonds: 6)"},{"id":"Yb","name":"Yb","value":"Element.new(atomic_number: 70, symbol: \"Yb\", name: \"Ytterbium\", mass: 173.04, covalent_radius: 1.87, vdw_radius: 2.80, valence_electrons: 14, valence: nil, max_bonds: 6)"},{"id":"Zn","name":"Zn","value":"Element.new(atomic_number: 30, symbol: \"Zn\", name: \"Zinc\", mass: 65.409, covalent_radius: 1.22, vdw_radius: 2.39, valence_electrons: 2, valence: nil, max_bonds: 6)"},{"id":"Zr","name":"Zr","value":"Element.new(atomic_number: 40, symbol: \"Zr\", name: \"Zirconium\", mass: 91.224, covalent_radius: 1.75, vdw_radius: 2.52, valence_electrons: 4, valence: nil, max_bonds: 6)"}],"extended_modules":[{"html_id":"chem.cr/Chem/PeriodicTable","kind":"module","full_name":"Chem::PeriodicTable","name":"PeriodicTable"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"NOTE: Standard atom weights (in Da) are taken from Meija  J.  et al.  Pure Appl.\nChem.  2016  88 (3)  pp 265-291\ndoi:[10.1515/pac-2015-0305](https://dx.doi.org/10.1515/pac-2015-0305)\n\nNOTE: Covalent radii (in Å) are taken from Cordero  B.  et al.  Dalton Trans.  2008\n21  pp 2832-2838  doi:[10.1039/b801115j](https://dx.doi.org/10.1039/b801115j). Missing\nvalues are set to 1.5 Å\n\nNOTE: vdW radii (in Å) are taken from Alvarez  S.  Dalton Trans.  2013  42  pp\n8617-8636  doi:[10.1039/c3dt50599e](https://dx.doi.org/10.1039/c3dt50599e). Missing\nvalues are set to covalent radius + 0.9 Å\n\nMaximum number of bonds are taken from OpenBabel.","summary":"<p><span class=\"flag purple\">NOTE</span>  Standard atom weights (in Da) are taken from Meija  J.</p>","instance_methods":[{"html_id":"[](*args,**options):Element-instance-method","name":"[]","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options) : Element","args_html":"(*args, **options) : <a href=\"../Chem/Element.html\">Element</a>","location":{"filename":"src/chem/core/periodic_table.cr","line_number":160,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"return_type":"Element","visibility":"Public","body":"self[*args, **options]? || (unknown_element(*args, **options))"}},{"html_id":"[]?(number:Int32):Element|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"}],"args_string":"(number : Int32) : Element | Nil","args_html":"(number : Int32) : <a href=\"../Chem/Element.html\">Element</a> | Nil","location":{"filename":"src/chem/core/periodic_table.cr","line_number":164,"url":null},"def":{"name":"[]?","args":[{"name":"number","external_name":"number","restriction":"Int32"}],"return_type":"Element | ::Nil","visibility":"Public","body":"{% if true %}\n      case number\n      {% for name, i in @type.constants.select do |c|\n  @type.constant(c).is_a?(Call)\nend %}\n        {% if i < 118 %}\n          when {{ i + 1 }}\n            {{ @type }}::{{ name }}\n        {% end %}\n      {% end %}\n      end\n    {% end %}"}},{"html_id":"[]?(symbol:String|Char):Element|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"symbol","external_name":"symbol","restriction":"String | Char"}],"args_string":"(symbol : String | Char) : Element | Nil","args_html":"(symbol : String | <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Element.html\">Element</a> | Nil","location":{"filename":"src/chem/core/periodic_table.cr","line_number":177,"url":null},"def":{"name":"[]?","args":[{"name":"symbol","external_name":"symbol","restriction":"String | Char"}],"return_type":"Element | ::Nil","visibility":"Public","body":"{% if true %}\n      case symbol.to_s.capitalize\n      {% for name, i in @type.constants.select do |c|\n  @type.constant(c).is_a?(Call)\nend %}\n        {% if i < 118 %}\n          when {{ name.stringify }}\n            {{ @type }}::{{ name }}\n        {% end %}\n      {% end %}\n      end\n    {% end %}"}},{"html_id":"[]?(*,name:String):Element|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(*, name : String) : Element | Nil","args_html":"(*, name : String) : <a href=\"../Chem/Element.html\">Element</a> | Nil","location":{"filename":"src/chem/core/periodic_table.cr","line_number":190,"url":null},"def":{"name":"[]?","args":[{"name":"","external_name":"","restriction":""},{"name":"name","external_name":"name","restriction":"String"}],"splat_index":0,"return_type":"Element | ::Nil","visibility":"Public","body":"{% if true %}\n      case name\n      {% for name, i in @type.constants.select do |c|\n  @type.constant(c).is_a?(Call)\nend %}\n        {% if i < 118 %}\n          when {{ @type }}::{{ name }}.name\n            {{ @type }}::{{ name }}\n        {% end %}\n      {% end %}\n      end\n    {% end %}"}},{"html_id":"covalent_cutoff(atom:Atom,other:Atom):Float64-instance-method","name":"covalent_cutoff","doc":"TODO: delete this! it's only used in building connectivity","summary":"<p><span class=\"flag orange\">TODO</span>  delete this! it's only used in building connectivity</p>","abstract":false,"args":[{"name":"atom","external_name":"atom","restriction":"Atom"},{"name":"other","external_name":"other","restriction":"Atom"}],"args_string":"(atom : Atom, other : Atom) : Float64","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>, other : <a href=\"../Chem/Atom.html\">Atom</a>) : Float64","location":{"filename":"src/chem/core/periodic_table.cr","line_number":204,"url":null},"def":{"name":"covalent_cutoff","args":[{"name":"atom","external_name":"atom","restriction":"Atom"},{"name":"other","external_name":"other","restriction":"Atom"}],"return_type":"Float64","visibility":"Public","body":"covalent_cutoff(atom.element, other.element)"}},{"html_id":"covalent_cutoff(ele:Element,other:Element):Float64-instance-method","name":"covalent_cutoff","doc":"NOTE: The additional term (0.3 Å) is taken from the covalent radii reference,\nwhich states that about 96% of the surveyed bonds are within three standard\ndeviations of the sum of the radii, where the found average standard deviation is\nabout 0.1 Å.","summary":"<p><span class=\"flag purple\">NOTE</span>  The additional term (0.3 Å) is taken from the covalent radii reference, which states that about 96% of the surveyed bonds are within three standard deviations of the sum of the radii, where the found average standard deviation is about 0.1 Å.</p>","abstract":false,"args":[{"name":"ele","external_name":"ele","restriction":"Element"},{"name":"other","external_name":"other","restriction":"Element"}],"args_string":"(ele : Element, other : Element) : Float64","args_html":"(ele : <a href=\"../Chem/Element.html\">Element</a>, other : <a href=\"../Chem/Element.html\">Element</a>) : Float64","location":{"filename":"src/chem/core/periodic_table.cr","line_number":212,"url":null},"def":{"name":"covalent_cutoff","args":[{"name":"ele","external_name":"ele","restriction":"Element"},{"name":"other","external_name":"other","restriction":"Element"}],"return_type":"Float64","visibility":"Public","body":"__temp_83 = {ele, other}\n__temp_84 = covalent_pair_dist_table\n__temp_84[__temp_83]? || (__temp_84[__temp_83] = ((ele.covalent_radius + other.covalent_radius) + 0.3) ** 2)\n"}},{"html_id":"covalent_distance(ele:Element,other:Element):Float64-instance-method","name":"covalent_distance","abstract":false,"args":[{"name":"ele","external_name":"ele","restriction":"Element"},{"name":"other","external_name":"other","restriction":"Element"}],"args_string":"(ele : Element, other : Element) : Float64","args_html":"(ele : <a href=\"../Chem/Element.html\">Element</a>, other : <a href=\"../Chem/Element.html\">Element</a>) : Float64","location":{"filename":"src/chem/core/periodic_table.cr","line_number":217,"url":null},"def":{"name":"covalent_distance","args":[{"name":"ele","external_name":"ele","restriction":"Element"},{"name":"other","external_name":"other","restriction":"Element"}],"return_type":"Float64","visibility":"Public","body":"(ele.covalent_radius + other.covalent_radius) + 0.3"}},{"html_id":"elements:Tuple-instance-method","name":"elements","abstract":false,"location":{"filename":"src/chem/core/periodic_table.cr","line_number":225,"url":null},"def":{"name":"elements","return_type":"Tuple","visibility":"Public","body":"{% if true %}\n      {\n        {% for name, i in @type.constants.select do |c|\n  @type.constant(c).is_a?(Call)\nend %}\n          {% if i < 118 %}\n            {{ @type }}::{{ name }},\n          {% end %}\n        {% end %}\n      }\n    {% end %}"}}]},{"html_id":"chem.cr/Chem/Protein","path":"Chem/Protein.html","kind":"module","full_name":"Chem::Protein","name":"Protein","abstract":false,"locations":[{"filename":"src/chem/protein/dssp.cr","line_number":1,"url":null},{"filename":"src/chem/protein/hlxparams.cr","line_number":1,"url":null},{"filename":"src/chem/protein/psique.cr","line_number":1,"url":null},{"filename":"src/chem/protein/secondary_structure.cr","line_number":1,"url":null},{"filename":"src/chem/protein/stride.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"types":[{"html_id":"chem.cr/Chem/Protein/DSSP","path":"Chem/Protein/DSSP.html","kind":"class","full_name":"Chem::Protein::DSSP","name":"DSSP","abstract":false,"superclass":{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator"},"ancestors":[{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/protein/dssp.cr","line_number":34,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"HBOND_COUPLING_FACTOR","name":"HBOND_COUPLING_FACTOR","value":"-27.888"},{"id":"HBOND_ENERGY_CUTOFF","name":"HBOND_ENERGY_CUTOFF","value":"-0.5"},{"id":"HBOND_MIN_ENERGY","name":"HBOND_MIN_ENERGY","value":"-9.9"},{"id":"MIN_CA_SQUARED_DIST","name":"MIN_CA_SQUARED_DIST","value":"81"}],"namespace":{"html_id":"chem.cr/Chem/Protein","kind":"module","full_name":"Chem::Protein","name":"Protein"},"doc":"Pure Crystal implementation of the Dictionary of Protein Secondary Structure (DSSP)\nalgorithm (Kabsch, W.; Sander, C. *Biopolymers* **1983**, *22* (12), 2577–2637.\n[doi:10.1002/bip.360221211][1]).\n\nThis implementation is based on the `mkdssp` program, version 3.0.5, written by\nMaarten L. Hekkelman, currently maintained by Coos Baakman, Jon Black, and Wouter\nTouw, and distributed under the Boost Software license at the\n[github.com/cmbi/xssp][2] repository.\n\nConsider that, according to the algorithm, residues that do not contain backbone\natoms, namely, \"N\", \"CA\", \"C\", and \"O\", are ignored. Therefore, non-standard amino\nacids are considered during the assignment as long as they contain such atoms.\nOtherwise, they will be considered as protein gaps, which may alter the secondary\nstructure of surrounding residues.\n\nNote that some differences may be expected with the output of `mkdssp` due to:\n\n- `mkdssp` does not handle well alternate conformations in PDB files, sometimes\n  discarding entire aminoacids.\n- `mkdssp` detects chain breaks by checking non-consecutive numbers of neighboring\n  residues. This may fail when residues *i* and *i + 1* are not actually bonded, or\n  when residue numbers are not consecutive. This implementation instead uses atom\n  connectivity to check whether C(*i*)–N(*i*+1) are bonded.\n\nFIXME: it does not work correctly for periodic structures that have\nbonds between atoms at opposite ends.\n\nNOTE: This implementation of DSSP is currently 50% slower than pure C++ solutions, so\nkeep this in mind when assigning the secondary structure of many structures.\n\n[1]: http://dx.doi.org/10.1002/bip.360221211\n[2]: http://github.com/cmbi/xssp","summary":"<p>Pure Crystal implementation of the Dictionary of Protein Secondary Structure (DSSP) algorithm (Kabsch, W.; Sander, C.</p>","constructors":[{"html_id":"new(structure:Structure)-class-method","name":"new","abstract":false,"args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure)","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>)","location":{"filename":"src/chem/protein/dssp.cr","line_number":46,"url":null},"def":{"name":"new","args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"visibility":"Public","body":"_ = allocate\n_.initialize(structure)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"assign:Nil-instance-method","name":"assign","abstract":false,"location":{"filename":"src/chem/protein/dssp.cr","line_number":51,"url":null},"def":{"name":"assign","return_type":"Nil","visibility":"Public","body":"reset_secondary_structure\ncalculate_hbonds\nif @residues.size > 4\n  assign_beta_sheets\nend\nassign_helices\nassign_bends_and_turns\n"}}]},{"html_id":"chem.cr/Chem/Protein/HlxParams","path":"Chem/Protein/HlxParams.html","kind":"struct","full_name":"Chem::Protein::HlxParams","name":"HlxParams","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/protein/hlxparams.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Protein","kind":"module","full_name":"Chem::Protein","name":"Protein"},"constructors":[{"html_id":"new(residue:Residue)-class-method","name":"new","abstract":false,"args":[{"name":"residue","external_name":"residue","restriction":"Residue"}],"args_string":"(residue : Residue)","args_html":"(residue : <a href=\"../../Chem/Residue.html\">Residue</a>)","location":{"filename":"src/chem/protein/hlxparams.cr","line_number":8,"url":null},"def":{"name":"new","args":[{"name":"residue","external_name":"residue","restriction":"Residue"}],"visibility":"Public","body":"_ = allocate\n_.initialize(residue)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"pitch:Float64-instance-method","name":"pitch","abstract":false,"location":{"filename":"src/chem/protein/hlxparams.cr","line_number":5,"url":null},"def":{"name":"pitch","return_type":"Float64","visibility":"Public","body":"@pitch"}},{"html_id":"radius:Float64-instance-method","name":"radius","abstract":false,"location":{"filename":"src/chem/protein/hlxparams.cr","line_number":6,"url":null},"def":{"name":"radius","return_type":"Float64","visibility":"Public","body":"@radius"}},{"html_id":"rotaxis:Spatial::Vec3-instance-method","name":"rotaxis","abstract":false,"location":{"filename":"src/chem/protein/hlxparams.cr","line_number":3,"url":null},"def":{"name":"rotaxis","return_type":"Spatial::Vec3","visibility":"Public","body":"@rotaxis"}},{"html_id":"to_q:Chem::Spatial::Quat-instance-method","name":"to_q","abstract":false,"location":{"filename":"src/chem/protein/hlxparams.cr","line_number":94,"url":null},"def":{"name":"to_q","return_type":"Chem::Spatial::Quat","visibility":"Public","body":"Chem::Spatial::Quat.rotation(about: @rotaxis, by: @twist.degrees)"}},{"html_id":"twist:Float64-instance-method","name":"twist","abstract":false,"location":{"filename":"src/chem/protein/hlxparams.cr","line_number":4,"url":null},"def":{"name":"twist","return_type":"Float64","visibility":"Public","body":"@twist"}}]},{"html_id":"chem.cr/Chem/Protein/PSIQUE","path":"Chem/Protein/PSIQUE.html","kind":"class","full_name":"Chem::Protein::PSIQUE","name":"PSIQUE","abstract":false,"superclass":{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator"},"ancestors":[{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/protein/psique.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"CURVATURE_CUTOFF","name":"CURVATURE_CUTOFF","value":"60"},{"id":"HBOND_DISTANCE","name":"HBOND_DISTANCE","value":"1.5..2.6"},{"id":"HBOND_MIN_ANGLE","name":"HBOND_MIN_ANGLE","value":"120"},{"id":"MIN_RESIDUE_DISTANCE","name":"MIN_RESIDUE_DISTANCE","value":"3"}],"namespace":{"html_id":"chem.cr/Chem/Protein","kind":"module","full_name":"Chem::Protein","name":"Protein"},"constructors":[{"html_id":"new(structure:Structure,blend_elements:Bool=true)-class-method","name":"new","abstract":false,"args":[{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"blend_elements","default_value":"true","external_name":"blend_elements","restriction":"Bool"}],"args_string":"(structure : Structure, blend_elements : Bool = true)","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>, blend_elements : Bool = <span class=\"n\">true</span>)","location":{"filename":"src/chem/protein/psique.cr","line_number":13,"url":null},"def":{"name":"new","args":[{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"blend_elements","default_value":"true","external_name":"blend_elements","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(structure, blend_elements)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"assign:Nil-instance-method","name":"assign","abstract":false,"location":{"filename":"src/chem/protein/psique.cr","line_number":20,"url":null},"def":{"name":"assign","return_type":"Nil","visibility":"Public","body":"reset_secondary_structure\nupdate_bridged_residues\nassign_secondary_structure\nextend_elements\nreassign_enclosed_elements\nnormalize_regular_elements\n"}},{"html_id":"blend_elements?:Bool-instance-method","name":"blend_elements?","abstract":false,"location":{"filename":"src/chem/protein/psique.cr","line_number":9,"url":null},"def":{"name":"blend_elements?","return_type":"Bool","visibility":"Public","body":"@blend_elements"}}],"types":[{"html_id":"chem.cr/Chem/Protein/PSIQUE/SecondaryStructureBlender","path":"Chem/Protein/PSIQUE/SecondaryStructureBlender.html","kind":"class","full_name":"Chem::Protein::PSIQUE::SecondaryStructureBlender","name":"SecondaryStructureBlender","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/protein/psique.cr","line_number":376,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Protein/PSIQUE","kind":"class","full_name":"Chem::Protein::PSIQUE","name":"PSIQUE"},"constructors":[{"html_id":"new(residues:ResidueView)-class-method","name":"new","abstract":false,"args":[{"name":"residues","external_name":"residues","restriction":"ResidueView"}],"args_string":"(residues : ResidueView)","args_html":"(residues : <a href=\"../../../Chem/ResidueView.html\">ResidueView</a>)","location":{"filename":"src/chem/protein/psique.cr","line_number":377,"url":null},"def":{"name":"new","args":[{"name":"residues","external_name":"residues","restriction":"ResidueView"}],"visibility":"Public","body":"_ = allocate\n_.initialize(residues)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](i:Int32,offset:Int32=0):SecondaryStructure|Nil-instance-method","name":"[]","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"},{"name":"offset","default_value":"0","external_name":"offset","restriction":"Int32"}],"args_string":"(i : Int32, offset : Int32 = 0) : SecondaryStructure | Nil","args_html":"(i : Int32, offset : Int32 = <span class=\"n\">0</span>) : <a href=\"../../../Chem/Protein/SecondaryStructure.html\">SecondaryStructure</a> | Nil","location":{"filename":"src/chem/protein/psique.cr","line_number":381,"url":null},"def":{"name":"[]","args":[{"name":"i","external_name":"i","restriction":"Int32"},{"name":"offset","default_value":"0","external_name":"offset","restriction":"Int32"}],"return_type":"SecondaryStructure | ::Nil","visibility":"Public","body":"i = i + offset\nif 0 <= i && i < @residues.size\n  (@residues.unsafe_fetch(i)).sec\nend\n"}},{"html_id":"beginning_of_sec_at?(i:Int32):Bool-instance-method","name":"beginning_of_sec_at?","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : Bool","args_html":"(i : Int32) : Bool","location":{"filename":"src/chem/protein/psique.cr","line_number":386,"url":null},"def":{"name":"beginning_of_sec_at?","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"((self[i] != self[i, -1]) && (self[i] == self[i, 1])) && (self[i] == self[i, 2])"}},{"html_id":"blend:Nil-instance-method","name":"blend","abstract":false,"location":{"filename":"src/chem/protein/psique.cr","line_number":390,"url":null},"def":{"name":"blend","return_type":"Nil","visibility":"Public","body":"if @residues.size > 2\n  while !next_patches.empty?\n    @patches.each do |i, sec|\n      @residues[i].sec = sec\n    end\n  end\nelse\n  @residues.sec = @residues[0].sec\nend"}},{"html_id":"end_of_sec_at?(i:Int32):Bool-instance-method","name":"end_of_sec_at?","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : Bool","args_html":"(i : Int32) : Bool","location":{"filename":"src/chem/protein/psique.cr","line_number":402,"url":null},"def":{"name":"end_of_sec_at?","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"((self[i] == self[i, -2]) && (self[i] == self[i, -1])) && (self[i] != self[i, 1])"}},{"html_id":"middle_of_sec_at?(i:Int32):Bool-instance-method","name":"middle_of_sec_at?","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : Bool","args_html":"(i : Int32) : Bool","location":{"filename":"src/chem/protein/psique.cr","line_number":406,"url":null},"def":{"name":"middle_of_sec_at?","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"(self[i] == self[i, -1]) && (self[i] == self[i, 1])"}},{"html_id":"mutable?(i:Int32):Bool-instance-method","name":"mutable?","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : Bool","args_html":"(i : Int32) : Bool","location":{"filename":"src/chem/protein/psique.cr","line_number":410,"url":null},"def":{"name":"mutable?","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"return_type":"Bool","visibility":"Public","body":"((!(beginning_of_sec_at?(i))) && (!(middle_of_sec_at?(i)))) && (!(end_of_sec_at?(i)))"}},{"html_id":"next_patches:Hash(Int32,SecondaryStructure)-instance-method","name":"next_patches","abstract":false,"location":{"filename":"src/chem/protein/psique.cr","line_number":416,"url":null},"def":{"name":"next_patches","return_type":"Hash(Int32, SecondaryStructure)","visibility":"Public","body":"max_score = 0\n@patches.clear\n@residues.each_with_index do |res, i|\n  if mutable?(i)\n  else\n    next\n  end\n  (score_table(i)).each do |sec, score|\n    if score > max_score\n      @patches.clear\n      max_score = score\n    end\n    if score == max_score\n      @patches[i] = sec\n    end\n  end\nend\n@patches.reject! do |i, sec|\n  (@patches[i + 1]? == self[i]) && (sec == self[i + 1])\nend\n@patches\n"}},{"html_id":"score(i:Int32,sec:SecondaryStructure):Int32-instance-method","name":"score","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"},{"name":"sec","external_name":"sec","restriction":"SecondaryStructure"}],"args_string":"(i : Int32, sec : SecondaryStructure) : Int32","args_html":"(i : Int32, sec : <a href=\"../../../Chem/Protein/SecondaryStructure.html\">SecondaryStructure</a>) : Int32","location":{"filename":"src/chem/protein/psique.cr","line_number":435,"url":null},"def":{"name":"score","args":[{"name":"i","external_name":"i","restriction":"Int32"},{"name":"sec","external_name":"sec","restriction":"SecondaryStructure"}],"return_type":"Int32","visibility":"Public","body":"score = (-2..2).sum do |offset|\n  if offset == 0\n    0\n  else\n    if other = self[i, offset]\n      other == sec ? 10 ** (3 - offset.abs) : 0\n    else\n      1\n    end\n  end\nend\nif @residues[i].sec == self[i, 3]\n  score = score - 5\nend\nscore\n"}},{"html_id":"score_table(i:Int32):Hash(SecondaryStructure,Int32)-instance-method","name":"score_table","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int32"}],"args_string":"(i : Int32) : Hash(SecondaryStructure, Int32)","args_html":"(i : Int32) : Hash(<a href=\"../../../Chem/Protein/SecondaryStructure.html\">SecondaryStructure</a>, Int32)","location":{"filename":"src/chem/protein/psique.cr","line_number":449,"url":null},"def":{"name":"score_table","args":[{"name":"i","external_name":"i","restriction":"Int32"}],"return_type":"Hash(SecondaryStructure, Int32)","visibility":"Public","body":"(-2..2).compact_map do |offset|\n  if offset != 0\n    self[i, offset]\n  end\nend.uniq!.reject!(&.==((@residues.unsafe_fetch(i)).sec)).to_h do |sec|\n  {sec, score(i, sec)}\nend"}}]}]},{"html_id":"chem.cr/Chem/Protein/SecondaryStructure","path":"Chem/Protein/SecondaryStructure.html","kind":"enum","full_name":"Chem::Protein::SecondaryStructure","name":"SecondaryStructure","abstract":false,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/protein/secondary_structure.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Bend","name":"Bend","value":"0"},{"id":"BetaBridge","name":"BetaBridge","value":"1"},{"id":"BetaStrand","name":"BetaStrand","value":"2"},{"id":"LeftHandedHelix3_10","name":"LeftHandedHelix3_10","value":"3"},{"id":"LeftHandedHelixAlpha","name":"LeftHandedHelixAlpha","value":"4"},{"id":"LeftHandedHelixGamma","name":"LeftHandedHelixGamma","value":"5"},{"id":"LeftHandedHelixPi","name":"LeftHandedHelixPi","value":"6"},{"id":"None","name":"None","value":"7"},{"id":"Polyproline","name":"Polyproline","value":"8"},{"id":"RightHandedHelix3_10","name":"RightHandedHelix3_10","value":"9"},{"id":"RightHandedHelixAlpha","name":"RightHandedHelixAlpha","value":"10"},{"id":"RightHandedHelixGamma","name":"RightHandedHelixGamma","value":"11"},{"id":"RightHandedHelixPi","name":"RightHandedHelixPi","value":"12"},{"id":"Turn","name":"Turn","value":"13"}],"namespace":{"html_id":"chem.cr/Chem/Protein","kind":"module","full_name":"Chem::Protein","name":"Protein"},"class_methods":[{"html_id":"[]?(code:Char):self|Nil-class-method","name":"[]?","doc":"Returns the secondary structure by one-letter code.\n\nReturns `nil` if `code` is invalid. See `#code` for a list of\ncodes.\n\n```\nSecondaryStructure['H']? # => SecondaryStructure::RightHandedHelixAlpha\nSecondaryStructure['h']? # => SecondaryStructure::LeftHandedHelixAlpha\nSecondaryStructure['E']? # => SecondaryStructure::BetaStrand\nSecondaryStructure['e']? # => SecondaryStructure::BetaStrand\nSecondaryStructure['X']? # => nil\n```","summary":"<p>Returns the secondary structure by one-letter code.</p>","abstract":false,"args":[{"name":"code","external_name":"code","restriction":"Char"}],"args_string":"(code : Char) : self | Nil","args_html":"(code : <a href=\"../../Char.html\">Char</a>) : <span class=\"k\">self</span> | Nil","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":46,"url":null},"def":{"name":"[]?","args":[{"name":"code","external_name":"code","restriction":"Char"}],"return_type":"self | ::Nil","visibility":"Public","body":"case code\nwhen 'S', 's'\n  Bend\nwhen 'B', 'b'\n  BetaBridge\nwhen 'E', 'e'\n  BetaStrand\nwhen 'g'\n  LeftHandedHelix3_10\nwhen 'h'\n  LeftHandedHelixAlpha\nwhen 'f'\n  LeftHandedHelixGamma\nwhen 'i'\n  LeftHandedHelixPi\nwhen '0', 'C', 'c'\n  None\nwhen 'P', 'p'\n  Polyproline\nwhen 'G'\n  RightHandedHelix3_10\nwhen 'H'\n  RightHandedHelixAlpha\nwhen 'F'\n  RightHandedHelixGamma\nwhen 'I'\n  RightHandedHelixPi\nwhen 'T', 't'\n  Turn\nend"}}],"constructors":[{"html_id":"[](code:Char):self-class-method","name":"[]","doc":"Returns the secondary structure by one-letter code.\n\nRaises IndexError if `code` is invalid. See `#code` for a list of\ncodes.\n\n```\nSecondaryStructure['H'] # => SecondaryStructure::RightHandedHelixAlpha\nSecondaryStructure['h'] # => SecondaryStructure::LeftHandedHelixAlpha\nSecondaryStructure['E'] # => SecondaryStructure::BetaStrand\nSecondaryStructure['e'] # => SecondaryStructure::BetaStrand\nSecondaryStructure['X'] # raises IndexError\n```","summary":"<p>Returns the secondary structure by one-letter code.</p>","abstract":false,"args":[{"name":"code","external_name":"code","restriction":"Char"}],"args_string":"(code : Char) : self","args_html":"(code : <a href=\"../../Char.html\">Char</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":30,"url":null},"def":{"name":"[]","args":[{"name":"code","external_name":"code","restriction":"Char"}],"return_type":"self","visibility":"Public","body":"self[code]? || (raise(IndexError.new(\"Invalid secondary structure code: #{code}\")))"}}],"instance_methods":[{"html_id":"bend?-instance-method","name":"bend?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":3,"url":null},"def":{"name":"bend?","visibility":"Public","body":"self == Bend"}},{"html_id":"beta_bridge?-instance-method","name":"beta_bridge?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":4,"url":null},"def":{"name":"beta_bridge?","visibility":"Public","body":"self == BetaBridge"}},{"html_id":"beta_strand?-instance-method","name":"beta_strand?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":5,"url":null},"def":{"name":"beta_strand?","visibility":"Public","body":"self == BetaStrand"}},{"html_id":"code:Char-instance-method","name":"code","doc":"Returns one-letter secondary structure code.\n\nCodes are a superset of those defined by DSSP:\n\n- `'I'` : Right-handed π-helix (5-turn)\n- `'H'` : Right-handed α-helix (4-turn)\n- `'G'` : Right-handed 3₁₀-helix (3-turn)\n- `'F'` : Right-handed 2.2₇ (2-turn)\n- `'i'` : Left-handed π-helix (5-turn)\n- `'h'` : Left-handed α-helix (4-turn)\n- `'g'` : Left-handed 3₁₀-helix (3-turn)\n- `'f'` : Left-handed 2.2₇ (2-turn)\n- `'P'` : Polyproline\n- `'E'` : β-strand\n- `'B'` : β-bridge\n- `'T'` : Turn\n- `'S'` : Bend\n- `'0'` : None","summary":"<p>Returns one-letter secondary structure code.</p>","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":83,"url":null},"def":{"name":"code","return_type":"Char","visibility":"Public","body":"case self\nin .bend?\n  'S'\nin .beta_bridge?\n  'B'\nin .beta_strand?\n  'E'\nin .left_handed_helix3_10?\n  'g'\nin .left_handed_helix_alpha?\n  'h'\nin .left_handed_helix_gamma?\n  'f'\nin .left_handed_helix_pi?\n  'i'\nin .none?\n  '0'\nin .polyproline?\n  'P'\nin .right_handed_helix3_10?\n  'G'\nin .right_handed_helix_alpha?\n  'H'\nin .right_handed_helix_gamma?\n  'F'\nin .right_handed_helix_pi?\n  'I'\nin .turn?\n  'T'\nend"}},{"html_id":"color:Colorize::ColorRGB-instance-method","name":"color","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":102,"url":null},"def":{"name":"color","return_type":"Colorize::ColorRGB","visibility":"Public","body":"Colorize::ColorRGB.from_hex(case self\nin .left_handed_helix3_10?, .right_handed_helix3_10?\n  \"#E88BC4\"\nin .left_handed_helix_alpha?, .right_handed_helix_alpha?\n  \"#E41A1C\"\nin .left_handed_helix_pi?, .right_handed_helix_pi?\n  \"#6A3D9B\"\nin .left_handed_helix_gamma?, .right_handed_helix_gamma?\n  \"#F4A261\"\nin .beta_strand?\n  \"#2A9D8F\"\nin .polyproline?\n  \"#E9C46A\"\nin .bend?, .beta_bridge?, .none?, .turn?\n  \"#C8C8C8\"\nend)"}},{"html_id":"equals?(rhs:self,strict:Bool=true,handedness:Bool=true):Bool-instance-method","name":"equals?","doc":"Returns `true` if secondary structures are equal.\n\nIf `strict` is `true`, secondary structures are compared by their\nidentity, otherwise they're compared by their computed type.\n\n```\nSecondaryStructure::RightHandedHelixAlpha.equals?(:right_handed_helix_alpha) # => true\nSecondaryStructure::RightHandedHelixAlpha.equals?(:right_handed_helix_pi)    # => false\nSecondaryStructure::RightHandedHelixAlpha.equals?(:left_handed_helix_alpha)  # => false\nSecondaryStructure::BetaStrand.equals?(:polyproline)                         # => true\nSecondaryStructure::BetaStrand.equals?(:bend)                                # => false\n\nSecondaryStructure::RightHandedHelixAlpha.equals?(:right_handed_helix_pi, strict: false) # => true\nSecondaryStructure::BetaStrand.equals?(:polyproline, strict: false)                      # => true\nSecondaryStructure::BetaStrand.equals?(:bend, strict: false)                             # => false\n```","summary":"<p>Returns <code>true</code> if secondary structures are equal.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","default_value":"true","external_name":"handedness","restriction":"Bool"}],"args_string":"(rhs : self, strict : Bool = true, handedness : Bool = true) : Bool","args_html":"(rhs : <span class=\"k\">self</span>, strict : Bool = <span class=\"n\">true</span>, handedness : Bool = <span class=\"n\">true</span>) : Bool","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":130,"url":null},"def":{"name":"equals?","args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","default_value":"true","external_name":"handedness","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"if strict\n  self == rhs\nelse\n  if handedness\n    (type == rhs.type) && (self.handedness == rhs.handedness)\n  else\n    type == rhs.type\n  end\nend"}},{"html_id":"handedness:Symbol|Nil-instance-method","name":"handedness","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":140,"url":null},"def":{"name":"handedness","return_type":"Symbol | ::Nil","visibility":"Public","body":"case self\nin .left_handed_helix3_10?, .left_handed_helix_alpha?, .left_handed_helix_gamma?, .left_handed_helix_pi?\n  :left\nin .right_handed_helix3_10?, .right_handed_helix_alpha?, .right_handed_helix_gamma?, .right_handed_helix_pi?\n  :right\nin .bend?, .beta_bridge?, .beta_strand?, .none?, .polyproline?, .turn?, nil\nend"}},{"html_id":"helix3_10?-instance-method","name":"helix3_10?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":213,"url":null},"def":{"name":"helix3_10?","visibility":"Public","body":"left_handed_helix3_10? || right_handed_helix3_10?"}},{"html_id":"helix_alpha?-instance-method","name":"helix_alpha?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":213,"url":null},"def":{"name":"helix_alpha?","visibility":"Public","body":"left_handed_helix_alpha? || right_handed_helix_alpha?"}},{"html_id":"helix_gamma?-instance-method","name":"helix_gamma?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":213,"url":null},"def":{"name":"helix_gamma?","visibility":"Public","body":"left_handed_helix_gamma? || right_handed_helix_gamma?"}},{"html_id":"helix_pi?-instance-method","name":"helix_pi?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":213,"url":null},"def":{"name":"helix_pi?","visibility":"Public","body":"left_handed_helix_pi? || right_handed_helix_pi?"}},{"html_id":"left_handed_helix3_10?-instance-method","name":"left_handed_helix3_10?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":6,"url":null},"def":{"name":"left_handed_helix3_10?","visibility":"Public","body":"self == LeftHandedHelix3_10"}},{"html_id":"left_handed_helix_alpha?-instance-method","name":"left_handed_helix_alpha?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":7,"url":null},"def":{"name":"left_handed_helix_alpha?","visibility":"Public","body":"self == LeftHandedHelixAlpha"}},{"html_id":"left_handed_helix_gamma?-instance-method","name":"left_handed_helix_gamma?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":8,"url":null},"def":{"name":"left_handed_helix_gamma?","visibility":"Public","body":"self == LeftHandedHelixGamma"}},{"html_id":"left_handed_helix_pi?-instance-method","name":"left_handed_helix_pi?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":9,"url":null},"def":{"name":"left_handed_helix_pi?","visibility":"Public","body":"self == LeftHandedHelixPi"}},{"html_id":"min_size:Int32-instance-method","name":"min_size","doc":"Returns nominal secondary structure's minimum size.","summary":"<p>Returns nominal secondary structure's minimum size.</p>","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":163,"url":null},"def":{"name":"min_size","return_type":"Int32","visibility":"Public","body":"case self\nwhen .beta_strand?\n  2\nwhen .helix3_10?\n  3\nwhen .helix_alpha?\n  4\nwhen .helix_gamma?\n  3\nwhen .helix_pi?\n  5\nwhen .polyproline?\n  3\nelse\n  1\nend"}},{"html_id":"none?-instance-method","name":"none?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":10,"url":null},"def":{"name":"none?","visibility":"Public","body":"self == None"}},{"html_id":"polyproline?-instance-method","name":"polyproline?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":11,"url":null},"def":{"name":"polyproline?","visibility":"Public","body":"self == Polyproline"}},{"html_id":"regular?:Bool-instance-method","name":"regular?","doc":"Returns `true` if it's a regular secondary structure, otherwise\n`false`.\n\nSee also `SecondaryStructureType#regular?`.\n\n```\nSecondaryStructure::RightHandedHelixAlpha.regular? # => true\nSecondaryStructure::LeftHandedHelixAlpha.regular?  # => true\nSecondaryStructure::BetaStrand.regular?            # => true\nSecondaryStructure::Turn.regular?                  # => false\nSecondaryStructure::Bend.regular?                  # => false\n```","summary":"<p>Returns <code>true</code> if it's a regular secondary structure, otherwise <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":187,"url":null},"def":{"name":"regular?","return_type":"Bool","visibility":"Public","body":"type.regular?"}},{"html_id":"right_handed_helix3_10?-instance-method","name":"right_handed_helix3_10?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":12,"url":null},"def":{"name":"right_handed_helix3_10?","visibility":"Public","body":"self == RightHandedHelix3_10"}},{"html_id":"right_handed_helix_alpha?-instance-method","name":"right_handed_helix_alpha?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":13,"url":null},"def":{"name":"right_handed_helix_alpha?","visibility":"Public","body":"self == RightHandedHelixAlpha"}},{"html_id":"right_handed_helix_gamma?-instance-method","name":"right_handed_helix_gamma?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":14,"url":null},"def":{"name":"right_handed_helix_gamma?","visibility":"Public","body":"self == RightHandedHelixGamma"}},{"html_id":"right_handed_helix_pi?-instance-method","name":"right_handed_helix_pi?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":15,"url":null},"def":{"name":"right_handed_helix_pi?","visibility":"Public","body":"self == RightHandedHelixPi"}},{"html_id":"turn?-instance-method","name":"turn?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":16,"url":null},"def":{"name":"turn?","visibility":"Public","body":"self == Turn"}},{"html_id":"type:SecondaryStructureType-instance-method","name":"type","doc":"Returns secondary structure type.\n\n```\nSecondaryStructure::RightHandedHelixAlpha.type # => Helical\nSecondaryStructure::LeftHandedHelixAlpha.type  # => Helical\nSecondaryStructure::BetaStrand.type            # => Extended\nSecondaryStructure::Turn.type                  # => Coil\nSecondaryStructure::Bend.type                  # => Coil\n```","summary":"<p>Returns secondary structure type.</p>","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":200,"url":null},"def":{"name":"type","return_type":"SecondaryStructureType","visibility":"Public","body":"case self\nin .left_handed_helix3_10?, .left_handed_helix_alpha?, .left_handed_helix_pi?, .right_handed_helix3_10?, .right_handed_helix_alpha?, .right_handed_helix_pi?\n  SecondaryStructureType::Helical\nin .beta_bridge?, .beta_strand?, .left_handed_helix_gamma?, .polyproline?, .right_handed_helix_gamma?\n  SecondaryStructureType::Extended\nin .bend?, .none?, .turn?\n  SecondaryStructureType::Coil\nend"}}]},{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","path":"Chem/Protein/SecondaryStructureCalculator.html","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator","abstract":true,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/protein/secondary_structure.cr","line_number":268,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"chem.cr/Chem/Protein/DSSP","kind":"class","full_name":"Chem::Protein::DSSP","name":"DSSP"},{"html_id":"chem.cr/Chem/Protein/PSIQUE","kind":"class","full_name":"Chem::Protein::PSIQUE","name":"PSIQUE"},{"html_id":"chem.cr/Chem/Protein/Stride","kind":"class","full_name":"Chem::Protein::Stride","name":"Stride"}],"namespace":{"html_id":"chem.cr/Chem/Protein","kind":"module","full_name":"Chem::Protein","name":"Protein"},"class_methods":[{"html_id":"assign(structure:Structure,**options):Nil-class-method","name":"assign","abstract":false,"args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure, **options) : Nil","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>, **options) : Nil","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":274,"url":null},"def":{"name":"assign","args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"return_type":"Nil","visibility":"Public","body":"(new(structure, **options)).assign"}}],"constructors":[{"html_id":"new(structure:Structure)-class-method","name":"new","abstract":false,"args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure)","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>)","location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":269,"url":null},"def":{"name":"new","args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"visibility":"Public","body":"_ = allocate\n_.initialize(structure)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"assign:Nil-instance-method","name":"assign","abstract":true,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":272,"url":null},"def":{"name":"assign","return_type":"Nil","visibility":"Public","body":""}}]},{"html_id":"chem.cr/Chem/Protein/SecondaryStructureType","path":"Chem/Protein/SecondaryStructureType.html","kind":"enum","full_name":"Chem::Protein::SecondaryStructureType","name":"SecondaryStructureType","abstract":false,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/protein/secondary_structure.cr","line_number":226,"url":null}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Coil","name":"Coil","value":"0"},{"id":"Extended","name":"Extended","value":"1"},{"id":"Helical","name":"Helical","value":"2"}],"namespace":{"html_id":"chem.cr/Chem/Protein","kind":"module","full_name":"Chem::Protein","name":"Protein"},"doc":"Members are similar to simplified or reduced secondary structure\nclassification:\n\n- Helical (α-helix, π-helix, etc.)\n- Extended (β-strand, polyproline, 2.2_7-helix, etc.)\n- Coil (Bend, turn, etc.)","summary":"<p>Members are similar to simplified or reduced secondary structure classification:</p>","instance_methods":[{"html_id":"code:Char-instance-method","name":"code","doc":"Returns one-letter secondary structure type code.\n\nAssignment codes are similar to those of simplified DSSP:\n\n- `'H'` : Helical\n- `'E'` : Extended\n- `'C'` : Coil","summary":"<p>Returns one-letter secondary structure type code.</p>","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":238,"url":null},"def":{"name":"code","return_type":"Char","visibility":"Public","body":"case self\nin .extended?\n  'E'\nin .helical?\n  'H'\nin .coil?\n  'C'\nend"}},{"html_id":"coil?-instance-method","name":"coil?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":227,"url":null},"def":{"name":"coil?","visibility":"Public","body":"self == Coil"}},{"html_id":"extended?-instance-method","name":"extended?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":228,"url":null},"def":{"name":"extended?","visibility":"Public","body":"self == Extended"}},{"html_id":"helical?-instance-method","name":"helical?","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":229,"url":null},"def":{"name":"helical?","visibility":"Public","body":"self == Helical"}},{"html_id":"min_size:Int32-instance-method","name":"min_size","doc":"Returns nominal secondary structure type's minimum size.","summary":"<p>Returns nominal secondary structure type's minimum size.</p>","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":247,"url":null},"def":{"name":"min_size","return_type":"Int32","visibility":"Public","body":"case self\nin .extended?\n  2\nin .helical?\n  3\nin .coil?\n  1\nend"}},{"html_id":"regular?:Bool-instance-method","name":"regular?","doc":"Returns `true` if it's a regular secondary structure type,\notherwise `false`.\n\n```\nSecondaryStructureType::Helical.regular?  # => true\nSecondaryStructureType::Extended.regular? # => true\nSecondaryStructureType::Coil.regular?     # => false\n```","summary":"<p>Returns <code>true</code> if it's a regular secondary structure type, otherwise <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/protein/secondary_structure.cr","line_number":263,"url":null},"def":{"name":"regular?","return_type":"Bool","visibility":"Public","body":"!coil?"}}]},{"html_id":"chem.cr/Chem/Protein/Stride","path":"Chem/Protein/Stride.html","kind":"class","full_name":"Chem::Protein::Stride","name":"Stride","abstract":false,"superclass":{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator"},"ancestors":[{"html_id":"chem.cr/Chem/Protein/SecondaryStructureCalculator","kind":"class","full_name":"Chem::Protein::SecondaryStructureCalculator","name":"SecondaryStructureCalculator"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/stride.cr","line_number":2,"url":null},{"filename":"src/chem/protein/stride.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Protein","kind":"module","full_name":"Chem::Protein","name":"Protein"},"constructors":[{"html_id":"new(structure:Structure)-class-method","name":"new","abstract":false,"args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure)","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>)","location":{"filename":"src/chem/protein/stride.cr","line_number":3,"url":null},"def":{"name":"new","args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"visibility":"Public","body":"_ = allocate\n_.initialize(structure)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"assign:Nil-instance-method","name":"assign","abstract":false,"location":{"filename":"src/chem/protein/stride.cr","line_number":7,"url":null},"def":{"name":"assign","return_type":"Nil","visibility":"Public","body":"run_stride\n@output.each_line do |line|\n  if line.starts_with?(\"ASG\")\n  else\n    next\n  end\n  chain = (chr = line[9]) != '-' ? chr : '-'\n  inscode = line[14]\n  if inscode.letter?\n  else\n    inscode = nil\n  end\n  resnum = line[inscode.nil? ? 10..14 : 10..13].to_i\n  (@structure.dig(chain, resnum, inscode)).sec = SecondaryStructure[line[24]]\nend\n"}}],"types":[{"html_id":"chem.cr/Chem/Protein/Stride/Writer","path":"Chem/Protein/Stride/Writer.html","kind":"class","full_name":"Chem::Protein::Stride::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/stride.cr","line_number":3,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"namespace":{"html_id":"chem.cr/Chem/Protein/Stride","kind":"class","full_name":"Chem::Protein::Stride","name":"Stride"},"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","doc":"Creates a new object from the given *io*.","summary":"<p>Creates a new object from the given <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}]}]}]},{"html_id":"chem.cr/Chem/PSF","path":"Chem/PSF.html","kind":"module","full_name":"Chem::PSF","name":"PSF","abstract":false,"locations":[{"filename":"src/chem/formats/psf.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"types":[{"html_id":"chem.cr/Chem/PSF/Reader","path":"Chem/PSF/Reader.html","kind":"class","full_name":"Chem::PSF::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/psf.cr","line_number":19,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"}],"namespace":{"html_id":"chem.cr/Chem/PSF","kind":"module","full_name":"Chem::PSF","name":"PSF"},"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/psf.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}]}]},{"html_id":"chem.cr/Chem/PullParser","path":"Chem/PullParser.html","kind":"class","full_name":"Chem::PullParser","name":"PullParser","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/pull_parser.cr","line_number":72,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"A pull parser to read a text (ASCII) document by consuming one token\nat a time.\n\nThe parser reads line by line, which is set to an internal buffer.\nSubsequent tokens (consecutive non-whitespace characters) can be\nconsumed via the `#next_token` method (although only from the\ncurrent line). The string representation of the current token can be\nobtained via the `#str` methods or it can be interpreted as a\nprimitive type via the specialized  `#float` and `#int` methods. It\ncan be also interpreted as a custom type via the `#parse` method.\nUpon parsing issues, these methods may return `nil` or raise a\n`ParseException` exception.\n\nWhen creating an instance, the parser must be positioned in the\nfirst line before consuming a token by calling `#next_line`, using\nthe yielding method `#each_line`, or checking for end of file via\n`#eof?`. Upon reading a new line, the cursor is reset and the\ncurrent token is set to `nil`, so `#next_token` must be called\nbefore parsing. If the current token is not set, the parsing methods\nmay return `nil` or raise an exception. Alternatively, use the\nconvenience `#next_f`, `#next_i`, or `#next_s` methods that consume\nthe next token and return the interpreted value.\n\nThe `#next_*` methods always move forward into the IO or line, so\ncare must be taken when calling them as invoking `#next_s?` twice\nwill return the next two strings (if possible), not twice the same.\nFor instance, calling `#next_i?` after `#next_f?` returns `nil` will\nread the next token instead of re-interpreting the current one as an\ninteger. In such cases, consider using the non-advancing methods\n(`#int` instead of `#next_i`).\n\nExample:\n\n```\npull = PullParser.new IO::Memory.new(\"abc def\\n1234 5.6 abc\\n\")\npull.next_token                # => nil (line not read)\npull.next_line                 # place the parser at the first line\npull.str?                      # => nil (current token is nil)\npull.next_s?                   # => \"abc\"\npull.str?                      # => \"abc\" (current token was set by #next_s?)\npull.next_s?                   # => \"def\"\npull.next_s?                   # => nil (end of line)\npull.next_s                    # raises ParseException (no token can be consumed)\npull.next_line                 # place the parser at the second line\npull.next_i                    # => 1234\npull.next_f                    # => 5.6\npull.next_token                # => Bytes[55, 56, 57] (current token is \"abc\")\npull.int?                      # => nil\npull.float?                    # => nil\npull.parse &.sum(&.+('a'.ord)) # => 3\npull.next_token                # => nil (end of line)\npull.next_line                 # => nil (place the parser at the end of IO)\npull.next_token                # => nil (current line is nil)\n```\n\nAdditionally, the cursor can be manually placed on the current line\nvia the `#at` methods. This is useful for parsing fixed-column\nformats such as `#PDB`. The non-question variants will raise if the\ncursor is out of bounds.\n\n```\npull = PullParser.new IO::Memory.new(\"abc123.45def\\nABCDEF 5.16\\n\")\npull.next_line\npull.at(3, 6)     # returns the parser itself\npull.str          # => \"123.45\"\npull.float        # => 123.45\npull.at(9).str    # => \"d\"\npull.at(0, 3).str # => \"abc\"\npull.at(100, 5)   # raises ParseException\n```","summary":"<p>A pull parser to read a text (ASCII) document by consuming one token at a time.</p>","constructors":[{"html_id":"new(io:IO)-class-method","name":"new","doc":"Creates a PullParser which will consume the contents of *io*.","summary":"<p>Creates a PullParser which will consume the contents of <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/pull_parser.cr","line_number":82,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"at(index:Int,message:String=\"Cursoroutofcurrentline\"):self-instance-method","name":"at","doc":"Sets the cursor to the character at *index* in the current line.\nRaises `ParseException` with the given message if *index* is out\nof bounds.","summary":"<p>Sets the cursor to the character at <em>index</em> in the current line.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"message","default_value":"\"Cursor out of current line\"","external_name":"message","restriction":"String"}],"args_string":"(index : Int, message : String = \"Cursor out of current line\") : self","args_html":"(index : Int, message : String = <span class=\"s\">&quot;Cursor out of current line&quot;</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/pull_parser.cr","line_number":87,"url":null},"def":{"name":"at","args":[{"name":"index","external_name":"index","restriction":"Int"},{"name":"message","default_value":"\"Cursor out of current line\"","external_name":"message","restriction":"String"}],"return_type":"self","visibility":"Public","body":"at(index, 1, message)"}},{"html_id":"at(start:Int,count:Int,message:String=\"Cursoroutofcurrentline\"):self-instance-method","name":"at","doc":"Sets the cursor at *start* spanning *count* or less (if there\naren't enough) characters in the current line. Raises\n`ParseException` with the given message if *start* is out of\nbounds.","summary":"<p>Sets the cursor at <em>start</em> spanning <em>count</em> or less (if there aren't enough) characters in the current line.</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":"Int"},{"name":"count","external_name":"count","restriction":"Int"},{"name":"message","default_value":"\"Cursor out of current line\"","external_name":"message","restriction":"String"}],"args_string":"(start : Int, count : Int, message : String = \"Cursor out of current line\") : self","args_html":"(start : Int, count : Int, message : String = <span class=\"s\">&quot;Cursor out of current line&quot;</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/pull_parser.cr","line_number":96,"url":null},"def":{"name":"at","args":[{"name":"start","external_name":"start","restriction":"Int"},{"name":"count","external_name":"count","restriction":"Int"},{"name":"message","default_value":"\"Cursor out of current line\"","external_name":"message","restriction":"String"}],"return_type":"self","visibility":"Public","body":"set_cursor(start, count) do\n  error(message)\nend\nself\n"}},{"html_id":"at(range:Range,message:String=\"Cursoroutofcurrentline\"):self-instance-method","name":"at","doc":"Sets the cursor at *range* in the current line. Raises\n`ParseException` with the given message if *range* is out of\nbounds.","summary":"<p>Sets the cursor at <em>range</em> in the current line.</p>","abstract":false,"args":[{"name":"range","external_name":"range","restriction":"Range"},{"name":"message","default_value":"\"Cursor out of current line\"","external_name":"message","restriction":"String"}],"args_string":"(range : Range, message : String = \"Cursor out of current line\") : self","args_html":"(range : <a href=\"../Range.html\">Range</a>, message : String = <span class=\"s\">&quot;Cursor out of current line&quot;</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/pull_parser.cr","line_number":106,"url":null},"def":{"name":"at","args":[{"name":"range","external_name":"range","restriction":"Range"},{"name":"message","default_value":"\"Cursor out of current line\"","external_name":"message","restriction":"String"}],"return_type":"self","visibility":"Public","body":"bytesize = @line.try(&.bytesize) || 0\nif index_and_count = Indexable.range_to_index_and_count(range, bytesize)\n  at(*index_and_count, message)\nelse\n  raise(error(message))\nend\n"}},{"html_id":"at?(start:Int,count:Int):self-instance-method","name":"at?","doc":"Sets the cursor at *start* spanning *count* or less (if there\naren't enough) characters in the current line. If *start* is out\nof bounds, the current token will be set to `nil`.","summary":"<p>Sets the cursor at <em>start</em> spanning <em>count</em> or less (if there aren't enough) characters in the current line.</p>","abstract":false,"args":[{"name":"start","external_name":"start","restriction":"Int"},{"name":"count","external_name":"count","restriction":"Int"}],"args_string":"(start : Int, count : Int) : self","args_html":"(start : Int, count : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/pull_parser.cr","line_number":126,"url":null},"def":{"name":"at?","args":[{"name":"start","external_name":"start","restriction":"Int"},{"name":"count","external_name":"count","restriction":"Int"}],"return_type":"self","visibility":"Public","body":"set_cursor(start, count) do\n  return self\nend\nself\n"}},{"html_id":"at?(index:Int):self-instance-method","name":"at?","doc":"Sets the cursor to the character at *index* in the current line.\nIf *index* is out of bounds, the current token will be set to\n`nil`.","summary":"<p>Sets the cursor to the character at <em>index</em> in the current line.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : self","args_html":"(index : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/pull_parser.cr","line_number":119,"url":null},"def":{"name":"at?","args":[{"name":"index","external_name":"index","restriction":"Int"}],"return_type":"self","visibility":"Public","body":"at?(index, 1)"}},{"html_id":"at?(range:Range):self-instance-method","name":"at?","doc":"Sets the cursor at *range* in the current line. If *range* is out\nof bounds, the current token will be set to `nil`.","summary":"<p>Sets the cursor at <em>range</em> in the current line.</p>","abstract":false,"args":[{"name":"range","external_name":"range","restriction":"Range"}],"args_string":"(range : Range) : self","args_html":"(range : <a href=\"../Range.html\">Range</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/pull_parser.cr","line_number":133,"url":null},"def":{"name":"at?","args":[{"name":"range","external_name":"range","restriction":"Range"}],"return_type":"self","visibility":"Public","body":"bytesize = @line.try(&.bytesize) || 0\nif index_and_count = Indexable.range_to_index_and_count(range, bytesize)\n  at?(*index_and_count)\nend\nself\n"}},{"html_id":"char(message:String=\"Emptytoken\"):Char-instance-method","name":"char","doc":"Returns the first character of the curren token. Raises\n`ParseException` with the message if the token is not set.","summary":"<p>Returns the first character of the curren token.</p>","abstract":false,"args":[{"name":"message","default_value":"\"Empty token\"","external_name":"message","restriction":"String"}],"args_string":"(message : String = \"Empty token\") : Char","args_html":"(message : String = <span class=\"s\">&quot;Empty token&quot;</span>) : <a href=\"../Char.html\">Char</a>","location":{"filename":"src/chem/pull_parser.cr","line_number":143,"url":null},"def":{"name":"char","args":[{"name":"message","default_value":"\"Empty token\"","external_name":"message","restriction":"String"}],"return_type":"Char","visibility":"Public","body":"char? || (error(message))"}},{"html_id":"char?:Char|Nil-instance-method","name":"char?","doc":"Returns the first character of the curren token, or `nil` if it is\nnot set.","summary":"<p>Returns the first character of the curren token, or <code>nil</code> if it is not set.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":149,"url":null},"def":{"name":"char?","return_type":"Char | ::Nil","visibility":"Public","body":"if token = current_token\n  token[0].unsafe_chr\nend"}},{"html_id":"current_line:String|Nil-instance-method","name":"current_line","doc":"Returns the current line, or `nil` if it is not set.","summary":"<p>Returns the current line, or <code>nil</code> if it is not set.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":156,"url":null},"def":{"name":"current_line","return_type":"String | ::Nil","visibility":"Public","body":"@line"}},{"html_id":"each_line(&:String->):Nil-instance-method","name":"each_line","doc":"Yields each line in the enclosed IO.\n\n```\npull = PullParser.new IO::Memory.new(\"123 456\\n789\\n\")\npull.each_line { |line| puts line }\n```\n\nPrints out:\n\n```text\n123 456\n789\n```\n\nNote that the current line will be also yielded if it is set.\n\n```\npull = PullParser.new IO::Memory.new(\"123 456\\n789\\n\")\npull.next_line    # reads and sets the current line\npull.current_line # => \"123 456\"\npull.each_line { |line| puts line }\n```\n\nPrints out:\n\n```text\n123 456\n789\n```","summary":"<p>Yields each line in the enclosed IO.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":189,"url":null},"def":{"name":"each_line","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(String ->)"},"return_type":"Nil","visibility":"Public","body":"if line = @line\n  yield line\nend\nwhile line = next_line\n  yield line\nend\n"}},{"html_id":"eof?:Bool-instance-method","name":"eof?","doc":"Returns `true` at the end of file, otherwise `false`.\n\nNOTE: This method attempts to read a line from the enclosed IO if\nthe current line is not set, so calling `#next_line` after this\ncould inadvertently discard a line.","summary":"<p>Returns <code>true</code> at the end of file, otherwise <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":203,"url":null},"def":{"name":"eof?","return_type":"Bool","visibility":"Public","body":"@line.nil? && next_line.nil?"}},{"html_id":"error(message:String):NoReturn-instance-method","name":"error","doc":"Raises `ParseException` with the given message. The exception will\nhold the location of the current line and token if set.\n\nThe current token is accessible via the named substitution\n`%{token}`.","summary":"<p>Raises <code><a href=\"../Chem/ParseException.html\">ParseException</a></code> with the given message.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String) : NoReturn","args_html":"(message : String) : NoReturn","location":{"filename":"src/chem/pull_parser.cr","line_number":212,"url":null},"def":{"name":"error","args":[{"name":"message","external_name":"message","restriction":"String"}],"return_type":"NoReturn","visibility":"Public","body":"filepath = (io = @io).is_a?(File) ? io.path : nil\nloc = location\nloc_str = \"#{loc[0]}:#{loc[1] + 1}\"\nreplacements = {token: str?.try(&.inspect), file: filepath, loc: loc_str, loc_with_file: filepath ? \"#{filepath}:#{loc_str}\" : loc_str}\nraise(ParseException.new(message % replacements, filepath, @line || \"\", loc))\n"}},{"html_id":"float(message:String=\"Invalidrealnumber\"):Float64-instance-method","name":"float","doc":"Parses and returns the floating-point number represented by the\ncurrent token. Raises `ParseException` with the given message if\nthe token is not set or it is not a valid float representation.","summary":"<p>Parses and returns the floating-point number represented by the current token.</p>","abstract":false,"args":[{"name":"message","default_value":"\"Invalid real number\"","external_name":"message","restriction":"String"}],"args_string":"(message : String = \"Invalid real number\") : Float64","args_html":"(message : String = <span class=\"s\">&quot;Invalid real number&quot;</span>) : Float64","location":{"filename":"src/chem/pull_parser.cr","line_number":229,"url":null},"def":{"name":"float","args":[{"name":"message","default_value":"\"Invalid real number\"","external_name":"message","restriction":"String"}],"return_type":"Float64","visibility":"Public","body":"float? || (error(message))"}},{"html_id":"float(if_blankdefault:Float64):Float64-instance-method","name":"float","doc":"Parses and returns the floating-point number represented by the\ncurrent token. Returns the given default value if the token is\nblank. Raises `ParseException` if the token is not set or it is\nnot a valid float representation.","summary":"<p>Parses and returns the floating-point number represented by the current token.</p>","abstract":false,"args":[{"name":"default","external_name":"if_blank","restriction":"Float64"}],"args_string":"(if_blank default : Float64) : Float64","args_html":"(if_blank default : Float64) : Float64","location":{"filename":"src/chem/pull_parser.cr","line_number":237,"url":null},"def":{"name":"float","args":[{"name":"default","external_name":"if_blank","restriction":"Float64"}],"return_type":"Float64","visibility":"Public","body":"if (!(token = current_token)) || token.all?() do |__arg3|\n  __arg3.unsafe_chr.ascii_whitespace?\nend\n  default\nelse\n  float\nend"}},{"html_id":"float?:Float64|Nil-instance-method","name":"float?","doc":"Parses and returns the floating-point number represented by the\ncurrent token, or `nil` if the token is not set or it is not a\nvalid float representation.","summary":"<p>Parses and returns the floating-point number represented by the current token, or <code>nil</code> if the token is not set or it is not a valid float representation.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":248,"url":null},"def":{"name":"float?","return_type":"Float64 | ::Nil","visibility":"Public","body":"internal_parse do |bytes|\n  endptr = bytes.to_unsafe + bytes.size\n  old_value = endptr.value\n  endptr.value = 0\n  value = LibC.strtod(bytes, out ptr)\n  endptr.value = old_value\n  if ptr == bytes.to_unsafe\n    return\n  end\n  while (ptr != endptr) && ptr.value.unsafe_chr.ascii_whitespace?\n    ptr = ptr + 1\n  end\n  if ptr == endptr\n    value\n  end\nend"}},{"html_id":"int(message:String=\"Invalidinteger\"):Int32-instance-method","name":"int","doc":"Parses and returns the integer represented by the current token.\nRaises `ParseException` with the given message if the token is not\nset or it is not a valid number.","summary":"<p>Parses and returns the integer represented by the current token.</p>","abstract":false,"args":[{"name":"message","default_value":"\"Invalid integer\"","external_name":"message","restriction":"String"}],"args_string":"(message : String = \"Invalid integer\") : Int32","args_html":"(message : String = <span class=\"s\">&quot;Invalid integer&quot;</span>) : Int32","location":{"filename":"src/chem/pull_parser.cr","line_number":268,"url":null},"def":{"name":"int","args":[{"name":"message","default_value":"\"Invalid integer\"","external_name":"message","restriction":"String"}],"return_type":"Int32","visibility":"Public","body":"int? || (error(message))"}},{"html_id":"int(if_blankdefault:Int32):Int32-instance-method","name":"int","doc":"Parses and returns the integer represented by the current token.\nReturns the given default value if the token is blank. Raises\n`ParseException` if the token is not set or it is not a valid\nnumber.","summary":"<p>Parses and returns the integer represented by the current token.</p>","abstract":false,"args":[{"name":"default","external_name":"if_blank","restriction":"Int32"}],"args_string":"(if_blank default : Int32) : Int32","args_html":"(if_blank default : Int32) : Int32","location":{"filename":"src/chem/pull_parser.cr","line_number":276,"url":null},"def":{"name":"int","args":[{"name":"default","external_name":"if_blank","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":"if (!(token = current_token)) || token.all?() do |__arg4|\n  __arg4.unsafe_chr.ascii_whitespace?\nend\n  default\nelse\n  int\nend"}},{"html_id":"int?:Int32|Nil-instance-method","name":"int?","doc":"Parses and returns the integer represented by the current token,\nor `nil` if the token is not set or it is not a valid number.","summary":"<p>Parses and returns the integer represented by the current token, or <code>nil</code> if the token is not set or it is not a valid number.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":286,"url":null},"def":{"name":"int?","return_type":"Int32 | ::Nil","visibility":"Public","body":"internal_parse do |bytes|\n  ptr = bytes.to_unsafe\n  endptr = ptr + bytes.size\n  while (ptr != endptr) && ptr.value.unsafe_chr.ascii_whitespace?\n    ptr = ptr + 1\n  end\n  sign = 1\n  case ptr.value.unsafe_chr\n  when '-'\n    sign = -1\n    ptr = ptr + 1\n  when '+'\n    ptr = ptr + 1\n  end\n  digits = 0\n  value = 0\n  while ptr != endptr\n    char = ptr.value.unsafe_chr\n    if '0' <= char && char <= '9'\n    else\n      break\n    end\n    value = value * 10\n    old = value\n    value = value &+ (char - '0')\n    if value < old\n      return\n    end\n    digits = digits + 1\n    ptr = ptr + 1\n  end\n  while (ptr != endptr) && ptr.value.unsafe_chr.ascii_whitespace?\n    ptr = ptr + 1\n  end\n  if (ptr == endptr) && digits > 0\n    value * sign\n  end\nend"}},{"html_id":"internal_parse(&:Bytes->T|Nil):T|NilforallT-instance-method","name":"internal_parse","doc":"Yields the current token if set and returns the parsed value.","summary":"<p>Yields the current token if set and returns the parsed value.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":527,"url":null},"def":{"name":"internal_parse","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Bytes -> T | ::Nil)"},"return_type":"T | ::Nil","visibility":"Public","body":"if token = current_token\n  yield token\nend"}},{"html_id":"io:IO-instance-method","name":"io","doc":"Returns the enclosed IO.","summary":"<p>Returns the enclosed IO.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":79,"url":null},"def":{"name":"io","return_type":"IO","visibility":"Public","body":"@io"}},{"html_id":"line(message:String=\"Endoffile\"):String-instance-method","name":"line","doc":"Returns the current line starting at the current token if set. An\nempty string is returned at the end of line. Raises\n`ParseException` with the given message at end of file.\n\n```\npull = PullParser.new IO::Memory.new(\"123 456\\n789\\n\")\npull.next_line\n# token is not set, returns entire line\npull.line # => \"123 456\"\npull.next_token\n# token is \"123\", returns line starting at \"123\"\npull.line # => \"123 456\"\npull.next_token\n# token is \"456\", returns line starting at \"456\"\npull.line # => \"456\"\n```","summary":"<p>Returns the current line starting at the current token if set.</p>","abstract":false,"args":[{"name":"message","default_value":"\"End of file\"","external_name":"message","restriction":"String"}],"args_string":"(message : String = \"End of file\") : String","args_html":"(message : String = <span class=\"s\">&quot;End of file&quot;</span>) : String","location":{"filename":"src/chem/pull_parser.cr","line_number":341,"url":null},"def":{"name":"line","args":[{"name":"message","default_value":"\"End of file\"","external_name":"message","restriction":"String"}],"return_type":"String","visibility":"Public","body":"if @line\n  line = String.new(@buffer)\n  @buffer = Bytes.empty\n  @token_size = 0\n  line\nelse\n  error(message)\nend"}},{"html_id":"next_f(message:String):Float64-instance-method","name":"next_f","doc":"Reads the next token in the current line, and interprets it via\n`#float`, which raises `ParseException` with the given\nmessage at the end of line or if the token is an invalid\nrepresentation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#float%28message%3AString%3D%22Invalidrealnumber%22%29%3AFloat64-instance-method\">#float</a></code>, which raises <code><a href=\"../Chem/ParseException.html\">ParseException</a></code> with the given message at the end of line or if the token is an invalid representation.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String) : Float64","args_html":"(message : String) : Float64","location":{"filename":"src/chem/pull_parser.cr","line_number":362,"url":null},"def":{"name":"next_f","args":[{"name":"message","external_name":"message","restriction":"String"}],"return_type":"Float64","visibility":"Public","body":"next_token\nfloat(message)\n"}},{"html_id":"next_f:Float64-instance-method","name":"next_f","doc":"Reads the next token in the current line, and interprets it via\n`#float`, which raises `ParseException` at the end of\nline or if the token is an invalid representation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#float%28message%3AString%3D%22Invalidrealnumber%22%29%3AFloat64-instance-method\">#float</a></code>, which raises <code><a href=\"../Chem/ParseException.html\">ParseException</a></code> at the end of line or if the token is an invalid representation.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":362,"url":null},"def":{"name":"next_f","return_type":"Float64","visibility":"Public","body":"next_token\nfloat\n"}},{"html_id":"next_f?:Float64|Nil-instance-method","name":"next_f?","doc":"Reads the next token in the current line, and interprets it via\n`#float?`, which returns `nil` at the end of line or if\nthe token is an invalid representation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#float%3F%3AFloat64%7CNil-instance-method\">#float?</a></code>, which returns <code>nil</code> at the end of line or if the token is an invalid representation.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":362,"url":null},"def":{"name":"next_f?","return_type":"Float64 | ::Nil","visibility":"Public","body":"next_token\nfloat?\n"}},{"html_id":"next_i(message:String):Int32-instance-method","name":"next_i","doc":"Reads the next token in the current line, and interprets it via\n`#int`, which raises `ParseException` with the given\nmessage at the end of line or if the token is an invalid\nrepresentation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#int%28message%3AString%3D%22Invalidinteger%22%29%3AInt32-instance-method\">#int</a></code>, which raises <code><a href=\"../Chem/ParseException.html\">ParseException</a></code> with the given message at the end of line or if the token is an invalid representation.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String) : Int32","args_html":"(message : String) : Int32","location":{"filename":"src/chem/pull_parser.cr","line_number":362,"url":null},"def":{"name":"next_i","args":[{"name":"message","external_name":"message","restriction":"String"}],"return_type":"Int32","visibility":"Public","body":"next_token\nint(message)\n"}},{"html_id":"next_i:Int32-instance-method","name":"next_i","doc":"Reads the next token in the current line, and interprets it via\n`#int`, which raises `ParseException` at the end of\nline or if the token is an invalid representation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#int%28message%3AString%3D%22Invalidinteger%22%29%3AInt32-instance-method\">#int</a></code>, which raises <code><a href=\"../Chem/ParseException.html\">ParseException</a></code> at the end of line or if the token is an invalid representation.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":362,"url":null},"def":{"name":"next_i","return_type":"Int32","visibility":"Public","body":"next_token\nint\n"}},{"html_id":"next_i?:Int32|Nil-instance-method","name":"next_i?","doc":"Reads the next token in the current line, and interprets it via\n`#int?`, which returns `nil` at the end of line or if\nthe token is an invalid representation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#int%3F%3AInt32%7CNil-instance-method\">#int?</a></code>, which returns <code>nil</code> at the end of line or if the token is an invalid representation.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":362,"url":null},"def":{"name":"next_i?","return_type":"Int32 | ::Nil","visibility":"Public","body":"next_token\nint?\n"}},{"html_id":"next_line:String|Nil-instance-method","name":"next_line","doc":"Reads and returns the next line from the enclosed IO, or `nil` if\ncalled at the end of the IO.","summary":"<p>Reads and returns the next line from the enclosed IO, or <code>nil</code> if called at the end of the IO.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":354,"url":null},"def":{"name":"next_line","return_type":"String | ::Nil","visibility":"Public","body":"@line = @io.gets\n@buffer = @line.try(&.to_slice) || Bytes.empty\n@token_size = 0\n@line_number = @line_number + 1\n@line\n"}},{"html_id":"next_s(message:String):String-instance-method","name":"next_s","doc":"Reads the next token in the current line, and interprets it via\n`#str`, which raises `ParseException` with the given\nmessage at the end of line or if the token is an invalid\nrepresentation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#str%28message%3AString%3D%22Emptytoken%22%29%3AString-instance-method\">#str</a></code>, which raises <code><a href=\"../Chem/ParseException.html\">ParseException</a></code> with the given message at the end of line or if the token is an invalid representation.</p>","abstract":false,"args":[{"name":"message","external_name":"message","restriction":"String"}],"args_string":"(message : String) : String","args_html":"(message : String) : String","location":{"filename":"src/chem/pull_parser.cr","line_number":362,"url":null},"def":{"name":"next_s","args":[{"name":"message","external_name":"message","restriction":"String"}],"return_type":"String","visibility":"Public","body":"next_token\nstr(message)\n"}},{"html_id":"next_s:String-instance-method","name":"next_s","doc":"Reads the next token in the current line, and interprets it via\n`#str`, which raises `ParseException` at the end of\nline or if the token is an invalid representation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#str%28message%3AString%3D%22Emptytoken%22%29%3AString-instance-method\">#str</a></code>, which raises <code><a href=\"../Chem/ParseException.html\">ParseException</a></code> at the end of line or if the token is an invalid representation.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":362,"url":null},"def":{"name":"next_s","return_type":"String","visibility":"Public","body":"next_token\nstr\n"}},{"html_id":"next_s?:String|Nil-instance-method","name":"next_s?","doc":"Reads the next token in the current line, and interprets it via\n`#str?`, which returns `nil` at the end of line or if\nthe token is an invalid representation.","summary":"<p>Reads the next token in the current line, and interprets it via <code><a href=\"../Chem/PullParser.html#str%3F%3AString%7CNil-instance-method\">#str?</a></code>, which returns <code>nil</code> at the end of line or if the token is an invalid representation.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":362,"url":null},"def":{"name":"next_s?","return_type":"String | ::Nil","visibility":"Public","body":"next_token\nstr?\n"}},{"html_id":"next_token:Bytes|Nil-instance-method","name":"next_token","doc":"Reads the next collection of consecutive non-whitespace characters\nin the current line and returns the corresponding bytes, or `nil`\nif called at the end of line.\n\n```\npull = PullParser.new IO::Memory.new(\"abc def\\n1234 56 789\\n\")\npull.next_token             # => nil\npull.next_line              # place the parser at the first line\nString.new(pull.next_token) # => \"abc\"\nString.new(pull.next_token) # => \"def\"\npull.next_token             # => nil\npull.next_line              # place the parser at the second line\nString.new(pull.next_token) # => \"1234\"\nString.new(pull.next_token) # => \"56\"\nString.new(pull.next_token) # => \"789\"\npull.next_token             # => nil\npull.next_line              # place the parser at the end of IO\npull.next_token             # => nil\n```","summary":"<p>Reads the next collection of consecutive non-whitespace characters in the current line and returns the corresponding bytes, or <code>nil</code> if called at the end of line.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":411,"url":null},"def":{"name":"next_token","return_type":"Bytes | ::Nil","visibility":"Public","body":"if @buffer.empty?\n  return\nend\n@buffer = @buffer + @token_size\n@token_size = 0\nptr = @buffer.to_unsafe\nwhile ptr.value.unsafe_chr.ascii_whitespace?\n  ptr = ptr + 1\nend\n@buffer = @buffer + (ptr - @buffer.to_unsafe)\nwhile !((ptr.value == 0) || ptr.value.unsafe_chr.ascii_whitespace?)\n  ptr = ptr + 1\nend\n@token_size = (ptr - @buffer.to_unsafe).to_i\ncurrent_token\n"}},{"html_id":"parse(message:String=\"Couldnotparse%{token}at%{loc_with_file}\",&:String->T|Nil):TforallT-instance-method","name":"parse","doc":"Yields the current token and returns the parsed value. Raises\n`ParseException` with the given message if no token is set or the\nblock returns `nil`.","summary":"<p>Yields the current token and returns the parsed value.</p>","abstract":false,"args":[{"name":"message","default_value":"\"Could not parse %{token} at %{loc_with_file}\"","external_name":"message","restriction":"String"}],"args_string":"(message : String = \"Could not parse %{token} at %{loc_with_file}\", & : String -> T | Nil) : T forall T","args_html":"(message : String = <span class=\"s\">&quot;Could not parse %{token} at %{loc_with_file}&quot;</span>, & : String -> T | Nil) : T forall T","location":{"filename":"src/chem/pull_parser.cr","line_number":432,"url":null},"def":{"name":"parse","args":[{"name":"message","default_value":"\"Could not parse %{token} at %{loc_with_file}\"","external_name":"message","restriction":"String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(String -> T | ::Nil)"},"return_type":"T","visibility":"Public","body":"parse? do |str|\n  yield str\nend || (error(message))"}},{"html_id":"parse?(&:String->T|Nil):T|NilforallT-instance-method","name":"parse?","doc":"Yields the current token if set and returns the parsed value.","summary":"<p>Yields the current token if set and returns the parsed value.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":453,"url":null},"def":{"name":"parse?","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(String -> T | ::Nil)"},"return_type":"T | ::Nil","visibility":"Public","body":"internal_parse do |bytes|\n  yield String.new(bytes)\nend"}},{"html_id":"parse_if_present(message:String=\"Couldnotparse%{token}at%{loc_with_file}\",default:_=nil,&:String->_)-instance-method","name":"parse_if_present","doc":"Yields the current token if set and returns the parsed value.\nRaises `ParseException` with the given message if the block\nreturns `nil`. If no token is set, returns *default*.","summary":"<p>Yields the current token if set and returns the parsed value.</p>","abstract":false,"args":[{"name":"message","default_value":"\"Could not parse %{token} at %{loc_with_file}\"","external_name":"message","restriction":"String"},{"name":"default","default_value":"nil","external_name":"default","restriction":"_"}],"args_string":"(message : String = \"Could not parse %{token} at %{loc_with_file}\", default : _ = nil, & : String -> _)","args_html":"(message : String = <span class=\"s\">&quot;Could not parse %{token} at %{loc_with_file}&quot;</span>, default : _ = <span class=\"n\">nil</span>, & : String -> _)","location":{"filename":"src/chem/pull_parser.cr","line_number":442,"url":null},"def":{"name":"parse_if_present","args":[{"name":"message","default_value":"\"Could not parse %{token} at %{loc_with_file}\"","external_name":"message","restriction":"String"},{"name":"default","default_value":"nil","external_name":"default","restriction":"_"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(String -> _)"},"visibility":"Public","body":"parse? do |str|\n  (yield str) || (error(message))\nend || default"}},{"html_id":"parse_next(message:String=\"Couldnotparse%{token}at%{loc_with_file}\",&:String->T|Nil):TforallT-instance-method","name":"parse_next","doc":"Yields the next token if present and returns the parsed value.\nRaises `ParseException` with the given message if no token is\nfound or the block returns `nil`.","summary":"<p>Yields the next token if present and returns the parsed value.</p>","abstract":false,"args":[{"name":"message","default_value":"\"Could not parse %{token} at %{loc_with_file}\"","external_name":"message","restriction":"String"}],"args_string":"(message : String = \"Could not parse %{token} at %{loc_with_file}\", & : String -> T | Nil) : T forall T","args_html":"(message : String = <span class=\"s\">&quot;Could not parse %{token} at %{loc_with_file}&quot;</span>, & : String -> T | Nil) : T forall T","location":{"filename":"src/chem/pull_parser.cr","line_number":462,"url":null},"def":{"name":"parse_next","args":[{"name":"message","default_value":"\"Could not parse %{token} at %{loc_with_file}\"","external_name":"message","restriction":"String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(String -> T | ::Nil)"},"return_type":"T","visibility":"Public","body":"parse_next? do |str|\n  yield str\nend || (error(message))"}},{"html_id":"parse_next?(&:String->T|Nil):T|NilforallT-instance-method","name":"parse_next?","doc":"Yields the next token if present and returns the parsed value.","summary":"<p>Yields the next token if present and returns the parsed value.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":483,"url":null},"def":{"name":"parse_next?","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(String -> T | ::Nil)"},"return_type":"T | ::Nil","visibility":"Public","body":"if bytes = next_token\n  yield String.new(bytes)\nend"}},{"html_id":"parse_next_if_present(message:String=\"Couldnotparse%{token}at%{loc_with_file}\",default:_=nil,&:String->_)-instance-method","name":"parse_next_if_present","doc":"Yields the next token if present and returns the parsed value.\nRaises `ParseException` with the given message if the block\nreturns `nil`. If no token is found, returns *default*.","summary":"<p>Yields the next token if present and returns the parsed value.</p>","abstract":false,"args":[{"name":"message","default_value":"\"Could not parse %{token} at %{loc_with_file}\"","external_name":"message","restriction":"String"},{"name":"default","default_value":"nil","external_name":"default","restriction":"_"}],"args_string":"(message : String = \"Could not parse %{token} at %{loc_with_file}\", default : _ = nil, & : String -> _)","args_html":"(message : String = <span class=\"s\">&quot;Could not parse %{token} at %{loc_with_file}&quot;</span>, default : _ = <span class=\"n\">nil</span>, & : String -> _)","location":{"filename":"src/chem/pull_parser.cr","line_number":472,"url":null},"def":{"name":"parse_next_if_present","args":[{"name":"message","default_value":"\"Could not parse %{token} at %{loc_with_file}\"","external_name":"message","restriction":"String"},{"name":"default","default_value":"nil","external_name":"default","restriction":"_"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(String -> _)"},"visibility":"Public","body":"parse_next? do |str|\n  (yield str) || (error(message))\nend || default"}},{"html_id":"rewind_line:self-instance-method","name":"rewind_line","doc":"Sets the cursor at the beginning of the current line if set.","summary":"<p>Sets the cursor at the beginning of the current line if set.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":490,"url":null},"def":{"name":"rewind_line","return_type":"self","visibility":"Public","body":"set_cursor(0, 0) do\nend\nself\n"}},{"html_id":"skip_blank_lines:self-instance-method","name":"skip_blank_lines","doc":"Discards blank lines.","summary":"<p>Discards blank lines.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":496,"url":null},"def":{"name":"skip_blank_lines","return_type":"self","visibility":"Public","body":"while next_line.presence.nil?\nend\nself\n"}},{"html_id":"str(message:String=\"Emptytoken\"):String-instance-method","name":"str","doc":"Returns the current token as a string. Raises `ParseException`\nwith the given message if the token is not set.","summary":"<p>Returns the current token as a string.</p>","abstract":false,"args":[{"name":"message","default_value":"\"Empty token\"","external_name":"message","restriction":"String"}],"args_string":"(message : String = \"Empty token\") : String","args_html":"(message : String = <span class=\"s\">&quot;Empty token&quot;</span>) : String","location":{"filename":"src/chem/pull_parser.cr","line_number":503,"url":null},"def":{"name":"str","args":[{"name":"message","default_value":"\"Empty token\"","external_name":"message","restriction":"String"}],"return_type":"String","visibility":"Public","body":"str? || (error(message))"}},{"html_id":"str?:String|Nil-instance-method","name":"str?","doc":"Returns the current token as a string, or `nil` if it is not set.","summary":"<p>Returns the current token as a string, or <code>nil</code> if it is not set.</p>","abstract":false,"location":{"filename":"src/chem/pull_parser.cr","line_number":508,"url":null},"def":{"name":"str?","return_type":"String | ::Nil","visibility":"Public","body":"internal_parse do |bytes|\n  String.new(bytes)\nend"}}]},{"html_id":"chem.cr/Chem/PyMOL","path":"Chem/PyMOL.html","kind":"module","full_name":"Chem::PyMOL","name":"PyMOL","abstract":false,"locations":[{"filename":"src/chem/formats/pymol.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"types":[{"html_id":"chem.cr/Chem/PyMOL/Writer","path":"Chem/PyMOL/Writer.html","kind":"class","full_name":"Chem::PyMOL::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/pymol.cr","line_number":3,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"CODES","name":"CODES","value":"{Protein::SecondaryStructure::BetaStrand => 'S', Protein::SecondaryStructure::LeftHandedHelix3_10 => 'H', Protein::SecondaryStructure::LeftHandedHelixAlpha => 'H', Protein::SecondaryStructure::LeftHandedHelixGamma => 'H', Protein::SecondaryStructure::LeftHandedHelixPi => 'H', Protein::SecondaryStructure::RightHandedHelix3_10 => 'H', Protein::SecondaryStructure::RightHandedHelixAlpha => 'H', Protein::SecondaryStructure::RightHandedHelixGamma => 'H', Protein::SecondaryStructure::RightHandedHelixPi => 'H', Protein::SecondaryStructure::Polyproline => 'H'}"},{"id":"SHORT_NAMES","name":"SHORT_NAMES","value":"{Protein::SecondaryStructure::BetaStrand => \"strand\", Protein::SecondaryStructure::LeftHandedHelix3_10 => \"310\", Protein::SecondaryStructure::LeftHandedHelixAlpha => \"alpha\", Protein::SecondaryStructure::LeftHandedHelixGamma => \"gamma\", Protein::SecondaryStructure::LeftHandedHelixPi => \"pi\", Protein::SecondaryStructure::RightHandedHelix3_10 => \"310\", Protein::SecondaryStructure::RightHandedHelixAlpha => \"alpha\", Protein::SecondaryStructure::RightHandedHelixGamma => \"gamma\", Protein::SecondaryStructure::RightHandedHelixPi => \"pi\", Protein::SecondaryStructure::Polyproline => \"pp\"}"}],"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"namespace":{"html_id":"chem.cr/Chem/PyMOL","kind":"module","full_name":"Chem::PyMOL","name":"PyMOL"},"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","doc":"Creates a new object from the given *io*.","summary":"<p>Creates a new object from the given <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}]}]},{"html_id":"chem.cr/Chem/RegisterFormat","path":"Chem/RegisterFormat.html","kind":"annotation","full_name":"Chem::RegisterFormat","name":"RegisterFormat","abstract":false,"locations":[{"filename":"src/chem/register_format.cr","line_number":166,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"doc":"Registers a file format.\n\nThe annotated type provides the implementation of a *file format*\nthat encodes an *encoded type*. The *file format* is determined from\nthe annotated type's name, where the last component of the fully\nqualified name is used (e.g., `Baz` for `Foo::Bar::Baz`). An entry\nof the same name will be added to the `Format` enum, where the\ndeclared extensions and file patterns will be associated with the\ncorresponding file format. This annotation accepts the following\nnamed arguments:\n\n- **ext**: an array of extensions (including leading dot).\n- **names**: an array of file patterns. File patterns can include\n  wildcards (`\"*\"`) to denote either prefix (e.g., `\"Foo*\"`), suffix\n  (e.g., `\"*Bar\"`), or both (e.g., `\"*Baz*\"`). Refer to\n  `Format#from_stem` for details.\n- **reader**: reader class name. Defaults to \"Reader\".\n- **writer**: writer class name. Defaults to \"Writer\".\n\nThe ability to read or write is determined by the declaration of\nreader and writer classes, respectively, which must include the\n`FormatReader`, `FormatWriter` and other related mixins when\nappropiate. The *encoded type* is dictated by the type variable of\nthe included mixins. The `FormatReader::Headed` and\n`FormatReader::Attached` provides interfaces to read additional\ninformation into custom objects.\n\nConvenience read (`.from_*` and `.read`) and write (`#to_*` and\n`#write`) methods will be generated on the *encoded types* during\ncompilation time using the type information of the included mixins\nin the reader and writer classes. Types declared by the\n`FormatReader::Headed` and `FormatReader::Attached` are also\nconsidered *encoded types*. Additionally, convenience read and write\nmethods will be generated on `Array` for file formats that can hold\nmultiple entries, which are declared via the\n`FormatReader::MultiEntry` and `FormatWriter::MultiEntry` mixins.\n\n### Example\n\nThe following code registers the `Foo` format associated with the\n`Chem::Foo` module, which provides read and write capabilities of\n`A` via the `Reader` and `Writer` classes, respectively. Both\ndeclare that the `Foo` format can hold multiple entries via the\ncorresponding `MultiEntry` mixins. The reader class also provides\nsupport for reading the header information into a `B` instance and\nreading secondary information into a `C` instance.\n\n```\nrecord A\nrecord B\nrecord C\n\n@[Chem::RegisterFormat(ext: %w(.foo), names: %w(foo_*))]\nmodule Foo\n  class Reader\n    include FormatReader(A)\n    include FormatReader::MultiEntry(A)\n    include FormatReader::Headed(B)\n    include FormatReader::Attached(C)\n\n    protected def decode_attached : C\n      C.new\n    end\n\n    protected def decode_entry : A\n      A.new\n    end\n\n    protected def decode_headed : B\n      B.new\n    end\n  end\n\n  class Writer\n    include FormatWriter(A)\n    include FormatWriter::MultiEntry(A)\n\n    def encode_entry(frame : A) : Nil; end\n  end\nend\n```\n\nA member named `Foo` is added to the `Format` enum, which can be\nused to query the format during runtime using the `.from_*` methods.\n\n```\nChem::Format::Foo                      # => Foo\nChem::Format::Foo.extnames             # => [\".foo\"]\nChem::Format::Foo.file_patterns        # => [\"foo_*\"]\nChem::Format.from_filename(\"file.foo\") # => Foo\nChem::Format.from_filename(\"foo_1\")    # => Foo\n```\n\nThe convenience `A.from_foo` and `A.read` methods are generated\nduring compilation time to create an `A` instance from an IO or file\nusing the `Foo` file format. The latter can be specified via the\ncorresponding member of the `Format` enum or as a string.\nAdditionally, the file format can be guessed from the filename.\n\n```\n# static read methods (can forward arguments to Foo::Reader)\nA.from_foo(IO::Memory.new) # => A()\nA.from_foo(\"a.foo\")        # => A()\n\n# dynamic read methods (format is detected on runtime; no arguments)\nA.read(IO::Memory.new, Chem::Format::Foo) # => A()\nA.read(IO::Memory.new, \"foo\")             # => A()\nA.read(\"a.foo\", Chem::Format::Foo)        # => A()\nA.read(\"a.foo\", \"foo\")                    # => A()\nA.read(\"a.foo\")                           # => A()\n```\n\nThe above methods are also created on the types representing the\nheader (`B`) and attached (`C`) types. This is convenient since one\ndoes not to worry about if `X` is either the encoded type, header or\nattached type to be read from a `Foo` file.\n\nSimilar to the read methods, `A.to_foo` and `A.write` are generated\nto write an `A` instance to an IO or file using the `Foo` file\nformat.\n\n```\n# static read methods (can forward arguments to Foo::Writer)\nA.new.to_foo                 # returns a string representation\nA.new.to_foo(IO::Memory.new) # writes to an IO\nA.new.to_foo(\"a.foo\")        # writes to a file\n\n# dynamic read methods (format is detected on runtime; no arguments)\nA.new.write(IO::Memory.new, Chem::Format::A)\nA.new.write(IO::Memory.new, \"foo\")\nA.new.write(\"a.foo\", Chem::Format::A)\nA.new.write(\"a.foo\", \"foo\")\nA.new.write(\"a.foo\")\n```\n\nThese methods are not generated for header (`B`) and attached (`C`)\ntypes however, because these cannot produce a valid `Foo` file by\nthemselves. If a header/attached object is required to write a valid\nfile, it should be declared as a required argument in the writer\n(see `Cube::Writer` or `VASP::Chgcar::Writer`).\n\nSince `Foo::Reader` and `Foo::Writer` reads and writes multiple\nentries (indicated by the corresponding `MultiEntry` mixins), the\n`.from_foo`, `.read`, `#to_foo`, and `#write` methods are also\ngenerated in `Array` during compilation time.\n\n```\nArray(A).from_foo(IO::Memory.new)   # => [Foo(), ...]\nArray(A).from_foo(\"a.foo\")          # => [Foo(), ...]\nArray(A).read(IO::Memory.new, :foo) # => [Foo(), ...]\n# and other overloads\n\nArray(A).new.to_foo                     # returns a string representation\nArray(A).new.to_foo(IO::Memory.new)     # writes to an IO\nArray(A).new.to_foo(\"a.foo\")            # writes to a file\nArray(A).new.write IO::Memory.new, :foo # writes to an IO\n# and other overloads\n```\n\nCalling any of these methods on an array of unsupported types will\nproduce a missing method error during compilation.\n\nRefer to the implementations of the supported file formats (e.g.,\n`PDB` and `XYZ`) for real examples.","summary":"<p>Registers a file format.</p>"},{"html_id":"chem.cr/Chem/Residue","path":"Chem/Residue.html","kind":"class","full_name":"Chem::Residue","name":"Residue","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/residue.cr","line_number":10,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"constructors":[{"html_id":"new(chain:Chain,number:Int32,insertion_code:Char|Nil,name:String)-class-method","name":"new","abstract":false,"args":[{"name":"chain","external_name":"chain","restriction":"Chain"},{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","external_name":"insertion_code","restriction":"Char | ::Nil"},{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(chain : Chain, number : Int32, insertion_code : Char | Nil, name : String)","args_html":"(chain : <a href=\"../Chem/Chain.html\">Chain</a>, number : Int32, insertion_code : <a href=\"../Char.html\">Char</a> | Nil, name : String)","location":{"filename":"src/chem/core/residue.cr","line_number":27,"url":null},"def":{"name":"new","args":[{"name":"chain","external_name":"chain","restriction":"Chain"},{"name":"number","external_name":"number","restriction":"Int32"},{"name":"insertion_code","external_name":"insertion_code","restriction":"Char | ::Nil"},{"name":"name","external_name":"name","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(chain, number, insertion_code, name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(chain:Chain,number:Int32,name:String):self-class-method","name":"new","abstract":false,"args":[{"name":"chain","external_name":"chain","restriction":"Chain"},{"name":"number","external_name":"number","restriction":"Int32"},{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(chain : Chain, number : Int32, name : String) : self","args_html":"(chain : <a href=\"../Chem/Chain.html\">Chain</a>, number : Int32, name : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/residue.cr","line_number":37,"url":null},"def":{"name":"new","args":[{"name":"chain","external_name":"chain","restriction":"Chain"},{"name":"number","external_name":"number","restriction":"Int32"},{"name":"name","external_name":"name","restriction":"String"}],"return_type":"self","visibility":"Public","body":"new(chain, number, nil, name)"}}],"instance_methods":[{"html_id":"<=>(other:self):Int32-instance-method","name":"<=>","doc":"The comparison operator.\n\nReturns `-1`, `0` or `1` depending on whether `self` precedes\n*rhs*, equals to *rhs* or comes after *rhs*. The comparison is\ndone based on chain id, residue number, and insertion code if\npresent.\n\n```\nresidues = Structure.read \"peptide.pdb\"\nresidues[0] # => <Residue A:TRP1>\nresidues[1] # => <Residue A:GLY1A>\nresidues[2] # => <Residue A:SER1B>\nresidues[3] # => <Residue A:ASN1C>\nresidues[4] # => <Residue A:VAL2>\nresidues[5] # => <Residue B:THR1>\nresidues[6] # => <Residue B:ASN2>\n\nresidues[0] <=> residues[1] # => -1\nresidues[1] <=> residues[1] # => 0\nresidues[2] <=> residues[1] # => 1\nresidues[0] <=> residues[5] # => -1\nresidues[5] <=> residues[6] # => -1\n```","summary":"<p>The comparison operator.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Int32","args_html":"(other : <span class=\"k\">self</span>) : Int32","location":{"filename":"src/chem/core/residue.cr","line_number":64,"url":null},"def":{"name":"<=>","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Int32","visibility":"Public","body":"c = chain.id <=> other.chain.id\nif c.zero?\nelse\n  return c\nend\nc = number <=> other.number\nif c.zero?\nelse\n  return c\nend\n(insertion_code || 'A'.pred) <=> (other.insertion_code || 'A'.pred)\n"}},{"html_id":"==(rhs:self):Bool-instance-method","name":"==","doc":"Returns `true` if this residue is the same as *rhs*, else `false`.\n\nNOTE: overrides the equality operator included by `Comparable`,\nwhich uses the `<=>` operator thus returning true for two\ndifferent residues that have the same chain id, number and\ninsertion code.","summary":"<p>Returns <code>true</code> if this residue is the same as <em>rhs</em>, else <code>false</code>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Bool","args_html":"(rhs : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":84,"url":null},"def":{"name":"==","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"same?(rhs)"}},{"html_id":"[](atom_t:Templates::Atom):Atom-instance-method","name":"[]","doc":"Returns the atom that matches *atom_t*.\n\nAtom must match both atom template's name and element, otherwise\nit raises `IndexError`.\n\n```\nresidue = Structure.read(\"peptide.pdb\").residues[0]\nresidue[Templates::Atom(\"CA\")]               # => <Atom A:TRP1:CA(2)\nresidue[Templates::Atom(\"CA\", element: \"N\")] # raises IndexError\nresidue[Templates::Atom(\"CX\")]               # raises IndexError\n```","summary":"<p>Returns the atom that matches <em>atom_t</em>.</p>","abstract":false,"args":[{"name":"atom_t","external_name":"atom_t","restriction":"Templates::Atom"}],"args_string":"(atom_t : Templates::Atom) : Atom","args_html":"(atom_t : <a href=\"../Chem/Templates/Atom.html\">Templates::Atom</a>) : <a href=\"../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/residue.cr","line_number":99,"url":null},"def":{"name":"[]","args":[{"name":"atom_t","external_name":"atom_t","restriction":"Templates::Atom"}],"return_type":"Atom","visibility":"Public","body":"self[atom_t]? || (raise(IndexError.new(\"Cannot find atom for template: #{atom_t}\")))"}},{"html_id":"[](*args,**options)-instance-method","name":"[]","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/residue.cr","line_number":24,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@atom_table[*args, **options]"}},{"html_id":"[](*args,**options,&)-instance-method","name":"[]","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/residue.cr","line_number":24,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@atom_table.[](*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"[]?(atom_t:Templates::Atom):Atom|Nil-instance-method","name":"[]?","doc":"Returns the atom that matches *atom_t*.\n\nAtom must match both atom template's name and element, otherwise\nit returns `nil`.\n\n```\nresidue = Structure.read(\"peptide.pdb\").residues[0]\nresidue[Templates::Atom(\"CA\")]               # => <Atom A:TRP1:CA(2)\nresidue[Templates::Atom(\"CA\", element: \"N\")] # => nil\nresidue[Templates::Atom(\"CX\")]               # => nil\n```","summary":"<p>Returns the atom that matches <em>atom_t</em>.</p>","abstract":false,"args":[{"name":"atom_t","external_name":"atom_t","restriction":"Templates::Atom"}],"args_string":"(atom_t : Templates::Atom) : Atom | Nil","args_html":"(atom_t : <a href=\"../Chem/Templates/Atom.html\">Templates::Atom</a>) : <a href=\"../Chem/Atom.html\">Atom</a> | Nil","location":{"filename":"src/chem/core/residue.cr","line_number":114,"url":null},"def":{"name":"[]?","args":[{"name":"atom_t","external_name":"atom_t","restriction":"Templates::Atom"}],"return_type":"Atom | ::Nil","visibility":"Public","body":"if atom = self[atom_t.name]?\n  if atom.matches?(atom_t)\n    atom\n  end\nend"}},{"html_id":"[]?(*args,**options)-instance-method","name":"[]?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/residue.cr","line_number":24,"url":null},"def":{"name":"[]?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@atom_table[*args, **options]?"}},{"html_id":"[]?(*args,**options,&)-instance-method","name":"[]?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/residue.cr","line_number":24,"url":null},"def":{"name":"[]?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@atom_table.[]?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"bonded?(other:self,bond_t:Templates::Bond,strict:Bool=true):Bool-instance-method","name":"bonded?","doc":"Returns true if `self` is bonded to *other* through *bond_t*,\notherwise false.\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\nbond_t = Templates::Bond.new \"C\", \"N\"\nresidues[0].bonded?(residues[1], bond_t) # => true\nresidues[1].bonded?(residues[2], bond_t) # => true\nresidues[2].bonded?(residues[3], bond_t) # => false\nresidues[1].bonded?(residues[3], bond_t) # => false\n```\n\nBond check follows the directionality of *bond_t*, that is, the\nleft and right atoms are looked up in `self` and *other*,\nrespectively:\n\n```\nresidues[0].bonded?(residues[1], bond_t) # => true\nresidues[1].bonded?(residues[0], bond_t) # => false\n```\n\nNote that bond order is taken into account, e.g.:\n\n```\nbond_t = Templates::Bond.new \"C\", \"N\", order: 2\nresidues[0].bonded?(residues[1], bond_t) # => false\n```\n\nIf *strict* is false, it uses elements only instead to look for\nbonded atoms, and bond order is ignored.\n\n```\nbond_t = Templates::Bond.new \"C\", \"NX\", order: 2\nresidues[0].bonded?(residues[1], bond_t)                # => false\nresidues[0].bonded?(residues[1], bond_t, strict: false) # => true\n```","summary":"<p>Returns true if <code>self</code> is bonded to <em>other</em> through <em>bond_t</em>, otherwise false.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"},{"name":"bond_t","external_name":"bond_t","restriction":"Templates::Bond"},{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"}],"args_string":"(other : self, bond_t : Templates::Bond, strict : Bool = true) : Bool","args_html":"(other : <span class=\"k\">self</span>, bond_t : <a href=\"../Chem/Templates/Bond.html\">Templates::Bond</a>, strict : Bool = <span class=\"n\">true</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":175,"url":null},"def":{"name":"bonded?","args":[{"name":"other","external_name":"other","restriction":"self"},{"name":"bond_t","external_name":"bond_t","restriction":"Templates::Bond"},{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"}],"return_type":"Bool","visibility":"Public","body":"(bonded?(other, *bond_t.atoms, bond_t.order)) || ((!strict) && (bonded?(other, *bond_t.atoms.map(&.element))))"}},{"html_id":"bonded?(other:self,lhs:Templates::Atom|String,rhs:Templates::Atom|String,order:BondOrder|Nil=nil):Bool-instance-method","name":"bonded?","doc":"Returns true if `self` is bonded to *other* through a bond between\n*lhs* and *rhs*, otherwise false.\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\n```\n\nOne can use atom names, atom template, or elements:\n\n```\na, b = Templates::Atom.new(\"C\"), Templates::Atom.new(\"N\")\nresidues[0].bonded? residues[1], \"C\", \"N\"            # => true\nresidues[0].bonded? residues[1], a, b                # => true\nresidues[0].bonded? residues[1], a, PeriodicTable::N # => true\nresidues[0].bonded? residues[1], PeriodicTable::C, b # => true\nresidues[1].bonded? residues[2], a, b                # => true\nresidues[1].bonded? residues[3], a, b                # => false\nresidues[2].bonded? residues[3], a, b                # => false\n```\n\nNote that *lhs* and *rhs* are looked up in `self` and *other*,\nrespectively, i.e., the arguments are not interchangeable:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\" # => true\nresidues[0].bonded? residues[1], \"N\", \"C\" # => false\n```\n\nWhen atom names or atom template are specified, this method\nreturns false if missing:\n\n```\nmissing_atom_t = Templates::Atom.new(\"OZ5\")\nresidues[0].bonded? residues[1], \"CX1\", \"N\"             # => false\nresidues[0].bonded? residues[1], missing_atom_t, \"N\"    # => false\nresidues[0].bonded? residues[1], \"C\", PeriodicTable::Mg # => false\n```\n\nWhen elements are specified, all atoms of that element are tested:\n\n```\nresidues[1].bonded? residues[2], \"C\", PeriodicTable::N  # => true\nresidues[1].bonded? residues[2], \"SG\", PeriodicTable::C # => true\n```\n\nIf *order* is specified, it also check for bond order, otherwise\nit is ignored:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\"    # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 1 # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 2 # => false\n```","summary":"<p>Returns true if <code>self</code> is bonded to <em>other</em> through a bond between <em>lhs</em> and <em>rhs</em>, otherwise false.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"},{"name":"lhs","external_name":"lhs","restriction":"Templates::Atom | String"},{"name":"rhs","external_name":"rhs","restriction":"Templates::Atom | String"},{"name":"order","default_value":"nil","external_name":"order","restriction":"BondOrder | ::Nil"}],"args_string":"(other : self, lhs : Templates::Atom | String, rhs : Templates::Atom | String, order : BondOrder | Nil = nil) : Bool","args_html":"(other : <span class=\"k\">self</span>, lhs : <a href=\"../Chem/Templates/Atom.html\">Templates::Atom</a> | String, rhs : <a href=\"../Chem/Templates/Atom.html\">Templates::Atom</a> | String, order : <a href=\"../Chem/BondOrder.html\">BondOrder</a> | Nil = <span class=\"n\">nil</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":234,"url":null},"def":{"name":"bonded?","args":[{"name":"other","external_name":"other","restriction":"self"},{"name":"lhs","external_name":"lhs","restriction":"Templates::Atom | String"},{"name":"rhs","external_name":"rhs","restriction":"Templates::Atom | String"},{"name":"order","default_value":"nil","external_name":"order","restriction":"BondOrder | ::Nil"}],"return_type":"Bool","visibility":"Public","body":"if other.same?(self)\n  return false\nend\nif (a = self[lhs]?) && (b = other[rhs]?)\nelse\n  return false\nend\nif bond = a.bonds[b]?\nelse\n  return false\nend\nbond.order == (order || bond.order)\n"}},{"html_id":"bonded?(other:self,lhs:Templates::Atom|String,rhs:Element,order:BondOrder|Nil=nil):Bool-instance-method","name":"bonded?","doc":"Returns true if `self` is bonded to *other* through a bond between\n*lhs* and *rhs*, otherwise false.\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\n```\n\nOne can use atom names, atom template, or elements:\n\n```\na, b = Templates::Atom.new(\"C\"), Templates::Atom.new(\"N\")\nresidues[0].bonded? residues[1], \"C\", \"N\"            # => true\nresidues[0].bonded? residues[1], a, b                # => true\nresidues[0].bonded? residues[1], a, PeriodicTable::N # => true\nresidues[0].bonded? residues[1], PeriodicTable::C, b # => true\nresidues[1].bonded? residues[2], a, b                # => true\nresidues[1].bonded? residues[3], a, b                # => false\nresidues[2].bonded? residues[3], a, b                # => false\n```\n\nNote that *lhs* and *rhs* are looked up in `self` and *other*,\nrespectively, i.e., the arguments are not interchangeable:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\" # => true\nresidues[0].bonded? residues[1], \"N\", \"C\" # => false\n```\n\nWhen atom names or atom template are specified, this method\nreturns false if missing:\n\n```\nmissing_atom_t = Templates::Atom.new(\"OZ5\")\nresidues[0].bonded? residues[1], \"CX1\", \"N\"             # => false\nresidues[0].bonded? residues[1], missing_atom_t, \"N\"    # => false\nresidues[0].bonded? residues[1], \"C\", PeriodicTable::Mg # => false\n```\n\nWhen elements are specified, all atoms of that element are tested:\n\n```\nresidues[1].bonded? residues[2], \"C\", PeriodicTable::N  # => true\nresidues[1].bonded? residues[2], \"SG\", PeriodicTable::C # => true\n```\n\nIf *order* is specified, it also check for bond order, otherwise\nit is ignored:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\"    # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 1 # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 2 # => false\n```","summary":"<p>Returns true if <code>self</code> is bonded to <em>other</em> through a bond between <em>lhs</em> and <em>rhs</em>, otherwise false.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"},{"name":"lhs","external_name":"lhs","restriction":"Templates::Atom | String"},{"name":"rhs","external_name":"rhs","restriction":"Element"},{"name":"order","default_value":"nil","external_name":"order","restriction":"BondOrder | ::Nil"}],"args_string":"(other : self, lhs : Templates::Atom | String, rhs : Element, order : BondOrder | Nil = nil) : Bool","args_html":"(other : <span class=\"k\">self</span>, lhs : <a href=\"../Chem/Templates/Atom.html\">Templates::Atom</a> | String, rhs : <a href=\"../Chem/Element.html\">Element</a>, order : <a href=\"../Chem/BondOrder.html\">BondOrder</a> | Nil = <span class=\"n\">nil</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":245,"url":null},"def":{"name":"bonded?","args":[{"name":"other","external_name":"other","restriction":"self"},{"name":"lhs","external_name":"lhs","restriction":"Templates::Atom | String"},{"name":"rhs","external_name":"rhs","restriction":"Element"},{"name":"order","default_value":"nil","external_name":"order","restriction":"BondOrder | ::Nil"}],"return_type":"Bool","visibility":"Public","body":"if other.same?(self)\n  return false\nend\nif a = self[lhs]?\nelse\n  return false\nend\nother.each_atom.any? do |b|\n  if (b === rhs) && (bond = a.bonds[b]?)\n    bond.order == (order || bond.order)\n  end\nend\n"}},{"html_id":"bonded?(other:self,lhs:Element,rhs:Templates::Atom|String,order:BondOrder|Nil=nil):Bool-instance-method","name":"bonded?","doc":"Returns true if `self` is bonded to *other* through a bond between\n*lhs* and *rhs*, otherwise false.\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\n```\n\nOne can use atom names, atom template, or elements:\n\n```\na, b = Templates::Atom.new(\"C\"), Templates::Atom.new(\"N\")\nresidues[0].bonded? residues[1], \"C\", \"N\"            # => true\nresidues[0].bonded? residues[1], a, b                # => true\nresidues[0].bonded? residues[1], a, PeriodicTable::N # => true\nresidues[0].bonded? residues[1], PeriodicTable::C, b # => true\nresidues[1].bonded? residues[2], a, b                # => true\nresidues[1].bonded? residues[3], a, b                # => false\nresidues[2].bonded? residues[3], a, b                # => false\n```\n\nNote that *lhs* and *rhs* are looked up in `self` and *other*,\nrespectively, i.e., the arguments are not interchangeable:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\" # => true\nresidues[0].bonded? residues[1], \"N\", \"C\" # => false\n```\n\nWhen atom names or atom template are specified, this method\nreturns false if missing:\n\n```\nmissing_atom_t = Templates::Atom.new(\"OZ5\")\nresidues[0].bonded? residues[1], \"CX1\", \"N\"             # => false\nresidues[0].bonded? residues[1], missing_atom_t, \"N\"    # => false\nresidues[0].bonded? residues[1], \"C\", PeriodicTable::Mg # => false\n```\n\nWhen elements are specified, all atoms of that element are tested:\n\n```\nresidues[1].bonded? residues[2], \"C\", PeriodicTable::N  # => true\nresidues[1].bonded? residues[2], \"SG\", PeriodicTable::C # => true\n```\n\nIf *order* is specified, it also check for bond order, otherwise\nit is ignored:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\"    # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 1 # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 2 # => false\n```","summary":"<p>Returns true if <code>self</code> is bonded to <em>other</em> through a bond between <em>lhs</em> and <em>rhs</em>, otherwise false.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"},{"name":"lhs","external_name":"lhs","restriction":"Element"},{"name":"rhs","external_name":"rhs","restriction":"Templates::Atom | String"},{"name":"order","default_value":"nil","external_name":"order","restriction":"BondOrder | ::Nil"}],"args_string":"(other : self, lhs : Element, rhs : Templates::Atom | String, order : BondOrder | Nil = nil) : Bool","args_html":"(other : <span class=\"k\">self</span>, lhs : <a href=\"../Chem/Element.html\">Element</a>, rhs : <a href=\"../Chem/Templates/Atom.html\">Templates::Atom</a> | String, order : <a href=\"../Chem/BondOrder.html\">BondOrder</a> | Nil = <span class=\"n\">nil</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":259,"url":null},"def":{"name":"bonded?","args":[{"name":"other","external_name":"other","restriction":"self"},{"name":"lhs","external_name":"lhs","restriction":"Element"},{"name":"rhs","external_name":"rhs","restriction":"Templates::Atom | String"},{"name":"order","default_value":"nil","external_name":"order","restriction":"BondOrder | ::Nil"}],"return_type":"Bool","visibility":"Public","body":"if other.same?(self)\n  return false\nend\nif b = other[rhs]?\nelse\n  return false\nend\n@atoms.any? do |a|\n  if (a === lhs) && (bond = a.bonds[b]?)\n    bond.order == (order || bond.order)\n  end\nend\n"}},{"html_id":"bonded?(other:self,lhs:Element,rhs:Element,order:BondOrder|Nil=nil):Bool-instance-method","name":"bonded?","doc":"Returns true if `self` is bonded to *other* through a bond between\n*lhs* and *rhs*, otherwise false.\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\n```\n\nOne can use atom names, atom template, or elements:\n\n```\na, b = Templates::Atom.new(\"C\"), Templates::Atom.new(\"N\")\nresidues[0].bonded? residues[1], \"C\", \"N\"            # => true\nresidues[0].bonded? residues[1], a, b                # => true\nresidues[0].bonded? residues[1], a, PeriodicTable::N # => true\nresidues[0].bonded? residues[1], PeriodicTable::C, b # => true\nresidues[1].bonded? residues[2], a, b                # => true\nresidues[1].bonded? residues[3], a, b                # => false\nresidues[2].bonded? residues[3], a, b                # => false\n```\n\nNote that *lhs* and *rhs* are looked up in `self` and *other*,\nrespectively, i.e., the arguments are not interchangeable:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\" # => true\nresidues[0].bonded? residues[1], \"N\", \"C\" # => false\n```\n\nWhen atom names or atom template are specified, this method\nreturns false if missing:\n\n```\nmissing_atom_t = Templates::Atom.new(\"OZ5\")\nresidues[0].bonded? residues[1], \"CX1\", \"N\"             # => false\nresidues[0].bonded? residues[1], missing_atom_t, \"N\"    # => false\nresidues[0].bonded? residues[1], \"C\", PeriodicTable::Mg # => false\n```\n\nWhen elements are specified, all atoms of that element are tested:\n\n```\nresidues[1].bonded? residues[2], \"C\", PeriodicTable::N  # => true\nresidues[1].bonded? residues[2], \"SG\", PeriodicTable::C # => true\n```\n\nIf *order* is specified, it also check for bond order, otherwise\nit is ignored:\n\n```\nresidues[0].bonded? residues[1], \"C\", \"N\"    # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 1 # => true\nresidues[0].bonded? residues[1], \"C\", \"N\", 2 # => false\n```","summary":"<p>Returns true if <code>self</code> is bonded to <em>other</em> through a bond between <em>lhs</em> and <em>rhs</em>, otherwise false.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"},{"name":"lhs","external_name":"lhs","restriction":"Element"},{"name":"rhs","external_name":"rhs","restriction":"Element"},{"name":"order","default_value":"nil","external_name":"order","restriction":"BondOrder | ::Nil"}],"args_string":"(other : self, lhs : Element, rhs : Element, order : BondOrder | Nil = nil) : Bool","args_html":"(other : <span class=\"k\">self</span>, lhs : <a href=\"../Chem/Element.html\">Element</a>, rhs : <a href=\"../Chem/Element.html\">Element</a>, order : <a href=\"../Chem/BondOrder.html\">BondOrder</a> | Nil = <span class=\"n\">nil</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":273,"url":null},"def":{"name":"bonded?","args":[{"name":"other","external_name":"other","restriction":"self"},{"name":"lhs","external_name":"lhs","restriction":"Element"},{"name":"rhs","external_name":"rhs","restriction":"Element"},{"name":"order","default_value":"nil","external_name":"order","restriction":"BondOrder | ::Nil"}],"return_type":"Bool","visibility":"Public","body":"if other.same?(self)\n  return false\nend\n@atoms.any? do |a|\n  if a === lhs\n  else\n    next\n  end\n  other.each_atom.any? do |b|\n    if (b === rhs) && (bond = a.bonds[b]?)\n      bond.order == (order || bond.order)\n    end\n  end\nend\n"}},{"html_id":"bonded?(other:self):Bool-instance-method","name":"bonded?","doc":"Returns true if `self` is bonded to *other*, otherwise false.\nResidues may be bonded by any two atoms.\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\nresidues[0].bonded?(residues[1]) # => true\nresidues[1].bonded?(residues[2]) # => true\nresidues[2].bonded?(residues[3]) # => false\nresidues[1].bonded?(residues[3]) # => true\n```","summary":"<p>Returns true if <code>self</code> is bonded to <em>other</em>, otherwise false.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":131,"url":null},"def":{"name":"bonded?","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"if other.same?(self)\n  return false\nend\neach_atom.any? do |a1|\n  other.each_atom.any? do |a2|\n    a1.bonded?(to: a2)\n  end\nend\n"}},{"html_id":"bonded_residues(bond_t:Templates::Bond,forward_only:Bool=true,strict:Bool=true):Array(Residue)-instance-method","name":"bonded_residues","doc":"Returns residues bonded through *bond_t*. Residues are ordered by\ntheir chain id, residue number and insertion code if present\n(refer to #<=>).\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\nbond_t = Templates::Bond.new(\"C\", \"N\")\nresidues[0].bonded_residues(bond_t).map(&.name) # => [\"CYS\"]\nresidues[1].bonded_residues(bond_t).map(&.name) # => [\"THR\"]\nresidues[2].bonded_residues(bond_t).map(&.name) # => []\nresidues[3].bonded_residues(bond_t).map(&.name) # => []\n```\n\nIf *forward_only* is `false`, then bond directionality is ignored:\n\n```\nresidues[0].bonded_residues(bond_t, forward_only: false).map(&.name) # => [\"CYS\"]\nresidues[1].bonded_residues(bond_t, forward_only: false).map(&.name) # => [\"ALA\", \"THR\"]\nresidues[2].bonded_residues(bond_t, forward_only: false).map(&.name) # => [\"CYS\"]\nresidues[3].bonded_residues(bond_t, forward_only: false).map(&.name) # => []\n```\n\nIf *strict* is `false`, bond search checks elements only, and bond\norder is ignored (fuzzy search). In the following example, using\n`strict: false` makes that any C-N bond is accepted regardless of\natom names or bond order:\n\n```\nbond_t = Templates::Bond.new \"C\", \"NX\", order: 2\nresidues[0].bonded_residues(bond_t, strict: false).map(&.name) # => [\"CYS\"]\nresidues[1].bonded_residues(bond_t, strict: false).map(&.name) # => [\"THR\"]\nresidues[2].bonded_residues(bond_t, strict: false).map(&.name) # => []\nresidues[3].bonded_residues(bond_t, strict: false).map(&.name) # => []\n```","summary":"<p>Returns residues bonded through <em>bond_t</em>.</p>","abstract":false,"args":[{"name":"bond_t","external_name":"bond_t","restriction":"Templates::Bond"},{"name":"forward_only","default_value":"true","external_name":"forward_only","restriction":"Bool"},{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"}],"args_string":"(bond_t : Templates::Bond, forward_only : Bool = true, strict : Bool = true) : Array(Residue)","args_html":"(bond_t : <a href=\"../Chem/Templates/Bond.html\">Templates::Bond</a>, forward_only : Bool = <span class=\"n\">true</span>, strict : Bool = <span class=\"n\">true</span>) : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Residue.html\">Residue</a>)","location":{"filename":"src/chem/core/residue.cr","line_number":338,"url":null},"def":{"name":"bonded_residues","args":[{"name":"bond_t","external_name":"bond_t","restriction":"Templates::Bond"},{"name":"forward_only","default_value":"true","external_name":"forward_only","restriction":"Bool"},{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"}],"return_type":"Array(Residue)","visibility":"Public","body":"residues = [] of Residue\neach_bonded_residue(bond_t, forward_only, strict) do |residue|\n  residues << residue\nend\nresidues\n"}},{"html_id":"bonded_residues:Array(Residue)-instance-method","name":"bonded_residues","doc":"Returns bonded residues. Residues may be bonded through any atom.\nResidues are ordered by their chain id, residue number and\ninsertion code if present (refer to #<=>).\n\n```\n# Covalent ligand (JG7) is bonded to CYS sidechain\nresidues = Structure.read(\"ala-cys-thr-jg7.pdb\").residues\nresidues[0].bonded_residues.map(&.name) # => [\"CYS\"]\nresidues[1].bonded_residues.map(&.name) # => [\"ALA\", \"THR\", \"JG7\"]\nresidues[2].bonded_residues.map(&.name) # => [\"CYS\"]\nresidues[3].bonded_residues.map(&.name) # => [\"CYS\"]\n```","summary":"<p>Returns bonded residues.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":297,"url":null},"def":{"name":"bonded_residues","return_type":"Array(Residue)","visibility":"Public","body":"residues = [] of Residue\neach_bonded_residue do |residue|\n  residues << residue\nend\nresidues.sort!\n"}},{"html_id":"chain:Chain-instance-method","name":"chain","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":17,"url":null},"def":{"name":"chain","return_type":"Chain","visibility":"Public","body":"@chain"}},{"html_id":"chain=(new_chain:Chain):Chain-instance-method","name":"chain=","abstract":false,"args":[{"name":"new_chain","external_name":"new_chain","restriction":"Chain"}],"args_string":"(new_chain : Chain) : Chain","args_html":"(new_chain : <a href=\"../Chem/Chain.html\">Chain</a>) : <a href=\"../Chem/Chain.html\">Chain</a>","location":{"filename":"src/chem/core/residue.cr","line_number":346,"url":null},"def":{"name":"chain=","args":[{"name":"new_chain","external_name":"new_chain","restriction":"Chain"}],"return_type":"Chain","visibility":"Public","body":"@chain.delete(self)\n@chain = new_chain\nnew_chain << self\n"}},{"html_id":"cis?:Bool-instance-method","name":"cis?","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":352,"url":null},"def":{"name":"cis?","return_type":"Bool","visibility":"Public","body":"(angle = omega?) ? angle.abs < 30 : false"}},{"html_id":"clear:self-instance-method","name":"clear","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":356,"url":null},"def":{"name":"clear","return_type":"self","visibility":"Public","body":"@atom_table.clear\n@atoms.clear\nself\n"}},{"html_id":"code(default:Char='X'):Char-instance-method","name":"code","doc":"Returns a single-letter code associated with the residue's\ntemplate. If the residue has no associated template or it doesn't\nhave a code, the method returns *default*.","summary":"<p>Returns a single-letter code associated with the residue's template.</p>","abstract":false,"args":[{"name":"default","default_value":"'X'","external_name":"default","restriction":"Char"}],"args_string":"(default : Char = 'X') : Char","args_html":"(default : <a href=\"../Char.html\">Char</a> = <span class=\"s\">&#39;X&#39;</span>) : <a href=\"../Char.html\">Char</a>","location":{"filename":"src/chem/core/residue.cr","line_number":365,"url":null},"def":{"name":"code","args":[{"name":"default","default_value":"'X'","external_name":"default","restriction":"Char"}],"return_type":"Char","visibility":"Public","body":"template.try(&.code) || default"}},{"html_id":"delete(atom:Atom):Atom|Nil-instance-method","name":"delete","abstract":false,"args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"args_string":"(atom : Atom) : Atom | Nil","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>) : <a href=\"../Chem/Atom.html\">Atom</a> | Nil","location":{"filename":"src/chem/core/residue.cr","line_number":369,"url":null},"def":{"name":"delete","args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"return_type":"Atom | ::Nil","visibility":"Public","body":"atom = @atoms.delete(atom)\nif atom && (@atom_table[atom.name]?.same?(atom))\n  @atom_table.delete(atom.name)\nend\natom\n"}},{"html_id":"dextro?:Bool-instance-method","name":"dextro?","doc":"Returns `true` is residue is dextrorotatory, otherwise `false`.\n\nA residue is considered to be dextrorotatory if the improper angle\nC-CA-C-CB is negative.\n\nNote that this method returns `false` if the residue doesn't have\nany of such atoms, therefore it's not always equal to the inverse\nof `#levo?`.","summary":"<p>Returns <code>true</code> is residue is dextrorotatory, otherwise <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":383,"url":null},"def":{"name":"dextro?","return_type":"Bool","visibility":"Public","body":"if (((n = self[\"N\"]?) && (ca = self[\"CA\"]?)) && (c = self[\"C\"]?)) && (cb = self[\"CB\"]?)\n  (Spatial.improper(n, ca, c, cb)) < 0\nelse\n  false\nend"}},{"html_id":"dig(name:String):Atom-instance-method","name":"dig","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom","args_html":"(name : String) : <a href=\"../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/residue.cr","line_number":391,"url":null},"def":{"name":"dig","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Atom","visibility":"Public","body":"self[name]"}},{"html_id":"dig?(name:String):Atom|Nil-instance-method","name":"dig?","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom | Nil","args_html":"(name : String) : <a href=\"../Chem/Atom.html\">Atom</a> | Nil","location":{"filename":"src/chem/core/residue.cr","line_number":395,"url":null},"def":{"name":"dig?","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Atom | ::Nil","visibility":"Public","body":"self[name]?"}},{"html_id":"dna?:Bool-instance-method","name":"dna?","doc":"Returns `true` if the residue is a DNA residue, else `false`.","summary":"<p>Returns <code>true</code> if the residue is a DNA residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":685,"url":null},"def":{"name":"dna?","return_type":"Bool","visibility":"Public","body":"@type == ResidueType::DNA"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":399,"url":null},"def":{"name":"each_atom","return_type":"Iterator(Atom)","visibility":"Public","body":"@atoms.each"}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":403,"url":null},"def":{"name":"each_atom","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Atom ->)"},"visibility":"Public","body":"@atoms.each do |atom|\n  yield atom\nend"}},{"html_id":"each_bonded_residue(bond_t:Templates::Bond,forward_only:Bool=true,strict:Bool=true,&:Residue->):Nil-instance-method","name":"each_bonded_residue","doc":"Yields each residue bonded through *bond_t*.\n\nIf *forward_only* is `false`, then bond directionality is ignored.\n\nIf *strict* is `false`, bond search checks elements only, and bond\norder is ignored (fuzzy search).\n\nSee `#bonded_residues(bond_t, forward_only, strict)` for examples.","summary":"<p>Yields each residue bonded through <em>bond_t</em>.</p>","abstract":false,"args":[{"name":"bond_t","external_name":"bond_t","restriction":"Templates::Bond"},{"name":"forward_only","default_value":"true","external_name":"forward_only","restriction":"Bool"},{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"}],"args_string":"(bond_t : Templates::Bond, forward_only : Bool = true, strict : Bool = true, & : Residue -> ) : Nil","args_html":"(bond_t : <a href=\"../Chem/Templates/Bond.html\">Templates::Bond</a>, forward_only : Bool = <span class=\"n\">true</span>, strict : Bool = <span class=\"n\">true</span>, & : <a href=\"../Chem/Residue.html\">Residue</a> -> ) : Nil","location":{"filename":"src/chem/core/residue.cr","line_number":432,"url":null},"def":{"name":"each_bonded_residue","args":[{"name":"bond_t","external_name":"bond_t","restriction":"Templates::Bond"},{"name":"forward_only","default_value":"true","external_name":"forward_only","restriction":"Bool"},{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Residue ->)"},"return_type":"Nil","visibility":"Public","body":"each_bonded_residue do |residue|\n  bonded = bonded?(residue, bond_t, strict)\n  if forward_only\n  else\n    bonded || (bonded = residue.bonded?(self, bond_t, strict))\n  end\n  if bonded\n    yield residue\n  end\nend"}},{"html_id":"each_bonded_residue(&:Residue->):Nil-instance-method","name":"each_bonded_residue","doc":"Yields each bonded residue. Residues may be bonded through any\natom.\n\nSee `#bonded_residues` for examples.","summary":"<p>Yields each bonded residue.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":413,"url":null},"def":{"name":"each_bonded_residue","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Residue ->)"},"return_type":"Nil","visibility":"Public","body":"residues = Set(Residue).new\n@atoms.each do |atom|\n  atom.each_bonded_atom do |other|\n    residue = other.residue\n    if (residue != self) && (!(residue.in?(residues)))\n      yield residue\n    end\n    residues << residue\n  end\nend\n"}},{"html_id":"has_backbone?:Bool-instance-method","name":"has_backbone?","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":443,"url":null},"def":{"name":"has_backbone?","return_type":"Bool","visibility":"Public","body":"(((!self[\"N\"]?.nil?) && (!self[\"CA\"]?.nil?)) && (!self[\"C\"]?.nil?)) && (!self[\"O\"]?.nil?)"}},{"html_id":"het?:Bool-instance-method","name":"het?","doc":"Returns `true` if the residue is a non-standard (HET) residue,\nelse `false`.","summary":"<p>Returns <code>true</code> if the residue is a non-standard (HET) residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":449,"url":null},"def":{"name":"het?","return_type":"Bool","visibility":"Public","body":"!protein?"}},{"html_id":"hlxparams:Protein::HlxParams|Nil-instance-method","name":"hlxparams","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":453,"url":null},"def":{"name":"hlxparams","return_type":"Protein::HlxParams | ::Nil","visibility":"Public","body":"begin\n  Protein::HlxParams.new(self)\nrescue ArgumentError | KeyError\n  nil\nend"}},{"html_id":"includes?(atom:Atom):Bool-instance-method","name":"includes?","doc":"Returns `true` if the residue contains _atom_, else `false`.\n\nThe check is done by name first, and then by atom equality.","summary":"<p>Returns <code>true</code> if the residue contains <em>atom</em>, else <code>false</code>.</p>","abstract":false,"args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"args_string":"(atom : Atom) : Bool","args_html":"(atom : <a href=\"../Chem/Atom.html\">Atom</a>) : Bool","location":{"filename":"src/chem/core/residue.cr","line_number":462,"url":null},"def":{"name":"includes?","args":[{"name":"atom","external_name":"atom","restriction":"Atom"}],"return_type":"Bool","visibility":"Public","body":"@atom_table[atom.name]? == atom"}},{"html_id":"insertion_code:Char|Nil-instance-method","name":"insertion_code","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":18,"url":null},"def":{"name":"insertion_code","return_type":"Char | ::Nil","visibility":"Public","body":"@insertion_code"}},{"html_id":"insertion_code=(insertion_code:Char|Nil):Char|Nil-instance-method","name":"insertion_code=","abstract":false,"args":[{"name":"insertion_code","external_name":"insertion_code","restriction":"Char | ::Nil"}],"args_string":"(insertion_code : Char | Nil) : Char | Nil","args_html":"(insertion_code : <a href=\"../Char.html\">Char</a> | Nil) : <a href=\"../Char.html\">Char</a> | Nil","location":{"filename":"src/chem/core/residue.cr","line_number":466,"url":null},"def":{"name":"insertion_code=","args":[{"name":"insertion_code","external_name":"insertion_code","restriction":"Char | ::Nil"}],"return_type":"Char | ::Nil","visibility":"Public","body":"@insertion_code = insertion_code\n@chain.reset_cache\n@insertion_code\n"}},{"html_id":"ion?:Bool-instance-method","name":"ion?","doc":"Returns `true` if the residue is a ion residue, else `false`.","summary":"<p>Returns <code>true</code> if the residue is a ion residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":685,"url":null},"def":{"name":"ion?","return_type":"Bool","visibility":"Public","body":"@type == ResidueType::Ion"}},{"html_id":"levo?:Bool-instance-method","name":"levo?","doc":"Returns `true` is residue is levorotatory, otherwise `false`.\n\nA residue is considered to be levorotatory if the improper angle\nC-CA-C-CB is positive.\n\nNote that this method returns `false` if the residue doesn't have\nany of such atoms, therefore it's not always equal to the inverse\nof `#dextro?`.","summary":"<p>Returns <code>true</code> is residue is levorotatory, otherwise <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":480,"url":null},"def":{"name":"levo?","return_type":"Bool","visibility":"Public","body":"if (((n = self[\"N\"]?) && (ca = self[\"CA\"]?)) && (c = self[\"C\"]?)) && (cb = self[\"CB\"]?)\n  (Spatial.improper(n, ca, c, cb)) > 0\nelse\n  false\nend"}},{"html_id":"membrane?:Bool-instance-method","name":"membrane?","doc":"Returns `true` if the residue is a membrane residue, else `false`.","summary":"<p>Returns <code>true</code> if the residue is a membrane residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":685,"url":null},"def":{"name":"membrane?","return_type":"Bool","visibility":"Public","body":"@type == ResidueType::Membrane"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":488,"url":null},"def":{"name":"n_atoms","return_type":"Int32","visibility":"Public","body":"@atoms.size"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":20,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"name=(str:String):String-instance-method","name":"name=","abstract":false,"args":[{"name":"str","external_name":"str","restriction":"String"}],"args_string":"(str : String) : String","args_html":"(str : String) : String","location":{"filename":"src/chem/core/residue.cr","line_number":492,"url":null},"def":{"name":"name=","args":[{"name":"str","external_name":"str","restriction":"String"}],"return_type":"String","visibility":"Public","body":"@name = str\nassign_type_from_templates\nstr\n"}},{"html_id":"number:Int32-instance-method","name":"number","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":21,"url":null},"def":{"name":"number","return_type":"Int32","visibility":"Public","body":"@number"}},{"html_id":"number=(number:Int32):Int32-instance-method","name":"number=","abstract":false,"args":[{"name":"number","external_name":"number","restriction":"Int32"}],"args_string":"(number : Int32) : Int32","args_html":"(number : Int32) : Int32","location":{"filename":"src/chem/core/residue.cr","line_number":498,"url":null},"def":{"name":"number=","args":[{"name":"number","external_name":"number","restriction":"Int32"}],"return_type":"Int32","visibility":"Public","body":"@number = number\n@chain.reset_cache\n@number\n"}},{"html_id":"omega:Float64-instance-method","name":"omega","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":541,"url":null},"def":{"name":"omega","return_type":"Float64","visibility":"Public","body":"omega? || (raise(Error.new(\"#{self} is terminal\")))"}},{"html_id":"omega?:Float64|Nil-instance-method","name":"omega?","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":545,"url":null},"def":{"name":"omega?","return_type":"Float64 | ::Nil","visibility":"Public","body":"if (((ca1 = pred?.try(&.[]?(\"CA\"))) && (c = pred?.try(&.[]?(\"C\")))) && (n = self[\"N\"]?)) && (ca2 = self[\"CA\"]?)\n  if cell = structure.cell?\n    Spatial.dihedral(cell, ca1, c, n, ca2)\n  else\n    Spatial.dihedral(ca1, c, n, ca2)\n  end\nend"}},{"html_id":"other?:Bool-instance-method","name":"other?","doc":"Returns `true` if the residue is an unknown residue, else `false`.","summary":"<p>Returns <code>true</code> if the residue is an unknown residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":685,"url":null},"def":{"name":"other?","return_type":"Bool","visibility":"Public","body":"@type == ResidueType::Other"}},{"html_id":"phi:Float64-instance-method","name":"phi","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":558,"url":null},"def":{"name":"phi","return_type":"Float64","visibility":"Public","body":"phi? || (raise(Error.new(\"#{self} is terminal\")))"}},{"html_id":"phi?:Float64|Nil-instance-method","name":"phi?","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":562,"url":null},"def":{"name":"phi?","return_type":"Float64 | ::Nil","visibility":"Public","body":"if (((ca1 = pred?.try(&.[]?(\"C\"))) && (n = self[\"N\"]?)) && (ca2 = self[\"CA\"]?)) && (c = self[\"C\"]?)\n  if cell = structure.cell?\n    Spatial.dihedral(cell, ca1, n, ca2, c)\n  else\n    Spatial.dihedral(ca1, n, ca2, c)\n  end\nend"}},{"html_id":"polymer?:Bool-instance-method","name":"polymer?","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":629,"url":null},"def":{"name":"polymer?","return_type":"Bool","visibility":"Public","body":"!(!((template.try(&.polymer?) || protein?) || dna?))"}},{"html_id":"pred(strict:Bool=true,use_numbering:Bool=true):Residue-instance-method","name":"pred","doc":"Returns the preceding residue if exists, else raises `Error`.\nRefer to `#pred?` for details.","summary":"<p>Returns the preceding residue if exists, else raises <code><a href=\"../Chem/Error.html\">Error</a></code>.</p>","abstract":false,"args":[{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"use_numbering","default_value":"true","external_name":"use_numbering","restriction":"Bool"}],"args_string":"(strict : Bool = true, use_numbering : Bool = true) : Residue","args_html":"(strict : Bool = <span class=\"n\">true</span>, use_numbering : Bool = <span class=\"n\">true</span>) : <a href=\"../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/residue.cr","line_number":577,"url":null},"def":{"name":"pred","args":[{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"use_numbering","default_value":"true","external_name":"use_numbering","restriction":"Bool"}],"return_type":"Residue","visibility":"Public","body":"(pred?(strict, use_numbering)) || (raise(Error.new(\"No residue precedes #{self}\")))"}},{"html_id":"pred?(strict:Bool=true,use_numbering:Bool=true):Residue|Nil-instance-method","name":"pred?","doc":"Returns the preceding residue if exists, otherwise `nil`.\n\nIt uses the link bond type of the associated residue template, if\npresent, to search for the previous residue. Thus, link bond\ndetermines the direction, e.g., C(i-1)-N(i). Be aware that atom\ntypes must match exactly to find a residue unless *strict* is\n`false`.\n\nOtherwise, it returns a bonded residue whose number and insertion\ncode come just before those of `self`. This fallback can be\ndisabled by setting *use_numbering* to `false`.\n\nNote that when multiple residues can be connected to the same\nresidue (e.g., branched polymers), it returns the last residue\namong them.","summary":"<p>Returns the preceding residue if exists, otherwise <code>nil</code>.</p>","abstract":false,"args":[{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"use_numbering","default_value":"true","external_name":"use_numbering","restriction":"Bool"}],"args_string":"(strict : Bool = true, use_numbering : Bool = true) : Residue | Nil","args_html":"(strict : Bool = <span class=\"n\">true</span>, use_numbering : Bool = <span class=\"n\">true</span>) : <a href=\"../Chem/Residue.html\">Residue</a> | Nil","location":{"filename":"src/chem/core/residue.cr","line_number":596,"url":null},"def":{"name":"pred?","args":[{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"use_numbering","default_value":"true","external_name":"use_numbering","restriction":"Bool"}],"return_type":"Residue | ::Nil","visibility":"Public","body":"bonded_residue = nil\nif bond_t = template.try(&.link_bond)\n  each_bonded_residue(bond_t.reverse, strict: strict) do |residue|\n    if (!bonded_residue) || residue > bonded_residue\n      bonded_residue = residue\n    end\n  end\nelse\n  if use_numbering\n    each_bonded_residue do |residue|\n      if residue < self && ((!bonded_residue) || residue > bonded_residue)\n        bonded_residue = residue\n      end\n    end\n  end\nend\nbonded_residue\n"}},{"html_id":"protein?:Bool-instance-method","name":"protein?","doc":"Returns `true` if the residue is a protein residue, else `false`.","summary":"<p>Returns <code>true</code> if the residue is a protein residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":685,"url":null},"def":{"name":"protein?","return_type":"Bool","visibility":"Public","body":"@type == ResidueType::Protein"}},{"html_id":"psi:Float64-instance-method","name":"psi","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":612,"url":null},"def":{"name":"psi","return_type":"Float64","visibility":"Public","body":"psi? || (raise(Error.new(\"#{self} is terminal\")))"}},{"html_id":"psi?:Float64|Nil-instance-method","name":"psi?","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":616,"url":null},"def":{"name":"psi?","return_type":"Float64 | ::Nil","visibility":"Public","body":"if (((n1 = self[\"N\"]?) && (ca = self[\"CA\"]?)) && (c = self[\"C\"]?)) && (n2 = succ?.try(&.[]?(\"N\")))\n  if cell = structure.cell?\n    Spatial.dihedral(cell, n1, ca, c, n2)\n  else\n    Spatial.dihedral(n1, ca, c, n2)\n  end\nend"}},{"html_id":"ramachandran_angles:Tuple(Float64,Float64)-instance-method","name":"ramachandran_angles","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":633,"url":null},"def":{"name":"ramachandran_angles","return_type":"Tuple(Float64, Float64)","visibility":"Public","body":"{phi, psi}"}},{"html_id":"sec:Protein::SecondaryStructure-instance-method","name":"sec","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":22,"url":null},"def":{"name":"sec","return_type":"Protein::SecondaryStructure","visibility":"Public","body":"@sec"}},{"html_id":"sec=(sec:Protein::SecondaryStructure)-instance-method","name":"sec=","abstract":false,"args":[{"name":"sec","external_name":"sec","restriction":"Protein::SecondaryStructure"}],"args_string":"(sec : Protein::SecondaryStructure)","args_html":"(sec : <a href=\"../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>)","location":{"filename":"src/chem/core/residue.cr","line_number":22,"url":null},"def":{"name":"sec=","args":[{"name":"sec","external_name":"sec","restriction":"Protein::SecondaryStructure"}],"visibility":"Public","body":"@sec = sec"}},{"html_id":"solvent?:Bool-instance-method","name":"solvent?","doc":"Returns `true` if the residue is a solvent residue, else `false`.","summary":"<p>Returns <code>true</code> if the residue is a solvent residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":685,"url":null},"def":{"name":"solvent?","return_type":"Bool","visibility":"Public","body":"@type == ResidueType::Solvent"}},{"html_id":"spec(io:IO):Nil-instance-method","name":"spec","doc":"Writes the residue specification to the given IO.\n\nResidue specification is a short string representation encoding\nresidue information including chain, name, number, and insertion\ncode.","summary":"<p>Writes the residue specification to the given IO.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/core/residue.cr","line_number":653,"url":null},"def":{"name":"spec","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"chain.spec(io)\nio << ':'\nio << @name\nio << @number\nio << @insertion_code\n"}},{"html_id":"spec:String-instance-method","name":"spec","doc":"Returns the residue specification.\n\nResidue specification is a short string representation encoding\nresidue information including chain, name, number, and insertion\ncode.","summary":"<p>Returns the residue specification.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":642,"url":null},"def":{"name":"spec","return_type":"String","visibility":"Public","body":"String.build do |io|\n  spec(io)\nend"}},{"html_id":"structure(*args,**options)-instance-method","name":"structure","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/residue.cr","line_number":25,"url":null},"def":{"name":"structure","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@chain.structure(*args, **options)"}},{"html_id":"structure(*args,**options,&)-instance-method","name":"structure","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/residue.cr","line_number":25,"url":null},"def":{"name":"structure","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@chain.structure(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"succ(strict:Bool=true,use_numbering:Bool=true):Residue-instance-method","name":"succ","doc":"Returns the following residue if exists, else raises `Error`.\nRefer to `#succ?` for details.","summary":"<p>Returns the following residue if exists, else raises <code><a href=\"../Chem/Error.html\">Error</a></code>.</p>","abstract":false,"args":[{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"use_numbering","default_value":"true","external_name":"use_numbering","restriction":"Bool"}],"args_string":"(strict : Bool = true, use_numbering : Bool = true) : Residue","args_html":"(strict : Bool = <span class=\"n\">true</span>, use_numbering : Bool = <span class=\"n\">true</span>) : <a href=\"../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/residue.cr","line_number":506,"url":null},"def":{"name":"succ","args":[{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"use_numbering","default_value":"true","external_name":"use_numbering","restriction":"Bool"}],"return_type":"Residue","visibility":"Public","body":"(succ?(strict, use_numbering)) || (raise(Error.new(\"No residue follows #{self}\")))"}},{"html_id":"succ?(strict:Bool=true,use_numbering:Bool=true):Residue|Nil-instance-method","name":"succ?","doc":"Returns the following residue if exists, otherwise `nil`.\n\nIt uses the link bond type of the associated residue template, if\npresent, to search for the next residue. Thus, link bond\ndetermines the direction, e.g., C(i)-N(i+1). Be aware that atom\ntypes must match exactly to find a residue unless *strict* is\n`false`.\n\nOtherwise, it returns a bonded residue whose number and insertion\ncode come just after those of `self`. This fallback can be\ndisabled by setting *use_numbering* to `false`.\n\nNote that when multiple residues can be connected to the same\nresidue (e.g., branched polymers), it returns the first residue\namong them.","summary":"<p>Returns the following residue if exists, otherwise <code>nil</code>.</p>","abstract":false,"args":[{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"use_numbering","default_value":"true","external_name":"use_numbering","restriction":"Bool"}],"args_string":"(strict : Bool = true, use_numbering : Bool = true) : Residue | Nil","args_html":"(strict : Bool = <span class=\"n\">true</span>, use_numbering : Bool = <span class=\"n\">true</span>) : <a href=\"../Chem/Residue.html\">Residue</a> | Nil","location":{"filename":"src/chem/core/residue.cr","line_number":525,"url":null},"def":{"name":"succ?","args":[{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"use_numbering","default_value":"true","external_name":"use_numbering","restriction":"Bool"}],"return_type":"Residue | ::Nil","visibility":"Public","body":"bonded_residue = nil\nif bond_t = template.try(&.link_bond)\n  each_bonded_residue(bond_t, strict: strict) do |residue|\n    if (!bonded_residue) || residue < bonded_residue\n      bonded_residue = residue\n    end\n  end\nelse\n  if use_numbering\n    each_bonded_residue do |residue|\n      if residue > self && ((!bonded_residue) || residue < bonded_residue)\n        bonded_residue = residue\n      end\n    end\n  end\nend\nbonded_residue\n"}},{"html_id":"template:Templates::Residue|Nil-instance-method","name":"template","doc":"Returns associated residue template if registered, otherwise nil.\n\nThe template is fetched by the residue name.","summary":"<p>Returns associated residue template if registered, otherwise nil.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":674,"url":null},"def":{"name":"template","return_type":"Templates::Residue | ::Nil","visibility":"Public","body":"Templates::Registry.default[@name]?"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/core/residue.cr","line_number":661,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"((io << '<') << ({{ (@type.name.split(\"::\")).last }})) << ' '\nspec(io)\nio << '>'\n"}},{"html_id":"trans?:Bool-instance-method","name":"trans?","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":667,"url":null},"def":{"name":"trans?","return_type":"Bool","visibility":"Public","body":"(angle = omega?) ? angle.abs > 150 : false"}},{"html_id":"type:ResidueType-instance-method","name":"type","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":19,"url":null},"def":{"name":"type","return_type":"ResidueType","visibility":"Public","body":"@type"}},{"html_id":"type=(type:ResidueType)-instance-method","name":"type=","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"ResidueType"}],"args_string":"(type : ResidueType)","args_html":"(type : <a href=\"../Chem/ResidueType.html\">ResidueType</a>)","location":{"filename":"src/chem/core/residue.cr","line_number":19,"url":null},"def":{"name":"type=","args":[{"name":"type","external_name":"type","restriction":"ResidueType"}],"visibility":"Public","body":"@type = type"}},{"html_id":"water?:Bool-instance-method","name":"water?","doc":"Returns `true` if the residue is a water residue, else `false`.\nThis is done by checking if the associated residue template (if\nany) correspond to the water template.","summary":"<p>Returns <code>true</code> if the residue is a water residue, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":681,"url":null},"def":{"name":"water?","return_type":"Bool","visibility":"Public","body":"!(!(template.try do |__arg9|\n  __arg9.name == \"HOH\"\nend))"}}]},{"html_id":"chem.cr/Chem/ResidueCollection","path":"Chem/ResidueCollection.html","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection","abstract":false,"locations":[{"filename":"src/chem/core/residue_collection.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"chem.cr/Chem/AtomView","kind":"struct","full_name":"Chem::AtomView","name":"AtomView"},{"html_id":"chem.cr/Chem/Chain","kind":"class","full_name":"Chem::Chain","name":"Chain"},{"html_id":"chem.cr/Chem/ChainView","kind":"struct","full_name":"Chem::ChainView","name":"ChainView"},{"html_id":"chem.cr/Chem/ResidueView","kind":"struct","full_name":"Chem::ResidueView","name":"ResidueView"},{"html_id":"chem.cr/Chem/Structure","kind":"class","full_name":"Chem::Structure","name":"Structure"},{"html_id":"chem.cr/Chem/Topology","kind":"class","full_name":"Chem::Topology","name":"Topology"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"instance_methods":[{"html_id":"each_residue:Iterator(Residue)-instance-method","name":"each_residue","abstract":true,"location":{"filename":"src/chem/core/residue_collection.cr","line_number":3,"url":null},"def":{"name":"each_residue","return_type":"Iterator(Residue)","visibility":"Public","body":""}},{"html_id":"each_residue(&block:Residue->)-instance-method","name":"each_residue","abstract":true,"location":{"filename":"src/chem/core/residue_collection.cr","line_number":4,"url":null},"def":{"name":"each_residue","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Residue ->)"},"visibility":"Public","body":""}},{"html_id":"each_residue_fragment(&:ResidueView->):Nil-instance-method","name":"each_residue_fragment","doc":"Iterates over residue-wise fragments.\n\nA fragment is an array of inter-connected residues. Fragments are\ndinamically computed by iterating over `Residue#bonded_residues`\nof the selected residues.\n\nNOTE: fragments are scoped to the current list of residues such\nthat bonded residues not contained in the list are omitted, e.g.,\ngiven the list of residues [1, 2, 3, 4, 7, 8] belonging to the\nsequence 1-2-3-4-5-6 7-8-9, this method will return [[1, 2, 3, 4],\n[7, 8]], not [[1, 2, 3, 4, 5, 6], [7, 8, 9]].","summary":"<p>Iterates over residue-wise fragments.</p>","abstract":false,"location":{"filename":"src/chem/core/residue_collection.cr","line_number":18,"url":null},"def":{"name":"each_residue_fragment","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(ResidueView ->)"},"return_type":"Nil","visibility":"Public","body":"residues = (Set(Residue).new(n_residues)).concat(each_residue)\neach_residue do |residue|\n  if residue.in?(residues)\n  else\n    next\n  end\n  residues.delete(residue)\n  fragment = [residue]\n  fragment.each do |residue|\n    residue.bonded_residues.each do |residue|\n      if residue.in?(residues)\n      else\n        next\n      end\n      fragment << residue\n      residues.delete(residue)\n    end\n  end\n  yield ResidueView.new(fragment.sort!)\nend\n"}},{"html_id":"each_secondary_structure(reuse:Bool|Array(Residue)=false,strict:Bool=true,handedness:Bool=true):Iterator(ResidueView)-instance-method","name":"each_secondary_structure","doc":"Returns an iterator over secondary structure elements (SSEs).\n\nSSEs are defined as segments of consecutive, bonded residues that\nhave the same secondary structure. If `strict` is `false`,\nresidues are grouped by their secondary structure type. If\n`handedness` is `false`, handedness is not taken into account when\n`strict` is `false`. See `Protein::SecondaryStructure#equals?`.\n\nLet's say a `structure` has 25 residues with two beta strands\nspanning residues 3-12 and 18-23, then:\n\n```\niter = structure.each_secondary_structure\niter.next.map &.number # => [1, 2]\niter.next.map &.number # => [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\niter.next.map &.number # => [13, 14, 15, 16, 17]\niter.next.map &.number # => [18, 19, 20, 21, 22, 23]\niter.next.map &.number # => [24, 25]\niter.next              # => Iterator::Stop::INSTANCE\n```\n\nNote that non-protein residues are skipped over.\n\nBy default, a new array is created and yielded for each slice when\ninvoking `next`.\n* If *reuse* is `false`, a new array is created for each chunk.\n* If *reuse* is `true`, an array is created once and reused.\n* If *reuse* is an `Array`, it will be reused instead.\n\nThe latter can be used to prevent many memory allocations when\neach slice of interest is to be used in a read-only fashion.","summary":"<p>Returns an iterator over secondary structure elements (SSEs).</p>","abstract":false,"args":[{"name":"reuse","default_value":"false","external_name":"reuse","restriction":"Bool | Array(Residue)"},{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","default_value":"true","external_name":"handedness","restriction":"Bool"}],"args_string":"(reuse : Bool | Array(Residue) = false, strict : Bool = true, handedness : Bool = true) : Iterator(ResidueView)","args_html":"(reuse : Bool | <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Residue.html\">Residue</a>) = <span class=\"n\">false</span>, strict : Bool = <span class=\"n\">true</span>, handedness : Bool = <span class=\"n\">true</span>) : Iterator(<a href=\"../Chem/ResidueView.html\">ResidueView</a>)","location":{"filename":"src/chem/core/residue_collection.cr","line_number":66,"url":null},"def":{"name":"each_secondary_structure","args":[{"name":"reuse","default_value":"false","external_name":"reuse","restriction":"Bool | Array(Residue)"},{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","default_value":"true","external_name":"handedness","restriction":"Bool"}],"return_type":"Iterator(ResidueView)","visibility":"Public","body":"(each_residue.select(&.protein?).chunk_while(reuse) do |i, j|\n  (i.sec.equals?(j.sec, strict, handedness)) && (i.bonded?(j))\nend).map do |residues|\n  ResidueView.new(residues)\nend"}},{"html_id":"each_secondary_structure(reuse:Bool|Array(Residue)=false,strict:Bool=true,handedness:Bool=true,&:ResidueView,Protein::SecondaryStructure->):Nil-instance-method","name":"each_secondary_structure","doc":"Iterates over secondary structure elements (SSEs), yielding both\nthe residues and secondary structure.\n\nSSEs are defined as segments of consecutive, bonded residues that\nhave the same secondary structure. If `strict` is `false`,\nresidues are grouped by their secondary structure type. If\n`handedness` is `false`, handedness is not taken into account when\n`strict` is `false`. See `Protein::SecondaryStructure#equals?`.\n\nLet's say a `structure` has 25 residues with two beta strands\nspanning residues 3-12 and 18-23, then:\n\n```\nstructure.each_secondary_structure do |sec, ary|\n  puts \"#{sec.to_s} at #{ary[0].number}..#{ary[-1].number}\"\nend\n```\n\nPrints:\n\n```text\nNone at 1..2\nBetaStrand at 3..12\nNone at 13..17\nBetaStrand at 18..23\nNone at 24..25\n```\n\nNote that non-protein residues are skipped over.\n\nBy default, a new array is created and yielded for each slice when\ninvoking `next`.\n* If *reuse* is `false`, a new array is created for each chunk.\n* If *reuse* is `true`, an array is created once and reused.\n* If *reuse* is an `Array`, it will be reused instead.\n\nThe latter can be used to prevent many memory allocations when\neach slice of interest is to be used in a read-only fashion.","summary":"<p>Iterates over secondary structure elements (SSEs), yielding both the residues and secondary structure.</p>","abstract":false,"args":[{"name":"reuse","default_value":"false","external_name":"reuse","restriction":"Bool | Array(Residue)"},{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","default_value":"true","external_name":"handedness","restriction":"Bool"}],"args_string":"(reuse : Bool | Array(Residue) = false, strict : Bool = true, handedness : Bool = true, & : ResidueView, Protein::SecondaryStructure -> ) : Nil","args_html":"(reuse : Bool | <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Residue.html\">Residue</a>) = <span class=\"n\">false</span>, strict : Bool = <span class=\"n\">true</span>, handedness : Bool = <span class=\"n\">true</span>, & : <a href=\"../Chem/ResidueView.html\">ResidueView</a>, <a href=\"../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a> -> ) : Nil","location":{"filename":"src/chem/core/residue_collection.cr","line_number":117,"url":null},"def":{"name":"each_secondary_structure","args":[{"name":"reuse","default_value":"false","external_name":"reuse","restriction":"Bool | Array(Residue)"},{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","default_value":"true","external_name":"handedness","restriction":"Bool"}],"yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(ResidueView, Protein::SecondaryStructure ->)"},"return_type":"Nil","visibility":"Public","body":"accum = reuse.is_a?(Array) ? reuse : [] of Residue\neach_residue do |j|\n  if j.protein?\n  else\n    next\n  end\n  if (i = accum.last?) && ((!(i.sec.equals?(j.sec, strict, handedness))) || (!(i.bonded?(j))))\n    yield ResidueView.new(accum), accum[0].sec\n    reuse ? accum.clear : (    accum = [] of Residue)\n  end\n  accum << j\nend\nif accum.empty?\nelse\n  yield ResidueView.new(accum), accum[0].sec\nend\n"}},{"html_id":"link_bond:Templates::Bond|Nil-instance-method","name":"link_bond","abstract":false,"location":{"filename":"src/chem/core/residue_collection.cr","line_number":136,"url":null},"def":{"name":"link_bond","return_type":"Templates::Bond | ::Nil","visibility":"Public","body":"each_residue.compact_map() do |__arg1|\n  __arg1.template.try(&.link_bond)\nend.first?"}},{"html_id":"n_residues:Int32-instance-method","name":"n_residues","abstract":true,"location":{"filename":"src/chem/core/residue_collection.cr","line_number":5,"url":null},"def":{"name":"n_residues","return_type":"Int32","visibility":"Public","body":""}},{"html_id":"reset_secondary_structure:self-instance-method","name":"reset_secondary_structure","doc":"Sets secondary structure of every residue to none.","summary":"<p>Sets secondary structure of every residue to none.</p>","abstract":false,"location":{"filename":"src/chem/core/residue_collection.cr","line_number":141,"url":null},"def":{"name":"reset_secondary_structure","return_type":"self","visibility":"Public","body":"each_residue(&.sec = :none)\nself\n"}},{"html_id":"residue_fragments:Array(ResidueView)-instance-method","name":"residue_fragments","doc":"Returns residue-wise fragments. See #each_residue_fragment.","summary":"<p>Returns residue-wise fragments.</p>","abstract":false,"location":{"filename":"src/chem/core/residue_collection.cr","line_number":147,"url":null},"def":{"name":"residue_fragments","return_type":"Array(ResidueView)","visibility":"Public","body":"fragments = [] of ResidueView\neach_residue_fragment do |fragment|\n  fragments << fragment\nend\nfragments\n"}},{"html_id":"residues:ResidueView-instance-method","name":"residues","abstract":false,"location":{"filename":"src/chem/core/residue_collection.cr","line_number":153,"url":null},"def":{"name":"residues","return_type":"ResidueView","visibility":"Public","body":"residues = Array(Residue).new(n_residues)\neach_residue do |residue|\n  residues << residue\nend\nResidueView.new(residues)\n"}},{"html_id":"sec=(seclist:Array(Protein::SecondaryStructure)):Array(Protein::SecondaryStructure)-instance-method","name":"sec=","abstract":false,"args":[{"name":"seclist","external_name":"seclist","restriction":"Array(Protein::SecondaryStructure)"}],"args_string":"(seclist : Array(Protein::SecondaryStructure)) : Array(Protein::SecondaryStructure)","args_html":"(seclist : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>)) : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>)","location":{"filename":"src/chem/core/residue_collection.cr","line_number":164,"url":null},"def":{"name":"sec=","args":[{"name":"seclist","external_name":"seclist","restriction":"Array(Protein::SecondaryStructure)"}],"return_type":"Array(Protein::SecondaryStructure)","visibility":"Public","body":"if seclist.size != n_residues\n  raise(ArgumentError.new(\"Mismatch secondary structure list\"))\nend\neach_residue.zip(seclist) do |res, sec|\n  res.sec = sec\nend\nseclist\n"}},{"html_id":"sec=(sec:Protein::SecondaryStructure):Protein::SecondaryStructure-instance-method","name":"sec=","abstract":false,"args":[{"name":"sec","external_name":"sec","restriction":"Protein::SecondaryStructure"}],"args_string":"(sec : Protein::SecondaryStructure) : Protein::SecondaryStructure","args_html":"(sec : <a href=\"../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>) : <a href=\"../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>","location":{"filename":"src/chem/core/residue_collection.cr","line_number":159,"url":null},"def":{"name":"sec=","args":[{"name":"sec","external_name":"sec","restriction":"Protein::SecondaryStructure"}],"return_type":"Protein::SecondaryStructure","visibility":"Public","body":"each_residue(&.sec = sec)\nsec\n"}},{"html_id":"secondary_structures(strict:Bool=true,handedness:Bool=true):Array(ResidueView)-instance-method","name":"secondary_structures","abstract":false,"args":[{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","default_value":"true","external_name":"handedness","restriction":"Bool"}],"args_string":"(strict : Bool = true, handedness : Bool = true) : Array(ResidueView)","args_html":"(strict : Bool = <span class=\"n\">true</span>, handedness : Bool = <span class=\"n\">true</span>) : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/ResidueView.html\">ResidueView</a>)","location":{"filename":"src/chem/core/residue_collection.cr","line_number":170,"url":null},"def":{"name":"secondary_structures","args":[{"name":"strict","default_value":"true","external_name":"strict","restriction":"Bool"},{"name":"handedness","default_value":"true","external_name":"handedness","restriction":"Bool"}],"return_type":"Array(ResidueView)","visibility":"Public","body":"elements = [] of ResidueView\neach_secondary_structure(strict: strict, handedness: handedness) do |ele|\n  elements << ele\nend\nelements\n"}}]},{"html_id":"chem.cr/Chem/ResidueType","path":"Chem/ResidueType.html","kind":"enum","full_name":"Chem::ResidueType","name":"ResidueType","abstract":false,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/residue.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"Protein","name":"Protein","value":"0"},{"id":"DNA","name":"DNA","value":"1"},{"id":"Ion","name":"Ion","value":"2"},{"id":"Solvent","name":"Solvent","value":"3"},{"id":"Membrane","name":"Membrane","value":"4"},{"id":"Other","name":"Other","value":"5"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"instance_methods":[{"html_id":"dna?-instance-method","name":"dna?","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":3,"url":null},"def":{"name":"dna?","visibility":"Public","body":"self == DNA"}},{"html_id":"ion?-instance-method","name":"ion?","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":4,"url":null},"def":{"name":"ion?","visibility":"Public","body":"self == Ion"}},{"html_id":"membrane?-instance-method","name":"membrane?","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":6,"url":null},"def":{"name":"membrane?","visibility":"Public","body":"self == Membrane"}},{"html_id":"other?-instance-method","name":"other?","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":7,"url":null},"def":{"name":"other?","visibility":"Public","body":"self == Other"}},{"html_id":"protein?-instance-method","name":"protein?","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":2,"url":null},"def":{"name":"protein?","visibility":"Public","body":"self == Protein"}},{"html_id":"solvent?-instance-method","name":"solvent?","abstract":false,"location":{"filename":"src/chem/core/residue.cr","line_number":5,"url":null},"def":{"name":"solvent?","visibility":"Public","body":"self == Solvent"}}]},{"html_id":"chem.cr/Chem/ResidueView","path":"Chem/ResidueView.html","kind":"struct","full_name":"Chem::ResidueView","name":"ResidueView","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Array/Wrapper","kind":"module","full_name":"Array::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Wrapper","kind":"module","full_name":"Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/residue_view.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Array/Wrapper","kind":"module","full_name":"Array::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"instance_methods":[{"html_id":"[](serial:Int,ins_code:Char):Residue|Nil-instance-method","name":"[]","abstract":false,"args":[{"name":"serial","external_name":"serial","restriction":"Int"},{"name":"ins_code","external_name":"ins_code","restriction":"Char"}],"args_string":"(serial : Int, ins_code : Char) : Residue | Nil","args_html":"(serial : Int, ins_code : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Residue.html\">Residue</a> | Nil","location":{"filename":"src/chem/core/residue_view.cr","line_number":8,"url":null},"def":{"name":"[]","args":[{"name":"serial","external_name":"serial","restriction":"Int"},{"name":"ins_code","external_name":"ins_code","restriction":"Char"}],"return_type":"Residue | ::Nil","visibility":"Public","body":"self[serial, ins_code]? || (raise(IndexError.new))"}},{"html_id":"[](*,serial:Int):Residue-instance-method","name":"[]","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"serial","external_name":"serial","restriction":"Int"}],"args_string":"(*, serial : Int) : Residue","args_html":"(*, serial : Int) : <a href=\"../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/residue_view.cr","line_number":12,"url":null},"def":{"name":"[]","args":[{"name":"","external_name":"","restriction":""},{"name":"serial","external_name":"serial","restriction":"Int"}],"splat_index":0,"return_type":"Residue","visibility":"Public","body":"(self[serial: serial]?) || (raise(IndexError.new))"}},{"html_id":"[]?(serial:Int,ins_code:Char):Residue|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"serial","external_name":"serial","restriction":"Int"},{"name":"ins_code","external_name":"ins_code","restriction":"Char"}],"args_string":"(serial : Int, ins_code : Char) : Residue | Nil","args_html":"(serial : Int, ins_code : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Residue.html\">Residue</a> | Nil","location":{"filename":"src/chem/core/residue_view.cr","line_number":16,"url":null},"def":{"name":"[]?","args":[{"name":"serial","external_name":"serial","restriction":"Int"},{"name":"ins_code","external_name":"ins_code","restriction":"Char"}],"return_type":"Residue | ::Nil","visibility":"Public","body":"find do |res|\n  (res.number == serial) && (res.insertion_code == ins_code)\nend"}},{"html_id":"[]?(*,serial:Int):Residue|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"","external_name":"","restriction":""},{"name":"serial","external_name":"serial","restriction":"Int"}],"args_string":"(*, serial : Int) : Residue | Nil","args_html":"(*, serial : Int) : <a href=\"../Chem/Residue.html\">Residue</a> | Nil","location":{"filename":"src/chem/core/residue_view.cr","line_number":20,"url":null},"def":{"name":"[]?","args":[{"name":"","external_name":"","restriction":""},{"name":"serial","external_name":"serial","restriction":"Int"}],"splat_index":0,"return_type":"Residue | ::Nil","visibility":"Public","body":"find do |__arg0|\n  __arg0.number == serial\nend"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/core/residue_view.cr","line_number":24,"url":null},"def":{"name":"each_atom","return_type":"Iterator(Atom)","visibility":"Public","body":"Iterator.chain(map(&.each_atom))"}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/core/residue_view.cr","line_number":28,"url":null},"def":{"name":"each_atom","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Atom ->)"},"visibility":"Public","body":"each do |residue|\n  residue.each_atom do |atom|\n    yield atom\n  end\nend"}},{"html_id":"each_chain:Iterator(Chain)-instance-method","name":"each_chain","abstract":false,"location":{"filename":"src/chem/core/residue_view.cr","line_number":36,"url":null},"def":{"name":"each_chain","return_type":"Iterator(Chain)","visibility":"Public","body":"each.map(&.chain).uniq"}},{"html_id":"each_chain(&block:Chain->)-instance-method","name":"each_chain","abstract":false,"location":{"filename":"src/chem/core/residue_view.cr","line_number":40,"url":null},"def":{"name":"each_chain","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Chain ->)"},"visibility":"Public","body":"chains = Set(Chain).new\neach do |residue|\n  if residue.chain.in?(chains)\n  else\n    yield residue.chain\n  end\n  chains << residue.chain\nend\n"}},{"html_id":"each_residue:Iterator(Residue)-instance-method","name":"each_residue","abstract":false,"location":{"filename":"src/chem/core/residue_view.cr","line_number":48,"url":null},"def":{"name":"each_residue","return_type":"Iterator(Residue)","visibility":"Public","body":"each"}},{"html_id":"each_residue(&block:Residue->)-instance-method","name":"each_residue","abstract":false,"location":{"filename":"src/chem/core/residue_view.cr","line_number":52,"url":null},"def":{"name":"each_residue","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Residue ->)"},"visibility":"Public","body":"each do |residue|\n  yield residue\nend"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","abstract":false,"location":{"filename":"src/chem/core/residue_view.cr","line_number":58,"url":null},"def":{"name":"n_atoms","return_type":"Int32","visibility":"Public","body":"sum(&.n_atoms)"}},{"html_id":"n_chains:Int32-instance-method","name":"n_chains","abstract":false,"location":{"filename":"src/chem/core/residue_view.cr","line_number":62,"url":null},"def":{"name":"n_chains","return_type":"Int32","visibility":"Public","body":"each_chain.sum do\n  1\nend"}},{"html_id":"n_residues:Int32-instance-method","name":"n_residues","abstract":false,"location":{"filename":"src/chem/core/residue_view.cr","line_number":66,"url":null},"def":{"name":"n_residues","return_type":"Int32","visibility":"Public","body":"size"}},{"html_id":"residues:self-instance-method","name":"residues","abstract":false,"location":{"filename":"src/chem/core/residue_view.cr","line_number":70,"url":null},"def":{"name":"residues","return_type":"self","visibility":"Public","body":"self"}}]},{"html_id":"chem.cr/Chem/SDF","path":"Chem/SDF.html","kind":"module","full_name":"Chem::SDF","name":"SDF","abstract":false,"locations":[{"filename":"src/chem/formats/sdf.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"types":[{"html_id":"chem.cr/Chem/SDF/Reader","path":"Chem/SDF/Reader.html","kind":"class","full_name":"Chem::SDF::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/sdf.cr","line_number":3,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"}],"namespace":{"html_id":"chem.cr/Chem/SDF","kind":"module","full_name":"Chem::SDF","name":"SDF"},"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/sdf.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}],"instance_methods":[{"html_id":"skip_entry:Nil-instance-method","name":"skip_entry","doc":"Discards the next entry in the IO without fully parsing it.","summary":"<p>Discards the next entry in the IO without fully parsing it.</p>","abstract":false,"location":{"filename":"src/chem/formats/sdf.cr","line_number":17,"url":null},"def":{"name":"skip_entry","return_type":"Nil","visibility":"Public","body":"skip_after_delimiter"}}]}]},{"html_id":"chem.cr/Chem/Spatial","path":"Chem/Spatial.html","kind":"module","full_name":"Chem::Spatial","name":"Spatial","abstract":false,"locations":[{"filename":"src/chem/spatial.cr","line_number":14,"url":null},{"filename":"src/chem/spatial.cr","line_number":216,"url":null},{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":1,"url":null},{"filename":"src/chem/spatial/grid.cr","line_number":1,"url":null},{"filename":"src/chem/spatial/kdtree.cr","line_number":1,"url":null},{"filename":"src/chem/spatial/mat3.cr","line_number":1,"url":null},{"filename":"src/chem/spatial/parallelepiped.cr","line_number":1,"url":null},{"filename":"src/chem/spatial/qcp.cr","line_number":1,"url":null},{"filename":"src/chem/spatial/quat.cr","line_number":1,"url":null},{"filename":"src/chem/spatial/size3.cr","line_number":1,"url":null},{"filename":"src/chem/spatial/transform.cr","line_number":1,"url":null},{"filename":"src/chem/spatial/vec3.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"class_methods":[{"html_id":"align(atoms:AtomCollection|CoordinatesProxy,ref_pos:AtomCollection|CoordinatesProxy)-class-method","name":"align","doc":"Superimposes *atoms* onto *other*. Delegates to\n`CoordinatesProxy.align_to`.","summary":"<p>Superimposes <em>atoms</em> onto <em>other</em>.</p>","abstract":false,"args":[{"name":"atoms","external_name":"atoms","restriction":"AtomCollection | CoordinatesProxy"},{"name":"ref_pos","external_name":"ref_pos","restriction":"AtomCollection | CoordinatesProxy"}],"args_string":"(atoms : AtomCollection | CoordinatesProxy, ref_pos : AtomCollection | CoordinatesProxy)","args_html":"(atoms : <a href=\"../Chem/AtomCollection.html\">AtomCollection</a> | <a href=\"../Chem/Spatial/CoordinatesProxy.html\">CoordinatesProxy</a>, ref_pos : <a href=\"../Chem/AtomCollection.html\">AtomCollection</a> | <a href=\"../Chem/Spatial/CoordinatesProxy.html\">CoordinatesProxy</a>)","location":{"filename":"src/chem/spatial.cr","line_number":219,"url":null},"def":{"name":"align","args":[{"name":"atoms","external_name":"atoms","restriction":"AtomCollection | CoordinatesProxy"},{"name":"ref_pos","external_name":"ref_pos","restriction":"AtomCollection | CoordinatesProxy"}],"visibility":"Public","body":"if atoms.is_a?(CoordinatesProxy)\nelse\n  atoms = atoms.coords\nend\nif ref_pos.is_a?(CoordinatesProxy)\nelse\n  ref_pos = ref_pos.coords\nend\natoms.align_to(ref_pos)\n"}},{"html_id":"angle(cell:Parallelepiped,a:Vec3,b:Vec3,c:Vec3):Float64-class-method","name":"angle","abstract":false,"args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"}],"args_string":"(cell : Parallelepiped, a : Vec3, b : Vec3, c : Vec3) : Float64","args_html":"(cell : <a href=\"../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, c : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":46,"url":null},"def":{"name":"angle","args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"}],"return_type":"Float64","visibility":"Public","body":"angle(cell.wrap(a, around: b), b, cell.wrap(c, around: b))"}},{"html_id":"angle(cell:Parallelepiped,a:Atom,b:Atom,c:Atom):Float64-class-method","name":"angle","abstract":false,"args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"},{"name":"c","external_name":"c","restriction":"Atom"}],"args_string":"(cell : Parallelepiped, a : Atom, b : Atom, c : Atom) : Float64","args_html":"(cell : <a href=\"../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>, c : <a href=\"../Chem/Atom.html\">Atom</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":42,"url":null},"def":{"name":"angle","args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"},{"name":"c","external_name":"c","restriction":"Atom"}],"return_type":"Float64","visibility":"Public","body":"angle(cell, a.coords, b.coords, c.coords)"}},{"html_id":"angle(a:Vec3,b:Vec3,c:Vec3):Float64-class-method","name":"angle","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"}],"args_string":"(a : Vec3, b : Vec3, c : Vec3) : Float64","args_html":"(a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, c : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":38,"url":null},"def":{"name":"angle","args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"}],"return_type":"Float64","visibility":"Public","body":"angle(a - b, c - b)"}},{"html_id":"angle(a:Atom,b:Atom,c:Atom):Float64-class-method","name":"angle","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"},{"name":"c","external_name":"c","restriction":"Atom"}],"args_string":"(a : Atom, b : Atom, c : Atom) : Float64","args_html":"(a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>, c : <a href=\"../Chem/Atom.html\">Atom</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":34,"url":null},"def":{"name":"angle","args":[{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"},{"name":"c","external_name":"c","restriction":"Atom"}],"return_type":"Float64","visibility":"Public","body":"angle(a.coords, b.coords, c.coords)"}},{"html_id":"angle(a:Vec3,b:Vec3):Float64-class-method","name":"angle","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"}],"args_string":"(a : Vec3, b : Vec3) : Float64","args_html":"(a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":30,"url":null},"def":{"name":"angle","args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"}],"return_type":"Float64","visibility":"Public","body":"(Math.atan2((a.cross(b)).abs, a.dot(b))).degrees"}},{"html_id":"dihedral(cell:Parallelepiped,a:Vec3,b:Vec3,c:Vec3,d:Vec3):Float64-class-method","name":"dihedral","abstract":false,"args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"},{"name":"d","external_name":"d","restriction":"Vec3"}],"args_string":"(cell : Parallelepiped, a : Vec3, b : Vec3, c : Vec3, d : Vec3) : Float64","args_html":"(cell : <a href=\"../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, c : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, d : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":68,"url":null},"def":{"name":"dihedral","args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"},{"name":"d","external_name":"d","restriction":"Vec3"}],"return_type":"Float64","visibility":"Public","body":"a = cell.wrap(a, around: b)\nc = cell.wrap(c, around: b)\nd = cell.wrap(d, around: c)\ndihedral(a, b, c, d)\n"}},{"html_id":"dihedral(cell:Parallelepiped,a:Atom,b:Atom,c:Atom,d:Atom):Float64-class-method","name":"dihedral","abstract":false,"args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"},{"name":"c","external_name":"c","restriction":"Atom"},{"name":"d","external_name":"d","restriction":"Atom"}],"args_string":"(cell : Parallelepiped, a : Atom, b : Atom, c : Atom, d : Atom) : Float64","args_html":"(cell : <a href=\"../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>, c : <a href=\"../Chem/Atom.html\">Atom</a>, d : <a href=\"../Chem/Atom.html\">Atom</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":64,"url":null},"def":{"name":"dihedral","args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"},{"name":"c","external_name":"c","restriction":"Atom"},{"name":"d","external_name":"d","restriction":"Atom"}],"return_type":"Float64","visibility":"Public","body":"dihedral(cell, a.coords, b.coords, c.coords, d.coords)"}},{"html_id":"dihedral(a:Vec3,b:Vec3,c:Vec3,d:Vec3):Float64-class-method","name":"dihedral","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"},{"name":"d","external_name":"d","restriction":"Vec3"}],"args_string":"(a : Vec3, b : Vec3, c : Vec3, d : Vec3) : Float64","args_html":"(a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, c : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, d : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":60,"url":null},"def":{"name":"dihedral","args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"},{"name":"d","external_name":"d","restriction":"Vec3"}],"return_type":"Float64","visibility":"Public","body":"dihedral(b - a, c - b, d - c)"}},{"html_id":"dihedral(a:Atom,b:Atom,c:Atom,d:Atom):Float64-class-method","name":"dihedral","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"},{"name":"c","external_name":"c","restriction":"Atom"},{"name":"d","external_name":"d","restriction":"Atom"}],"args_string":"(a : Atom, b : Atom, c : Atom, d : Atom) : Float64","args_html":"(a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>, c : <a href=\"../Chem/Atom.html\">Atom</a>, d : <a href=\"../Chem/Atom.html\">Atom</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":56,"url":null},"def":{"name":"dihedral","args":[{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"},{"name":"c","external_name":"c","restriction":"Atom"},{"name":"d","external_name":"d","restriction":"Atom"}],"return_type":"Float64","visibility":"Public","body":"dihedral(a.coords, b.coords, c.coords, d.coords)"}},{"html_id":"dihedral(a:Vec3,b:Vec3,c:Vec3):Float64-class-method","name":"dihedral","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"}],"args_string":"(a : Vec3, b : Vec3, c : Vec3) : Float64","args_html":"(a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, c : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":50,"url":null},"def":{"name":"dihedral","args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"}],"return_type":"Float64","visibility":"Public","body":"ab = a.cross(b)\nangle = angle(ab, b.cross(c))\n(ab.dot(c)) < 0 ? -angle : angle\n"}},{"html_id":"distance(cell:Parallelepiped,a:Vec3,b:Vec3):Float64-class-method","name":"distance","abstract":false,"args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"}],"args_string":"(cell : Parallelepiped, a : Vec3, b : Vec3) : Float64","args_html":"(cell : <a href=\"../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":88,"url":null},"def":{"name":"distance","args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"}],"return_type":"Float64","visibility":"Public","body":"Math.sqrt(distance2(cell, a, b))"}},{"html_id":"distance(cell:Parallelepiped,a:Atom,b:Atom):Float64-class-method","name":"distance","abstract":false,"args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"}],"args_string":"(cell : Parallelepiped, a : Atom, b : Atom) : Float64","args_html":"(cell : <a href=\"../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":84,"url":null},"def":{"name":"distance","args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"}],"return_type":"Float64","visibility":"Public","body":"distance(cell, a.coords, b.coords)"}},{"html_id":"distance(a:Vec3,b:Vec3):Float64-class-method","name":"distance","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"}],"args_string":"(a : Vec3, b : Vec3) : Float64","args_html":"(a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":80,"url":null},"def":{"name":"distance","args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"}],"return_type":"Float64","visibility":"Public","body":"Math.sqrt(distance2(a, b))"}},{"html_id":"distance(q1:Quat,q2:Quat):Float64-class-method","name":"distance","doc":"Returns the distance between two quaternions.\n\nIt uses the formula `acos(2 * p·q^2 - 1)`, which returns the angular\ndistance (0 to π) between the orientations represented by the\ntwo quaternions. Taken from\n[https://math.stackexchange.com/a/90098](https://math.stackexchange.com/a/90098).","summary":"<p>Returns the distance between two quaternions.</p>","abstract":false,"args":[{"name":"q1","external_name":"q1","restriction":"Quat"},{"name":"q2","external_name":"q2","restriction":"Quat"}],"args_string":"(q1 : Quat, q2 : Quat) : Float64","args_html":"(q1 : <a href=\"../Chem/Spatial/Quat.html\">Quat</a>, q2 : <a href=\"../Chem/Spatial/Quat.html\">Quat</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":98,"url":null},"def":{"name":"distance","args":[{"name":"q1","external_name":"q1","restriction":"Quat"},{"name":"q2","external_name":"q2","restriction":"Quat"}],"return_type":"Float64","visibility":"Public","body":"Math.acos((2 * ((q1.dot(q2)) ** 2)) - 1)"}},{"html_id":"distance(a:Atom,b:Atom):Float64-class-method","name":"distance","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"}],"args_string":"(a : Atom, b : Atom) : Float64","args_html":"(a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":75,"url":null},"def":{"name":"distance","args":[{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"}],"return_type":"Float64","visibility":"Public","body":"distance(a.coords, b.coords)"}},{"html_id":"distance2(cell:Parallelepiped,a:Vec3,b:Vec3):Float64-class-method","name":"distance2","abstract":false,"args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"}],"args_string":"(cell : Parallelepiped, a : Vec3, b : Vec3) : Float64","args_html":"(cell : <a href=\"../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":116,"url":null},"def":{"name":"distance2","args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"}],"return_type":"Float64","visibility":"Public","body":"distance2(a, cell.wrap(b, around: a))"}},{"html_id":"distance2(cell:Parallelepiped,a:Atom,b:Atom):Float64-class-method","name":"distance2","abstract":false,"args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"}],"args_string":"(cell : Parallelepiped, a : Atom, b : Atom) : Float64","args_html":"(cell : <a href=\"../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":112,"url":null},"def":{"name":"distance2","args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"}],"return_type":"Float64","visibility":"Public","body":"distance2(cell, a.coords, b.coords)"}},{"html_id":"distance2(a:Vec3,b:Vec3):Float64-class-method","name":"distance2","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"}],"args_string":"(a : Vec3, b : Vec3) : Float64","args_html":"(a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":108,"url":null},"def":{"name":"distance2","args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"}],"return_type":"Float64","visibility":"Public","body":"(((a.x - b.x) ** 2) + ((a.y - b.y) ** 2)) + ((a.z - b.z) ** 2)"}},{"html_id":"distance2(a:Atom,b:Atom):Float64-class-method","name":"distance2","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"}],"args_string":"(a : Atom, b : Atom) : Float64","args_html":"(a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":103,"url":null},"def":{"name":"distance2","args":[{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"}],"return_type":"Float64","visibility":"Public","body":"distance2(a.coords, b.coords)"}},{"html_id":"improper(cell:Parallelepiped,a:Vec3,b:Vec3,c:Vec3,d:Vec3):Float64-class-method","name":"improper","abstract":false,"args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"},{"name":"d","external_name":"d","restriction":"Vec3"}],"args_string":"(cell : Parallelepiped, a : Vec3, b : Vec3, c : Vec3, d : Vec3) : Float64","args_html":"(cell : <a href=\"../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, c : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, d : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":132,"url":null},"def":{"name":"improper","args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"},{"name":"d","external_name":"d","restriction":"Vec3"}],"return_type":"Float64","visibility":"Public","body":"dihedral(cell, b, a, c, d)"}},{"html_id":"improper(cell:Parallelepiped,a:Atom,b:Atom,c:Atom,d:Atom):Float64-class-method","name":"improper","abstract":false,"args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"},{"name":"c","external_name":"c","restriction":"Atom"},{"name":"d","external_name":"d","restriction":"Atom"}],"args_string":"(cell : Parallelepiped, a : Atom, b : Atom, c : Atom, d : Atom) : Float64","args_html":"(cell : <a href=\"../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>, c : <a href=\"../Chem/Atom.html\">Atom</a>, d : <a href=\"../Chem/Atom.html\">Atom</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":128,"url":null},"def":{"name":"improper","args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"},{"name":"c","external_name":"c","restriction":"Atom"},{"name":"d","external_name":"d","restriction":"Atom"}],"return_type":"Float64","visibility":"Public","body":"improper(cell, a.coords, b.coords, c.coords, d.coords)"}},{"html_id":"improper(a:Vec3,b:Vec3,c:Vec3,d:Vec3):Float64-class-method","name":"improper","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"},{"name":"d","external_name":"d","restriction":"Vec3"}],"args_string":"(a : Vec3, b : Vec3, c : Vec3, d : Vec3) : Float64","args_html":"(a : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, b : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, c : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>, d : <a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":124,"url":null},"def":{"name":"improper","args":[{"name":"a","external_name":"a","restriction":"Vec3"},{"name":"b","external_name":"b","restriction":"Vec3"},{"name":"c","external_name":"c","restriction":"Vec3"},{"name":"d","external_name":"d","restriction":"Vec3"}],"return_type":"Float64","visibility":"Public","body":"dihedral(b, a, c, d)"}},{"html_id":"improper(a:Atom,b:Atom,c:Atom,d:Atom):Float64-class-method","name":"improper","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"},{"name":"c","external_name":"c","restriction":"Atom"},{"name":"d","external_name":"d","restriction":"Atom"}],"args_string":"(a : Atom, b : Atom, c : Atom, d : Atom) : Float64","args_html":"(a : <a href=\"../Chem/Atom.html\">Atom</a>, b : <a href=\"../Chem/Atom.html\">Atom</a>, c : <a href=\"../Chem/Atom.html\">Atom</a>, d : <a href=\"../Chem/Atom.html\">Atom</a>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":120,"url":null},"def":{"name":"improper","args":[{"name":"a","external_name":"a","restriction":"Atom"},{"name":"b","external_name":"b","restriction":"Atom"},{"name":"c","external_name":"c","restriction":"Atom"},{"name":"d","external_name":"d","restriction":"Atom"}],"return_type":"Float64","visibility":"Public","body":"improper(a.coords, b.coords, c.coords, d.coords)"}},{"html_id":"qcp(pos:Indexable(Vec3),ref_pos:Indexable(Vec3),weights:Indexable(Float64)|Nil=nil):Tuple(Quat,Float64)-class-method","name":"qcp","doc":"Computes the optimal rotation and minimum root mean square deviation\n(RMSD) in Å between two sets of coordinates *pos* and *ref_pos*\nusing the quaternion-based characteristic polynomial (QCP) method\n[Theobald2005].\n\nThe QCP method is among the fastest known methods to determine the\noptimal least-squares rotation matrix between the two coordinate\nsets. The algorithm defines the problem of superposition as finding\nthe root of a quaternion-based characteristic polynomial of a \"key\"\nmatrix. Such approach avoids the costly eigen decomposition and\nmatrix inversion operations, which are commonly employed in other\nmethods.\n\nIn the QCP method, the RMSD is first evaluated by solving for the\nmost positive eigenvalue of the 4×4 key matrix using a\nNewton-Raphson algorithm that quickly finds the largest root\n(eigenvalue) from the characteristic polynomial. The minimum RMSD is\nthen easily calculated from the largest eigenvalue. If not `nil`,\nthe *weights* determine the relative weights of each coordinate when\ncalculating the intermediate inner products. The optimal rotation is\ngiven by the corresponding eigenvector, which can be calculated from\na column of the adjoint matrix [Liu2009].\n\nReference C implementation found at\n[https://theobald.brandeis.edu/qcp]().\n\nWARNING: Coordinate sets must be centered at the origin.\n\nNOTE: Prefer using the `Spatial.rmsd` methods, which takes care of\ncentering the coordinates and whether or not the coordinate sets\nshould be superimposed first.\n\n### References\n\n- [[Theobald2005](https://dx.doi.org/10.1107/S0108767305015266)]\n  Theobald, D. L. Rapid calculation of RMSDs using a\n  quaternion-based characteristic polynomial. *Acta Cryst.*,\n  **2005**, *A61*, 478–480.\n- [[Liu2009](https://dx.doi.org/10.1002/jcc.21439)] Liu, P.,\n  Agrafiotis, D. K., & Theobald, D. L. Fast determination of the\n  optimal rotational matrix for macromolecular superpositions. *J.\n  Comput. Chem.*, **2010**, *31* (7), 1561–1563.","summary":"<p>Computes the optimal rotation and minimum root mean square deviation (RMSD) in Å between two sets of coordinates <em>pos</em> and <em>ref_pos</em> using the quaternion-based characteristic polynomial (QCP) method [Theobald2005].</p>","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"Indexable(Vec3)"},{"name":"ref_pos","external_name":"ref_pos","restriction":"Indexable(Vec3)"},{"name":"weights","default_value":"nil","external_name":"weights","restriction":"Indexable(Float64) | ::Nil"}],"args_string":"(pos : Indexable(Vec3), ref_pos : Indexable(Vec3), weights : Indexable(Float64) | Nil = nil) : Tuple(Quat, Float64)","args_html":"(pos : Indexable(<a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>), ref_pos : Indexable(<a href=\"../Chem/Spatial/Vec3.html\">Vec3</a>), weights : Indexable(Float64) | Nil = <span class=\"n\">nil</span>) : Tuple(<a href=\"../Chem/Spatial/Quat.html\">Quat</a>, Float64)","location":{"filename":"src/chem/spatial/qcp.cr","line_number":44,"url":null},"def":{"name":"qcp","args":[{"name":"pos","external_name":"pos","restriction":"Indexable(Vec3)"},{"name":"ref_pos","external_name":"ref_pos","restriction":"Indexable(Vec3)"},{"name":"weights","default_value":"nil","external_name":"weights","restriction":"Indexable(Float64) | ::Nil"}],"return_type":"Tuple(Quat, Float64)","visibility":"Public","body":"if pos.size != ref_pos.size\n  raise(ArgumentError.new(\"Incompatible coordinates\"))\nend\ng1, g2, m = inner_products(pos, ref_pos, weights)\nsxx, sxy, sxz, syx, syy, syz, szx, szy, szz = m\nsxx2 = sxx ** 2\nsyy2 = syy ** 2\nszz2 = szz ** 2\nsxy2 = sxy ** 2\nsyz2 = syz ** 2\nsxz2 = sxz ** 2\nsyx2 = syx ** 2\nszy2 = szy ** 2\nszx2 = szx ** 2\nsyzszymsyyszz2 = 2.0 * ((syz * szy) - (syy * szz))\nsxx2syy2szz2syz2szy2 = (((syy2 + szz2) - sxx2) + syz2) + szy2\nsxzpszx = sxz + szx\nsyzpszy = syz + szy\nsxypsyx = sxy + syx\nsyzmszy = syz - szy\nsxzmszx = sxz - szx\nsxymsyx = sxy - syx\nsxxpsyy = sxx + syy\nsxxmsyy = sxx - syy\nc2 = -2.0 * ((((((((sxx2 + syy2) + szz2) + sxy2) + syx2) + sxz2) + szx2) + syz2) + szy2)\nc1 = 8.0 * (((((((sxx * syz) * szy) + ((syy * szx) * sxz)) + ((szz * sxy) * syx)) - ((sxx * syy) * szz)) - ((syz * szx) * sxy)) - ((szy * syx) * sxz))\nc0 = ((((((((sxy2 + sxz2) - syx2) - szx2) ** 2) + ((sxx2syy2szz2syz2szy2 + syzszymsyyszz2) * (sxx2syy2szz2syz2szy2 - syzszymsyyszz2))) + ((((-sxzpszx) * syzmszy) + (sxymsyx * (sxxmsyy - szz))) * (((-sxzmszx) * syzpszy) + (sxymsyx * (sxxmsyy + szz))))) + ((((-sxzpszx) * syzpszy) - (sxypsyx * (sxxpsyy - szz))) * (((-sxzmszx) * syzmszy) - (sxypsyx * (sxxpsyy + szz))))) + ((((+sxypsyx) * syzpszy) + (sxzpszx * (sxxmsyy + szz))) * (((-sxymsyx) * syzmszy) + (sxzpszx * (sxxpsyy + szz))))) + ((((+sxypsyx) * syzmszy) + (sxzmszx * (sxxmsyy - szz))) * (((-sxymsyx) * syzpszy) + (sxzmszx * (sxxpsyy - szz))))\nl_max = find_largest_root((g1 + g2) * 0.5, c0, c1, c2)\nrmsd = Math.sqrt((((g1 + g2) - (2 * l_max)) / pos.size).abs)\nk11 = (sxxpsyy + szz) - l_max\nk12 = syzmszy\nk13 = -sxzmszx\nk14 = sxymsyx\nk21 = syzmszy\nk22 = (sxxmsyy - szz) - l_max\nk23 = sxypsyx\nk24 = sxzpszx\nk31 = k13\nk32 = k23\nk33 = ((syy - sxx) - szz) - l_max\nk34 = syzpszy\nk41 = k14\nk42 = k24\nk43 = k34\nk44 = (szz - sxxpsyy) - l_max\nk3344_4334 = (k33 * k44) - (k43 * k34)\nk3244_4234 = (k32 * k44) - (k42 * k34)\nk3243_4233 = (k32 * k43) - (k42 * k33)\nk3143_4133 = (k31 * k43) - (k41 * k33)\nk3144_4134 = (k31 * k44) - (k41 * k34)\nk3142_4132 = (k31 * k42) - (k41 * k32)\nq1 = ((k22 * k3344_4334) - (k23 * k3244_4234)) + (k24 * k3243_4233)\nq2 = (((-k21) * k3344_4334) + (k23 * k3144_4134)) - (k24 * k3143_4133)\nq3 = ((k21 * k3244_4234) - (k22 * k3144_4134)) + (k24 * k3142_4132)\nq4 = (((-k21) * k3243_4233) + (k22 * k3143_4133)) - (k23 * k3142_4132)\nqabs2 = (((q1 ** 2) + (q2 ** 2)) + (q3 ** 2)) + (q4 ** 2)\nif qabs2 < 1e-6\n  q1 = ((k12 * k3344_4334) - (k13 * k3244_4234)) + (k14 * k3243_4233)\n  q2 = (((-k11) * k3344_4334) + (k13 * k3144_4134)) - (k14 * k3143_4133)\n  q3 = ((k11 * k3244_4234) - (k12 * k3144_4134)) + (k14 * k3142_4132)\n  q4 = (((-k11) * k3243_4233) + (k12 * k3143_4133)) - (k13 * k3142_4132)\n  qabs2 = (((q1 ** 2) + (q2 ** 2)) + (q3 ** 2)) + (q4 ** 2)\n  if qabs2 < 1e-6\n    k1324_1423 = (k13 * k24) - (k14 * k23)\n    k1224_1422 = (k12 * k24) - (k14 * k22)\n    k1223_1322 = (k12 * k23) - (k13 * k22)\n    k1124_1421 = (k11 * k24) - (k14 * k21)\n    k1123_1321 = (k11 * k23) - (k13 * k21)\n    k1122_1221 = (k11 * k22) - (k12 * k21)\n    q1 = ((k42 * k1324_1423) - (k43 * k1224_1422)) + (k44 * k1223_1322)\n    q2 = (((-k41) * k1324_1423) + (k43 * k1124_1421)) - (k44 * k1123_1321)\n    q3 = ((k41 * k1224_1422) - (k42 * k1124_1421)) + (k44 * k1122_1221)\n    q4 = (((-k41) * k1223_1322) + (k42 * k1123_1321)) - (k43 * k1122_1221)\n    qabs2 = (((q1 ** 2) + (q2 ** 2)) + (q3 ** 2)) + (q4 ** 2)\n    if qabs2 < 1e-6\n      q1 = ((k32 * k1324_1423) - (k33 * k1224_1422)) + (k34 * k1223_1322)\n      q2 = (((-k31) * k1324_1423) + (k33 * k1124_1421)) - (k34 * k1123_1321)\n      q3 = ((k31 * k1224_1422) - (k32 * k1124_1421)) + (k34 * k1122_1221)\n      q4 = (((-k31) * k1223_1322) + (k32 * k1123_1321)) - (k33 * k1122_1221)\n      qabs2 = (((q1 ** 2) + (q2 ** 2)) + (q3 ** 2)) + (q4 ** 2)\n      if qabs2 < 1e-6\n        return {Quat.identity, rmsd}\n      end\n    end\n  end\nend\n{Quat[-q1, q2, q3, q4], rmsd}\n"}},{"html_id":"rmsd(pos:CoordinatesProxy,ref_pos:CoordinatesProxy,weights:Indexable(Float64),minimize:Bool=false):Float64-class-method","name":"rmsd","doc":"Returns the weighted root mean square deviation (RMSD) in Å between\ntwo sets of coordinates *pos* and *ref_pos*.\n\nThe RMSD is defined as the weighted average Euclidean distance\nbetween the two coordinates sets *A* and *B*. The *weights* (e.g.,\natom masses) determine the relative weights of each coordinate when\ncalculating the RMSD.\n\nIf the minimum RMSD is desired (*minimize* is `true`), the RMSD will\nbe computed using the quaternion-based characteristic polynomial\n(QCP) method (refer to `.qcp`). This method superimpose *pos* onto\n*ref_pos* by computing the optimal rotation between the two\ncoordinate sets before calculating the RMSD.","summary":"<p>Returns the weighted root mean square deviation (RMSD) in Å between two sets of coordinates <em>pos</em> and <em>ref_pos</em>.</p>","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"CoordinatesProxy"},{"name":"ref_pos","external_name":"ref_pos","restriction":"CoordinatesProxy"},{"name":"weights","external_name":"weights","restriction":"Indexable(Float64)"},{"name":"minimize","default_value":"false","external_name":"minimize","restriction":"Bool"}],"args_string":"(pos : CoordinatesProxy, ref_pos : CoordinatesProxy, weights : Indexable(Float64), minimize : Bool = false) : Float64","args_html":"(pos : <a href=\"../Chem/Spatial/CoordinatesProxy.html\">CoordinatesProxy</a>, ref_pos : <a href=\"../Chem/Spatial/CoordinatesProxy.html\">CoordinatesProxy</a>, weights : Indexable(Float64), minimize : Bool = <span class=\"n\">false</span>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":149,"url":null},"def":{"name":"rmsd","args":[{"name":"pos","external_name":"pos","restriction":"CoordinatesProxy"},{"name":"ref_pos","external_name":"ref_pos","restriction":"CoordinatesProxy"},{"name":"weights","external_name":"weights","restriction":"Indexable(Float64)"},{"name":"minimize","default_value":"false","external_name":"minimize","restriction":"Bool"}],"return_type":"Float64","visibility":"Public","body":"pos = pos.to_a\nref_pos = ref_pos.to_a\nif pos.size != ref_pos.size\n  raise(ArgumentError.new(\"Incompatible coordinates\"))\nend\nif minimize\n  center = pos.average(weights)\n  pos.map!(&.-(center))\n  center = ref_pos.average(weights)\n  ref_pos.map!(&.-(center))\n  weight_mean = weights.mean\n  weights.map!(&./(weight_mean))\n  _, rmsd = Spatial.qcp(pos, ref_pos, weights)\n  rmsd\nelse\n  Math.sqrt((0...pos.size).average(weights) do |i|\n    Spatial.distance2(pos.unsafe_fetch(i), ref_pos.unsafe_fetch(i))\n  end)\nend\n"}},{"html_id":"rmsd(pos:CoordinatesProxy,ref_pos:CoordinatesProxy,minimize:Bool=false):Float64-class-method","name":"rmsd","doc":"Returns the root mean square deviation (RMSD) in Å between two sets\nof coordinates *pos* and *ref_pos*.\n\nThe RMSD is defined as the average Euclidean distance between the\ntwo coordinates sets *A* and *B*.\n\nIf the minimum RMSD is desired (*minimize* is `true`), the RMSD will\nbe computed using the quaternion-based characteristic polynomial\n(QCP) method (refer to `.qcp`). This method superimpose *pos* onto\n*ref_pos* by computing the optimal rotation between the two\ncoordinate sets before calculating the RMSD.","summary":"<p>Returns the root mean square deviation (RMSD) in Å between two sets of coordinates <em>pos</em> and <em>ref_pos</em>.</p>","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"CoordinatesProxy"},{"name":"ref_pos","external_name":"ref_pos","restriction":"CoordinatesProxy"},{"name":"minimize","default_value":"false","external_name":"minimize","restriction":"Bool"}],"args_string":"(pos : CoordinatesProxy, ref_pos : CoordinatesProxy, minimize : Bool = false) : Float64","args_html":"(pos : <a href=\"../Chem/Spatial/CoordinatesProxy.html\">CoordinatesProxy</a>, ref_pos : <a href=\"../Chem/Spatial/CoordinatesProxy.html\">CoordinatesProxy</a>, minimize : Bool = <span class=\"n\">false</span>) : Float64","location":{"filename":"src/chem/spatial.cr","line_number":191,"url":null},"def":{"name":"rmsd","args":[{"name":"pos","external_name":"pos","restriction":"CoordinatesProxy"},{"name":"ref_pos","external_name":"ref_pos","restriction":"CoordinatesProxy"},{"name":"minimize","default_value":"false","external_name":"minimize","restriction":"Bool"}],"return_type":"Float64","visibility":"Public","body":"pos = pos.to_a\nref_pos = ref_pos.to_a\nif minimize\n  center = pos.mean\n  pos.map!(&.-(center))\n  center = ref_pos.mean\n  ref_pos.map!(&.-(center))\n  _, rmsd = Spatial.qcp(pos, ref_pos)\n  rmsd\nelse\n  Math.sqrt((0...pos.size).mean do |i|\n    Spatial.distance2(pos.unsafe_fetch(i), ref_pos.unsafe_fetch(i))\n  end)\nend\n"}},{"html_id":"rmsd(atoms:AtomCollection|CoordinatesProxy,other:AtomCollection|CoordinatesProxy,*args,**options)-class-method","name":"rmsd","doc":"Returns the root mean square deviation (RMSD) in Å between two atom\ncollections. This is a convenience overload so arguments are\nforwarded to specific `.rmsd` methods.","summary":"<p>Returns the root mean square deviation (RMSD) in Å between two atom collections.</p>","abstract":false,"args":[{"name":"atoms","external_name":"atoms","restriction":"AtomCollection | CoordinatesProxy"},{"name":"other","external_name":"other","restriction":"AtomCollection | CoordinatesProxy"},{"name":"args","external_name":"args","restriction":""}],"args_string":"(atoms : AtomCollection | CoordinatesProxy, other : AtomCollection | CoordinatesProxy, *args, **options)","args_html":"(atoms : <a href=\"../Chem/AtomCollection.html\">AtomCollection</a> | <a href=\"../Chem/Spatial/CoordinatesProxy.html\">CoordinatesProxy</a>, other : <a href=\"../Chem/AtomCollection.html\">AtomCollection</a> | <a href=\"../Chem/Spatial/CoordinatesProxy.html\">CoordinatesProxy</a>, *args, **options)","location":{"filename":"src/chem/spatial.cr","line_number":232,"url":null},"def":{"name":"rmsd","args":[{"name":"atoms","external_name":"atoms","restriction":"AtomCollection | CoordinatesProxy"},{"name":"other","external_name":"other","restriction":"AtomCollection | CoordinatesProxy"},{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":2,"visibility":"Public","body":"if atoms.is_a?(CoordinatesProxy)\nelse\n  atoms = atoms.coords\nend\nif other.is_a?(CoordinatesProxy)\nelse\n  other = other.coords\nend\nrmsd(atoms, other, *args, **options)\n"}}],"types":[{"html_id":"chem.cr/Chem/Spatial/CoordinatesProxy","path":"Chem/Spatial/CoordinatesProxy.html","kind":"struct","full_name":"Chem::Spatial::CoordinatesProxy","name":"CoordinatesProxy","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"constructors":[{"html_id":"new(atoms:AtomCollection,cell:Parallelepiped|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"},{"name":"cell","default_value":"nil","external_name":"cell","restriction":"Parallelepiped | ::Nil"}],"args_string":"(atoms : AtomCollection, cell : Parallelepiped | Nil = nil)","args_html":"(atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>, cell : <a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a> | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"},{"name":"cell","default_value":"nil","external_name":"cell","restriction":"Parallelepiped | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(atoms, cell)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(rhs:Enumerable(Vec3)):Bool-instance-method","name":"==","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Enumerable(Vec3)"}],"args_string":"(rhs : Enumerable(Vec3)) : Bool","args_html":"(rhs : <a href=\"../../Enumerable.html\">Enumerable</a>(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)) : Bool","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":9,"url":null},"def":{"name":"==","args":[{"name":"rhs","external_name":"rhs","restriction":"Enumerable(Vec3)"}],"return_type":"Bool","visibility":"Public","body":"zip(rhs) do |a, b|\n  if a != b\n    return false\n  end\nend\ntrue\n"}},{"html_id":"align_to(other:self):self-instance-method","name":"align_to","doc":"Superimposes the coordinates onto *other*. Raises `ArgumentError`\nif the two coordinate sets are of different size.\n\n```\nconformers = Array(Structure).read \"E20_conformers.mol2\"\nref_pos = conformers[0].coords\npos = conformers[1].coords\nSpatial.rmsd(pos, ref_pos)   # => 7.933736\npos.center == ref_pos.center # => false\npos.align_to(res_pos)\nSpatial.rmsd(pos, ref_pos)   # => 3.463298\npos.center == ref_pos.center # => true\n```\n\nThe transformation is obtained via the\n`Transform.aligning(pos, ref_pos)` method, which computes\nthe optimal rotation matrix by minimizing the root mean square\ndeviation (RMSD) using the QCP method (refer to `Spatial.qcp` for\ndetails).","summary":"<p>Superimposes the coordinates onto <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : self","args_html":"(other : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":33,"url":null},"def":{"name":"align_to","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"self","visibility":"Public","body":"transform(Transform.aligning(self, other))"}},{"html_id":"bounds:Parallelepiped-instance-method","name":"bounds","abstract":false,"location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":37,"url":null},"def":{"name":"bounds","return_type":"Parallelepiped","visibility":"Public","body":"min = StaticArray[Float64::MAX, Float64::MAX, Float64::MAX]\nmax = StaticArray[Float64::MIN, Float64::MIN, Float64::MIN]\neach do |vec|\n  3.times do |i|\n    if vec[i] < (min.unsafe_fetch(i))\n      min[i] = vec[i]\n    end\n    if vec[i] > (max.unsafe_fetch(i))\n      max[i] = vec[i]\n    end\n  end\nend\nParallelepiped.new(Vec3[min[0], min[1], min[2]], Vec3[max[0], max[1], max[2]])\n"}},{"html_id":"center:Vec3-instance-method","name":"center","abstract":false,"location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":49,"url":null},"def":{"name":"center","return_type":"Vec3","visibility":"Public","body":"sum / @atoms.n_atoms"}},{"html_id":"center_along(vec:Vec3):self-instance-method","name":"center_along","doc":"Translates coordinates so that the center is at the middle of *vec*.\n\n```\nstructure = Structure.read \"path/to/file\"\nstructure.coords.center # => [1.5 2.0 3.2]\nstructure.coords.center_along Vec3[0, 10, 0]\nstructure.coords.center # => [1.5 5.0 3.2]\n```","summary":"<p>Translates coordinates so that the center is at the middle of <em>vec</em>.</p>","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : self","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":61,"url":null},"def":{"name":"center_along","args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"nvec = vec.normalize\ntranslate((vec / 2) - ((center.dot(nvec)) * nvec))\n"}},{"html_id":"center_at(vec:Vec3):self-instance-method","name":"center_at","doc":"Translates coordinates so that the center is at *vec*.\n\n```\nstructure = Structure.read \"path/to/file\"\nstructure.coords.center # => [1.0 2.0 3.0]\nstructure.coords.center_at Vec3[10, 20, 30]\nstructure.coords.center # => [10 20 30]\n```","summary":"<p>Translates coordinates so that the center is at <em>vec</em>.</p>","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : self","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":74,"url":null},"def":{"name":"center_at","args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"translate(vec - center)"}},{"html_id":"center_at_cell:self-instance-method","name":"center_at_cell","doc":"Translates coordinates so that they are centered at the primary unit cell.\n\nRaises NotPeriodicError if coordinates are not periodic.\n\n```\nstructure = Structure.read \"path/to/file\"\nstructure.cell          # => [[1.0 0.0 0.0] [0.0 25.0 0.0] [0.0 0.0 213]]\nstructure.coords.center # => [1.0 2.0 3.0]\nstructure.coords.center_at_cell\nstructure.coords.center # => [0.5 12.5 106.5]\n\nstructure = Structure.read \"path/to/non_periodic_file\"\nstructure.coords.center_at_cell # raises NotPeriodicError\n```","summary":"<p>Translates coordinates so that they are centered at the primary unit cell.</p>","abstract":false,"location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":92,"url":null},"def":{"name":"center_at_cell","return_type":"self","visibility":"Public","body":"if cell = @cell\nelse\n  raise(NotPeriodicError.new)\nend\ncenter_at(cell.center)\n"}},{"html_id":"center_at_origin:self-instance-method","name":"center_at_origin","doc":"Translates coordinates so that the center is at the origin.\n\n```\nstructure = Structure.read \"path/to/file\"\nstructure.coords.center # => [1.0 2.0 3.0]\nstructure.coords.center_at_origin\nstructure.coords.center # => [0.0 0.0 0.0]\n```","summary":"<p>Translates coordinates so that the center is at the origin.</p>","abstract":false,"location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":105,"url":null},"def":{"name":"center_at_origin","return_type":"self","visibility":"Public","body":"center_at(Vec3.zero)"}},{"html_id":"com:Vec3-instance-method","name":"com","doc":"Returns the center of mass.\n\n```\nstructure = Chem::Structure.build do\n  atom :O, Vec3[1, 2, 3]\n  atom :H, Vec3[4, 5, 6]\n  atom :H, Vec3[7, 8, 9]\nend\nstructure.coords.center # => [4.0 5.0 6.0]\nstructure.coords.com    # => [1.5035248 2.5035248 3.5035248]\n```","summary":"<p>Returns the center of mass.</p>","abstract":false,"location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":120,"url":null},"def":{"name":"com","return_type":"Vec3","visibility":"Public","body":"center = Vec3[0, 0, 0]\ntotal_mass = 0.0\neach_with_atom do |vec, atom|\n  center = center + (atom.mass * vec)\n  total_mass = total_mass + atom.mass\nend\ncenter / total_mass\n"}},{"html_id":"each(fractional:Bool=false):Iterator(Vec3)-instance-method","name":"each","doc":"Must return an `Iterator` over the elements in this collection.","summary":"<p>Must return an <code>Iterator</code> over the elements in this collection.</p>","abstract":false,"args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false) : Iterator(Vec3)","args_html":"(fractional : Bool = <span class=\"n\">false</span>) : Iterator(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":130,"url":null},"def":{"name":"each","args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"return_type":"Iterator(Vec3)","visibility":"Public","body":"if fractional\n  if cell = @cell\n  else\n    raise(NotPeriodicError.new)\n  end\n  FractionalCoordinatesIterator.new(@atoms, cell)\nelse\n  @atoms.each_atom.map(&.coords)\nend"}},{"html_id":"each(fractional:Bool=false,&block:Vec3->)-instance-method","name":"each","doc":"Must yield this collection's elements to the block.","summary":"<p>Must yield this collection's elements to the block.</p>","abstract":false,"args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false, &block : Vec3 -> )","args_html":"(fractional : Bool = <span class=\"n\">false</span>, &block : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> )","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":139,"url":null},"def":{"name":"each","args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Vec3 ->)"},"visibility":"Public","body":"if fractional\n  if cell = @cell\n  else\n    raise(NotPeriodicError.new)\n  end\n  @atoms.each_atom do |atom|\n    yield cell.fract(atom.coords)\n  end\nelse\n  @atoms.each_atom do |atom|\n    yield atom.coords\n  end\nend"}},{"html_id":"each_with_atom(fractional:Bool=false,&block:Vec3,Atom->)-instance-method","name":"each_with_atom","abstract":false,"args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false, &block : Vec3, Atom -> )","args_html":"(fractional : Bool = <span class=\"n\">false</span>, &block : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, <a href=\"../../Chem/Atom.html\">Atom</a> -> )","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":148,"url":null},"def":{"name":"each_with_atom","args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(Vec3, Atom ->)"},"visibility":"Public","body":"iter = @atoms.each_atom\neach(fractional) do |vec|\n  if (  atom = iter.next).is_a?(Atom)\n  else\n    break\n  end\n  yield vec, atom\nend\n"}},{"html_id":"map!(fractional:Bool=false,&block:Vec3->Vec3):self-instance-method","name":"map!","abstract":false,"args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false, &block : Vec3 -> Vec3) : self","args_html":"(fractional : Bool = <span class=\"n\">false</span>, &block : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> -> <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":156,"url":null},"def":{"name":"map!","args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Vec3 -> Vec3)"},"return_type":"self","visibility":"Public","body":"if fractional\n  if cell = @cell\n  else\n    raise(NotPeriodicError.new)\n  end\n  @atoms.each_atom do |atom|\n    atom.coords = cell.cart(yield cell.fract(atom.coords))\n  end\nelse\n  @atoms.each_atom do |atom|\n    atom.coords = yield atom.coords\n  end\nend\nself\n"}},{"html_id":"map_with_atom!(fractional:Bool=false,&block:Vec3,Atom->Vec3):self-instance-method","name":"map_with_atom!","abstract":false,"args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false, &block : Vec3, Atom -> Vec3) : self","args_html":"(fractional : Bool = <span class=\"n\">false</span>, &block : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, <a href=\"../../Chem/Atom.html\">Atom</a> -> <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":168,"url":null},"def":{"name":"map_with_atom!","args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(Vec3, Atom -> Vec3)"},"return_type":"self","visibility":"Public","body":"iter = @atoms.each_atom\nmap!(fractional) do |vec|\n  if (  atom = iter.next).is_a?(Atom)\n  else\n    break\n  end\n  yield vec, atom\nend\nself\n"}},{"html_id":"rotate(x:Number,y:Number,z:Number):self-instance-method","name":"rotate","doc":"Rotates the coordinates by the given Euler angles in degrees.\nDelegates to `Quat.rotation` for computing the rotation.","summary":"<p>Rotates the coordinates by the given Euler angles in degrees.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"args_string":"(x : Number, y : Number, z : Number) : self","args_html":"(x : <a href=\"../../Number.html\">Number</a>, y : <a href=\"../../Number.html\">Number</a>, z : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":179,"url":null},"def":{"name":"rotate","args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"rotate(Quat.rotation(x, y, z))"}},{"html_id":"rotate(aboutrotaxis:Vec3,byangle:Number):self-instance-method","name":"rotate","doc":"Rotates the coordinates about *rotaxis* by *angle* degrees.\nDelegates to `Quat.rotation` for computing the rotation.","summary":"<p>Rotates the coordinates about <em>rotaxis</em> by <em>angle</em> degrees.</p>","abstract":false,"args":[{"name":"rotaxis","external_name":"about","restriction":"Vec3"},{"name":"angle","external_name":"by","restriction":"Number"}],"args_string":"(about rotaxis : Vec3, by angle : Number) : self","args_html":"(about rotaxis : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, by angle : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":185,"url":null},"def":{"name":"rotate","args":[{"name":"rotaxis","external_name":"about","restriction":"Vec3"},{"name":"angle","external_name":"by","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"rotate(Quat.rotation(rotaxis, angle))"}},{"html_id":"rotate(quat:Quat):self-instance-method","name":"rotate","doc":"Rotates the coordinates by the given quaternion.","summary":"<p>Rotates the coordinates by the given quaternion.</p>","abstract":false,"args":[{"name":"quat","external_name":"quat","restriction":"Quat"}],"args_string":"(quat : Quat) : self","args_html":"(quat : <a href=\"../../Chem/Spatial/Quat.html\">Quat</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":190,"url":null},"def":{"name":"rotate","args":[{"name":"quat","external_name":"quat","restriction":"Quat"}],"return_type":"self","visibility":"Public","body":"map!(&.rotate(quat))"}},{"html_id":"to_a(fractional:Bool=false):Array(Vec3)-instance-method","name":"to_a","doc":"Returns an `Array` with all the elements in the collection.\n\n```\n(1..5).to_a # => [1, 2, 3, 4, 5]\n```","summary":"<p>Returns an <code><a href=\"../../Array.html\">Array</a></code> with all the elements in the collection.</p>","abstract":false,"args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false) : Array(Vec3)","args_html":"(fractional : Bool = <span class=\"n\">false</span>) : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":204,"url":null},"def":{"name":"to_a","args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"return_type":"Array(Vec3)","visibility":"Public","body":"ary = [] of Vec3\neach(fractional) do |coords|\n  ary << coords\nend\nary\n"}},{"html_id":"to_cart!:self-instance-method","name":"to_cart!","abstract":false,"location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":210,"url":null},"def":{"name":"to_cart!","return_type":"self","visibility":"Public","body":"if cell = @cell\nelse\n  raise(NotPeriodicError.new)\nend\nmap! do |vec|\n  cell.cart(vec)\nend\n"}},{"html_id":"to_fract!:self-instance-method","name":"to_fract!","abstract":false,"location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":215,"url":null},"def":{"name":"to_fract!","return_type":"self","visibility":"Public","body":"if cell = @cell\nelse\n  raise(NotPeriodicError.new)\nend\nmap! do |vec|\n  cell.fract(vec)\nend\n"}},{"html_id":"transform(transform:Transform):self-instance-method","name":"transform","doc":"Transforms the coordinates by the given transformation.","summary":"<p>Transforms the coordinates by the given transformation.</p>","abstract":false,"args":[{"name":"transform","external_name":"transform","restriction":"Transform"}],"args_string":"(transform : Transform) : self","args_html":"(transform : <a href=\"../../Chem/Spatial/Transform.html\">Transform</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":195,"url":null},"def":{"name":"transform","args":[{"name":"transform","external_name":"transform","restriction":"Transform"}],"return_type":"self","visibility":"Public","body":"map!(&.transform(transform))"}},{"html_id":"translate(byoffset:Vec3):self-instance-method","name":"translate","doc":"Translates the coordinates by the given offset.","summary":"<p>Translates the coordinates by the given offset.</p>","abstract":false,"args":[{"name":"offset","external_name":"by","restriction":"Vec3"}],"args_string":"(by offset : Vec3) : self","args_html":"(by offset : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":200,"url":null},"def":{"name":"translate","args":[{"name":"offset","external_name":"by","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"map!(&.translate(offset))"}},{"html_id":"unwrap:self-instance-method","name":"unwrap","abstract":false,"location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":220,"url":null},"def":{"name":"unwrap","return_type":"self","visibility":"Public","body":"if cell = @cell\nelse\n  raise(Spatial::NotPeriodicError.new)\nend\nto_fract!\nmoved_atoms = Set(Atom).new\n@atoms.each_fragment do |fragment|\n  assemble_fragment(fragment[0], fragment[0].coords, moved_atoms)\n  fragment.coords.translate(-fragment.coords.center.map(&.floor))\n  moved_atoms.clear\nend\nto_cart!\nself\n"}},{"html_id":"wrap(aroundcenter:Vec3|Nil=nil):self-instance-method","name":"wrap","abstract":false,"args":[{"name":"center","default_value":"nil","external_name":"around","restriction":"Vec3 | ::Nil"}],"args_string":"(around center : Vec3 | Nil = nil) : self","args_html":"(around center : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> | Nil = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":244,"url":null},"def":{"name":"wrap","args":[{"name":"center","default_value":"nil","external_name":"around","restriction":"Vec3 | ::Nil"}],"return_type":"self","visibility":"Public","body":"if cell = @cell\nelse\n  raise(NotPeriodicError.new)\nend\nwrap(cell, center)\n"}},{"html_id":"wrap(cell:Parallelepiped,aroundcenter:Vec3|Nil=nil):self-instance-method","name":"wrap","abstract":false,"args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"center","default_value":"nil","external_name":"around","restriction":"Vec3 | ::Nil"}],"args_string":"(cell : Parallelepiped, around center : Vec3 | Nil = nil) : self","args_html":"(cell : <a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, around center : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> | Nil = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/coordinates_proxy.cr","line_number":249,"url":null},"def":{"name":"wrap","args":[{"name":"cell","external_name":"cell","restriction":"Parallelepiped"},{"name":"center","default_value":"nil","external_name":"around","restriction":"Vec3 | ::Nil"}],"return_type":"self","visibility":"Public","body":"center || (center = cell.center)\nif cell.orthogonal?\n  vecs = cell.basisvec\n  normed_vecs = vecs.map(&.normalize)\n  map! do |vec|\n    d = vec - center\n    3.times do |i|\n      fd = (d.dot(normed_vecs[i])) / vecs[i].abs\n      if fd.abs > 0.5\n        vec = vec - (fd.round * vecs[i])\n      end\n    end\n    vec\n  end\nelse\n  offset = (cell.fract(center)) - Vec3[0.5, 0.5, 0.5]\n  map!(fractional: true) do |vec|\n    vec - (vec - offset).map(&.floor)\n  end\nend\nself\n"}}]},{"html_id":"chem.cr/Chem/Spatial/Error","path":"Chem/Spatial/Error.html","kind":"class","full_name":"Chem::Spatial::Error","name":"Error","abstract":false,"superclass":{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial.cr","line_number":22,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"chem.cr/Chem/Spatial/NotPeriodicError","kind":"class","full_name":"Chem::Spatial::NotPeriodicError","name":"NotPeriodicError"}],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"}},{"html_id":"chem.cr/Chem/Spatial/FloatTriple","path":"Chem/Spatial/FloatTriple.html","kind":"alias","full_name":"Chem::Spatial::FloatTriple","name":"FloatTriple","abstract":false,"locations":[{"filename":"src/chem/spatial.cr","line_number":16,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":true,"aliased":"Tuple(Float64, Float64, Float64)","aliased_html":"{Float64, Float64, Float64}","const":false,"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":"TODO: Move aliases to Chem","summary":"<p><span class=\"flag orange\">TODO</span>  Move aliases to Chem</p>"},{"html_id":"chem.cr/Chem/Spatial/Grid","path":"Chem/Spatial/Grid.html","kind":"class","full_name":"Chem::Spatial::Grid","name":"Grid","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/register_format.cr","line_number":270,"url":null},{"filename":"src/chem/spatial/grid.cr","line_number":6,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Indexable","kind":"module","full_name":"Indexable","name":"Indexable"}],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":"TODO: add support for non-cubic grids (use cell instead of bounds?)\n      - i to coords: origin.x + (i / nx) * cell.a\n      - coords to i: ?\nTODO: implement functionality from vmd's volmap","summary":"<p><span class=\"flag orange\">TODO</span>  add support for non-cubic grids (use cell instead of bounds?)       - i to coords: origin.x + (i / nx) * cell.a       - coords to i: ? TODO: implement functionality from vmd's volmap</p>","constructors":[{"html_id":"[](ni:Int,nj:Int,nk:Int):self-class-method","name":"[]","abstract":false,"args":[{"name":"ni","external_name":"ni","restriction":"Int"},{"name":"nj","external_name":"nj","restriction":"Int"},{"name":"nk","external_name":"nk","restriction":"Int"}],"args_string":"(ni : Int, nj : Int, nk : Int) : self","args_html":"(ni : Int, nj : Int, nk : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":40,"url":null},"def":{"name":"[]","args":[{"name":"ni","external_name":"ni","restriction":"Int"},{"name":"nj","external_name":"nj","restriction":"Int"},{"name":"nk","external_name":"nk","restriction":"Int"}],"return_type":"self","visibility":"Public","body":"new({ni.to_i, nj.to_i, nk.to_i}, Parallelepiped.cubic(0))"}},{"html_id":"atom_distance(structure:Structure,dim:Dimensions,bounds:Parallelepiped|Nil=nil):self-class-method","name":"atom_distance","abstract":false,"args":[{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"dim","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","default_value":"nil","external_name":"bounds","restriction":"Parallelepiped | ::Nil"}],"args_string":"(structure : Structure, dim : Dimensions, bounds : Parallelepiped | Nil = nil) : self","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>, dim : <a href=\"../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>, bounds : <a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a> | Nil = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":44,"url":null},"def":{"name":"atom_distance","args":[{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"dim","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","default_value":"nil","external_name":"bounds","restriction":"Parallelepiped | ::Nil"}],"return_type":"self","visibility":"Public","body":"grid = new(dim, (bounds || structure.coords.bounds))\ncoords = structure.coords.to_a\nkdtree = KDTree.new(coords, structure.cell?)\ngrid.map_with_coords! do |_, vec|\n  Math.sqrt((kdtree.nearest_with_distance(vec))[1])\nend\n"}},{"html_id":"atom_distance_like(other:self|Info,structure:Structure):self-class-method","name":"atom_distance_like","doc":"Returns a grid filled with the distances to the nearest atom. It will have the\nsame bounds and points as *other*.\n\n```\nstructure = Structure.read \"path/to/file\"\ninfo = Grid::Info.new Parallelepiped[1.5, 2.135, 6.12], {10, 10, 10}\ngrid = Grid.atom_distance structure, info.dim, info.bounds\nGrid.atom_distance_like(info, structure) == grid # => true\n```","summary":"<p>Returns a grid filled with the distances to the nearest atom.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self | Info"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(other : self | Info, structure : Structure) : self","args_html":"(other : <span class=\"k\">self</span> | <a href=\"../../Chem/Spatial/Grid/Info.html\">Info</a>, structure : <a href=\"../../Chem/Structure.html\">Structure</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":64,"url":null},"def":{"name":"atom_distance_like","args":[{"name":"other","external_name":"other","restriction":"self | Info"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"return_type":"self","visibility":"Public","body":"atom_distance(structure, other.dim, other.bounds)"}},{"html_id":"build(info:Info,source_file:String|Path|Nil=nil,&:Pointer(Float64),Int32->):self-class-method","name":"build","doc":"Creates a new `Grid` with *info* and yields a buffer to be filled.\n\nThis method is **unsafe**, but it is usually used to initialize the buffer in a\nlinear fashion, e.g., reading values from a file.\n\n```\nGrid.build(Grid.info(\"/path/to/file\")) do |buffer, size|\n  size.times do |i|\n    buffer[i] = read_value\n  end\nend\n```","summary":"<p>Creates a new <code><a href=\"../../Chem/Spatial/Grid.html\">Grid</a></code> with <em>info</em> and yields a buffer to be filled.</p>","abstract":false,"args":[{"name":"info","external_name":"info","restriction":"Info"},{"name":"source_file","default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"args_string":"(info : Info, source_file : String | Path | Nil = nil, & : Pointer(Float64), Int32 -> ) : self","args_html":"(info : <a href=\"../../Chem/Spatial/Grid/Info.html\">Info</a>, source_file : String | Path | Nil = <span class=\"n\">nil</span>, & : Pointer(Float64), Int32 -> ) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":80,"url":null},"def":{"name":"build","args":[{"name":"info","external_name":"info","restriction":"Info"},{"name":"source_file","default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Pointer(Float64), Int32 ->)"},"return_type":"self","visibility":"Public","body":"grid = new(info.dim, info.bounds, source_file)\nyield grid.to_unsafe, grid.size\ngrid\n"}},{"html_id":"build(dim:Dimensions,bounds:Parallelepiped,source_file:String|Path|Nil=nil,&:Pointer(Float64),Int32->):self-class-method","name":"build","abstract":false,"args":[{"name":"dim","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","external_name":"bounds","restriction":"Parallelepiped"},{"name":"source_file","default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"args_string":"(dim : Dimensions, bounds : Parallelepiped, source_file : String | Path | Nil = nil, & : Pointer(Float64), Int32 -> ) : self","args_html":"(dim : <a href=\"../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>, bounds : <a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, source_file : String | Path | Nil = <span class=\"n\">nil</span>, & : Pointer(Float64), Int32 -> ) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":88,"url":null},"def":{"name":"build","args":[{"name":"dim","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","external_name":"bounds","restriction":"Parallelepiped"},{"name":"source_file","default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Pointer(Float64), Int32 ->)"},"return_type":"self","visibility":"Public","body":"grid = new(dim, bounds, source_file)\nyield grid.to_unsafe, grid.size\ngrid\n"}},{"html_id":"empty_like(other:self|Info):self-class-method","name":"empty_like","doc":"Returns a zero-filled grid with the same bounds and points as *other*.\n\n```\ngrid = Grid.from_dx \"/path/to/grid\"\nother = Grid.empty_like grid\nother.bounds == grid.bounds # => true\nother.dim == grid.dim       # => true\nother.to_a.minmax           # => {0.0, 0.0}\n```","summary":"<p>Returns a zero-filled grid with the same bounds and points as <em>other</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self | Info"}],"args_string":"(other : self | Info) : self","args_html":"(other : <span class=\"k\">self</span> | <a href=\"../../Chem/Spatial/Grid/Info.html\">Info</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":106,"url":null},"def":{"name":"empty_like","args":[{"name":"other","external_name":"other","restriction":"self | Info"}],"return_type":"self","visibility":"Public","body":"new(other.dim, other.bounds)"}},{"html_id":"fill_like(other:self|Info,value:Number):self-class-method","name":"fill_like","doc":"Returns a grid with the same bounds and points as *other* filled with *value*.\n\n```\ngrid = Grid.from_dx \"/path/to/grid\"\nother = Grid.fill_like grid, 2345.123\nother.bounds == grid.bounds # => true\nother.dim == grid.dim       # => true\nother.to_a.minmax           # => {2345.123, 2345.123}\n```","summary":"<p>Returns a grid with the same bounds and points as <em>other</em> filled with <em>value</em>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self | Info"},{"name":"value","external_name":"value","restriction":"Number"}],"args_string":"(other : self | Info, value : Number) : self","args_html":"(other : <span class=\"k\">self</span> | <a href=\"../../Chem/Spatial/Grid/Info.html\">Info</a>, value : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":119,"url":null},"def":{"name":"fill_like","args":[{"name":"other","external_name":"other","restriction":"self | Info"},{"name":"value","external_name":"value","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"new(other.dim, other.bounds, value.to_f)"}},{"html_id":"from_chgcar(input:IO|Path|String):self-class-method","name":"from_chgcar","doc":"Returns the grid encoded in *input* using the\n`Chem::VASP::Chgcar` file format. Arguments are forwarded to\n`Chem::VASP::Chgcar::Reader.open`.","summary":"<p>Returns the grid encoded in <em>input</em> using the <code><a href=\"../../Chem/VASP/Chgcar.html\">Chem::VASP::Chgcar</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_chgcar","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::VASP::Chgcar::Reader.open(input) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_cube(input:IO|Path|String):self-class-method","name":"from_cube","doc":"Returns the grid encoded in *input* using the\n`Chem::Cube` file format. Arguments are forwarded to\n`Chem::Cube::Reader.open`.","summary":"<p>Returns the grid encoded in <em>input</em> using the <code><a href=\"../../Chem/Cube.html\">Chem::Cube</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_cube","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::Cube::Reader.open(input) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_dx(input:IO|Path|String):self-class-method","name":"from_dx","doc":"Returns the grid encoded in *input* using the\n`Chem::DX` file format. Arguments are forwarded to\n`Chem::DX::Reader.open`.","summary":"<p>Returns the grid encoded in <em>input</em> using the <code><a href=\"../../Chem/DX.html\">Chem::DX</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_dx","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::DX::Reader.open(input) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_io(io:IO,format:IO::ByteFormat):self-class-method","name":"from_io","doc":"Reads a grid from *io* in the given *format*. See also:\n`IO#read_bytes`. Raises `IO::EOFError` if there is missing data.","summary":"<p>Reads a grid from <em>io</em> in the given <em>format</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","external_name":"format","restriction":"IO::ByteFormat"}],"args_string":"(io : IO, format : IO::ByteFormat) : self","args_html":"(io : IO, format : IO::ByteFormat) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":125,"url":null},"def":{"name":"from_io","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","external_name":"format","restriction":"IO::ByteFormat"}],"return_type":"self","visibility":"Public","body":"bounds = io.read_bytes(Parallelepiped, format)\nbytesize = io.read_bytes(Int32, format)\nif bytesize > 0\n  source_file = io.read_string(bytesize)\nend\ndim = {0, 0, 0}.map do\n  io.read_bytes(Int32, format)\nend\nbuild(dim, bounds, source_file) do |buffer, size|\n  bytes = (buffer.to_slice(size)).to_unsafe_bytes\n  io.read_fully(bytes)\nend\n"}},{"html_id":"from_locpot(input:IO|Path|String):self-class-method","name":"from_locpot","doc":"Returns the grid encoded in *input* using the\n`Chem::VASP::Locpot` file format. Arguments are forwarded to\n`Chem::VASP::Locpot::Reader.open`.","summary":"<p>Returns the grid encoded in <em>input</em> using the <code><a href=\"../../Chem/VASP/Locpot.html\">Chem::VASP::Locpot</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_locpot","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::VASP::Locpot::Reader.open(input) do |reader|\n  reader.read_entry\nend"}},{"html_id":"new(dim:Dimensions,bounds:Parallelepiped,source_file:String|Path|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"dim","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","external_name":"bounds","restriction":"Parallelepiped"},{"name":"source_file","default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"args_string":"(dim : Dimensions, bounds : Parallelepiped, source_file : String | Path | Nil = nil)","args_html":"(dim : <a href=\"../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>, bounds : <a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, source_file : String | Path | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/spatial/grid.cr","line_number":21,"url":null},"def":{"name":"new","args":[{"name":"dim","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","external_name":"bounds","restriction":"Parallelepiped"},{"name":"source_file","default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(dim, bounds, source_file)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(dim:Dimensions,bounds:Parallelepiped,initial_value:Float64,source_file:String|Path|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"dim","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","external_name":"bounds","restriction":"Parallelepiped"},{"name":"initial_value","external_name":"initial_value","restriction":"Float64"},{"name":"source_file","default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"args_string":"(dim : Dimensions, bounds : Parallelepiped, initial_value : Float64, source_file : String | Path | Nil = nil)","args_html":"(dim : <a href=\"../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>, bounds : <a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, initial_value : Float64, source_file : String | Path | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/spatial/grid.cr","line_number":30,"url":null},"def":{"name":"new","args":[{"name":"dim","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","external_name":"bounds","restriction":"Parallelepiped"},{"name":"initial_value","external_name":"initial_value","restriction":"Float64"},{"name":"source_file","default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(dim, bounds, initial_value, source_file)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(dim:Dimensions,bounds:Parallelepiped,source_file:String|Path|Nil=nil,&block:Location->Number)-class-method","name":"new","abstract":false,"args":[{"name":"dim","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","external_name":"bounds","restriction":"Parallelepiped"},{"name":"source_file","default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"args_string":"(dim : Dimensions, bounds : Parallelepiped, source_file : String | Path | Nil = nil, &block : Location -> Number)","args_html":"(dim : <a href=\"../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>, bounds : <a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, source_file : String | Path | Nil = <span class=\"n\">nil</span>, &block : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a> -> <a href=\"../../Number.html\">Number</a>)","location":{"filename":"src/chem/spatial/grid.cr","line_number":136,"url":null},"def":{"name":"new","args":[{"name":"dim","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","external_name":"bounds","restriction":"Parallelepiped"},{"name":"source_file","default_value":"nil","external_name":"source_file","restriction":"String | Path | Nil"}],"yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Location -> Number)"},"visibility":"Public","body":"(new(dim, bounds, source_file)).map_with_loc! do |_, loc|\n  (yield loc).to_f\nend"}},{"html_id":"read(input:IO|Path|String,format:Chem::Format|String):self-class-method","name":"read","doc":"Returns the grid encoded in the specified file\nusing *format*. Raises `ArgumentError` if *format* has\nrequired arguments or cannot read `Chem::Spatial::Grid`.\n\nThe supported file formats are `Chem::Cube`, `Chem::DX`, `Chem::VASP::Chgcar`, `Chem::VASP::Locpot`. Use the\n`.from_*` methods to customize how the object is decoded in\nthe corresponding file format if possible.","summary":"<p>Returns the grid encoded in the specified file using <em>format</em>.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(input : IO | Path | String, format : Chem::Format | String) : self","args_html":"(input : IO | Path | String, format : <a href=\"../../Chem/Format.html\">Chem::Format</a> | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"read","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"return_type":"self","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .cube?\n  from_cube(input)\nwhen .dx?\n  from_dx(input)\nwhen .chgcar?\n  from_chgcar(input)\nwhen .locpot?\n  from_locpot(input)\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::Spatial::Grid\"))\nend\n"}},{"html_id":"read(path:Path|String):self-class-method","name":"read","doc":"Returns the grid encoded in the specified file.\nThe file format is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nThe supported file formats are the following:\n\n- `Chem::Cube` (.cube)\n- `Chem::DX` (.dx)\n- `Chem::VASP::Chgcar` (CHGCAR)\n- `Chem::VASP::Locpot` (LOCPOT)\n\nUse the `.from_*` methods to customize how the object is\ndecoded in the corresponding file format if possible.","summary":"<p>Returns the grid encoded in the specified file.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"read","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"read(path, ::Chem::Format.from_filename(path))"}},{"html_id":"vdw_mask(structure:Structure,dim:Dimensions,bounds:Parallelepiped|Nil=nil,delta:Float64=0.02):self-class-method","name":"vdw_mask","doc":"TODO: add more tests\nFIXME: check delta calculation (grid.resolution.min / 2 shouldn't be enough?)","summary":"<p><span class=\"flag orange\">TODO</span>  add more tests FIXME: check delta calculation (grid.resolution.min / 2 shouldn't be enough?)</p>","abstract":false,"args":[{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"dim","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","default_value":"nil","external_name":"bounds","restriction":"Parallelepiped | ::Nil"},{"name":"delta","default_value":"0.02","external_name":"delta","restriction":"Float64"}],"args_string":"(structure : Structure, dim : Dimensions, bounds : Parallelepiped | Nil = nil, delta : Float64 = 0.02) : self","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>, dim : <a href=\"../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>, bounds : <a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a> | Nil = <span class=\"n\">nil</span>, delta : Float64 = <span class=\"n\">0.02</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":147,"url":null},"def":{"name":"vdw_mask","args":[{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"dim","external_name":"dim","restriction":"Dimensions"},{"name":"bounds","default_value":"nil","external_name":"bounds","restriction":"Parallelepiped | ::Nil"},{"name":"delta","default_value":"0.02","external_name":"delta","restriction":"Float64"}],"return_type":"self","visibility":"Public","body":"grid = new(dim, (bounds || structure.coords.bounds))\ndelta = Math.min(delta, grid.resolution.min / 2)\natoms = structure.atoms\nkdtree = KDTree.new(atoms.map(&.coords), structure.cell?)\nvdw_cutoff = structure.each_atom.max_of(&.vdw_radius)\nstructure.each_atom do |atom|\n  grid.each_loc(atom.coords, atom.vdw_radius + delta) do |loc, d|\n    too_close = false\n    kdtree.each_neighbor(grid.coords_at(loc), within: vdw_cutoff) do |index, od|\n      other = atoms.unsafe_fetch(index)\n      if (Math.sqrt(od)) < (other.vdw_radius - delta)\n        too_close = true\n      end\n    end\n    if (!too_close) && (d - atom.vdw_radius).abs < delta\n      grid[loc] = 1\n    end\n  end\nend\ngrid\n"}},{"html_id":"vdw_mask_like(other:self|Info,structure:Structure,delta:Float64=0.02):self-class-method","name":"vdw_mask_like","doc":"Returns a grid mask with the points at the vdW spheres set to 1. It will have the\nsame bounds and points as *other*.\n\n```\nstructure = Structure.read \"path/to/file\"\ninfo = Grid::Info.new Parallelepiped[5.213, 6.823, 10.352], {20, 25, 40}\ngrid = Grid.vdw_mask structure, info.dim, info.bounds\nGrid.vdw_mask_like(info, structure) == grid # => true\n```","summary":"<p>Returns a grid mask with the points at the vdW spheres set to 1.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self | Info"},{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"delta","default_value":"0.02","external_name":"delta","restriction":"Float64"}],"args_string":"(other : self | Info, structure : Structure, delta : Float64 = 0.02) : self","args_html":"(other : <span class=\"k\">self</span> | <a href=\"../../Chem/Spatial/Grid/Info.html\">Info</a>, structure : <a href=\"../../Chem/Structure.html\">Structure</a>, delta : Float64 = <span class=\"n\">0.02</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":191,"url":null},"def":{"name":"vdw_mask_like","args":[{"name":"other","external_name":"other","restriction":"self | Info"},{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"delta","default_value":"0.02","external_name":"delta","restriction":"Float64"}],"return_type":"self","visibility":"Public","body":"vdw_mask(structure, other.dim, other.bounds, delta)"}}],"instance_methods":[{"html_id":"*(rhs:Number):self-instance-method","name":"*","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":207,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"Grid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele * rhs\n  end\nend"}},{"html_id":"*(rhs:self):self-instance-method","name":"*","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":207,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"if @dim == rhs.dim\nelse\n  raise(ArgumentError.new(\"Incompatible grid\"))\nend\nGrid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele * (rhs.unsafe_fetch(i))\n  end\nend\n"}},{"html_id":"+(rhs:Number):self-instance-method","name":"+","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":207,"url":null},"def":{"name":"+","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"Grid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele + rhs\n  end\nend"}},{"html_id":"+(rhs:self):self-instance-method","name":"+","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":207,"url":null},"def":{"name":"+","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"if @dim == rhs.dim\nelse\n  raise(ArgumentError.new(\"Incompatible grid\"))\nend\nGrid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele + (rhs.unsafe_fetch(i))\n  end\nend\n"}},{"html_id":"-(rhs:Number):self-instance-method","name":"-","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":207,"url":null},"def":{"name":"-","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"Grid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele - rhs\n  end\nend"}},{"html_id":"-(rhs:self):self-instance-method","name":"-","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":207,"url":null},"def":{"name":"-","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"if @dim == rhs.dim\nelse\n  raise(ArgumentError.new(\"Incompatible grid\"))\nend\nGrid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele - (rhs.unsafe_fetch(i))\n  end\nend\n"}},{"html_id":"/(rhs:Number):self-instance-method","name":"/","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":207,"url":null},"def":{"name":"/","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"Grid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele / rhs\n  end\nend"}},{"html_id":"/(rhs:self):self-instance-method","name":"/","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":207,"url":null},"def":{"name":"/","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"if @dim == rhs.dim\nelse\n  raise(ArgumentError.new(\"Incompatible grid\"))\nend\nGrid.build(@dim, @bounds) do |buffer|\n  each_with_index do |ele, i|\n    buffer[i] = ele / (rhs.unsafe_fetch(i))\n  end\nend\n"}},{"html_id":"==(rhs:self):Bool-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Bool","args_html":"(rhs : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/spatial/grid.cr","line_number":197,"url":null},"def":{"name":"==","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"if ((@dim == rhs.dim) && (@bounds == rhs.bounds)) && (@source_file == rhs.source_file)\nelse\n  return false\nend\neach_with_index do |ele, i|\n  if ele != (rhs.unsafe_fetch(i))\n    return false\n  end\nend\ntrue\n"}},{"html_id":"[](*args,**options):Float64-instance-method","name":"[]","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options) : Float64","args_html":"(*args, **options) : Float64","location":{"filename":"src/chem/spatial/grid.cr","line_number":227,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"return_type":"Float64","visibility":"Public","body":"self[*args, **options]? || (raise(IndexError.new))"}},{"html_id":"[]=(i:Int,j:Int,k:Int,value:Float64):Float64-instance-method","name":"[]=","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int"},{"name":"j","external_name":"j","restriction":"Int"},{"name":"k","external_name":"k","restriction":"Int"},{"name":"value","external_name":"value","restriction":"Float64"}],"args_string":"(i : Int, j : Int, k : Int, value : Float64) : Float64","args_html":"(i : Int, j : Int, k : Int, value : Float64) : Float64","location":{"filename":"src/chem/spatial/grid.cr","line_number":259,"url":null},"def":{"name":"[]=","args":[{"name":"i","external_name":"i","restriction":"Int"},{"name":"j","external_name":"j","restriction":"Int"},{"name":"k","external_name":"k","restriction":"Int"},{"name":"value","external_name":"value","restriction":"Float64"}],"return_type":"Float64","visibility":"Public","body":"self[Location.new(i, j, k)] = value"}},{"html_id":"[]=(i:Int,value:Float64):Float64-instance-method","name":"[]=","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int"},{"name":"value","external_name":"value","restriction":"Float64"}],"args_string":"(i : Int, value : Float64) : Float64","args_html":"(i : Int, value : Float64) : Float64","location":{"filename":"src/chem/spatial/grid.cr","line_number":252,"url":null},"def":{"name":"[]=","args":[{"name":"i","external_name":"i","restriction":"Int"},{"name":"value","external_name":"value","restriction":"Float64"}],"return_type":"Float64","visibility":"Public","body":"if i < 0\n  i = i + size\nend\nif 0 <= i && i < size\nelse\n  raise(IndexError.new)\nend\n@buffer[i] = value\n"}},{"html_id":"[]=(loc:Location,value:Float64):Float64-instance-method","name":"[]=","abstract":false,"args":[{"name":"loc","external_name":"loc","restriction":"Location"},{"name":"value","external_name":"value","restriction":"Float64"}],"args_string":"(loc : Location, value : Float64) : Float64","args_html":"(loc : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>, value : Float64) : Float64","location":{"filename":"src/chem/spatial/grid.cr","line_number":264,"url":null},"def":{"name":"[]=","args":[{"name":"loc","external_name":"loc","restriction":"Location"},{"name":"value","external_name":"value","restriction":"Float64"}],"return_type":"Float64","visibility":"Public","body":"if i = index(loc)\nelse\n  raise(IndexError.new)\nend\n@buffer[i] = value\n"}},{"html_id":"[]?(i:Int,j:Int,k:Int):Float64|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int"},{"name":"j","external_name":"j","restriction":"Int"},{"name":"k","external_name":"k","restriction":"Int"}],"args_string":"(i : Int, j : Int, k : Int) : Float64 | Nil","args_html":"(i : Int, j : Int, k : Int) : Float64 | Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":232,"url":null},"def":{"name":"[]?","args":[{"name":"i","external_name":"i","restriction":"Int"},{"name":"j","external_name":"j","restriction":"Int"},{"name":"k","external_name":"k","restriction":"Int"}],"return_type":"Float64 | ::Nil","visibility":"Public","body":"self[Location.new(i, j, k)]?"}},{"html_id":"[]?(loc:Location):Float64|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"loc","external_name":"loc","restriction":"Location"}],"args_string":"(loc : Location) : Float64 | Nil","args_html":"(loc : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>) : Float64 | Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":237,"url":null},"def":{"name":"[]?","args":[{"name":"loc","external_name":"loc","restriction":"Location"}],"return_type":"Float64 | ::Nil","visibility":"Public","body":"if i = index(loc)\n  unsafe_fetch(i)\nend"}},{"html_id":"[]?(vec:Vec3):Float64|Nil-instance-method","name":"[]?","doc":"TODO: add interpolation (check ARBInterp)","summary":"<p><span class=\"flag orange\">TODO</span>  add interpolation (check ARBInterp)</p>","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : Float64 | Nil","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64 | Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":245,"url":null},"def":{"name":"[]?","args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"return_type":"Float64 | ::Nil","visibility":"Public","body":"if i = index(vec)\n  unsafe_fetch(i)\nend"}},{"html_id":"bounds:Parallelepiped-instance-method","name":"bounds","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":13,"url":null},"def":{"name":"bounds","return_type":"Parallelepiped","visibility":"Public","body":"@bounds"}},{"html_id":"coords_at(*args,**options):Vec3-instance-method","name":"coords_at","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options) : Vec3","args_html":"(*args, **options) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/grid.cr","line_number":269,"url":null},"def":{"name":"coords_at","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"return_type":"Vec3","visibility":"Public","body":"(coords_at?(*args, **options)) || (raise(IndexError.new))"}},{"html_id":"coords_at?(i:Int,j:Int,k:Int):Vec3|Nil-instance-method","name":"coords_at?","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int"},{"name":"j","external_name":"j","restriction":"Int"},{"name":"k","external_name":"k","restriction":"Int"}],"args_string":"(i : Int, j : Int, k : Int) : Vec3 | Nil","args_html":"(i : Int, j : Int, k : Int) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> | Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":279,"url":null},"def":{"name":"coords_at?","args":[{"name":"i","external_name":"i","restriction":"Int"},{"name":"j","external_name":"j","restriction":"Int"},{"name":"k","external_name":"k","restriction":"Int"}],"return_type":"Vec3 | ::Nil","visibility":"Public","body":"coords_at?(Location.new(i, j, k))"}},{"html_id":"coords_at?(i:Int):Vec3|Nil-instance-method","name":"coords_at?","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int"}],"args_string":"(i : Int) : Vec3 | Nil","args_html":"(i : Int) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> | Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":273,"url":null},"def":{"name":"coords_at?","args":[{"name":"i","external_name":"i","restriction":"Int"}],"return_type":"Vec3 | ::Nil","visibility":"Public","body":"if loc = loc_at?(i)\n  coords_at?(loc)\nend"}},{"html_id":"coords_at?(loc:Location):Vec3|Nil-instance-method","name":"coords_at?","abstract":false,"args":[{"name":"loc","external_name":"loc","restriction":"Location"}],"args_string":"(loc : Location) : Vec3 | Nil","args_html":"(loc : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> | Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":283,"url":null},"def":{"name":"coords_at?","args":[{"name":"loc","external_name":"loc","restriction":"Location"}],"return_type":"Vec3 | ::Nil","visibility":"Public","body":"if index(loc)\nelse\n  return\nend\nunsafe_coords_at(loc)\n"}},{"html_id":"dim:Dimensions-instance-method","name":"dim","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":14,"url":null},"def":{"name":"dim","return_type":"Dimensions","visibility":"Public","body":"@dim"}},{"html_id":"dup:self-instance-method","name":"dup","doc":"Returns a shallow copy of this object.\n\nThis allocates a new object and copies the contents of\n`self` into it.","summary":"<p>Returns a shallow copy of this object.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":288,"url":null},"def":{"name":"dup","return_type":"self","visibility":"Public","body":"Grid.build(@dim, @bounds) do |buffer|\n  buffer.copy_from(@buffer, size)\nend"}},{"html_id":"each_axial_slice(axis:Int,reuse:Bool|Array(Float64)=false,&:Array(Float64)->):Nil-instance-method","name":"each_axial_slice","doc":"Iterates over slices along *axis*. Axis is specified as an\ninteger: 0-2 refer to the direction of the first, second or third\nbasis vector, respectively.\n\n```\ngrid = Grid.new({2, 3, 2}, Parallelepiped[1, 1, 1]) { |i, j, k| i * 6 + j * 2 + k }\ngrid.to_a # => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nslices = [] of Array(Float64)\ngrid.each_axial_slice(axis: 1) { |slice| slices << slice }\nslices # => [[0, 1, 6, 7], [2, 3, 8, 9], [4, 5, 10, 11]]\n```\n\nWhen using read-only slices, one can specify the *reuse* option to\nprevent many memory allocations:\n\n* If *reuse* is an `Array`, this array will be reused.\n* If *reuse* is true, the method will create a new array and reuse\n  it.\n* If *reuse* is false (default), a new array is created and\n  yielded on each iteration.","summary":"<p>Iterates over slices along <em>axis</em>.</p>","abstract":false,"args":[{"name":"axis","external_name":"axis","restriction":"Int"},{"name":"reuse","default_value":"false","external_name":"reuse","restriction":"Bool | Array(Float64)"}],"args_string":"(axis : Int, reuse : Bool | Array(Float64) = false, & : Array(Float64) -> ) : Nil","args_html":"(axis : Int, reuse : Bool | <a href=\"../../Array.html\">Array</a>(Float64) = <span class=\"n\">false</span>, & : <a href=\"../../Array.html\">Array</a>(Float64) -> ) : Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":314,"url":null},"def":{"name":"each_axial_slice","args":[{"name":"axis","external_name":"axis","restriction":"Int"},{"name":"reuse","default_value":"false","external_name":"reuse","restriction":"Bool | Array(Float64)"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Array(Float64) ->)"},"return_type":"Nil","visibility":"Public","body":"njk = nj * nk\ncase axis\nwhen 0\n  each_axial_slice(ni, njk, reuse) do |buffer, i|\n    njk.times do |i_|\n      buffer << (unsafe_fetch((i * njk) + i_))\n    end\n    yield buffer\n  end\nwhen 1\n  each_axial_slice(nj, ni * nk, reuse) do |buffer, j|\n    ni.times do |i|\n      nk.times do |i_|\n        buffer << (unsafe_fetch(((i * njk) + (j * nk)) + i_))\n      end\n    end\n    yield buffer\n  end\nwhen 2\n  each_axial_slice(nk, ni * nj, reuse) do |buffer, k|\n    ni.times do |i|\n      nj.times do |j|\n        buffer << (unsafe_fetch(((i * njk) + (j * nk)) + k))\n      end\n    end\n    yield buffer\n  end\nelse\n  raise(IndexError.new)\nend\n"}},{"html_id":"each_coords(&:Vec3->):Nil-instance-method","name":"each_coords","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":345,"url":null},"def":{"name":"each_coords","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Vec3 ->)"},"return_type":"Nil","visibility":"Public","body":"each_loc do |loc|\n  yield unsafe_coords_at(loc)\nend"}},{"html_id":"each_loc(vec:Vec3,cutoff:Number,&:Location,Float64->):Nil-instance-method","name":"each_loc","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"Vec3"},{"name":"cutoff","external_name":"cutoff","restriction":"Number"}],"args_string":"(vec : Vec3, cutoff : Number, & : Location, Float64 -> ) : Nil","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, cutoff : <a href=\"../../Number.html\">Number</a>, & : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>, Float64 -> ) : Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":361,"url":null},"def":{"name":"each_loc","args":[{"name":"vec","external_name":"vec","restriction":"Vec3"},{"name":"cutoff","external_name":"cutoff","restriction":"Number"}],"yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Location, Float64 ->)"},"return_type":"Nil","visibility":"Public","body":"if loc = loc_at?(vec)\nelse\n  return\nend\ndi, dj, dk = resolution.map do |ele|\n  (cutoff / ele).to_i\nend\ncutoff = cutoff * cutoff\n((((loc[0] - di) - 1)..((loc[0] + di) + 1)).clamp(0..(ni - 1))).each do |i|\n  ((((loc[1] - dj) - 1)..((loc[1] + dj) + 1)).clamp(0..(nj - 1))).each do |j|\n    ((((loc[2] - dk) - 1)..((loc[2] + dk) + 1)).clamp(0..(nk - 1))).each do |k|\n      new_loc = Location.new(i, j, k)\n      d = Spatial.distance2(vec, unsafe_coords_at(new_loc))\n      if d < cutoff\n        yield new_loc, Math.sqrt(d)\n      end\n    end\n  end\nend\n"}},{"html_id":"each_loc(&:Location->):Nil-instance-method","name":"each_loc","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":351,"url":null},"def":{"name":"each_loc","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Location ->)"},"return_type":"Nil","visibility":"Public","body":"ni.times do |i|\n  nj.times do |j|\n    nk.times do |k|\n      yield Location.new(i, j, k)\n    end\n  end\nend"}},{"html_id":"each_with_coords(&:Float64,Vec3->):Nil-instance-method","name":"each_with_coords","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":376,"url":null},"def":{"name":"each_with_coords","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Float64, Vec3 ->)"},"return_type":"Nil","visibility":"Public","body":"each_index do |i|\n  yield unsafe_fetch(i), unsafe_coords_at(unsafe_loc_at(i))\nend"}},{"html_id":"each_with_loc(&:Float64,Location->):Nil-instance-method","name":"each_with_loc","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":382,"url":null},"def":{"name":"each_with_loc","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Float64, Location ->)"},"return_type":"Nil","visibility":"Public","body":"each_with_index do |ele, i|\n  yield ele, unsafe_loc_at(i)\nend"}},{"html_id":"includes?(*args,**options)-instance-method","name":"includes?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/grid.cr","line_number":19,"url":null},"def":{"name":"includes?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@bounds.includes?(*args, **options)"}},{"html_id":"includes?(*args,**options,&)-instance-method","name":"includes?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/grid.cr","line_number":19,"url":null},"def":{"name":"includes?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@bounds.includes?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"index(loc:Location):Int32|Nil-instance-method","name":"index","abstract":false,"args":[{"name":"loc","external_name":"loc","restriction":"Location"}],"args_string":"(loc : Location) : Int32 | Nil","args_html":"(loc : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>) : Int32 | Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":388,"url":null},"def":{"name":"index","args":[{"name":"loc","external_name":"loc","restriction":"Location"}],"return_type":"Int32 | ::Nil","visibility":"Public","body":"loc = loc.map_with_index do |ele, i|\n  ele < 0 ? ele + @dim[i] : ele\nend\nloc.each_with_index do |ele, i|\n  if 0 <= ele && ele < @dim[i]\n  else\n    return\n  end\nend\nunsafe_index(loc)\n"}},{"html_id":"index(vec:Vec3):Int32|Nil-instance-method","name":"index","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : Int32 | Nil","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : Int32 | Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":396,"url":null},"def":{"name":"index","args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"return_type":"Int32 | ::Nil","visibility":"Public","body":"if loc = loc_at?(vec)\n  unsafe_index(loc)\nend"}},{"html_id":"index!(*args,**options):Int32-instance-method","name":"index!","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options) : Int32","args_html":"(*args, **options) : Int32","location":{"filename":"src/chem/spatial/grid.cr","line_number":402,"url":null},"def":{"name":"index!","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"return_type":"Int32","visibility":"Public","body":"(index(*args, **options)) || (raise(IndexError.new))"}},{"html_id":"loc_at(*args,**options):Location-instance-method","name":"loc_at","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options) : Location","args_html":"(*args, **options) : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>","location":{"filename":"src/chem/spatial/grid.cr","line_number":406,"url":null},"def":{"name":"loc_at","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"return_type":"Location","visibility":"Public","body":"(loc_at?(*args, **options)) || (raise(IndexError.new))"}},{"html_id":"loc_at?(i:Int):Location|Nil-instance-method","name":"loc_at?","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int"}],"args_string":"(i : Int) : Location | Nil","args_html":"(i : Int) : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a> | Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":410,"url":null},"def":{"name":"loc_at?","args":[{"name":"i","external_name":"i","restriction":"Int"}],"return_type":"Location | ::Nil","visibility":"Public","body":"if i < 0\n  i = i + size\nend\nif 0 <= i && i < size\n  unsafe_loc_at(i)\nend\n"}},{"html_id":"loc_at?(vec:Vec3):Location|Nil-instance-method","name":"loc_at?","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : Location | Nil","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a> | Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":415,"url":null},"def":{"name":"loc_at?","args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"return_type":"Location | ::Nil","visibility":"Public","body":"if vec.in?(bounds)\nelse\n  return\nend\nvec = bounds.fract(vec - origin)\nvec = vec * (Vec3[*@dim] - 1)\n{vec.x, vec.y, vec.z}.map() do |__arg4|\n  __arg4.round.to_i\nend\n"}},{"html_id":"map(&:Float64->Float64):self-instance-method","name":"map","doc":"Returns an `Array` with the results of running the block against each element of the collection.\n\n```\n[1, 2, 3].map { |i| i * 10 } # => [10, 20, 30]\n```","summary":"<p>Returns an <code><a href=\"../../Array.html\">Array</a></code> with the results of running the block against each element of the collection.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":422,"url":null},"def":{"name":"map","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Float64 -> Float64)"},"return_type":"self","visibility":"Public","body":"dup.map! do |ele|\n  yield ele\nend"}},{"html_id":"map!(&:Float64->Float64):self-instance-method","name":"map!","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":428,"url":null},"def":{"name":"map!","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Float64 -> Float64)"},"return_type":"self","visibility":"Public","body":"@buffer.map!(size) do |ele|\n  yield ele\nend\nself\n"}},{"html_id":"map_with_coords(&:Float64,Vec3->Number):self-instance-method","name":"map_with_coords","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":433,"url":null},"def":{"name":"map_with_coords","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Float64, Vec3 -> Number)"},"return_type":"self","visibility":"Public","body":"dup.map_with_coords! do |ele, vec|\n  yield ele, vec\nend"}},{"html_id":"map_with_coords!(&:Float64,Vec3->Number):self-instance-method","name":"map_with_coords!","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":439,"url":null},"def":{"name":"map_with_coords!","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Float64, Vec3 -> Number)"},"return_type":"self","visibility":"Public","body":"each_with_index do |ele, i|\n  @buffer[i] = (yield ele, unsafe_coords_at(unsafe_loc_at(i))).to_f\nend\nself\n"}},{"html_id":"map_with_index(&:Float64,Int32->Number):self-instance-method","name":"map_with_index","doc":"Like `map`, but the block gets passed both the element and its index.\n\n```\n[\"Alice\", \"Bob\"].map_with_index { |name, i| \"User ##{i}: #{name}\" }\n# => [\"User #0: Alice\", \"User #1: Bob\"]\n```\n\nAccepts an optional *offset* parameter, which tells it to start counting\nfrom there.","summary":"<p>Like <code><a href=\"../../Chem/Spatial/Grid.html#map%28%26%3AFloat64-%3EFloat64%29%3Aself-instance-method\">#map</a></code>, but the block gets passed both the element and its index.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":446,"url":null},"def":{"name":"map_with_index","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Float64, Int32 -> Number)"},"return_type":"self","visibility":"Public","body":"dup.map_with_index! do |ele, i|\n  yield ele, i\nend"}},{"html_id":"map_with_index!(&:Float64,Int32->Number):self-instance-method","name":"map_with_index!","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":452,"url":null},"def":{"name":"map_with_index!","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Float64, Int32 -> Number)"},"return_type":"self","visibility":"Public","body":"each_with_index do |ele, i|\n  @buffer[i] = (yield ele, i).to_f\nend\nself\n"}},{"html_id":"map_with_loc(&:Float64,Location->Number):self-instance-method","name":"map_with_loc","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":459,"url":null},"def":{"name":"map_with_loc","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Float64, Location -> Number)"},"return_type":"self","visibility":"Public","body":"dup.map_with_loc! do |ele, loc|\n  yield ele, loc\nend"}},{"html_id":"map_with_loc!(&:Float64,Location->Number):self-instance-method","name":"map_with_loc!","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":465,"url":null},"def":{"name":"map_with_loc!","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Float64, Location -> Number)"},"return_type":"self","visibility":"Public","body":"each_with_index do |ele, i|\n  @buffer[i] = (yield ele, unsafe_loc_at(i)).to_f\nend\nself\n"}},{"html_id":"mask(&:Float64->Bool):self-instance-method","name":"mask","doc":"Returns a grid mask. Elements for which the passed block returns `true` are set to\n1, otherwise 0.\n\nGrid masks are very useful to deal with multiple grids, and when points are to be\nselected based on one grid only.\n\n```\ngrid = Grid.new({2, 2, 2}, Parallelepiped[10, 10, 10]) { |i, j, k| i + j + k }\ngrid.to_a              # => [0, 1, 1, 2, 1, 2, 2, 3]\ngrid.mask(&.>(1)).to_a # => [0, 0, 0, 1, 0, 1, 1, 1]\ngrid.to_a              # => [0, 1, 1, 2, 1, 2, 2, 3]\n```","summary":"<p>Returns a grid mask.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":484,"url":null},"def":{"name":"mask","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Float64 -> Bool)"},"return_type":"self","visibility":"Public","body":"map do |ele|\n  (  yield ele) ? 1.0 : 0.0\nend"}},{"html_id":"mask(value:Number,delta:Number):self-instance-method","name":"mask","doc":"Returns a grid mask. Elements for which `(value - ele).abs <= delta` returns\n`true` are set to 1, otherwise 0.\n\nGrid masks are very useful to deal with multiple grids, and when points are to be\nselected based on one grid only.\n\n```\ngrid = Grid.new({2, 2, 3}, Parallelepiped[1, 1, 1]) { |i, j, k| (i + 1) * (j + 1) * (k + 1) / 5 }\ngrid.to_a              # => [0.2, 0.4, 0.6, 0.4, 0.8, 1.2, 0.4, 0.8, 1.2, 0.8, 1.6, 2.4]\ngrid.mask(1, 0.5).to_a # => [0, 0, 1, 0, 1, 1, 0, 1, 1, 1, 0, 0]\ngrid.to_a              # => [0.2, 0.4, 0.6, 0.4, 0.8, 1.2, 0.4, 0.8, 1.2, 0.8, 1.6, 2.4]\n```","summary":"<p>Returns a grid mask.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Number"},{"name":"delta","external_name":"delta","restriction":"Number"}],"args_string":"(value : Number, delta : Number) : self","args_html":"(value : <a href=\"../../Number.html\">Number</a>, delta : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":516,"url":null},"def":{"name":"mask","args":[{"name":"value","external_name":"value","restriction":"Number"},{"name":"delta","external_name":"delta","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"mask((value - delta)..(value + delta))"}},{"html_id":"mask(pattern):self-instance-method","name":"mask","doc":"Returns a grid mask. Elements for which `pattern === element` returns `true` are\nset to 1, otherwise 0.\n\nGrid masks are very useful to deal with multiple grids, and when points are to be\nselected based on one grid only.\n\n```\ngrid = Grid.new({2, 2, 3}, Parallelepiped[1, 1, 1]) { |i, j, k| (i + 1) * (j + 1) * (k + 1) }\ngrid.to_a              # => [1, 2, 3, 2, 4, 6, 2, 4, 6, 4, 8, 12]\ngrid.mask(2..4.5).to_a # => [0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 0, 0]\ngrid.to_a              # => [1, 2, 3, 2, 4, 6, 2, 4, 6, 4, 8, 12]\n```","summary":"<p>Returns a grid mask.</p>","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":""}],"args_string":"(pattern) : self","args_html":"(pattern) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":500,"url":null},"def":{"name":"mask","args":[{"name":"pattern","external_name":"pattern","restriction":""}],"return_type":"self","visibility":"Public","body":"mask do |ele|\n  pattern === ele\nend"}},{"html_id":"mask!(&:Float64->Bool):self-instance-method","name":"mask!","doc":"Masks a grid by the passed block. Elements for which the passed block returns\n`false` are set to 0.\n\nOptimized version of creating a mask and applying it to the same grid, but avoids\ncreating intermediate grids. This is equivalent to `grid = grid * grid.mask\n{ ... }`.\n\n```\ngrid = Grid.new({2, 2, 2}, Parallelepiped[10, 10, 10]) { |i, j, k| i + j + k }\ngrid.to_a # => [0, 1, 1, 2, 1, 2, 2, 3]\ngrid.mask! &.>(1)\ngrid.to_a # => [0, 0, 0, 2, 0, 2, 2, 3]\n```","summary":"<p>Masks a grid by the passed block.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":533,"url":null},"def":{"name":"mask!","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Float64 -> Bool)"},"return_type":"self","visibility":"Public","body":"map! do |ele|\n  (  yield ele) ? ele : 0.0\nend"}},{"html_id":"mask!(value:Number,delta:Number):self-instance-method","name":"mask!","doc":"Masks a grid by *value*+/-*delta*. Elements for which `(value - ele).abs > delta`\nreturns `true` are set to 0.\n\nOptimized version of creating a mask and applying it to the same grid, but avoids\ncreating intermediate grids. This is equivalent to `grid = grid * grid.mask(value,\ndelta)`\n\n```\ngrid = Grid.new({2, 2, 3}, Parallelepiped[1, 1, 1]) { |i, j, k| (i + j + k) / 5 }\ngrid.to_a # => [0.0, 0.2, 0.4, 0.2, 0.4, 0.6, 0.2, 0.4, 0.6, 0.4, 0.6, 0.8]\ngrid.mask! 0.5, 0.1\ngrid.to_a # => [0.0, 0.0, 0.4, 0.0, 0.4, 0.6, 0.0, 0.4, 0.6, 0.4, 0.6, 0.0]\n```","summary":"<p>Masks a grid by <em>value</em>+/-<em>delta</em>.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Number"},{"name":"delta","external_name":"delta","restriction":"Number"}],"args_string":"(value : Number, delta : Number) : self","args_html":"(value : <a href=\"../../Number.html\">Number</a>, delta : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":567,"url":null},"def":{"name":"mask!","args":[{"name":"value","external_name":"value","restriction":"Number"},{"name":"delta","external_name":"delta","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"mask!((value - delta)..(value + delta))"}},{"html_id":"mask!(pattern):self-instance-method","name":"mask!","doc":"Masks a grid by *pattern*. Elements for which `pattern === element` returns\n`false` are set to 0.\n\nOptimized version of creating a mask and applying it to the same grid, but avoids\ncreating intermediate grids. This is equivalent to `grid = grid *\ngrid.mask(pattern)`\n\n```\ngrid = Grid.new({2, 2, 3}, Parallelepiped[1, 1, 1]) { |i, j, k| (i + 1) * (j + 1) * (k + 1) }\ngrid.to_a # => [1, 2, 3, 2, 4, 6, 2, 4, 6, 4, 8, 12]\ngrid.mask! 2..4.5\ngrid.to_a # => [0, 2, 3, 2, 4, 0, 2, 4, 0, 4, 0, 0]\n```","summary":"<p>Masks a grid by <em>pattern</em>.</p>","abstract":false,"args":[{"name":"pattern","external_name":"pattern","restriction":""}],"args_string":"(pattern) : self","args_html":"(pattern) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":550,"url":null},"def":{"name":"mask!","args":[{"name":"pattern","external_name":"pattern","restriction":""}],"return_type":"self","visibility":"Public","body":"mask! do |ele|\n  pattern === ele\nend"}},{"html_id":"mask_by_coords(&:Vec3->Bool):self-instance-method","name":"mask_by_coords","doc":"Returns a grid mask. Coordinates for which the passed block returns `true` are set\nto 1, otherwise 0.\n\nGrid masks are very useful to deal with multiple grids, and when points are to be\nselected based on one grid only.\n\n```\ngrid = Grid.new({2, 2, 2}, Parallelepiped[10, 10, 10]) { |i, j, k| i * 4 + j * 2 + k }\ngrid.to_a                           # => [0, 1, 2, 3, 4, 5, 6, 7]\ngrid.mask_by_coords(&.x.==(0)).to_a # => [1, 1, 1, 1, 0, 0, 0, 0]\ngrid.to_a                           # => [0, 1, 2, 3, 4, 5, 6, 7]\n```","summary":"<p>Returns a grid mask.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":583,"url":null},"def":{"name":"mask_by_coords","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Vec3 -> Bool)"},"return_type":"self","visibility":"Public","body":"map_with_coords do |_, vec|\n  (  yield vec) ? 1.0 : 0.0\nend"}},{"html_id":"mask_by_coords!(&:Vec3->Bool):self-instance-method","name":"mask_by_coords!","doc":"Masks a grid by coordinates. Coordinates for which the passed block returns\n`false` are set to 0.\n\nOptimized version of creating a mask and applying it to the same grid, but avoids\ncreating intermediate grids. This is equivalent to `grid = grid *\ngrid.mask_by_coords { ... }`\n\n```\ngrid = Grid.new({2, 2, 2}, Parallelepiped[5, 5, 5]) { |i, j, k| i * 4 + j * 2 + k }\ngrid.to_a # => [0, 1, 2, 3, 4, 5, 6, 7]\ngrid.mask_by_coords! { |vec| vec.y == 5 }\ngrid.to_a # => [0, 0, 2, 3, 0, 0, 6, 7]\n```","summary":"<p>Masks a grid by coordinates.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":600,"url":null},"def":{"name":"mask_by_coords!","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Vec3 -> Bool)"},"return_type":"self","visibility":"Public","body":"map_with_coords! do |ele, vec|\n  (  yield vec) ? ele : 0.0\nend"}},{"html_id":"mask_by_index(&:Int32->Bool):self-instance-method","name":"mask_by_index","doc":"Returns a grid mask. Indexes for which the passed block returns `true` are set to\n1, otherwise 0.\n\nGrid masks are very useful to deal with multiple grids, and when points are to be\nselected based on one grid only.\n\n```\ngrid = Grid.new({2, 2, 2}, Parallelepiped[10, 10, 10]) { |i, j, k| i * 4 + j * 2 + k }\ngrid.to_a                       # => [0, 1, 2, 3, 4, 5, 6, 7]\ngrid.mask_by_index(&.>(4)).to_a # => [0, 0, 0, 0, 0, 1, 1, 1]\ngrid.to_a                       # => [0, 1, 2, 3, 4, 5, 6, 7]\n```","summary":"<p>Returns a grid mask.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":616,"url":null},"def":{"name":"mask_by_index","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Int32 -> Bool)"},"return_type":"self","visibility":"Public","body":"map_with_index do |_, i|\n  (  yield i) ? 1.0 : 0.0\nend"}},{"html_id":"mask_by_index!(&:Int32->Bool):self-instance-method","name":"mask_by_index!","doc":"Masks a grid by index. Indexes for which the passed block returns `false` are set\nto 0.\n\nOptimized version of creating a mask and applying it to the same grid, but avoids\ncreating intermediate grids. This is equivalent to `grid = grid *\ngrid.mask_by_index { ... }`\n\n```\ngrid = Grid.new({2, 2, 2}, Parallelepiped[1, 1, 1]) { |i, j, k| i * 4 + j * 2 + k }\ngrid.to_a # => [0, 1, 2, 3, 4, 5, 6, 7]\ngrid.mask_by_index! &.<(3)\ngrid.to_a # => [0, 1, 2, 0, 0, 0, 0, 0]\n```","summary":"<p>Masks a grid by index.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":633,"url":null},"def":{"name":"mask_by_index!","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Int32 -> Bool)"},"return_type":"self","visibility":"Public","body":"map_with_index! do |ele, i|\n  (  yield i) ? ele : 0.0\nend"}},{"html_id":"mask_by_loc(&:Location->Bool):self-instance-method","name":"mask_by_loc","doc":"Returns a grid mask. Locations for which the passed block returns `true` are set\nto 1, otherwise 0.\n\nGrid masks are very useful to deal with multiple grids, and when points are to be\nselected based on one grid only.\n\n```\ngrid = Grid.new({2, 2, 2}, Parallelepiped[10, 10, 10]) { |i, j, k| i * 4 + j * 2 + k }\ngrid.to_a                                  # => [0, 1, 2, 3, 4, 5, 6, 7]\ngrid.mask_by_loc { |i, j, k| k == 1 }.to_a # => [0, 1, 0, 1, 0, 1, 0, 1]\ngrid.to_a                                  # => [0, 1, 2, 3, 4, 5, 6, 7]\n```","summary":"<p>Returns a grid mask.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":649,"url":null},"def":{"name":"mask_by_loc","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Location -> Bool)"},"return_type":"self","visibility":"Public","body":"map_with_loc do |_, loc|\n  (  yield loc) ? 1.0 : 0.0\nend"}},{"html_id":"mask_by_loc!(&:Location->Bool):self-instance-method","name":"mask_by_loc!","doc":"Masks a grid by location. Locations for which the passed block returns `false` are\nset to 0.\n\nOptimized version of creating a mask and applying it to the same grid, but avoids\ncreating intermediate grids. This is equivalent to `grid = grid * grid.mask_by_loc\n{ ... }`\n\n```\ngrid = Grid.new({2, 2, 2}, Parallelepiped[1, 1, 1]) { |i, j, k| i * 4 + j * 2 + k }\ngrid.to_a # => [0, 1, 2, 3, 4, 5, 6, 7]\ngrid.mask_by_loc! { |(i, j, k)| i == 1 }\ngrid.to_a # => [0, 0, 0, 0, 4, 5, 6, 7]\n```","summary":"<p>Masks a grid by location.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":666,"url":null},"def":{"name":"mask_by_loc!","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Location -> Bool)"},"return_type":"self","visibility":"Public","body":"map_with_loc! do |ele, loc|\n  (  yield loc) ? ele : 0.0\nend"}},{"html_id":"mean(axis:Int):Array(Float64)-instance-method","name":"mean","doc":"Returns the arithmetic mean along *axis*. Axis is specified as an\ninteger: 0-2 refer to the direction of the first, second or third\nbasis vector, respectively.\n\nRaises IndexError is *axis* is out of bounds.\n\n```\ngrid = Grid.new({2, 3, 4}, Parallelepiped[1, 1, 1]) { |i, j, k| i * 12 + j * 4 + k }\ngrid.mean(axis: 0) # => [5.5, 17.5]\ngrid.mean(axis: 1) # => [7.5, 11.5, 15.5]\ngrid.mean(axis: 2) # => [10, 11, 12, 13]\ngrid.mean(axis: 3) # raises IndexError\n```","summary":"<p>Returns the arithmetic mean along <em>axis</em>.</p>","abstract":false,"args":[{"name":"axis","external_name":"axis","restriction":"Int"}],"args_string":"(axis : Int) : Array(Float64)","args_html":"(axis : Int) : <a href=\"../../Array.html\">Array</a>(Float64)","location":{"filename":"src/chem/spatial/grid.cr","line_number":693,"url":null},"def":{"name":"mean","args":[{"name":"axis","external_name":"axis","restriction":"Int"}],"return_type":"Array(Float64)","visibility":"Public","body":"values = Array(Float64).new(@dim[axis])\neach_axial_slice(axis, reuse: true) do |slice|\n  values << (slice.sum / slice.size)\nend\nvalues\n"}},{"html_id":"mean:Float64-instance-method","name":"mean","doc":"Returns the arithmetic mean of the grid elements.\n\n```\ngrid = Grid.new({2, 3, 4}, Parallelepiped[1, 1, 1]) { |i, j, k| i * 12 + j * 4 + k }\ngrid.mean # => 11.5\n```","summary":"<p>Returns the arithmetic mean of the grid elements.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":676,"url":null},"def":{"name":"mean","return_type":"Float64","visibility":"Public","body":"sum / size"}},{"html_id":"mean_with_coords(axis:Int):Array(Tuple(Float64,Float64))-instance-method","name":"mean_with_coords","doc":"Returns the arithmetic mean along *axis* with its coordinates.\nAxis is specified as an integer: 0-2 refer to the direction of the\nfirst, second or third basis vector, respectively.\n\nRaises IndexError is *axis* is out of bounds.\n\n```\ngrid = Grid.new({2, 3, 5}, Parallelepiped[1, 1, 1]) { |i, j, k| i * 12 + j * 4 + k }\ngrid.mean(axis: 1) # => [{9.5, 0.0}, {14.5, 0.5}, {19.5, 1.0}]\n```","summary":"<p>Returns the arithmetic mean along <em>axis</em> with its coordinates.</p>","abstract":false,"args":[{"name":"axis","external_name":"axis","restriction":"Int"}],"args_string":"(axis : Int) : Array(Tuple(Float64, Float64))","args_html":"(axis : Int) : <a href=\"../../Array.html\">Array</a>(Tuple(Float64, Float64))","location":{"filename":"src/chem/spatial/grid.cr","line_number":711,"url":null},"def":{"name":"mean_with_coords","args":[{"name":"axis","external_name":"axis","restriction":"Int"}],"return_type":"Array(Tuple(Float64, Float64))","visibility":"Public","body":"delta = resolution[axis]\ni = 0\nary = Array(Tuple(Float64, Float64)).new(@dim[axis])\neach_axial_slice(axis, reuse: true) do |slice|\n  ary << {slice.sum / slice.size, i * delta}\n  i = i + 1\nend\nary\n"}},{"html_id":"ni:Int32-instance-method","name":"ni","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":722,"url":null},"def":{"name":"ni","return_type":"Int32","visibility":"Public","body":"dim[0]"}},{"html_id":"nj:Int32-instance-method","name":"nj","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":726,"url":null},"def":{"name":"nj","return_type":"Int32","visibility":"Public","body":"dim[1]"}},{"html_id":"nk:Int32-instance-method","name":"nk","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":730,"url":null},"def":{"name":"nk","return_type":"Int32","visibility":"Public","body":"dim[2]"}},{"html_id":"origin(*args,**options)-instance-method","name":"origin","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/grid.cr","line_number":19,"url":null},"def":{"name":"origin","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@bounds.origin(*args, **options)"}},{"html_id":"origin(*args,**options,&)-instance-method","name":"origin","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/grid.cr","line_number":19,"url":null},"def":{"name":"origin","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@bounds.origin(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"resolution:FloatTriple-instance-method","name":"resolution","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":734,"url":null},"def":{"name":"resolution","return_type":"FloatTriple","visibility":"Public","body":"size = bounds.size\n{ni == 1 ? 0.0 : size[0] / (ni - 1), nj == 1 ? 0.0 : size[1] / (nj - 1), nk == 1 ? 0.0 : size[2] / (nk - 1)}\n"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Returns the number of elements in this container.","summary":"<p>Returns the number of elements in this container.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":741,"url":null},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"(ni * nj) * nk"}},{"html_id":"source_file:Path|Nil-instance-method","name":"source_file","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":15,"url":null},"def":{"name":"source_file","return_type":"Path | ::Nil","visibility":"Public","body":"@source_file"}},{"html_id":"step(di:Int,dj:Int,dk:Int):self-instance-method","name":"step","abstract":false,"args":[{"name":"di","external_name":"di","restriction":"Int"},{"name":"dj","external_name":"dj","restriction":"Int"},{"name":"dk","external_name":"dk","restriction":"Int"}],"args_string":"(di : Int, dj : Int, dk : Int) : self","args_html":"(di : Int, dj : Int, dk : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":749,"url":null},"def":{"name":"step","args":[{"name":"di","external_name":"di","restriction":"Int"},{"name":"dj","external_name":"dj","restriction":"Int"},{"name":"dk","external_name":"dk","restriction":"Int"}],"return_type":"self","visibility":"Public","body":"if (di > 0 && dj > 0) && dk > 0\nelse\n  raise(ArgumentError.new(\"Invalid step size\"))\nend\nnew_ni = ni // di\nif (new_ni % di) > 0\n  new_ni = new_ni + 1\nend\nnew_nj = nj // dj\nif (new_nj % dj) > 0\n  new_nj = new_nj + 1\nend\nnew_nk = nk // dk\nif (new_nk % dk) > 0\n  new_nk = new_nk + 1\nend\nGrid.new({new_ni, new_nj, new_nk}, bounds) do |i, j, k|\n  unsafe_fetch(unsafe_index(Location.new(i * di, j * dj, k * dk)))\nend\n"}},{"html_id":"step(n:Int):self-instance-method","name":"step","abstract":false,"args":[{"name":"n","external_name":"n","restriction":"Int"}],"args_string":"(n : Int) : self","args_html":"(n : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/grid.cr","line_number":745,"url":null},"def":{"name":"step","args":[{"name":"n","external_name":"n","restriction":"Int"}],"return_type":"self","visibility":"Public","body":"step(n, n, n)"}},{"html_id":"to_a:Array(Float64)-instance-method","name":"to_a","doc":"Returns an `Array` with all the elements in the collection.\n\n```\n{1, 2, 3}.to_a # => [1, 2, 3]\n```","summary":"<p>Returns an <code><a href=\"../../Array.html\">Array</a></code> with all the elements in the collection.</p>","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":762,"url":null},"def":{"name":"to_a","return_type":"Array(Float64)","visibility":"Public","body":"Array(Float64).build(size) do |buffer|\n  buffer.copy_from(@buffer, size)\n  size\nend"}},{"html_id":"to_chgcar(output:IO|Path|String,structure:Structure):Nil-instance-method","name":"to_chgcar","doc":"Writes the grid to *output* using the `Chem::VASP::Chgcar`\nfile format. Arguments are fowarded to `Chem::VASP::Chgcar::Writer.open`.","summary":"<p>Writes the grid to <em>output</em> using the <code><a href=\"../../Chem/VASP/Chgcar.html\">Chem::VASP::Chgcar</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(output : IO | Path | String, structure : Structure) : Nil","args_html":"(output : IO | Path | String, structure : <a href=\"../../Chem/Structure.html\">Structure</a>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_chgcar","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"return_type":"Nil","visibility":"Public","body":"Chem::VASP::Chgcar::Writer.open(output, structure) do |writer|\n  writer << self\nend"}},{"html_id":"to_chgcar(structure:Structure):String-instance-method","name":"to_chgcar","doc":"Returns a string representation of the grid using\nthe `Chem::VASP::Chgcar` file format. Arguments are fowarded to\n`Chem::VASP::Chgcar::Writer.open`.","summary":"<p>Returns a string representation of the grid using the <code><a href=\"../../Chem/VASP/Chgcar.html\">Chem::VASP::Chgcar</a></code> file format.</p>","abstract":false,"args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure) : String","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_chgcar","args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_chgcar(io, structure)\nend"}},{"html_id":"to_cube(output:IO|Path|String,atoms:AtomCollection):Nil-instance-method","name":"to_cube","doc":"Writes the grid to *output* using the `Chem::Cube`\nfile format. Arguments are fowarded to `Chem::Cube::Writer.open`.","summary":"<p>Writes the grid to <em>output</em> using the <code><a href=\"../../Chem/Cube.html\">Chem::Cube</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"}],"args_string":"(output : IO | Path | String, atoms : AtomCollection) : Nil","args_html":"(output : IO | Path | String, atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_cube","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"}],"return_type":"Nil","visibility":"Public","body":"Chem::Cube::Writer.open(output, atoms) do |writer|\n  writer << self\nend"}},{"html_id":"to_cube(atoms:AtomCollection):String-instance-method","name":"to_cube","doc":"Returns a string representation of the grid using\nthe `Chem::Cube` file format. Arguments are fowarded to\n`Chem::Cube::Writer.open`.","summary":"<p>Returns a string representation of the grid using the <code><a href=\"../../Chem/Cube.html\">Chem::Cube</a></code> file format.</p>","abstract":false,"args":[{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"}],"args_string":"(atoms : AtomCollection) : String","args_html":"(atoms : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_cube","args":[{"name":"atoms","external_name":"atoms","restriction":"AtomCollection"}],"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_cube(io, atoms)\nend"}},{"html_id":"to_dx(output:IO|Path|String):Nil-instance-method","name":"to_dx","doc":"Writes the grid to *output* using the `Chem::DX`\nfile format. Arguments are fowarded to `Chem::DX::Writer.open`.","summary":"<p>Writes the grid to <em>output</em> using the <code><a href=\"../../Chem/DX.html\">Chem::DX</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_dx","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"return_type":"Nil","visibility":"Public","body":"Chem::DX::Writer.open(output) do |writer|\n  writer << self\nend"}},{"html_id":"to_dx:String-instance-method","name":"to_dx","doc":"Returns a string representation of the grid using\nthe `Chem::DX` file format. Arguments are fowarded to\n`Chem::DX::Writer.open`.","summary":"<p>Returns a string representation of the grid using the <code><a href=\"../../Chem/DX.html\">Chem::DX</a></code> file format.</p>","abstract":false,"location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_dx","return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_dx(io)\nend"}},{"html_id":"to_io(io:IO,format:IO::ByteFormat=:system_endian):Nil-instance-method","name":"to_io","doc":"Writes the binary representation of the grid to *io* in the given\n*format*. See also `IO#write_bytes`. Raises `ArgumentError` is the\nencoding is not UTF-8.","summary":"<p>Writes the binary representation of the grid to <em>io</em> in the given <em>format</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","default_value":":system_endian","external_name":"format","restriction":"IO::ByteFormat"}],"args_string":"(io : IO, format : IO::ByteFormat = :system_endian) : Nil","args_html":"(io : IO, format : IO::ByteFormat = <span class=\"n\">:system_endian</span>) : Nil","location":{"filename":"src/chem/spatial/grid.cr","line_number":772,"url":null},"def":{"name":"to_io","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","default_value":":system_endian","external_name":"format","restriction":"IO::ByteFormat"}],"return_type":"Nil","visibility":"Public","body":"if io.encoding == \"UTF-8\"\nelse\n  raise(ArgumentError.new(\"Invalid IO encoding\"))\nend\nio.write_bytes(@bounds, format)\nif str = @source_file.try(&.to_s)\n  io.write_bytes(str.bytesize, format)\n  io.write_string(str.to_slice)\nelse\n  io.write_bytes(0, format)\nend\n@dim.each(&.to_io(io, format))\nio.write((@buffer.to_slice(size)).to_unsafe_bytes)\n"}},{"html_id":"to_locpot(output:IO|Path|String,structure:Structure):Nil-instance-method","name":"to_locpot","doc":"Writes the grid to *output* using the `Chem::VASP::Locpot`\nfile format. Arguments are fowarded to `Chem::VASP::Locpot::Writer.open`.","summary":"<p>Writes the grid to <em>output</em> using the <code><a href=\"../../Chem/VASP/Locpot.html\">Chem::VASP::Locpot</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(output : IO | Path | String, structure : Structure) : Nil","args_html":"(output : IO | Path | String, structure : <a href=\"../../Chem/Structure.html\">Structure</a>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_locpot","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"return_type":"Nil","visibility":"Public","body":"Chem::VASP::Locpot::Writer.open(output, structure) do |writer|\n  writer << self\nend"}},{"html_id":"to_locpot(structure:Structure):String-instance-method","name":"to_locpot","doc":"Returns a string representation of the grid using\nthe `Chem::VASP::Locpot` file format. Arguments are fowarded to\n`Chem::VASP::Locpot::Writer.open`.","summary":"<p>Returns a string representation of the grid using the <code><a href=\"../../Chem/VASP/Locpot.html\">Chem::VASP::Locpot</a></code> file format.</p>","abstract":false,"args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure) : String","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_locpot","args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_locpot(io, structure)\nend"}},{"html_id":"to_unsafe:Pointer(Float64)-instance-method","name":"to_unsafe","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":785,"url":null},"def":{"name":"to_unsafe","return_type":"Pointer(Float64)","visibility":"Public","body":"@buffer"}},{"html_id":"unsafe_fetch(index:Int):Float64-instance-method","name":"unsafe_fetch","doc":"Returns the element at the given *index*, without doing any bounds check.\n\n`Indexable` makes sure to invoke this method with *index* in `0...size`,\nso converting negative indices to positive ones is not needed here.\n\nClients never invoke this method directly. Instead, they access\nelements with `#[](index)` and `#[]?(index)`.\n\nThis method should only be directly invoked if you are absolutely\nsure the index is in bounds, to avoid a bounds check for a small boost\nof performance.","summary":"<p>Returns the element at the given <em>index</em>, without doing any bounds check.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : Float64","args_html":"(index : Int) : Float64","location":{"filename":"src/chem/spatial/grid.cr","line_number":790,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"index","external_name":"index","restriction":"Int"}],"return_type":"Float64","visibility":"Public","body":"@buffer[index]"}},{"html_id":"unsafe_fetch(loc:Location):Float64-instance-method","name":"unsafe_fetch","abstract":false,"args":[{"name":"loc","external_name":"loc","restriction":"Location"}],"args_string":"(loc : Location) : Float64","args_html":"(loc : <a href=\"../../Chem/Spatial/Grid/Location.html\">Location</a>) : Float64","location":{"filename":"src/chem/spatial/grid.cr","line_number":795,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"loc","external_name":"loc","restriction":"Location"}],"return_type":"Float64","visibility":"Public","body":"unsafe_fetch(unsafe_index(loc))"}},{"html_id":"volume(*args,**options)-instance-method","name":"volume","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/spatial/grid.cr","line_number":19,"url":null},"def":{"name":"volume","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@bounds.volume(*args, **options)"}},{"html_id":"volume(*args,**options,&)-instance-method","name":"volume","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/spatial/grid.cr","line_number":19,"url":null},"def":{"name":"volume","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@bounds.volume(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"write(output:IO|Path|String,format:Chem::Format|String):Nil-instance-method","name":"write","doc":"Writes the grid to *output* using *format*. Raises\n`ArgumentError` if *format* has required arguments or cannot\nwrite `Chem::Spatial::Grid`.\n\nThe supported file formats are `Chem::DX`. Use the\n`#to_*` methods to customize how the object is written in the\ncorresponding file format if possible.","summary":"<p>Writes the grid to <em>output</em> using <em>format</em>.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(output : IO | Path | String, format : Chem::Format | String) : Nil","args_html":"(output : IO | Path | String, format : <a href=\"../../Chem/Format.html\">Chem::Format</a> | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"write","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"return_type":"Nil","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .cube?\n  raise(ArgumentError.new(\"#{format} format has required arguments. Use `#to_cube` instead.\"))\nwhen .dx?\n  to_dx(output)\nwhen .chgcar?\n  raise(ArgumentError.new(\"#{format} format has required arguments. Use `#to_chgcar` instead.\"))\nwhen .locpot?\n  raise(ArgumentError.new(\"#{format} format has required arguments. Use `#to_locpot` instead.\"))\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::Spatial::Grid\"))\nend\n"}},{"html_id":"write(path:Path|String):Nil-instance-method","name":"write","doc":"Writes the grid to the specified file. The file\nformat is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nThe supported file formats are the following:\n\n- `Chem::DX` (.dx)\n\nUse the `#to_*` methods to customize how the object is written\nin the corresponding file format if possible.","summary":"<p>Writes the grid to the specified file.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : Nil","args_html":"(path : Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"write","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"Nil","visibility":"Public","body":"write(path, ::Chem::Format.from_filename(path))"}}],"types":[{"html_id":"chem.cr/Chem/Spatial/Grid/Dimensions","path":"Chem/Spatial/Grid/Dimensions.html","kind":"alias","full_name":"Chem::Spatial::Grid::Dimensions","name":"Dimensions","abstract":false,"locations":[{"filename":"src/chem/spatial/grid.cr","line_number":9,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":true,"aliased":"Tuple(Int32, Int32, Int32)","aliased_html":"{Int32, Int32, Int32}","const":false,"namespace":{"html_id":"chem.cr/Chem/Spatial/Grid","kind":"class","full_name":"Chem::Spatial::Grid","name":"Grid"}},{"html_id":"chem.cr/Chem/Spatial/Grid/Info","path":"Chem/Spatial/Grid/Info.html","kind":"struct","full_name":"Chem::Spatial::Grid::Info","name":"Info","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/register_format.cr","line_number":270,"url":null},{"filename":"src/chem/spatial/grid.cr","line_number":11,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Spatial/Grid","kind":"class","full_name":"Chem::Spatial::Grid","name":"Grid"},"constructors":[{"html_id":"from_chgcar(input:IO|Path|String):self-class-method","name":"from_chgcar","doc":"Returns the header encoded in *input* using the\n`Chem::VASP::Chgcar` file format. Arguments are forwarded to\n`Chem::VASP::Chgcar::Reader.open`.","summary":"<p>Returns the header encoded in <em>input</em> using the <code><a href=\"../../../Chem/VASP/Chgcar.html\">Chem::VASP::Chgcar</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_chgcar","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::VASP::Chgcar::Reader.open(input) do |reader|\n  reader.read_header\nend"}},{"html_id":"from_cube(input:IO|Path|String):self-class-method","name":"from_cube","doc":"Returns the header encoded in *input* using the\n`Chem::Cube` file format. Arguments are forwarded to\n`Chem::Cube::Reader.open`.","summary":"<p>Returns the header encoded in <em>input</em> using the <code><a href=\"../../../Chem/Cube.html\">Chem::Cube</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_cube","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::Cube::Reader.open(input) do |reader|\n  reader.read_header\nend"}},{"html_id":"from_dx(input:IO|Path|String):self-class-method","name":"from_dx","doc":"Returns the header encoded in *input* using the\n`Chem::DX` file format. Arguments are forwarded to\n`Chem::DX::Reader.open`.","summary":"<p>Returns the header encoded in <em>input</em> using the <code><a href=\"../../../Chem/DX.html\">Chem::DX</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_dx","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::DX::Reader.open(input) do |reader|\n  reader.read_header\nend"}},{"html_id":"from_locpot(input:IO|Path|String):self-class-method","name":"from_locpot","doc":"Returns the header encoded in *input* using the\n`Chem::VASP::Locpot` file format. Arguments are forwarded to\n`Chem::VASP::Locpot::Reader.open`.","summary":"<p>Returns the header encoded in <em>input</em> using the <code><a href=\"../../../Chem/VASP/Locpot.html\">Chem::VASP::Locpot</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_locpot","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::VASP::Locpot::Reader.open(input) do |reader|\n  reader.read_header\nend"}},{"html_id":"new(bounds:Parallelepiped,dim:Dimensions)-class-method","name":"new","abstract":false,"args":[{"name":"bounds","external_name":"bounds","restriction":"Parallelepiped"},{"name":"dim","external_name":"dim","restriction":"Dimensions"}],"args_string":"(bounds : Parallelepiped, dim : Dimensions)","args_html":"(bounds : <a href=\"../../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>, dim : <a href=\"../../../Chem/Spatial/Grid/Dimensions.html\">Dimensions</a>)","location":{"filename":"src/chem/spatial/grid.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"bounds","external_name":"bounds","restriction":"Parallelepiped"},{"name":"dim","external_name":"dim","restriction":"Dimensions"}],"visibility":"Public","body":"_ = allocate\n_.initialize(bounds, dim)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"read(input:IO|Path|String,format:Chem::Format|String):self-class-method","name":"read","doc":"Returns the header encoded in the specified file\nusing *format*. Raises `ArgumentError` if *format* has\nrequired arguments or cannot read `Chem::Spatial::Grid::Info`.\n\nThe supported file formats are `Chem::Cube`, `Chem::DX`, `Chem::VASP::Chgcar`, `Chem::VASP::Locpot`. Use the\n`.from_*` methods to customize how the object is decoded in\nthe corresponding file format if possible.","summary":"<p>Returns the header encoded in the specified file using <em>format</em>.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(input : IO | Path | String, format : Chem::Format | String) : self","args_html":"(input : IO | Path | String, format : <a href=\"../../../Chem/Format.html\">Chem::Format</a> | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"read","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"return_type":"self","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .cube?\n  from_cube(input)\nwhen .dx?\n  from_dx(input)\nwhen .chgcar?\n  from_chgcar(input)\nwhen .locpot?\n  from_locpot(input)\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::Spatial::Grid::Info\"))\nend\n"}},{"html_id":"read(path:Path|String):self-class-method","name":"read","doc":"Returns the header encoded in the specified file.\nThe file format is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nThe supported file formats are the following:\n\n- `Chem::Cube` (.cube)\n- `Chem::DX` (.dx)\n- `Chem::VASP::Chgcar` (CHGCAR)\n- `Chem::VASP::Locpot` (LOCPOT)\n\nUse the `.from_*` methods to customize how the object is\ndecoded in the corresponding file format if possible.","summary":"<p>Returns the header encoded in the specified file.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"read","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"read(path, ::Chem::Format.from_filename(path))"}}],"instance_methods":[{"html_id":"bounds:Parallelepiped-instance-method","name":"bounds","abstract":false,"def":{"name":"bounds","return_type":"Parallelepiped","visibility":"Public","body":"@bounds"}},{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/chem/spatial/grid.cr","line_number":11,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@bounds.clone, @dim.clone)"}},{"html_id":"copy_with(bounds_bounds=@bounds,dim_dim=@dim)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_bounds","default_value":"@bounds","external_name":"bounds","restriction":""},{"name":"_dim","default_value":"@dim","external_name":"dim","restriction":""}],"args_string":"(bounds _bounds = @bounds, dim _dim = @dim)","args_html":"(bounds _bounds = @bounds, dim _dim = @dim)","location":{"filename":"src/chem/spatial/grid.cr","line_number":11,"url":null},"def":{"name":"copy_with","args":[{"name":"_bounds","default_value":"@bounds","external_name":"bounds","restriction":""},{"name":"_dim","default_value":"@dim","external_name":"dim","restriction":""}],"visibility":"Public","body":"self.class.new(_bounds, _dim)"}},{"html_id":"dim:Dimensions-instance-method","name":"dim","abstract":false,"def":{"name":"dim","return_type":"Dimensions","visibility":"Public","body":"@dim"}}]},{"html_id":"chem.cr/Chem/Spatial/Grid/Location","path":"Chem/Spatial/Grid/Location.html","kind":"alias","full_name":"Chem::Spatial::Grid::Location","name":"Location","abstract":false,"locations":[{"filename":"src/chem/spatial/grid.cr","line_number":10,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":true,"aliased":"Tuple(Int32, Int32, Int32)","aliased_html":"{Int32, Int32, Int32}","const":false,"namespace":{"html_id":"chem.cr/Chem/Spatial/Grid","kind":"class","full_name":"Chem::Spatial::Grid","name":"Grid"}}]},{"html_id":"chem.cr/Chem/Spatial/KDTree","path":"Chem/Spatial/KDTree.html","kind":"class","full_name":"Chem::Spatial::KDTree","name":"KDTree","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/kdtree.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"subclasses":[{"html_id":"chem.cr/Chem/Spatial/PeriodicKDTree","kind":"class","full_name":"Chem::Spatial::PeriodicKDTree","name":"PeriodicKDTree"}],"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"constructors":[{"html_id":"new(points:Array(Vec3),cell:Parallelepiped|Nil)-class-method","name":"new","abstract":false,"args":[{"name":"points","external_name":"points","restriction":"Array(Vec3)"},{"name":"cell","external_name":"cell","restriction":"Parallelepiped | ::Nil"}],"args_string":"(points : Array(Vec3), cell : Parallelepiped | Nil)","args_html":"(points : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>), cell : <a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a> | Nil)","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"points","external_name":"points","restriction":"Array(Vec3)"},{"name":"cell","external_name":"cell","restriction":"Parallelepiped | ::Nil"}],"visibility":"Public","body":"if cell\n  PeriodicKDTree.new(points, cell)\nelse\n  new(points)\nend"}},{"html_id":"new(points:Array(Vec3))-class-method","name":"new","abstract":false,"args":[{"name":"points","external_name":"points","restriction":"Array(Vec3)"}],"args_string":"(points : Array(Vec3))","args_html":"(points : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>))","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"points","external_name":"points","restriction":"Array(Vec3)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(points)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"each_neighbor(pos:Vec3,*,withinradius:Number,&block:Int32,Float64->):Nil-instance-method","name":"each_neighbor","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"","external_name":"","restriction":""},{"name":"radius","external_name":"within","restriction":"Number"}],"args_string":"(pos : Vec3, *, within radius : Number, &block : Int32, Float64 -> ) : Nil","args_html":"(pos : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, *, within radius : <a href=\"../../Number.html\">Number</a>, &block : Int32, Float64 -> ) : Nil","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":52,"url":null},"def":{"name":"each_neighbor","args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"","external_name":"","restriction":""},{"name":"radius","external_name":"within","restriction":"Number"}],"splat_index":1,"yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(Int32, Float64 ->)"},"return_type":"Nil","visibility":"Public","body":"search(@root, pos, radius ** 2, &block)"}},{"html_id":"nearest(pos:Vec3):Int32-instance-method","name":"nearest","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"Vec3"}],"args_string":"(pos : Vec3) : Int32","args_html":"(pos : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : Int32","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":56,"url":null},"def":{"name":"nearest","args":[{"name":"pos","external_name":"pos","restriction":"Vec3"}],"return_type":"Int32","visibility":"Public","body":"(neighbors(pos, 1)).first"}},{"html_id":"nearest_with_distance(pos:Vec3):Tuple(Int32,Float64)-instance-method","name":"nearest_with_distance","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"Vec3"}],"args_string":"(pos : Vec3) : Tuple(Int32, Float64)","args_html":"(pos : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : Tuple(Int32, Float64)","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":60,"url":null},"def":{"name":"nearest_with_distance","args":[{"name":"pos","external_name":"pos","restriction":"Vec3"}],"return_type":"::Tuple(Int32, Float64)","visibility":"Public","body":"(neighbors_with_distances(pos, 1)).first"}},{"html_id":"neighbors(pos:Vec3,count:Int):Array(Int32)-instance-method","name":"neighbors","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"count","external_name":"count","restriction":"Int"}],"args_string":"(pos : Vec3, count : Int) : Array(Int32)","args_html":"(pos : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, count : Int) : <a href=\"../../Array.html\">Array</a>(Int32)","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":64,"url":null},"def":{"name":"neighbors","args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"count","external_name":"count","restriction":"Int"}],"return_type":"Array(Int32)","visibility":"Public","body":"(neighbors_with_distances(pos, count)).map(&.[](0))"}},{"html_id":"neighbors(pos:Vec3,*,withinradius:Number):Array(Int32)-instance-method","name":"neighbors","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"","external_name":"","restriction":""},{"name":"radius","external_name":"within","restriction":"Number"}],"args_string":"(pos : Vec3, *, within radius : Number) : Array(Int32)","args_html":"(pos : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, *, within radius : <a href=\"../../Number.html\">Number</a>) : <a href=\"../../Array.html\">Array</a>(Int32)","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":68,"url":null},"def":{"name":"neighbors","args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"","external_name":"","restriction":""},{"name":"radius","external_name":"within","restriction":"Number"}],"splat_index":1,"return_type":"Array(Int32)","visibility":"Public","body":"(neighbors_with_distances(pos, within: radius)).map(&.[](0))"}},{"html_id":"neighbors_with_distances(pos:Vec3,count:Int):Array(Tuple(Int32,Float64))-instance-method","name":"neighbors_with_distances","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"count","external_name":"count","restriction":"Int"}],"args_string":"(pos : Vec3, count : Int) : Array(Tuple(Int32, Float64))","args_html":"(pos : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, count : Int) : <a href=\"../../Array.html\">Array</a>(Tuple(Int32, Float64))","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":72,"url":null},"def":{"name":"neighbors_with_distances","args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"count","external_name":"count","restriction":"Int"}],"return_type":"Array(::Tuple(Int32, Float64))","visibility":"Public","body":"neighbors = Array(Tuple(Int32, Float64)).new(count)\nsearch(@root, pos, count, neighbors)\nneighbors.sort_by!(&.[](1))\n"}},{"html_id":"neighbors_with_distances(pos:Vec3,*,withinradius:Number):Array(Tuple(Int32,Float64))-instance-method","name":"neighbors_with_distances","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"","external_name":"","restriction":""},{"name":"radius","external_name":"within","restriction":"Number"}],"args_string":"(pos : Vec3, *, within radius : Number) : Array(Tuple(Int32, Float64))","args_html":"(pos : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, *, within radius : <a href=\"../../Number.html\">Number</a>) : <a href=\"../../Array.html\">Array</a>(Tuple(Int32, Float64))","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":78,"url":null},"def":{"name":"neighbors_with_distances","args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"","external_name":"","restriction":""},{"name":"radius","external_name":"within","restriction":"Number"}],"splat_index":1,"return_type":"Array(::Tuple(Int32, Float64))","visibility":"Public","body":"neighbors = [] of ::Tuple(Int32, Float64)\neach_neighbor(pos, within: radius) do |index, dis2|\n  neighbors << {index, dis2}\nend\nneighbors.sort_by!(&.[](1))\n"}}]},{"html_id":"chem.cr/Chem/Spatial/Mat3","path":"Chem/Spatial/Mat3.html","kind":"struct","full_name":"Chem::Spatial::Mat3","name":"Mat3","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/mat3.cr","line_number":4,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":"A 3x3 matrix in row-major order. This is useful for encoding linear\nmaps such as scaling and rotation (see `Transform`).","summary":"<p>A 3x3 matrix in row-major order.</p>","class_methods":[{"html_id":"basis(i:Vec3,j:Vec3,k:Vec3):Spatial::Mat3-class-method","name":"basis","doc":"Returns a matrix in column-major order representing the basis\ndefined by the basis vectors.","summary":"<p>Returns a matrix in column-major order representing the basis defined by the basis vectors.</p>","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Vec3"},{"name":"j","external_name":"j","restriction":"Vec3"},{"name":"k","external_name":"k","restriction":"Vec3"}],"args_string":"(i : Vec3, j : Vec3, k : Vec3) : Spatial::Mat3","args_html":"(i : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, j : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, k : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Chem/Spatial/Mat3.html\">Spatial::Mat3</a>","location":{"filename":"src/chem/spatial/mat3.cr","line_number":35,"url":null},"def":{"name":"basis","args":[{"name":"i","external_name":"i","restriction":"Vec3"},{"name":"j","external_name":"j","restriction":"Vec3"},{"name":"k","external_name":"k","restriction":"Vec3"}],"return_type":"Spatial::Mat3","visibility":"Public","body":"Mat3[[i.x, j.x, k.x], [i.y, j.y, k.y], [i.z, j.z, k.z]]"}}],"constructors":[{"html_id":"additive_identity:self-class-method","name":"additive_identity","doc":"Returns the additive identity of the matrix (zero matrix).","summary":"<p>Returns the additive identity of the matrix (zero matrix).</p>","abstract":false,"location":{"filename":"src/chem/spatial/mat3.cr","line_number":29,"url":null},"def":{"name":"additive_identity","return_type":"self","visibility":"Public","body":"self.zero"}},{"html_id":"build(&:Pointer(Float64)->):self-class-method","name":"build","doc":"Creates a new `Mat3`, allocating an internal buffer, and yielding\nthat buffer to the passed block.\n\nThis method is **unsafe**, but is usually used to initialize the\nbuffer by other convenience methods without doing bounds check.","summary":"<p>Creates a new <code><a href=\"../../Chem/Spatial/Mat3.html\">Mat3</a></code>, allocating an internal buffer, and yielding that buffer to the passed block.</p>","abstract":false,"location":{"filename":"src/chem/spatial/mat3.cr","line_number":48,"url":null},"def":{"name":"build","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Pointer(Float64) ->)"},"return_type":"self","visibility":"Public","body":"mat = new\nyield mat.to_unsafe\nmat\n"}},{"html_id":"diagonal(d1:Number,d2:Number,d3:Number):self-class-method","name":"diagonal","doc":"Returns a new matrix with the elements at the diagonal set to the\ngiven values.","summary":"<p>Returns a new matrix with the elements at the diagonal set to the given values.</p>","abstract":false,"args":[{"name":"d1","external_name":"d1","restriction":"Number"},{"name":"d2","external_name":"d2","restriction":"Number"},{"name":"d3","external_name":"d3","restriction":"Number"}],"args_string":"(d1 : Number, d2 : Number, d3 : Number) : self","args_html":"(d1 : <a href=\"../../Number.html\">Number</a>, d2 : <a href=\"../../Number.html\">Number</a>, d3 : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/mat3.cr","line_number":61,"url":null},"def":{"name":"diagonal","args":[{"name":"d1","external_name":"d1","restriction":"Number"},{"name":"d2","external_name":"d2","restriction":"Number"},{"name":"d3","external_name":"d3","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"Mat3.build do |buffer|\n  buffer[0] = d1\n  buffer[4] = d2\n  buffer[8] = d3\nend"}},{"html_id":"diagonal(value:Number):self-class-method","name":"diagonal","doc":"Returns a new matrix with the diagonal set to *value*.","summary":"<p>Returns a new matrix with the diagonal set to <em>value</em>.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Number"}],"args_string":"(value : Number) : self","args_html":"(value : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/mat3.cr","line_number":55,"url":null},"def":{"name":"diagonal","args":[{"name":"value","external_name":"value","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"diagonal(value, value, value)"}},{"html_id":"from_io(io:IO,format:IO::ByteFormat):self-class-method","name":"from_io","doc":"Reads a matrix from *io* in the given *format*. See also:\n`IO#read_bytes`.","summary":"<p>Reads a matrix from <em>io</em> in the given <em>format</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","external_name":"format","restriction":"IO::ByteFormat"}],"args_string":"(io : IO, format : IO::ByteFormat) : self","args_html":"(io : IO, format : IO::ByteFormat) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/mat3.cr","line_number":71,"url":null},"def":{"name":"from_io","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","external_name":"format","restriction":"IO::ByteFormat"}],"return_type":"self","visibility":"Public","body":"Mat3.build do |buffer|\n  9.times do |i|\n    buffer[i] = io.read_bytes(Float64, format)\n  end\nend"}},{"html_id":"identity:self-class-method","name":"identity","doc":"Returns the identity matrix.","summary":"<p>Returns the identity matrix.</p>","abstract":false,"location":{"filename":"src/chem/spatial/mat3.cr","line_number":80,"url":null},"def":{"name":"identity","return_type":"self","visibility":"Public","body":"Mat3.diagonal(1)"}},{"html_id":"multiplicative_identity:self-class-method","name":"multiplicative_identity","doc":"Returns the multiplicative identity of the matrix (identity\nmatrix).","summary":"<p>Returns the multiplicative identity of the matrix (identity matrix).</p>","abstract":false,"location":{"filename":"src/chem/spatial/mat3.cr","line_number":86,"url":null},"def":{"name":"multiplicative_identity","return_type":"self","visibility":"Public","body":"self.identity"}},{"html_id":"zero:self-class-method","name":"zero","doc":"Returns the zero matrix.","summary":"<p>Returns the zero matrix.</p>","abstract":false,"location":{"filename":"src/chem/spatial/mat3.cr","line_number":91,"url":null},"def":{"name":"zero","return_type":"self","visibility":"Public","body":"Mat3.build do |buffer|\n  buffer.clear(9)\nend"}}],"instance_methods":[{"html_id":"*(rhs:Number):self-instance-method","name":"*","doc":"Returns the element-wise multiplication of the matrix by *rhs*.","summary":"<p>Returns the element-wise multiplication of the matrix by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/mat3.cr","line_number":142,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"map(&.*(rhs))"}},{"html_id":"*(rhs:Vec3):Vec3-instance-method","name":"*","doc":"Returns the multiplication of the matrix by *rhs*.","summary":"<p>Returns the multiplication of the matrix by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"args_string":"(rhs : Vec3) : Vec3","args_html":"(rhs : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/mat3.cr","line_number":159,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"return_type":"Vec3","visibility":"Public","body":"ptr = to_unsafe\nVec3[((ptr[0] * rhs.x) + (ptr[1] * rhs.y)) + (ptr[2] * rhs.z), ((ptr[3] * rhs.x) + (ptr[4] * rhs.y)) + (ptr[5] * rhs.z), ((ptr[6] * rhs.x) + (ptr[7] * rhs.y)) + (ptr[8] * rhs.z)]\n"}},{"html_id":"*(rhs:NumberTriple):self-instance-method","name":"*","doc":"Returns the row-wise multiplication of the matrix by *rhs*.","summary":"<p>Returns the row-wise multiplication of the matrix by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"NumberTriple"}],"args_string":"(rhs : NumberTriple) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/NumberTriple.html\">NumberTriple</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/mat3.cr","line_number":147,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"NumberTriple"}],"return_type":"self","visibility":"Public","body":"{% if true %}\n        ptr = to_unsafe\n        Mat3.build do |buffer|\n          {% for i in 0..8 %}\n            buffer[{{ i }}] = ptr[{{ i }}] * rhs.unsafe_fetch({{ i // 3 }})\n          {% end %}\n        end\n      {% end %}"}},{"html_id":"*(rhs:self):self-instance-method","name":"*","doc":"Returns the multiplication of the matrix by *rhs*.","summary":"<p>Returns the multiplication of the matrix by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/mat3.cr","line_number":169,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"{% if true %}\n        ptr = to_unsafe\n        other = rhs.to_unsafe\n        self.class.build do |buffer|\n          {% for i in 0..2 %}\n            {% for j in 0..2 %}\n              buffer[{{ (i * 3) + j }}] = \\\n              {% for k in 0..2 %}\n                ptr[{{ (i * 3) + k }}] * other[{{ (k * 3) + j }}] {{ if k < 2\n  \"+\".id\nend }}\n              {% end %}\n            {% end %}\n          {% end %}\n        end\n      {% end %}"}},{"html_id":"+(rhs:self):self-instance-method","name":"+","doc":"Returns the element-wise addition of the matrix by *rhs*.","summary":"<p>Returns the element-wise addition of the matrix by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/mat3.cr","line_number":124,"url":null},"def":{"name":"+","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"ptr = to_unsafe\nother = rhs.to_unsafe\nself.class.build do |buffer|\n  buffer[0] = ptr[0] + other[0]\n  buffer[1] = ptr[1] + other[1]\n  buffer[2] = ptr[2] + other[2]\n  buffer[3] = ptr[3] + other[3]\n  buffer[4] = ptr[4] + other[4]\n  buffer[5] = ptr[5] + other[5]\n  buffer[6] = ptr[6] + other[6]\n  buffer[7] = ptr[7] + other[7]\n  buffer[8] = ptr[8] + other[8]\nend\n"}},{"html_id":"-(rhs:self):self-instance-method","name":"-","doc":"Returns the element-wise subtraction of the matrix by *rhs*.","summary":"<p>Returns the element-wise subtraction of the matrix by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/mat3.cr","line_number":124,"url":null},"def":{"name":"-","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"ptr = to_unsafe\nother = rhs.to_unsafe\nself.class.build do |buffer|\n  buffer[0] = ptr[0] - other[0]\n  buffer[1] = ptr[1] - other[1]\n  buffer[2] = ptr[2] - other[2]\n  buffer[3] = ptr[3] - other[3]\n  buffer[4] = ptr[4] - other[4]\n  buffer[5] = ptr[5] - other[5]\n  buffer[6] = ptr[6] - other[6]\n  buffer[7] = ptr[7] - other[7]\n  buffer[8] = ptr[8] - other[8]\nend\n"}},{"html_id":"-:self-instance-method","name":"-","doc":"Returns the negation of the matrix.","summary":"<p>Returns the negation of the matrix.</p>","abstract":false,"location":{"filename":"src/chem/spatial/mat3.cr","line_number":120,"url":null},"def":{"name":"-","return_type":"self","visibility":"Public","body":"self * -1"}},{"html_id":"/(rhs:Number):self-instance-method","name":"/","doc":"Returns the element-wise division of the matrix by *rhs*.","summary":"<p>Returns the element-wise division of the matrix by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/mat3.cr","line_number":187,"url":null},"def":{"name":"/","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"map(&./(rhs))"}},{"html_id":"[](row:Int,cols:Range(Nil,Nil)):FloatTriple-instance-method","name":"[]","doc":"Returns the row at *row*. Raises `IndexError` if *row* is out of\nbounds.","summary":"<p>Returns the row at <em>row</em>.</p>","abstract":false,"args":[{"name":"row","external_name":"row","restriction":"Int"},{"name":"cols","external_name":"cols","restriction":"Range(Nil, Nil)"}],"args_string":"(row : Int, cols : Range(Nil, Nil)) : FloatTriple","args_html":"(row : Int, cols : <a href=\"../../Range.html\">Range</a>(Nil, Nil)) : <a href=\"../../Chem/Spatial/FloatTriple.html\">FloatTriple</a>","location":{"filename":"src/chem/spatial/mat3.cr","line_number":99,"url":null},"def":{"name":"[]","args":[{"name":"row","external_name":"row","restriction":"Int"},{"name":"cols","external_name":"cols","restriction":"Range(Nil, Nil)"}],"return_type":"FloatTriple","visibility":"Public","body":"if 0 <= row && row < 3\nelse\n  raise(IndexError.new)\nend\noffset = row * 3\n{unsafe_fetch(offset), unsafe_fetch(offset + 1), unsafe_fetch(offset + 2)}\n"}},{"html_id":"[](rows:Range(Nil,Nil),col:Int):FloatTriple-instance-method","name":"[]","doc":"Returns the column at *col*. Raises `IndexError` if *col* is out\nof bounds.","summary":"<p>Returns the column at <em>col</em>.</p>","abstract":false,"args":[{"name":"rows","external_name":"rows","restriction":"Range(Nil, Nil)"},{"name":"col","external_name":"col","restriction":"Int"}],"args_string":"(rows : Range(Nil, Nil), col : Int) : FloatTriple","args_html":"(rows : <a href=\"../../Range.html\">Range</a>(Nil, Nil), col : Int) : <a href=\"../../Chem/Spatial/FloatTriple.html\">FloatTriple</a>","location":{"filename":"src/chem/spatial/mat3.cr","line_number":107,"url":null},"def":{"name":"[]","args":[{"name":"rows","external_name":"rows","restriction":"Range(Nil, Nil)"},{"name":"col","external_name":"col","restriction":"Int"}],"return_type":"FloatTriple","visibility":"Public","body":"if 0 <= col && col < 3\nelse\n  raise(IndexError.new)\nend\n{unsafe_fetch(col), unsafe_fetch(col + 3), unsafe_fetch(col + 6)}\n"}},{"html_id":"[](row:Int,col:Int):Float64-instance-method","name":"[]","doc":"Returns the element at the given row and column. Raises\n`IndexError` if indices are out of bounds.","summary":"<p>Returns the element at the given row and column.</p>","abstract":false,"args":[{"name":"row","external_name":"row","restriction":"Int"},{"name":"col","external_name":"col","restriction":"Int"}],"args_string":"(row : Int, col : Int) : Float64","args_html":"(row : Int, col : Int) : Float64","location":{"filename":"src/chem/spatial/mat3.cr","line_number":114,"url":null},"def":{"name":"[]","args":[{"name":"row","external_name":"row","restriction":"Int"},{"name":"col","external_name":"col","restriction":"Int"}],"return_type":"Float64","visibility":"Public","body":"if (0 <= row && row < 3) && (0 <= col && col < 3)\nelse\n  raise(IndexError.new)\nend\nunsafe_fetch(row, col)\n"}},{"html_id":"close_to?(rhs:self,delta:Float64=Float64::EPSILON):Bool-instance-method","name":"close_to?","doc":"Returns `true` if the elements of the matrices are within *delta*\nfrom each other, else `false`.","summary":"<p>Returns <code>true</code> if the elements of the matrices are within <em>delta</em> from each other, else <code>false</code>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"delta","default_value":"Float64::EPSILON","external_name":"delta","restriction":"Float64"}],"args_string":"(rhs : self, delta : Float64 = Float64::EPSILON) : Bool","args_html":"(rhs : <span class=\"k\">self</span>, delta : Float64 = <span class=\"t\">Float64</span><span class=\"t\">::</span><span class=\"t\">EPSILON</span>) : Bool","location":{"filename":"src/chem/spatial/mat3.cr","line_number":193,"url":null},"def":{"name":"close_to?","args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"delta","default_value":"Float64::EPSILON","external_name":"delta","restriction":"Float64"}],"return_type":"Bool","visibility":"Public","body":"(0..8).all? do |i|\n  (unsafe_fetch(i)).close_to?(rhs.unsafe_fetch(i), delta)\nend"}},{"html_id":"det:Float64-instance-method","name":"det","doc":"Returns the determinant of the matrix.","summary":"<p>Returns the determinant of the matrix.</p>","abstract":false,"location":{"filename":"src/chem/spatial/mat3.cr","line_number":200,"url":null},"def":{"name":"det","return_type":"Float64","visibility":"Public","body":"ptr = to_unsafe\n((((((ptr[0] * ptr[4]) * ptr[8]) - ((ptr[0] * ptr[5]) * ptr[7])) - ((ptr[1] * ptr[3]) * ptr[8])) + ((ptr[1] * ptr[5]) * ptr[6])) + ((ptr[2] * ptr[3]) * ptr[7])) - ((ptr[2] * ptr[4]) * ptr[6])\n"}},{"html_id":"inv:self-instance-method","name":"inv","doc":"Returns the inverse matrix. Raises `ArgumentError` if the matrix\nis not invertible.\n\nThe inverse matrix is computed using the Cramer's rule, which\nstates that `inv(A) = 1 / det(A) * adj(A)` provided that `det(A)\n!= 0`.","summary":"<p>Returns the inverse matrix.</p>","abstract":false,"location":{"filename":"src/chem/spatial/mat3.cr","line_number":213,"url":null},"def":{"name":"inv","return_type":"self","visibility":"Public","body":"det = self.det\nif det.close_to?(0)\n  raise(ArgumentError.new(\"Matrix cannot be inverted\"))\nend\ninv_det = 1 / det\nptr = to_unsafe\nself.class.build do |buffer|\n  buffer[0] = ((ptr[4] * ptr[8]) - (ptr[5] * ptr[7])) * inv_det\n  buffer[1] = ((ptr[2] * ptr[7]) - (ptr[1] * ptr[8])) * inv_det\n  buffer[2] = ((ptr[1] * ptr[5]) - (ptr[2] * ptr[4])) * inv_det\n  buffer[3] = ((ptr[5] * ptr[6]) - (ptr[3] * ptr[8])) * inv_det\n  buffer[4] = ((ptr[0] * ptr[8]) - (ptr[2] * ptr[6])) * inv_det\n  buffer[5] = ((ptr[3] * ptr[2]) - (ptr[0] * ptr[5])) * inv_det\n  buffer[6] = ((ptr[3] * ptr[7]) - (ptr[6] * ptr[4])) * inv_det\n  buffer[7] = ((ptr[6] * ptr[1]) - (ptr[0] * ptr[7])) * inv_det\n  buffer[8] = ((ptr[0] * ptr[4]) - (ptr[3] * ptr[1])) * inv_det\nend\n"}},{"html_id":"map(&:Float64->Float64):self-instance-method","name":"map","doc":"Returns a new matrix with the results of the passed block for each\nelement in the matrix.","summary":"<p>Returns a new matrix with the results of the passed block for each element in the matrix.</p>","abstract":false,"location":{"filename":"src/chem/spatial/mat3.cr","line_number":233,"url":null},"def":{"name":"map","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Float64 -> Float64)"},"return_type":"self","visibility":"Public","body":"self.class.build do |buffer|\n  9.times do |i|\n    buffer[i] = yield unsafe_fetch(i)\n  end\nend"}},{"html_id":"to_a:Array(Float64)-instance-method","name":"to_a","doc":"Returns an array with all the elements of the matrix.","summary":"<p>Returns an array with all the elements of the matrix.</p>","abstract":false,"location":{"filename":"src/chem/spatial/mat3.cr","line_number":242,"url":null},"def":{"name":"to_a","return_type":"Array(Float64)","visibility":"Public","body":"Array(Float64).build(9) do |buffer|\n  buffer.copy_from(@buffer.to_unsafe, 9)\n  9\nend"}},{"html_id":"to_io(io:IO,format:IO::ByteFormat=:system_endian):Nil-instance-method","name":"to_io","doc":"Writes the binary representation of the matrix to *io* in the\ngiven *format*. See also `IO#write_bytes`.","summary":"<p>Writes the binary representation of the matrix to <em>io</em> in the given <em>format</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","default_value":":system_endian","external_name":"format","restriction":"IO::ByteFormat"}],"args_string":"(io : IO, format : IO::ByteFormat = :system_endian) : Nil","args_html":"(io : IO, format : IO::ByteFormat = <span class=\"n\">:system_endian</span>) : Nil","location":{"filename":"src/chem/spatial/mat3.cr","line_number":251,"url":null},"def":{"name":"to_io","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","default_value":":system_endian","external_name":"format","restriction":"IO::ByteFormat"}],"return_type":"Nil","visibility":"Public","body":"@buffer.each do |value|\n  io.write_bytes(value, format)\nend"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code>#inspect(io)</code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/spatial/mat3.cr","line_number":257,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"format_spec = \"%.#{PRINT_PRECISION}g\"\nio << \"[\"\n0.upto(2) do |i|\n  io << \"[ \"\n  0.upto(2) do |j|\n    value = unsafe_fetch(i, j)\n    if j > 0\n      io << (value >= 0 ? \"  \" : ' ')\n    end\n    io.printf(format_spec, value)\n  end\n  io << \" ]\"\n  if i < 2\n    io << \", \"\n  end\nend\nio << ']'\n"}},{"html_id":"to_unsafe:Pointer(Float64)-instance-method","name":"to_unsafe","doc":"Returns a pointer to the internal buffer where the matrix elements\nare stored.","summary":"<p>Returns a pointer to the internal buffer where the matrix elements are stored.</p>","abstract":false,"location":{"filename":"src/chem/spatial/mat3.cr","line_number":276,"url":null},"def":{"name":"to_unsafe","return_type":"Pointer(Float64)","visibility":"Public","body":"@buffer.to_unsafe"}},{"html_id":"unsafe_fetch(row:Int,col:Int):Float64-instance-method","name":"unsafe_fetch","doc":"Returns the element at *row* and *col*, without doing any bounds\ncheck.\n\nThis should be called with *row* and *col* within `0...3`. Use\n`#[](i, j)` and `#[]?(i, j)` instead for bounds checking and\nsupport for negative indexes.\n\nNOTE: This method should only be directly invoked if you are\nabsolutely sure *row* and *col* are within bounds, to avoid a\nbounds check for a small boost of performance.","summary":"<p>Returns the element at <em>row</em> and <em>col</em>, without doing any bounds check.</p>","abstract":false,"args":[{"name":"row","external_name":"row","restriction":"Int"},{"name":"col","external_name":"col","restriction":"Int"}],"args_string":"(row : Int, col : Int) : Float64","args_html":"(row : Int, col : Int) : Float64","location":{"filename":"src/chem/spatial/mat3.cr","line_number":291,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"row","external_name":"row","restriction":"Int"},{"name":"col","external_name":"col","restriction":"Int"}],"return_type":"Float64","visibility":"Public","body":"unsafe_fetch((row * 3) + col)"}},{"html_id":"unsafe_fetch(index:Int):Float64-instance-method","name":"unsafe_fetch","doc":"Returns the element at the given index , without doing any bounds\ncheck.\n\nNOTE: This method should only be directly invoked if you are\nabsolutely sure the index is within bounds, to avoid a bounds\ncheck for a small boost of performance.","summary":"<p>Returns the element at the given index , without doing any bounds check.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : Float64","args_html":"(index : Int) : Float64","location":{"filename":"src/chem/spatial/mat3.cr","line_number":302,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"index","external_name":"index","restriction":"Int"}],"return_type":"Float64","visibility":"Public","body":"to_unsafe[index]"}}],"macros":[{"html_id":"[](*rows)-macro","name":"[]","doc":"Returns a new 3x3 matrix using a matrix literal, i.e., three\nindexable (array or tuple) literals.\n\n```\nMat3[[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n```","summary":"<p>Returns a new 3x3 matrix using a matrix literal, i.e., three indexable (array or tuple) literals.</p>","abstract":false,"args":[{"name":"rows","external_name":"rows","restriction":""}],"args_string":"(*rows)","args_html":"(*rows)","location":{"filename":"src/chem/spatial/mat3.cr","line_number":15,"url":null},"def":{"name":"[]","args":[{"name":"rows","external_name":"rows","restriction":""}],"splat_index":0,"visibility":"Public","body":"      \n{% if ((rows.size != 3) || rows.any? do |r|\n  (!r.is_a?(TupleLiteral)) && (!r.is_a?(ArrayLiteral))\nend) || rows.any?() do |__arg0|\n  __arg0.size != 3\nend %}\n        {% raise(\"Expected a matrix literal for #{@type}#[], not `Mat3[#{rows}]`)\") %}\n      {% end %}\n\n      \n{{ @type }}\n.build do |buffer|\n        \n{% for i in 0..8 %}\n          buffer[{{ i }}] = {{ rows[i // 3][i % 3] }}\n        {% end %}\n\n      \nend\n    \n"}}]},{"html_id":"chem.cr/Chem/Spatial/NotPeriodicError","path":"Chem/Spatial/NotPeriodicError.html","kind":"class","full_name":"Chem::Spatial::NotPeriodicError","name":"NotPeriodicError","abstract":false,"superclass":{"html_id":"chem.cr/Chem/Spatial/Error","kind":"class","full_name":"Chem::Spatial::Error","name":"Error"},"ancestors":[{"html_id":"chem.cr/Chem/Spatial/Error","kind":"class","full_name":"Chem::Spatial::Error","name":"Error"},{"html_id":"chem.cr/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial.cr","line_number":24,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"constructors":[{"html_id":"new(message=\"Coordinatesarenotperiodic\")-class-method","name":"new","abstract":false,"args":[{"name":"message","default_value":"\"Coordinates are not periodic\"","external_name":"message","restriction":""}],"args_string":"(message = \"Coordinates are not periodic\")","args_html":"(message = <span class=\"s\">&quot;Coordinates are not periodic&quot;</span>)","location":{"filename":"src/chem/spatial.cr","line_number":25,"url":null},"def":{"name":"new","args":[{"name":"message","default_value":"\"Coordinates are not periodic\"","external_name":"message","restriction":""}],"visibility":"Public","body":"_ = allocate\n_.initialize(message)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"chem.cr/Chem/Spatial/NumberTriple","path":"Chem/Spatial/NumberTriple.html","kind":"alias","full_name":"Chem::Spatial::NumberTriple","name":"NumberTriple","abstract":false,"locations":[{"filename":"src/chem/spatial.cr","line_number":17,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":true,"aliased":"Tuple(Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | UInt128 | UInt16 | UInt32 | UInt64 | UInt8, Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | UInt128 | UInt16 | UInt32 | UInt64 | UInt8, Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | UInt128 | UInt16 | UInt32 | UInt64 | UInt8)","aliased_html":"{Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | UInt128 | UInt16 | UInt32 | UInt64 | UInt8, Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | UInt128 | UInt16 | UInt32 | UInt64 | UInt8, Float32 | Float64 | Int128 | Int16 | Int32 | Int64 | Int8 | UInt128 | UInt16 | UInt32 | UInt64 | UInt8}","const":false,"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"}},{"html_id":"chem.cr/Chem/Spatial/Parallelepiped","path":"Chem/Spatial/Parallelepiped.html","kind":"struct","full_name":"Chem::Spatial::Parallelepiped","name":"Parallelepiped","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/parallelepiped.cr","line_number":12,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":"A parallelepiped is a three-dimensional figure formed by six\nparallelograms. It is defined by three vectors (basis) and it's\nuseful for representing spatial bounds and unit cells.\n\nIt is internally represented by a 3x3 matrix, where each column\ncorrespond to a basis vector (see `Mat3.basis`), where\ncoordinates are expressed in Cartesian space (angstroms). In this\nway, the basis matrix can be used to transform from Cartesian to\nfractional coordinates, and viceversa, by matrix multiplication (see\n`#cart` and `#fract`).","summary":"<p>A parallelepiped is a three-dimensional figure formed by six parallelograms.</p>","constructors":[{"html_id":"[](a:Number,b:Number,c:Number):self-class-method","name":"[]","doc":"Creates a `Parallelepiped` with the given lengths placed at the\norigin.","summary":"<p>Creates a <code><a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a></code> with the given lengths placed at the origin.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"b","external_name":"b","restriction":"Number"},{"name":"c","external_name":"c","restriction":"Number"}],"args_string":"(a : Number, b : Number, c : Number) : self","args_html":"(a : <a href=\"../../Number.html\">Number</a>, b : <a href=\"../../Number.html\">Number</a>, c : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":98,"url":null},"def":{"name":"[]","args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"b","external_name":"b","restriction":"Number"},{"name":"c","external_name":"c","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"new({a, b, c})"}},{"html_id":"cubic(a:Number):self-class-method","name":"cubic","doc":"Creates a cubic parallelepiped (*a* = *b* = *c* and *α* = *β* =\n*γ* = 90°).","summary":"<p>Creates a cubic parallelepiped (<em>a</em> = <em>b</em> = <em>c</em> and <em>α</em> = <em>β</em> = <em>γ</em> = 90°).</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Number"}],"args_string":"(a : Number) : self","args_html":"(a : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":104,"url":null},"def":{"name":"cubic","args":[{"name":"a","external_name":"a","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"new({a, a, a}, {90, 90, 90})"}},{"html_id":"from_io(io:IO,format:IO::ByteFormat):self-class-method","name":"from_io","doc":"Reads a parallelepiped from *io* in the given *format*. See also:\n`IO#read_bytes`.","summary":"<p>Reads a parallelepiped from <em>io</em> in the given <em>format</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","external_name":"format","restriction":"IO::ByteFormat"}],"args_string":"(io : IO, format : IO::ByteFormat) : self","args_html":"(io : IO, format : IO::ByteFormat) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":27,"url":null},"def":{"name":"from_io","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","external_name":"format","restriction":"IO::ByteFormat"}],"return_type":"self","visibility":"Public","body":"new(io.read_bytes(Vec3, format), io.read_bytes(Mat3, format))"}},{"html_id":"hexagonal(a:Number,c:Number):self-class-method","name":"hexagonal","doc":"Creates a hexagonal parallelepiped (*a* = *b*, *α* = *β* = 90°,\nand *γ* = 120°).","summary":"<p>Creates a hexagonal parallelepiped (<em>a</em> = <em>b</em>, <em>α</em> = <em>β</em> = 90°, and <em>γ</em> = 120°).</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"c","external_name":"c","restriction":"Number"}],"args_string":"(a : Number, c : Number) : self","args_html":"(a : <a href=\"../../Number.html\">Number</a>, c : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":110,"url":null},"def":{"name":"hexagonal","args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"c","external_name":"c","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"new({a, a, c}, {90, 90, 120})"}},{"html_id":"monoclinic(a:Number,c:Number,beta:Number):self-class-method","name":"monoclinic","doc":"Creates a monoclinic parallelepiped (*a* ≠ *c*, *α* = *γ* = 90°,\nand *β* ≠ 90°).","summary":"<p>Creates a monoclinic parallelepiped (<em>a</em> ≠ <em>c</em>, <em>α</em> = <em>γ</em> = 90°, and <em>β</em> ≠ 90°).</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"c","external_name":"c","restriction":"Number"},{"name":"beta","external_name":"beta","restriction":"Number"}],"args_string":"(a : Number, c : Number, beta : Number) : self","args_html":"(a : <a href=\"../../Number.html\">Number</a>, c : <a href=\"../../Number.html\">Number</a>, beta : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":116,"url":null},"def":{"name":"monoclinic","args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"c","external_name":"c","restriction":"Number"},{"name":"beta","external_name":"beta","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"new({a, a, c}, {90, beta, 90})"}},{"html_id":"new(origin:Vec3,i:Vec3,j:Vec3,k:Vec3):self-class-method","name":"new","doc":"Creates a `Parallelepiped` with the given basis vectors located at\n*origin*.","summary":"<p>Creates a <code><a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a></code> with the given basis vectors located at <em>origin</em>.</p>","abstract":false,"args":[{"name":"origin","external_name":"origin","restriction":"Vec3"},{"name":"i","external_name":"i","restriction":"Vec3"},{"name":"j","external_name":"j","restriction":"Vec3"},{"name":"k","external_name":"k","restriction":"Vec3"}],"args_string":"(origin : Vec3, i : Vec3, j : Vec3, k : Vec3) : self","args_html":"(origin : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, i : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, j : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, k : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"origin","external_name":"origin","restriction":"Vec3"},{"name":"i","external_name":"i","restriction":"Vec3"},{"name":"j","external_name":"j","restriction":"Vec3"},{"name":"k","external_name":"k","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"new(origin, Mat3.basis(i, j, k))"}},{"html_id":"new(i:Vec3,j:Vec3,k:Vec3):self-class-method","name":"new","doc":"Creates a `Parallelepiped` with the given basis vectors located at\nthe origin.","summary":"<p>Creates a <code><a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a></code> with the given basis vectors located at the origin.</p>","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Vec3"},{"name":"j","external_name":"j","restriction":"Vec3"},{"name":"k","external_name":"k","restriction":"Vec3"}],"args_string":"(i : Vec3, j : Vec3, k : Vec3) : self","args_html":"(i : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, j : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, k : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":38,"url":null},"def":{"name":"new","args":[{"name":"i","external_name":"i","restriction":"Vec3"},{"name":"j","external_name":"j","restriction":"Vec3"},{"name":"k","external_name":"k","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"new(Vec3.zero, i, j, k)"}},{"html_id":"new(origin:Vec3,basis:Mat3)-class-method","name":"new","doc":"Creates a `Parallelepiped` with *basis* located at *origin*.","summary":"<p>Creates a <code><a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a></code> with <em>basis</em> located at <em>origin</em>.</p>","abstract":false,"args":[{"name":"origin","external_name":"origin","restriction":"Vec3"},{"name":"basis","external_name":"basis","restriction":"Mat3"}],"args_string":"(origin : Vec3, basis : Mat3)","args_html":"(origin : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, basis : <a href=\"../../Chem/Spatial/Mat3.html\">Mat3</a>)","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"origin","external_name":"origin","restriction":"Vec3"},{"name":"basis","external_name":"basis","restriction":"Mat3"}],"visibility":"Public","body":"_ = allocate\n_.initialize(origin, basis)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(vmin:Vec3,vmax:Vec3):self-class-method","name":"new","doc":"Creates a `Parallelepiped` spanning from *vmin* to *vmax*.","summary":"<p>Creates a <code><a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a></code> spanning from <em>vmin</em> to <em>vmax</em>.</p>","abstract":false,"args":[{"name":"vmin","external_name":"vmin","restriction":"Vec3"},{"name":"vmax","external_name":"vmax","restriction":"Vec3"}],"args_string":"(vmin : Vec3, vmax : Vec3) : self","args_html":"(vmin : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, vmax : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":91,"url":null},"def":{"name":"new","args":[{"name":"vmin","external_name":"vmin","restriction":"Vec3"},{"name":"vmax","external_name":"vmax","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"size = {vmax.x - vmin.x, vmax.y - vmin.y, vmax.z - vmin.z}\nnew(vmin, size)\n"}},{"html_id":"new(origin:Vec3,size:NumberTriple|Size3,angles:NumberTriple={90,90,90}):self-class-method","name":"new","doc":"Creates a `Parallelepiped` with the given lengths (in angstroms)\nand angles (in degrees) located at *origin*. Raises\n`ArgumentError` if any of the lengths or angles is negative.\n\nNOTE: The first basis vector will be aligned to the X axis and the\nsecond basis vector will lie in the XY plane.","summary":"<p>Creates a <code><a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a></code> with the given lengths (in angstroms) and angles (in degrees) located at <em>origin</em>.</p>","abstract":false,"args":[{"name":"origin","external_name":"origin","restriction":"Vec3"},{"name":"size","external_name":"size","restriction":"NumberTriple | Size3"},{"name":"angles","default_value":"{90, 90, 90}","external_name":"angles","restriction":"NumberTriple"}],"args_string":"(origin : Vec3, size : NumberTriple | Size3, angles : NumberTriple = {90, 90, 90}) : self","args_html":"(origin : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, size : <a href=\"../../Chem/Spatial/NumberTriple.html\">NumberTriple</a> | <a href=\"../../Chem/Spatial/Size3.html\">Size3</a>, angles : <a href=\"../../Chem/Spatial/NumberTriple.html\">NumberTriple</a> = {<span class=\"n\">90</span>, <span class=\"n\">90</span>, <span class=\"n\">90</span>}) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":65,"url":null},"def":{"name":"new","args":[{"name":"origin","external_name":"origin","restriction":"Vec3"},{"name":"size","external_name":"size","restriction":"NumberTriple | Size3"},{"name":"angles","default_value":"{90, 90, 90}","external_name":"angles","restriction":"NumberTriple"}],"return_type":"self","visibility":"Public","body":"if (!size.is_a?(Size3)) && size.any?(&.negative?)\n  raise(ArgumentError.new(\"Negative size\"))\nend\nif angles.any?(&.negative?)\n  raise(ArgumentError.new(\"Negative angle\"))\nend\nif angles.all?(&.close_to?(90))\n  new(origin, Mat3.diagonal(size[0], size[1], size[2]))\nelse\n  cos_alpha = Math.cos(angles[0].radians)\n  cos_beta = Math.cos(angles[1].radians)\n  cos_gamma = Math.cos(angles[2].radians)\n  sin_gamma = Math.sin(angles[2].radians)\n  kx = size[2] * cos_beta\n  ky = (size[2] * (cos_alpha - (cos_beta * cos_gamma))) / sin_gamma\n  kz = Math.sqrt(((size[2] ** 2) - (kx ** 2)) - (ky ** 2))\n  bi = Vec3[size[0], 0, 0]\n  bj = Vec3[size[1] * cos_gamma, size[1] * sin_gamma, 0]\n  bk = Vec3[kx, ky, kz]\n  new(origin, Mat3.basis(bi, bj, bk))\nend\n"}},{"html_id":"new(basis:Mat3):self-class-method","name":"new","doc":"Creates a `Parallelepiped` with *basis* located at the origin.","summary":"<p>Creates a <code><a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a></code> with <em>basis</em> located at the origin.</p>","abstract":false,"args":[{"name":"basis","external_name":"basis","restriction":"Mat3"}],"args_string":"(basis : Mat3) : self","args_html":"(basis : <a href=\"../../Chem/Spatial/Mat3.html\">Mat3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":32,"url":null},"def":{"name":"new","args":[{"name":"basis","external_name":"basis","restriction":"Mat3"}],"return_type":"self","visibility":"Public","body":"new(Vec3.zero, basis)"}},{"html_id":"new(size:NumberTriple|Size3,angles:NumberTriple={90,90,90}):self-class-method","name":"new","doc":"Creates a `Parallelepiped` with the given lengths (in angstroms)\nand angles (in degrees) located at the origin. Raises\n`ArgumentError` if any of the lengths or angles is negative.\n\nNOTE: The first basis vector will be aligned to the X axis and the\nsecond basis vector will lie in the XY plane.","summary":"<p>Creates a <code><a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a></code> with the given lengths (in angstroms) and angles (in degrees) located at the origin.</p>","abstract":false,"args":[{"name":"size","external_name":"size","restriction":"NumberTriple | Size3"},{"name":"angles","default_value":"{90, 90, 90}","external_name":"angles","restriction":"NumberTriple"}],"args_string":"(size : NumberTriple | Size3, angles : NumberTriple = {90, 90, 90}) : self","args_html":"(size : <a href=\"../../Chem/Spatial/NumberTriple.html\">NumberTriple</a> | <a href=\"../../Chem/Spatial/Size3.html\">Size3</a>, angles : <a href=\"../../Chem/Spatial/NumberTriple.html\">NumberTriple</a> = {<span class=\"n\">90</span>, <span class=\"n\">90</span>, <span class=\"n\">90</span>}) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":54,"url":null},"def":{"name":"new","args":[{"name":"size","external_name":"size","restriction":"NumberTriple | Size3"},{"name":"angles","default_value":"{90, 90, 90}","external_name":"angles","restriction":"NumberTriple"}],"return_type":"self","visibility":"Public","body":"new(Vec3.zero, size, angles)"}},{"html_id":"orthorhombic(a:Number,b:Number,c:Number):self-class-method","name":"orthorhombic","doc":"Creates an orthorhombic parallelepiped (*a* ≠ *b* ≠ *c* and *α* =\n*β* = *γ* = 90°).","summary":"<p>Creates an orthorhombic parallelepiped (<em>a</em> ≠ <em>b</em> ≠ <em>c</em> and <em>α</em> = <em>β</em> = <em>γ</em> = 90°).</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"b","external_name":"b","restriction":"Number"},{"name":"c","external_name":"c","restriction":"Number"}],"args_string":"(a : Number, b : Number, c : Number) : self","args_html":"(a : <a href=\"../../Number.html\">Number</a>, b : <a href=\"../../Number.html\">Number</a>, c : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":122,"url":null},"def":{"name":"orthorhombic","args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"b","external_name":"b","restriction":"Number"},{"name":"c","external_name":"c","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"new({a, b, c}, {90, 90, 90})"}},{"html_id":"rhombohedral(a:Number,alpha:Number):self-class-method","name":"rhombohedral","doc":"Creates an rhombohedral parallelepiped (*a* = *b* = *c* and *α* =\n*β* = *γ* ≠ 90°).","summary":"<p>Creates an rhombohedral parallelepiped (<em>a</em> = <em>b</em> = <em>c</em> and <em>α</em> = <em>β</em> = <em>γ</em> ≠ 90°).</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"alpha","external_name":"alpha","restriction":"Number"}],"args_string":"(a : Number, alpha : Number) : self","args_html":"(a : <a href=\"../../Number.html\">Number</a>, alpha : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":128,"url":null},"def":{"name":"rhombohedral","args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"alpha","external_name":"alpha","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"new({a, a, a}, {alpha, alpha, alpha})"}},{"html_id":"tetragonal(a:Number,c:Number):self-class-method","name":"tetragonal","doc":"Creates an tetragonal parallelepiped (*a* = *b* ≠ *c* and *α* =\n*β* = *γ* = 90°).","summary":"<p>Creates an tetragonal parallelepiped (<em>a</em> = <em>b</em> ≠ <em>c</em> and <em>α</em> = <em>β</em> = <em>γ</em> = 90°).</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"c","external_name":"c","restriction":"Number"}],"args_string":"(a : Number, c : Number) : self","args_html":"(a : <a href=\"../../Number.html\">Number</a>, c : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":134,"url":null},"def":{"name":"tetragonal","args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"c","external_name":"c","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"new({a, a, c}, {90, 90, 90})"}}],"instance_methods":[{"html_id":"*(value:Number):self-instance-method","name":"*","doc":"Returns a parallelepiped with the basis vectors multiplied by\n*value*.","summary":"<p>Returns a parallelepiped with the basis vectors multiplied by <em>value</em>.</p>","abstract":false,"args":[{"name":"value","external_name":"value","restriction":"Number"}],"args_string":"(value : Number) : self","args_html":"(value : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":140,"url":null},"def":{"name":"*","args":[{"name":"value","external_name":"value","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"new(i * value, j * value, k * value)"}},{"html_id":"==(rhs:self):Bool-instance-method","name":"==","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Bool","args_html":"(rhs : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":144,"url":null},"def":{"name":"==","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"(@origin == rhs.origin) && (@basis == rhs.basis)"}},{"html_id":"angles:NumberTriple-instance-method","name":"angles","doc":"Returns the parallelepiped angles (alpha, beta, gamma) in degrees.","summary":"<p>Returns the parallelepiped angles (alpha, beta, gamma) in degrees.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":149,"url":null},"def":{"name":"angles","return_type":"NumberTriple","visibility":"Public","body":"bi, bj, bk = basisvec\n{Spatial.angle(bj, bk), Spatial.angle(bi, bk), Spatial.angle(bi, bj)}\n"}},{"html_id":"basis:Mat3-instance-method","name":"basis","doc":"Matrix containing the basis vectors.","summary":"<p>Matrix containing the basis vectors.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":14,"url":null},"def":{"name":"basis","return_type":"Mat3","visibility":"Public","body":"@basis"}},{"html_id":"basisvec:Tuple(Vec3,Vec3,Vec3)-instance-method","name":"basisvec","doc":"Returns the basis vectors.","summary":"<p>Returns the basis vectors.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":155,"url":null},"def":{"name":"basisvec","return_type":"Tuple(Vec3, Vec3, Vec3)","visibility":"Public","body":"{Vec3[*@basis[.., 0]], Vec3[*@basis[.., 1]], Vec3[*@basis[.., 2]]}"}},{"html_id":"cart(vec:Vec3):Vec3-instance-method","name":"cart","doc":"Returns the vector in Cartesian coordinates equivalent to the\ngiven fractional coordinates.","summary":"<p>Returns the vector in Cartesian coordinates equivalent to the given fractional coordinates.</p>","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : Vec3","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":161,"url":null},"def":{"name":"cart","args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"return_type":"Vec3","visibility":"Public","body":"@basis * vec"}},{"html_id":"center:Vec3-instance-method","name":"center","doc":"Returns the center of the parallelepiped.","summary":"<p>Returns the center of the parallelepiped.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":166,"url":null},"def":{"name":"center","return_type":"Vec3","visibility":"Public","body":"@origin + (basisvec.sum * 0.5)"}},{"html_id":"center_at(vec:Vec3):self-instance-method","name":"center_at","doc":"Centers the parallelepiped at *vec*.","summary":"<p>Centers the parallelepiped at <em>vec</em>.</p>","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : self","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":171,"url":null},"def":{"name":"center_at","args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"translate(vec - center)"}},{"html_id":"center_at_origin:self-instance-method","name":"center_at_origin","doc":"Centers the parallelepiped at the origin.","summary":"<p>Centers the parallelepiped at the origin.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":176,"url":null},"def":{"name":"center_at_origin","return_type":"self","visibility":"Public","body":"translate(-center)"}},{"html_id":"close_to?(rhs:self,delta:Number=Float64::EPSILON):Bool-instance-method","name":"close_to?","doc":"Returns `true` if the values of the parallelepipeds are within\n*delta* from each other, else `false`.","summary":"<p>Returns <code>true</code> if the values of the parallelepipeds are within <em>delta</em> from each other, else <code>false</code>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"delta","default_value":"Float64::EPSILON","external_name":"delta","restriction":"Number"}],"args_string":"(rhs : self, delta : Number = Float64::EPSILON) : Bool","args_html":"(rhs : <span class=\"k\">self</span>, delta : <a href=\"../../Number.html\">Number</a> = <span class=\"t\">Float64</span><span class=\"t\">::</span><span class=\"t\">EPSILON</span>) : Bool","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":182,"url":null},"def":{"name":"close_to?","args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"delta","default_value":"Float64::EPSILON","external_name":"delta","restriction":"Number"}],"return_type":"Bool","visibility":"Public","body":"(@origin.close_to?(rhs.origin, delta)) && (@basis.close_to?(rhs.basis, delta))"}},{"html_id":"cubic?:Bool-instance-method","name":"cubic?","doc":"Returns `true` if the parallelepiped is cubic (*a* = *b* = *c* and\n*α* = *β* = *γ* = 90°), else `false`.","summary":"<p>Returns <code>true</code> if the parallelepiped is cubic (<em>a</em> = <em>b</em> = <em>c</em> and <em>α</em> = <em>β</em> = <em>γ</em> = 90°), else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":189,"url":null},"def":{"name":"cubic?","return_type":"Bool","visibility":"Public","body":"a, b, c = size\n((a.close_to?(b, 1e-15)) && (b.close_to?(c, 1e-15))) && orthogonal?\n"}},{"html_id":"each_edge(&:Vec3,Vec3->):Nil-instance-method","name":"each_edge","doc":"Yields each parallelepiped' edge as a pair of vertices.","summary":"<p>Yields each parallelepiped' edge as a pair of vertices.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":195,"url":null},"def":{"name":"each_edge","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Vec3, Vec3 ->)"},"return_type":"Nil","visibility":"Public","body":"bi, bj, bk = basisvec\nyield @origin, @origin + bi\nyield @origin, @origin + bj\nyield @origin, @origin + bk\nyield @origin + bi, (@origin + bi) + bj\nyield @origin + bi, (@origin + bi) + bk\nyield @origin + bj, (@origin + bi) + bj\nyield @origin + bj, (@origin + bj) + bk\nyield (@origin + bi) + bj, ((@origin + bi) + bj) + bk\nyield @origin + bk, (@origin + bi) + bk\nyield @origin + bk, (@origin + bj) + bk\nyield (@origin + bi) + bk, ((@origin + bi) + bj) + bk\nyield (@origin + bj) + bk, ((@origin + bi) + bj) + bk\n"}},{"html_id":"each_vertex(&:Vec3->):Nil-instance-method","name":"each_vertex","doc":"Yields parallelepiped' vertices.\n\n```\nParallelepiped[5, 10, 20].each_vertex { |vec| puts vec }\n```\n\nPrints:\n\n```text\nVec3[0.0, 0.0, 0.0]\nVec3[0.0, 0.0, 20.0]\nVec3[0.0, 10.0, 0.0]\nVec3[0.0, 10.0, 20.0]\nVec3[5.0, 0.0, 0.0]\nVec3[5.0, 0.0, 20.0]\nVec3[5.0, 10.0, 0.0]\nVec3[5.0, 10.0, 20.0]\n```","summary":"<p>Yields parallelepiped' vertices.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":229,"url":null},"def":{"name":"each_vertex","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Vec3 ->)"},"return_type":"Nil","visibility":"Public","body":"bi, bj, bk = basisvec\n2.times do |di|\n  2.times do |dj|\n    2.times do |dk|\n      yield ((@origin + (bi * di)) + (bj * dj)) + (bk * dk)\n    end\n  end\nend\n"}},{"html_id":"edges:Array(Tuple(Vec3,Vec3))-instance-method","name":"edges","doc":"Returns the parallelepiped' edges as pairs of vertices.","summary":"<p>Returns the parallelepiped' edges as pairs of vertices.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":241,"url":null},"def":{"name":"edges","return_type":"Array(Tuple(Vec3, Vec3))","visibility":"Public","body":"edges = Array(Tuple(Vec3, Vec3)).new(12)\neach_edge do |u, v|\n  edges << {u, v}\nend\nedges\n"}},{"html_id":"fract(vec:Vec3):Vec3-instance-method","name":"fract","doc":"Returns the vector in fractional coordinates equivalent to the\ngiven Cartesian coordinates.","summary":"<p>Returns the vector in fractional coordinates equivalent to the given Cartesian coordinates.</p>","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : Vec3","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":249,"url":null},"def":{"name":"fract","args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"return_type":"Vec3","visibility":"Public","body":"inv_basis * vec"}},{"html_id":"hexagonal?:Bool-instance-method","name":"hexagonal?","doc":"Returns `true` if the parallelepiped is hexagonal (*a* = *b*, *α*\n= *β* = 90°, and *γ* = 120°), else `false`.","summary":"<p>Returns <code>true</code> if the parallelepiped is hexagonal (<em>a</em> = <em>b</em>, <em>α</em> = <em>β</em> = 90°, and <em>γ</em> = 120°), else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":255,"url":null},"def":{"name":"hexagonal?","return_type":"Bool","visibility":"Public","body":"a, b, _ = size\nalpha, beta, gamma = angles\n(((a.close_to?(b, 1e-15)) && (alpha.close_to?(90, 1e-8))) && (beta.close_to?(90, 1e-8))) && (gamma.close_to?(120, 1e-8))\n"}},{"html_id":"image(vec:Vec3,ix:Tuple(Int,Int,Int)):Vec3-instance-method","name":"image","doc":"Returns the vector's image with respect to the parallelepiped.\n\n```\npld = new Parallelepiped.new({2, 2, 3}, {90, 90, 120})\npld.i # => Vec3[2.0, 0.0, 0.0]\npld.j # => Vec3[-1, 1.732, 0.0]\npld.k # => Vec3[0.0, 0.0, 3.0]\n\nvec = Vec3[1, 1, 1.5]\npld.image(vec, {1, 0, 0}) # => Vec3[3.0, 1.0, 1.5]\npld.image(vec, {0, 1, 0}) # => Vec3[0.0, 2.732, 1.5]\npld.image(vec, {0, 0, 1}) # => Vec3[1.0, 1.0, 4.5]\npld.image(vec, {1, 0, 1}) # => Vec3[3.0, 1.0, 4.5]\npld.image(vec, {1, 1, 1}) # => Vec3[2.0, 2.732, 4.5]\n```","summary":"<p>Returns the vector's image with respect to the parallelepiped.</p>","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"Vec3"},{"name":"ix","external_name":"ix","restriction":"Tuple(Int, Int, Int)"}],"args_string":"(vec : Vec3, ix : Tuple(Int, Int, Int)) : Vec3","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, ix : Tuple(Int, Int, Int)) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":279,"url":null},"def":{"name":"image","args":[{"name":"vec","external_name":"vec","restriction":"Vec3"},{"name":"ix","external_name":"ix","restriction":"Tuple(Int, Int, Int)"}],"return_type":"Vec3","visibility":"Public","body":"{% if true %}\n        {% for i in 0..2 %}\n          basisvec[{{ i }}] * ix[{{ i }}] +\n        {% end %}\n        vec\n      {% end %}"}},{"html_id":"includes?(other:self):Bool-instance-method","name":"includes?","doc":"Returns `true` if the parallelepiped encloses *other*, `false`\notherwise.\n\nIt effectively checks if every vertex of *other* is contained by\nthe parallelepiped.\n\n```\npld = Parallelepiped.new({10, 10, 10}, {90, 90, 120})\npld.includes? Parallelepiped[5, 4, 6]                        # => true\npld.includes? Parallelepiped.new(Vec3[-1, 2, -4], {5, 4, 6}) # => false\n```","summary":"<p>Returns <code>true</code> if the parallelepiped encloses <em>other</em>, <code>false</code> otherwise.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"self"}],"args_string":"(other : self) : Bool","args_html":"(other : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":299,"url":null},"def":{"name":"includes?","args":[{"name":"other","external_name":"other","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"other.each_vertex do |vec|\n  if vec.in?(self)\n  else\n    return false\n  end\nend\ntrue\n"}},{"html_id":"includes?(vec:Vec3):Bool-instance-method","name":"includes?","doc":"Returns `true` if the parallelepiped encloses *vec*, `false`\notherwise.\n\n```\npld = Parallelepiped.new({23.803, 23.828, 5.387}, {90, 90, 120})\npld.includes? Vec3[10, 20, 2]  # => true\npld.includes? Vec3[0, 0, 0]    # => true\npld.includes? Vec3[30, 30, 10] # => false\npld.includes? Vec3[-3, 10, 2]  # => true\npld.includes? Vec3[-3, 2, 2]   # => false\n```","summary":"<p>Returns <code>true</code> if the parallelepiped encloses <em>vec</em>, <code>false</code> otherwise.</p>","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : Bool","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : Bool","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":317,"url":null},"def":{"name":"includes?","args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"return_type":"Bool","visibility":"Public","body":"if @origin.zero?\nelse\n  vec = vec - @origin\nend\nbi, bj, bk = basisvec\nif (bi.x? && bj.y?) && bk.z?\n  ((0 <= (__temp_41 = vec.x) && __temp_41 <= bi.x) && (0 <= (__temp_42 = vec.y) && __temp_42 <= bj.y)) && (0 <= (__temp_43 = vec.z) && __temp_43 <= bk.z)\nelse\n  vec = (fract(vec)).map(&.round(Float64::DIGITS))\n  ((0 <= (__temp_44 = vec.x) && __temp_44 <= 1) && (0 <= (__temp_45 = vec.y) && __temp_45 <= 1)) && (0 <= (__temp_46 = vec.z) && __temp_46 <= 1)\nend\n"}},{"html_id":"inspect(io:IO):Nil-instance-method","name":"inspect","doc":"Appends this struct's name and instance variables names and values\nto the given IO.\n\n```\nstruct Point\n  def initialize(@x : Int32, @y : Int32)\n  end\nend\n\np1 = Point.new 1, 2\np1.to_s    # \"Point(@x=1, @y=2)\"\np1.inspect # \"Point(@x=1, @y=2)\"\n```","summary":"<p>Appends this struct's name and instance variables names and values to the given IO.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":330,"url":null},"def":{"name":"inspect","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"format_spec = \"%.#{PRINT_PRECISION}g\"\n(io << self.class.name) << \"(@origin=[ \"\nio.printf(format_spec, @origin.x)\nio << ' '\nio.printf(format_spec, @origin.y)\nio << ' '\nio.printf(format_spec, @origin.z)\n((io << \" ], @basis=\") << @basis) << ')'\n"}},{"html_id":"monoclinic?:Bool-instance-method","name":"monoclinic?","doc":"Returns `true` if the parallelepiped is monoclinic (*a* ≠ *c*, *α*\n= *γ* = 90°, and *β* ≠ 90°), else `false`.","summary":"<p>Returns <code>true</code> if the parallelepiped is monoclinic (<em>a</em> ≠ <em>c</em>, <em>α</em> = <em>γ</em> = 90°, and <em>β</em> ≠ 90°), else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":348,"url":null},"def":{"name":"monoclinic?","return_type":"Bool","visibility":"Public","body":"a, _, c = size\nalpha, beta, gamma = angles\n(((!(a.close_to?(c, 1e-15))) && (alpha.close_to?(90, 1e-8))) && (!(beta.close_to?(90, 1e-8)))) && (gamma.close_to?(90, 1e-8))\n"}},{"html_id":"origin:Vec3-instance-method","name":"origin","doc":"Origin of the parallelepiped.","summary":"<p>Origin of the parallelepiped.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":16,"url":null},"def":{"name":"origin","return_type":"Vec3","visibility":"Public","body":"@origin"}},{"html_id":"orthogonal?:Bool-instance-method","name":"orthogonal?","doc":"Returns `true` if the parallelepiped is orthogonal (*α* = *β* =\n*γ* = 90°), else `false`.","summary":"<p>Returns <code>true</code> if the parallelepiped is orthogonal (<em>α</em> = <em>β</em> = <em>γ</em> = 90°), else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":359,"url":null},"def":{"name":"orthogonal?","return_type":"Bool","visibility":"Public","body":"angles.all?(&.close_to?(90, 1e-8))"}},{"html_id":"orthorhombic?:Bool-instance-method","name":"orthorhombic?","doc":"Returns `true` if the parallelepiped is orthorhombic (*a* ≠ *b* ≠\n*c* and *α* = *β* = *γ* = 90°), else `false`.","summary":"<p>Returns <code>true</code> if the parallelepiped is orthorhombic (<em>a</em> ≠ <em>b</em> ≠ <em>c</em> and <em>α</em> = <em>β</em> = <em>γ</em> = 90°), else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":365,"url":null},"def":{"name":"orthorhombic?","return_type":"Bool","visibility":"Public","body":"a, b, c = size\n(((!(a.close_to?(b, 1e-15))) && (!(a.close_to?(c, 1e-15)))) && (!(b.close_to?(c, 1e-15)))) && orthogonal?\n"}},{"html_id":"pad(px:Number,py:Number,pz:Number,centered:Bool=true):self-instance-method","name":"pad","doc":"Returns a new parallelepiped by expanding the extents by *padding*\nin each direction. *padding* can be either a single value, three\nvalues, or a `Size3` instance.\n\nIf *centered* is `true`, the origin will be changed such that the\ncenter does not change, else it will be kept intact.\n\n```\npld = Parallelepiped.new(Vec3[1, 5, 3], {10, 5, 12})\n\nother = pld.pad(2.5)\nother.size                 # => Size3[15, 10, 17]\nother.origin == pld.origin # => false\nother.center == pld.center # => true\n\nother = pld.pad(2.5, centered: false)\nother.size                 # => Size3[15, 10, 17]\nother.origin == pld.origin # => true\nother.center == pld.center # => false\n```\n\nNOTE: Note that its size is actually increased by `padding * 2`.","summary":"<p>Returns a new parallelepiped by expanding the extents by <em>padding</em> in each direction.</p>","abstract":false,"args":[{"name":"px","external_name":"px","restriction":"Number"},{"name":"py","external_name":"py","restriction":"Number"},{"name":"pz","external_name":"pz","restriction":"Number"},{"name":"centered","default_value":"true","external_name":"centered","restriction":"Bool"}],"args_string":"(px : Number, py : Number, pz : Number, centered : Bool = true) : self","args_html":"(px : <a href=\"../../Number.html\">Number</a>, py : <a href=\"../../Number.html\">Number</a>, pz : <a href=\"../../Number.html\">Number</a>, centered : Bool = <span class=\"n\">true</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":411,"url":null},"def":{"name":"pad","args":[{"name":"px","external_name":"px","restriction":"Number"},{"name":"py","external_name":"py","restriction":"Number"},{"name":"pz","external_name":"pz","restriction":"Number"},{"name":"centered","default_value":"true","external_name":"centered","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"pad(Size3[px, py, pz], centered)"}},{"html_id":"pad(padding:Number,centered:Bool=true):self-instance-method","name":"pad","doc":"Returns a new parallelepiped by expanding the extents by *padding*\nin each direction. *padding* can be either a single value, three\nvalues, or a `Size3` instance.\n\nIf *centered* is `true`, the origin will be changed such that the\ncenter does not change, else it will be kept intact.\n\n```\npld = Parallelepiped.new(Vec3[1, 5, 3], {10, 5, 12})\n\nother = pld.pad(2.5)\nother.size                 # => Size3[15, 10, 17]\nother.origin == pld.origin # => false\nother.center == pld.center # => true\n\nother = pld.pad(2.5, centered: false)\nother.size                 # => Size3[15, 10, 17]\nother.origin == pld.origin # => true\nother.center == pld.center # => false\n```\n\nNOTE: Note that its size is actually increased by `padding * 2`.","summary":"<p>Returns a new parallelepiped by expanding the extents by <em>padding</em> in each direction.</p>","abstract":false,"args":[{"name":"padding","external_name":"padding","restriction":"Number"},{"name":"centered","default_value":"true","external_name":"centered","restriction":"Bool"}],"args_string":"(padding : Number, centered : Bool = true) : self","args_html":"(padding : <a href=\"../../Number.html\">Number</a>, centered : Bool = <span class=\"n\">true</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":395,"url":null},"def":{"name":"pad","args":[{"name":"padding","external_name":"padding","restriction":"Number"},{"name":"centered","default_value":"true","external_name":"centered","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"pad(padding, padding, padding, centered)"}},{"html_id":"pad(padding:Size3,centered:Bool=true):self-instance-method","name":"pad","doc":"Returns a new parallelepiped by expanding the extents by *padding*\nin each direction. *padding* can be either a single value, three\nvalues, or a `Size3` instance.\n\nIf *centered* is `true`, the origin will be changed such that the\ncenter does not change, else it will be kept intact.\n\n```\npld = Parallelepiped.new(Vec3[1, 5, 3], {10, 5, 12})\n\nother = pld.pad(2.5)\nother.size                 # => Size3[15, 10, 17]\nother.origin == pld.origin # => false\nother.center == pld.center # => true\n\nother = pld.pad(2.5, centered: false)\nother.size                 # => Size3[15, 10, 17]\nother.origin == pld.origin # => true\nother.center == pld.center # => false\n```\n\nNOTE: Note that its size is actually increased by `padding * 2`.","summary":"<p>Returns a new parallelepiped by expanding the extents by <em>padding</em> in each direction.</p>","abstract":false,"args":[{"name":"padding","external_name":"padding","restriction":"Size3"},{"name":"centered","default_value":"true","external_name":"centered","restriction":"Bool"}],"args_string":"(padding : Size3, centered : Bool = true) : self","args_html":"(padding : <a href=\"../../Chem/Spatial/Size3.html\">Size3</a>, centered : Bool = <span class=\"n\">true</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":400,"url":null},"def":{"name":"pad","args":[{"name":"padding","external_name":"padding","restriction":"Size3"},{"name":"centered","default_value":"true","external_name":"centered","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"new_origin = @origin\nif centered\n  new_origin = new_origin - basisvec.map_with_index do |bv, i|\n    bv.resize(padding[i])\n  end.sum\nend\npadding = padding * 2\nnew_basis = Mat3.basis(*basisvec.map_with_index do |bv, i|\n  bv.pad(padding[i])\nend)\nself.class.new(new_origin, new_basis)\n"}},{"html_id":"resize(si:Number|Nil,sj:Number|Nil,sk:Number|Nil):self-instance-method","name":"resize","doc":"Returns a parallelepiped by resizing the basis vectors to the\ngiven values.\n\n```\npld = Parallelepiped.hexagonal(1, 2)\npld.angles # => {90, 90, 120}\npld.size   # => Size3[1, 1, 2]\n\nother = pld.resize(5, 5, 12)\nother.angles # => {90, 90, 120}\nother.size   # => Size3[5, 5, 12]\n```\n\nUse `nil` to keep the current size:\n\n```\nother = pld.resize(nil, 5, nil)\nother.angles # => {90, 90, 120}\nother.size   # => Size3[1, 5, 12]\n```","summary":"<p>Returns a parallelepiped by resizing the basis vectors to the given values.</p>","abstract":false,"args":[{"name":"si","external_name":"si","restriction":"Number | ::Nil"},{"name":"sj","external_name":"sj","restriction":"Number | ::Nil"},{"name":"sk","external_name":"sk","restriction":"Number | ::Nil"}],"args_string":"(si : Number | Nil, sj : Number | Nil, sk : Number | Nil) : self","args_html":"(si : <a href=\"../../Number.html\">Number</a> | Nil, sj : <a href=\"../../Number.html\">Number</a> | Nil, sk : <a href=\"../../Number.html\">Number</a> | Nil) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":453,"url":null},"def":{"name":"resize","args":[{"name":"si","external_name":"si","restriction":"Number | ::Nil"},{"name":"sj","external_name":"sj","restriction":"Number | ::Nil"},{"name":"sk","external_name":"sk","restriction":"Number | ::Nil"}],"return_type":"self","visibility":"Public","body":"vi, vj, vk = basisvec\nif si\n  vi = vi.resize(si)\nend\nif sj\n  vj = vj.resize(sj)\nend\nif sk\n  vk = vk.resize(sk)\nend\nself.class.new(vi, vj, vk)\n"}},{"html_id":"resize(size:Chem::Spatial::Size3):self-instance-method","name":"resize","doc":"Returns a parallelepiped by resizing the basis vectors to the\ngiven size.\n\n```\npld = Parallelepiped.hexagonal(1, 2)\npld.angles # => {90, 90, 120}\npld.size   # => Size3[1, 1, 2]\n\nother = pld.resize(Size3[5, 5, 12])\nother.angles # => {90, 90, 120}\nother.size   # => Size3[5, 5, 12]\n```","summary":"<p>Returns a parallelepiped by resizing the basis vectors to the given size.</p>","abstract":false,"args":[{"name":"size","external_name":"size","restriction":"Chem::Spatial::Size3"}],"args_string":"(size : Chem::Spatial::Size3) : self","args_html":"(size : <a href=\"../../Chem/Spatial/Size3.html\">Chem::Spatial::Size3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":427,"url":null},"def":{"name":"resize","args":[{"name":"size","external_name":"size","restriction":"Chem::Spatial::Size3"}],"return_type":"self","visibility":"Public","body":"transform do |bi, bj, bk|\n  {bi.resize(size[0]), bj.resize(size[1]), bk.resize(size[2])}\nend"}},{"html_id":"resize(&:Float64,Float64,Float64->Tuple(Float64,Float64,Float64)):self-instance-method","name":"resize","doc":"Yields the basis vectors' sizes to the given block, and returns a\nparallelepiped by resizing them to the returned values.\n\n```\npld = Parallelepiped.hexagonal(1, 2)\npld.angles # => {90, 90, 120}\npld.size   # => Size3[1, 1, 2]\n\nother = pld.resize { |a, b, c| {a * 2, b / 10, c} }\nother.angles # => {90, 90, 120}\nother.size   # => Size3[2, 0.1, 2]\n```","summary":"<p>Yields the basis vectors' sizes to the given block, and returns a parallelepiped by resizing them to the returned values.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":473,"url":null},"def":{"name":"resize","yields":3,"block_arity":3,"block_arg":{"name":"","external_name":"","restriction":"(Float64, Float64, Float64 -> ::Tuple(Float64, Float64, Float64))"},"return_type":"self","visibility":"Public","body":"vi, vj, vk = basisvec\na, b, c = yield vi.abs, vj.abs, vk.abs\nself.class.new(vi.resize(a), vj.resize(b), vk.resize(c))\n"}},{"html_id":"resize_by(a:Number,b:Number,c:Number):self-instance-method","name":"resize_by","doc":"Returns a parallelepiped by padding the basis vectors by the given\nvalues.\n\n```\npld = Parallelepiped.hexagonal(1, 2)\npld.angles # => {90, 90, 120}\npld.size   # => Size3[1, 1, 2]\n\nother = pld.resize_by(2, 3, -0.5)\nother.angles # => {90, 90, 120}\nother.size   # => Size3[3, 4, 1.5]\n```","summary":"<p>Returns a parallelepiped by padding the basis vectors by the given values.</p>","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"b","external_name":"b","restriction":"Number"},{"name":"c","external_name":"c","restriction":"Number"}],"args_string":"(a : Number, b : Number, c : Number) : self","args_html":"(a : <a href=\"../../Number.html\">Number</a>, b : <a href=\"../../Number.html\">Number</a>, c : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":491,"url":null},"def":{"name":"resize_by","args":[{"name":"a","external_name":"a","restriction":"Number"},{"name":"b","external_name":"b","restriction":"Number"},{"name":"c","external_name":"c","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"vi, vj, vk = basisvec\nself.class.new(vi.pad(a), vj.pad(b), vk.pad(c))\n"}},{"html_id":"rhombohedral?:Bool-instance-method","name":"rhombohedral?","doc":"Returns `true` if the parallelepiped is rhombohedral (*a* = *b* =\n*c* and *α* = *β* = *γ* ≠ 90°), else `false`.","summary":"<p>Returns <code>true</code> if the parallelepiped is rhombohedral (<em>a</em> = <em>b</em> = <em>c</em> and <em>α</em> = <em>β</em> = <em>γ</em> ≠ 90°), else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":498,"url":null},"def":{"name":"rhombohedral?","return_type":"Bool","visibility":"Public","body":"a, b, c = size\nalpha, beta, gamma = angles\n((((a.close_to?(b, 1e-15)) && (a.close_to?(c, 1e-15))) && (alpha.close_to?(beta, 1e-8))) && (alpha.close_to?(gamma, 1e-8))) && (!(alpha.close_to?(90, 1e-8)))\n"}},{"html_id":"rotate(x:Number,y:Number,z:Number):self-instance-method","name":"rotate","doc":"Returns the parallelepiped rotated by the given Euler angles in\ndegrees. Delegates to `Quat.rotation` for computing the rotation.","summary":"<p>Returns the parallelepiped rotated by the given Euler angles in degrees.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"args_string":"(x : Number, y : Number, z : Number) : self","args_html":"(x : <a href=\"../../Number.html\">Number</a>, y : <a href=\"../../Number.html\">Number</a>, z : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":510,"url":null},"def":{"name":"rotate","args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"rotate(Quat.rotation(x, y, z))"}},{"html_id":"rotate(aboutrotaxis:Vec3,byangle:Number):self-instance-method","name":"rotate","doc":"Returns the parallelepiped rotated about the axis vector *rotaxis*\nby *angle* degrees. Delegates to `Quat.rotation` for computing the\nrotation.","summary":"<p>Returns the parallelepiped rotated about the axis vector <em>rotaxis</em> by <em>angle</em> degrees.</p>","abstract":false,"args":[{"name":"rotaxis","external_name":"about","restriction":"Vec3"},{"name":"angle","external_name":"by","restriction":"Number"}],"args_string":"(about rotaxis : Vec3, by angle : Number) : self","args_html":"(about rotaxis : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, by angle : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":517,"url":null},"def":{"name":"rotate","args":[{"name":"rotaxis","external_name":"about","restriction":"Vec3"},{"name":"angle","external_name":"by","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"rotate(Quat.rotation(rotaxis, angle))"}},{"html_id":"rotate(quat:Quat):self-instance-method","name":"rotate","doc":"Returns the parallelepiped rotated by the given quaternion.","summary":"<p>Returns the parallelepiped rotated by the given quaternion.</p>","abstract":false,"args":[{"name":"quat","external_name":"quat","restriction":"Quat"}],"args_string":"(quat : Quat) : self","args_html":"(quat : <a href=\"../../Chem/Spatial/Quat.html\">Quat</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":522,"url":null},"def":{"name":"rotate","args":[{"name":"quat","external_name":"quat","restriction":"Quat"}],"return_type":"self","visibility":"Public","body":"new_basisvec = basisvec.map(&.rotate(quat))\noffset = (new_basisvec.sum / 2) - (basisvec.sum / 2)\n({{ @type }}).new(@origin - offset, *new_basisvec)\n"}},{"html_id":"size:Size3-instance-method","name":"size","doc":"Returns the lengths of the basis vectors.","summary":"<p>Returns the lengths of the basis vectors.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":529,"url":null},"def":{"name":"size","return_type":"Size3","visibility":"Public","body":"Size3[*basisvec.map(&.abs)]"}},{"html_id":"tetragonal?:Bool-instance-method","name":"tetragonal?","doc":"Returns `true` if the parallelepiped is tetragonal (*a* = *b* ≠\n*c* and *α* = *β* = *γ* = 90°), else `false`.","summary":"<p>Returns <code>true</code> if the parallelepiped is tetragonal (<em>a</em> = <em>b</em> ≠ <em>c</em> and <em>α</em> = <em>β</em> = <em>γ</em> = 90°), else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":535,"url":null},"def":{"name":"tetragonal?","return_type":"Bool","visibility":"Public","body":"a, b, c = size\n((a.close_to?(b, 1e-15)) && (!(a.close_to?(c, 1e-15)))) && orthogonal?\n"}},{"html_id":"to_io(io:IO,format:IO::ByteFormat=:system_endian):Nil-instance-method","name":"to_io","doc":"Writes the binary representation of the parallelepiped to *io* in\nthe given *format*. See also `IO#write_bytes`.","summary":"<p>Writes the binary representation of the parallelepiped to <em>io</em> in the given <em>format</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","default_value":":system_endian","external_name":"format","restriction":"IO::ByteFormat"}],"args_string":"(io : IO, format : IO::ByteFormat = :system_endian) : Nil","args_html":"(io : IO, format : IO::ByteFormat = <span class=\"n\">:system_endian</span>) : Nil","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":542,"url":null},"def":{"name":"to_io","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","default_value":":system_endian","external_name":"format","restriction":"IO::ByteFormat"}],"return_type":"Nil","visibility":"Public","body":"io.write_bytes(@origin, format)\nio.write_bytes(@basis, format)\n"}},{"html_id":"transform(transformation:Transform):self-instance-method","name":"transform","doc":"Returns the parallelepiped resulting of applying the given\ntransformation.\n\nNOTE: the rotation will be applied about the center of the\nparallelepiped. Translation will be applied afterwards.","summary":"<p>Returns the parallelepiped resulting of applying the given transformation.</p>","abstract":false,"args":[{"name":"transformation","external_name":"transformation","restriction":"Transform"}],"args_string":"(transformation : Transform) : self","args_html":"(transformation : <a href=\"../../Chem/Spatial/Transform.html\">Transform</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":552,"url":null},"def":{"name":"transform","args":[{"name":"transformation","external_name":"transformation","restriction":"Transform"}],"return_type":"self","visibility":"Public","body":"new_basisvec = basisvec.map(&.transform(transformation.rotation))\noffset = (new_basisvec.sum / 2) - (basisvec.sum / 2)\norigin = (@origin + transformation.offset) - offset\n({{ @type }}).new(origin, *new_basisvec)\n"}},{"html_id":"transform(&:Vec3,Vec3,Vec3->Tuple(Vec3,Vec3,Vec3)):self-instance-method","name":"transform","doc":"Returns a new parallelepiped with the return value of the given\nblock, which is invoked with the basis vectors.\n\n```\npld = Parallelepiped.cubic(10).transform do |bi, bj, bk|\n  bi *= 2\n  bk /= 0.4\n  {bi, bj, bk}\nend\npld.basisvec[0] # => Vec3[20, 0, 0]\npld.basisvec[1] # => Vec3[0, 10, 0]\npld.basisvec[2] # => Vec3[0, 0, 25]\n```","summary":"<p>Returns a new parallelepiped with the return value of the given block, which is invoked with the basis vectors.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":583,"url":null},"def":{"name":"transform","yields":3,"block_arity":3,"block_arg":{"name":"","external_name":"","restriction":"(Vec3, Vec3, Vec3 -> ::Tuple(Vec3, Vec3, Vec3))"},"return_type":"self","visibility":"Public","body":"bi, bj, bk = basisvec\ncomponents = yield bi, bj, bk\nself.class.new(*components)\n"}},{"html_id":"translate(offset:Vec3):self-instance-method","name":"translate","doc":"Returns a new parallelepiped translated by *offset*.\n\n```\npld = Parallelepiped.new(Vec3[-5, 1, 20], {10, 10, 10}, {90, 90, 120})\npld.translate Vec3[1, 2, 10]\npld.origin # => Vec3[-4.0, 3.0, 30.0]\n```","summary":"<p>Returns a new parallelepiped translated by <em>offset</em>.</p>","abstract":false,"args":[{"name":"offset","external_name":"offset","restriction":"Vec3"}],"args_string":"(offset : Vec3) : self","args_html":"(offset : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":566,"url":null},"def":{"name":"translate","args":[{"name":"offset","external_name":"offset","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"({{ @type }}).new(@origin + offset, @basis)"}},{"html_id":"triclinic?:Bool-instance-method","name":"triclinic?","doc":"Returns `true` if the parallelepiped is triclinic (not orthogonal,\nhexagonal, monoclinic, nor rhombohedral), else `false`.","summary":"<p>Returns <code>true</code> if the parallelepiped is triclinic (not orthogonal, hexagonal, monoclinic, nor rhombohedral), else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":591,"url":null},"def":{"name":"triclinic?","return_type":"Bool","visibility":"Public","body":"(((!orthogonal?) && (!hexagonal?)) && (!monoclinic?)) && (!rhombohedral?)"}},{"html_id":"vertices:Array(Vec3)-instance-method","name":"vertices","doc":"Returns parallelepiped' vertices.\n\n```\npld = Parallelepiped[5, 10, 20]\npld.vertices # => [Vec3[0.0, 0.0, 0.0], Vec3[0.0, 0.0, 20.0], ...]\n```","summary":"<p>Returns parallelepiped' vertices.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":601,"url":null},"def":{"name":"vertices","return_type":"Array(Vec3)","visibility":"Public","body":"vertices = [] of Vec3\neach_vertex do |vec|\n  vertices << vec\nend\nvertices\n"}},{"html_id":"vmax:Vec3-instance-method","name":"vmax","doc":"Returns the maximum vertex.\n\n```\npld = Parallelepiped.new(Vec3[1.5, 3, -0.4], {10, 10, 12}, {90, 90, 120})\npld.vmax # => Vec3[6.5, 11.66, 11.6]\n```","summary":"<p>Returns the maximum vertex.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":613,"url":null},"def":{"name":"vmax","return_type":"Vec3","visibility":"Public","body":"@origin + basisvec.sum"}},{"html_id":"vmin:Vec3-instance-method","name":"vmin","doc":"Returns the minimum vertex. This is equivalent to the\nparallelepiped's origin.\n\n```\npld = Parallelepiped.new(Vec3[1.5, 3, -0.4], {10, 10, 12}, {90, 90, 120})\npld.vmin # => Vec3[1.5, 3, -0.4]\n```","summary":"<p>Returns the minimum vertex.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":624,"url":null},"def":{"name":"vmin","return_type":"Vec3","visibility":"Public","body":"@origin"}},{"html_id":"volume:Float64-instance-method","name":"volume","doc":"Returns the volume of the parallelepiped.","summary":"<p>Returns the volume of the parallelepiped.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":629,"url":null},"def":{"name":"volume","return_type":"Float64","visibility":"Public","body":"@basis.det"}},{"html_id":"wrap(vec:Vec3,aroundcenter:Vec3):Vec3-instance-method","name":"wrap","doc":"Returns the vector by wrapping it into the parallelepiped centered\nat *center*. The vector is assumed to be expressed in Cartesian\ncoordinates.","summary":"<p>Returns the vector by wrapping it into the parallelepiped centered at <em>center</em>.</p>","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"Vec3"},{"name":"center","external_name":"around","restriction":"Vec3"}],"args_string":"(vec : Vec3, around center : Vec3) : Vec3","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, around center : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":642,"url":null},"def":{"name":"wrap","args":[{"name":"vec","external_name":"vec","restriction":"Vec3"},{"name":"center","external_name":"around","restriction":"Vec3"}],"return_type":"Vec3","visibility":"Public","body":"(cart((fract(vec - @origin)).wrap(fract(center)))) + @origin"}},{"html_id":"wrap(vec:Vec3):Vec3-instance-method","name":"wrap","doc":"Returns the vector by wrapping it into the parallelepiped. The\nvector is assumed to be expressed in Cartesian coordinates.","summary":"<p>Returns the vector by wrapping it into the parallelepiped.</p>","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"args_string":"(vec : Vec3) : Vec3","args_html":"(vec : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":635,"url":null},"def":{"name":"wrap","args":[{"name":"vec","external_name":"vec","restriction":"Vec3"}],"return_type":"Vec3","visibility":"Public","body":"(cart((fract(vec - @origin)).wrap)) + @origin"}},{"html_id":"xyz?:Bool-instance-method","name":"xyz?","doc":"Whether the parallelepiped is aligned to the X, Y, and Z axes.","summary":"<p>Whether the parallelepiped is aligned to the X, Y, and Z axes.</p>","abstract":false,"location":{"filename":"src/chem/spatial/parallelepiped.cr","line_number":647,"url":null},"def":{"name":"xyz?","return_type":"Bool","visibility":"Public","body":"orthogonal? && basisvec[0].x?"}}]},{"html_id":"chem.cr/Chem/Spatial/PeriodicKDTree","path":"Chem/Spatial/PeriodicKDTree.html","kind":"class","full_name":"Chem::Spatial::PeriodicKDTree","name":"PeriodicKDTree","abstract":false,"superclass":{"html_id":"chem.cr/Chem/Spatial/KDTree","kind":"class","full_name":"Chem::Spatial::KDTree","name":"KDTree"},"ancestors":[{"html_id":"chem.cr/Chem/Spatial/KDTree","kind":"class","full_name":"Chem::Spatial::KDTree","name":"KDTree"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/kdtree.cr","line_number":171,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"constructors":[{"html_id":"new(points:Array(Vec3),cell:Parallelepiped)-class-method","name":"new","abstract":false,"args":[{"name":"points","external_name":"points","restriction":"Array(Vec3)"},{"name":"cell","external_name":"cell","restriction":"Parallelepiped"}],"args_string":"(points : Array(Vec3), cell : Parallelepiped)","args_html":"(points : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>), cell : <a href=\"../../Chem/Spatial/Parallelepiped.html\">Parallelepiped</a>)","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":172,"url":null},"def":{"name":"new","args":[{"name":"points","external_name":"points","restriction":"Array(Vec3)"},{"name":"cell","external_name":"cell","restriction":"Parallelepiped"}],"visibility":"Public","body":"_ = allocate\n_.initialize(points, cell)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"each_neighbor(pos:Vec3,*,withinradius:Number,&block:Int32,Float64->):Nil-instance-method","name":"each_neighbor","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"","external_name":"","restriction":""},{"name":"radius","external_name":"within","restriction":"Number"}],"args_string":"(pos : Vec3, *, within radius : Number, &block : Int32, Float64 -> ) : Nil","args_html":"(pos : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, *, within radius : <a href=\"../../Number.html\">Number</a>, &block : Int32, Float64 -> ) : Nil","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":206,"url":null},"def":{"name":"each_neighbor","args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"","external_name":"","restriction":""},{"name":"radius","external_name":"within","restriction":"Number"}],"splat_index":1,"yields":2,"block_arity":2,"block_arg":{"name":"block","external_name":"block","restriction":"(Int32, Float64 ->)"},"return_type":"Nil","visibility":"Public","body":"if radius >= 0\nelse\n  raise(ArgumentError.new(\"Negative radius\"))\nend\nr2 = radius ** 2\neach_image(pos, Size3[radius, radius, radius]) do |pos|\n  search(@root, pos, r2, &block)\nend\n"}},{"html_id":"neighbors_with_distances(pos:Vec3,count:Int):Array(Tuple(Int32,Float64))-instance-method","name":"neighbors_with_distances","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"count","external_name":"count","restriction":"Int"}],"args_string":"(pos : Vec3, count : Int) : Array(Tuple(Int32, Float64))","args_html":"(pos : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, count : Int) : <a href=\"../../Array.html\">Array</a>(Tuple(Int32, Float64))","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":214,"url":null},"def":{"name":"neighbors_with_distances","args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"count","external_name":"count","restriction":"Int"}],"return_type":"Array(::Tuple(Int32, Float64))","visibility":"Public","body":"neighbors = Array(Tuple(Int32, Float64)).new(count)\neach_image(pos, @cell.size / 0.5) do |pos|\n  search(@root, pos, count, neighbors)\nend\nneighbors.sort_by!(&.[](1))\n"}},{"html_id":"neighbors_with_distances(pos:Vec3,*,withinradius:Number):Array(Tuple(Int32,Float64))-instance-method","name":"neighbors_with_distances","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"","external_name":"","restriction":""},{"name":"radius","external_name":"within","restriction":"Number"}],"args_string":"(pos : Vec3, *, within radius : Number) : Array(Tuple(Int32, Float64))","args_html":"(pos : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, *, within radius : <a href=\"../../Number.html\">Number</a>) : <a href=\"../../Array.html\">Array</a>(Tuple(Int32, Float64))","location":{"filename":"src/chem/spatial/kdtree.cr","line_number":222,"url":null},"def":{"name":"neighbors_with_distances","args":[{"name":"pos","external_name":"pos","restriction":"Vec3"},{"name":"","external_name":"","restriction":""},{"name":"radius","external_name":"within","restriction":"Number"}],"splat_index":1,"return_type":"Array(::Tuple(Int32, Float64))","visibility":"Public","body":"neighbors = [] of ::Tuple(Int32, Float64)\neach_neighbor(pos, within: radius) do |index, dis2|\n  neighbors << {index, dis2}\nend\nneighbors.sort_by!(&.[](1))\n"}}]},{"html_id":"chem.cr/Chem/Spatial/Quat","path":"Chem/Spatial/Quat.html","kind":"struct","full_name":"Chem::Spatial::Quat","name":"Quat","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/quat.cr","line_number":77,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":"The quaternion is a mathematical construct that extends the complex\nnumbers and it is useful to encode three-dimensional rotations.\nQuats are represented by four numbers (w, x, y, z), where w is\nconsidered as the real (scalar) part and x, y, z the imaginary\n(vector) part. Rotations can be encoded as a unit quaternion using\nthe axis-angle representation, where x, y, z correspond to the\nrotation axis and w to the rotation angle by the following formula:\n\n```text\nq(v, t) = q(w, x, y, z) = q(cos(t/2), sin(t/2)vx, sin(t/2)vy, sin(t/2)vz)\n```\n\nwhere *v* is a unit vector and *t* is the rotation angle.\nQuats have several useful mathematical properties, e.g.,\nquaternion multiplication can be used to represent a sequence of\nrotations producing a single quaternion. Indeed, the rotation\nencoded in the quaternion *q* can be applied to a ordinary vector\n*p* simply by\n\n```text\np* = q * p * q-1\n```\n\nwhere *q*-1 is the inverse of *q* and *p** is the rotated vector\n(see `Quat#*` for details).\n\n## Examples\n\n```\nq = Quat[1, 2, 3, 4]\nq                 # => [1.0 2.0 3.0 4.0]\nq.real            # => 1.0\nq.imag            # => [2.0 3.0 4.0]\nq.w               # => 1.0\nq.x               # => 2.0\nq.y               # => 3.0\nq.z               # => 4.0\n-q                # => [-1.0 -2.0 -3.0 -4.0]\nq.abs             # => 5.477225575051661\nq.abs2            # => 30.0\nq.conj            # => [1.0 -2.0 -3.0 -4.0]\nq.inv             # => [0.033 -0.067 -0.1 -0.133]\nq.normalize       # => [0.183 0.365 0.548 0.730]\nq.unit?           # => false\nq.normalize.unit? # => true\nq.zero?           # => false\n\nq * 2  # => [2.0 4.0 6.0 8.0]\nq / 10 # => [0.2 0.4 0.6 0.8]\n\np = Quat[4, 3, 2, 1]\np + q # => [5.0 5.0 5.0 5.0]\np * q # => [-12.0 16.0 4.0 22.0]\nq * p # => [-12.0 6.0 24.0 12.0]\n```\n\nUse the convenience methods to encode rotations.\n\n```\nv = Vec3[1, 2, 3]\nq = Quat.aligning v, to: Vec3[1, 0, 0]\nq * v # => [3.742 0.0 0.0]\n# or\nv.transform(q)    # => [3.742 0.0 0.0]\n(q * v).normalize # => [1.0 0.0 0.0]\n\nq = Quat.rotation Vec3[0, 1, 0], by: 90\nq * v # => [3.0 2.0 -1.0]\nv * q # => [-3.0 2.0 1.0]\n```\n\nNOTE: Quat multiplication is not commutative: `q * v != v *\np`, the former will apply the rotation encoded in *q* to *v* but the\nlatter will produce the inverse rotation. Use `Vec3#transform` to\navoid the ambiguity.","summary":"<p>The quaternion is a mathematical construct that extends the complex numbers and it is useful to encode three-dimensional rotations.</p>","constructors":[{"html_id":"[](w:Float64,x:Float64,y:Float64,z:Float64):self-class-method","name":"[]","doc":"Returns a quaternion with *w* as the real (scalar) part and *x*,\n*y*, and *z* as the vector (imaginary) part.","summary":"<p>Returns a quaternion with <em>w</em> as the real (scalar) part and <em>x</em>, <em>y</em>, and <em>z</em> as the vector (imaginary) part.</p>","abstract":false,"args":[{"name":"w","external_name":"w","restriction":"Float64"},{"name":"x","external_name":"x","restriction":"Float64"},{"name":"y","external_name":"y","restriction":"Float64"},{"name":"z","external_name":"z","restriction":"Float64"}],"args_string":"(w : Float64, x : Float64, y : Float64, z : Float64) : self","args_html":"(w : Float64, x : Float64, y : Float64, z : Float64) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":95,"url":null},"def":{"name":"[]","args":[{"name":"w","external_name":"w","restriction":"Float64"},{"name":"x","external_name":"x","restriction":"Float64"},{"name":"y","external_name":"y","restriction":"Float64"},{"name":"z","external_name":"z","restriction":"Float64"}],"return_type":"self","visibility":"Public","body":"Quat.new(w, x, y, z)"}},{"html_id":"aligning(u:Vec3,tov:Vec3):self-class-method","name":"aligning","doc":"Returns a quaternion encoding the rotation operation to align *u*\nto *v*.","summary":"<p>Returns a quaternion encoding the rotation operation to align <em>u</em> to <em>v</em>.</p>","abstract":false,"args":[{"name":"u","external_name":"u","restriction":"Vec3"},{"name":"v","external_name":"to","restriction":"Vec3"}],"args_string":"(u : Vec3, to v : Vec3) : self","args_html":"(u : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, to v : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":101,"url":null},"def":{"name":"aligning","args":[{"name":"u","external_name":"u","restriction":"Vec3"},{"name":"v","external_name":"to","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"w = u.cross(v)\nQuat[(Math.sqrt(u.abs2 * v.abs2)) + (u.dot(v)), w.x, w.y, w.z].normalize\n"}},{"html_id":"aligning(u:Tuple(Vec3,Vec3),tov:Tuple(Vec3,Vec3)):self-class-method","name":"aligning","doc":"Returns a quaternion encoding the rotation to align *u[0]* to\n*v[0]* and *u[1]* to *v[1]*.\n\nFirst compute the alignment of *u[0]* to *v[0]*, then the\nalignment of the transformed *u[1]* to *v[1]* on the plane\nperpendicular to *v[0]* by taking their projections.","summary":"<p>Returns a quaternion encoding the rotation to align <em>u[0]</em> to <em>v[0]</em> and <em>u[1]</em> to <em>v[1]</em>.</p>","abstract":false,"args":[{"name":"u","external_name":"u","restriction":"Tuple(Vec3, Vec3)"},{"name":"v","external_name":"to","restriction":"Tuple(Vec3, Vec3)"}],"args_string":"(u : Tuple(Vec3, Vec3), to v : Tuple(Vec3, Vec3)) : self","args_html":"(u : Tuple(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>), to v : Tuple(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":112,"url":null},"def":{"name":"aligning","args":[{"name":"u","external_name":"u","restriction":"Tuple(Vec3, Vec3)"},{"name":"v","external_name":"to","restriction":"Tuple(Vec3, Vec3)"}],"return_type":"self","visibility":"Public","body":"q = Spatial::Quat.aligning(u[0], to: v[0])\nu = (q * u[1]).reject(v[0])\nv = v[1].reject(v[0])\nqq = Spatial::Quat.aligning(u, to: v)\nqq * q\n"}},{"html_id":"identity:self-class-method","name":"identity","doc":"Returns the identity quaternion (no rotation).","summary":"<p>Returns the identity quaternion (no rotation).</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":141,"url":null},"def":{"name":"identity","return_type":"self","visibility":"Public","body":"Quat[1, 0, 0, 0]"}},{"html_id":"new(w:Float64,x:Float64,y:Float64,z:Float64)-class-method","name":"new","doc":"Creates a new quaternion with *w* as the real (scalar) part and\n*x*, *y*, and *z* as the vector (imaginary) part.","summary":"<p>Creates a new quaternion with <em>w</em> as the real (scalar) part and <em>x</em>, <em>y</em>, and <em>z</em> as the vector (imaginary) part.</p>","abstract":false,"args":[{"name":"w","external_name":"w","restriction":"Float64"},{"name":"x","external_name":"x","restriction":"Float64"},{"name":"y","external_name":"y","restriction":"Float64"},{"name":"z","external_name":"z","restriction":"Float64"}],"args_string":"(w : Float64, x : Float64, y : Float64, z : Float64)","args_html":"(w : Float64, x : Float64, y : Float64, z : Float64)","location":{"filename":"src/chem/spatial/quat.cr","line_number":89,"url":null},"def":{"name":"new","args":[{"name":"w","external_name":"w","restriction":"Float64"},{"name":"x","external_name":"x","restriction":"Float64"},{"name":"y","external_name":"y","restriction":"Float64"},{"name":"z","external_name":"z","restriction":"Float64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(w, x, y, z)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"rotation(x:Number,y:Number,z:Number):self-class-method","name":"rotation","doc":"Returns a quaternion encoding the rotation by the Euler angles.\n\nThe rotation rotates *x* degrees around the X axis, *y* degrees\naround the Y axis, and *z* degrees around the y axis; applied in\nthat order (XYZ).","summary":"<p>Returns a quaternion encoding the rotation by the Euler angles.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"args_string":"(x : Number, y : Number, z : Number) : self","args_html":"(x : <a href=\"../../Number.html\">Number</a>, y : <a href=\"../../Number.html\">Number</a>, z : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":125,"url":null},"def":{"name":"rotation","args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"cx = Math.cos(x.radians * 0.5)\nsx = Math.sin(x.radians * 0.5)\ncy = Math.cos(y.radians * 0.5)\nsy = Math.sin(y.radians * 0.5)\ncz = Math.cos(z.radians * 0.5)\nsz = Math.sin(z.radians * 0.5)\nQuat[((cx * cy) * cz) - ((sx * sy) * sz), ((sx * cy) * cz) + ((cx * sy) * sz), ((cx * sy) * cz) - ((sx * cy) * sz), ((cx * cy) * sz) + ((sx * sy) * cz)]\n"}},{"html_id":"rotation(aboutrotaxis:Vec3,bytheta:Number):self-class-method","name":"rotation","doc":"Returns a quaternion encoding the rotation about the axis vector\n*rotaxis* by *theta* degrees.","summary":"<p>Returns a quaternion encoding the rotation about the axis vector <em>rotaxis</em> by <em>theta</em> degrees.</p>","abstract":false,"args":[{"name":"rotaxis","external_name":"about","restriction":"Vec3"},{"name":"theta","external_name":"by","restriction":"Number"}],"args_string":"(about rotaxis : Vec3, by theta : Number) : self","args_html":"(about rotaxis : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, by theta : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":147,"url":null},"def":{"name":"rotation","args":[{"name":"rotaxis","external_name":"about","restriction":"Vec3"},{"name":"theta","external_name":"by","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"theta = theta.radians / 2\nvec = (Math.sin(theta)) * rotaxis.normalize\nQuat[Math.cos(theta), vec.x, vec.y, vec.z]\n"}}],"instance_methods":[{"html_id":"*(rhs:self):self-instance-method","name":"*","doc":"Returns the Hamilton product of the quaternion and *rhs*.","summary":"<p>Returns the Hamilton product of the quaternion and <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":169,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"w = (@w * rhs.w) - (imag.dot(rhs.imag))\nv = ((@w * rhs.imag) + (rhs.w * imag)) + (imag.cross(rhs.imag))\nQuat[w, v.x, v.y, v.z]\n"}},{"html_id":"*(rhs:Vec3):Vec3-instance-method","name":"*","doc":"Returns the conjugate of *rhs* by the quaternion.\n\nThe conjugate of *rhs* is calculated as `p* = q * p * q^-1`, where\n`p` is a quaternion whose vector part is *rhs* and real part\nequals zero. Thus, the resulting quaternion is computed using the\nHamilton product and its vector part corresponds to `p*`. Such\noperation can be written as `(self * rhs.to_q * inv).imag`, but\nthis method implements an optimized version by using some vector\nand quaternion identities. The faster method is taken from this\n[post](https://bit.ly/3G9FENX) of the molecular matters blog.\n\nIf the quaternion encodes a rotation about an axis, this\neffectively applies such rotation to *rhs*.","summary":"<p>Returns the conjugate of <em>rhs</em> by the quaternion.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"args_string":"(rhs : Vec3) : Vec3","args_html":"(rhs : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/quat.cr","line_number":188,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"return_type":"Vec3","visibility":"Public","body":"v = 2 * (imag.cross(rhs))\n(rhs + (@w * v)) + (imag.cross(v))\n"}},{"html_id":"*(rhs:Number):self-instance-method","name":"*","doc":"Returns the element-wise multiplication of the quaternion by *rhs*.","summary":"<p>Returns the element-wise multiplication of the quaternion by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":194,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"Quat[@w * rhs, @x * rhs, @y * rhs, @z * rhs]"}},{"html_id":"+(rhs:self):self-instance-method","name":"+","doc":"Returns the element-wise addition of the quaternion by *rhs*.","summary":"<p>Returns the element-wise addition of the quaternion by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":154,"url":null},"def":{"name":"+","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"Quat[@w + rhs.w, @x + rhs.x, @y + rhs.y, @z + rhs.z]"}},{"html_id":"-(rhs:self):self-instance-method","name":"-","doc":"Returns the element-wise subtraction of the quaternion by *rhs*.","summary":"<p>Returns the element-wise subtraction of the quaternion by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":164,"url":null},"def":{"name":"-","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"Quat[@w - rhs.w, @x - rhs.x, @y - rhs.y, @z - rhs.z]"}},{"html_id":"-:self-instance-method","name":"-","doc":"Returns the negation of the quaternion.","summary":"<p>Returns the negation of the quaternion.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":159,"url":null},"def":{"name":"-","return_type":"self","visibility":"Public","body":"Quat[-@w, -@x, -@y, -@z]"}},{"html_id":"/(rhs:Number):self-instance-method","name":"/","doc":"Returns the element-wise division of the quaternion by *rhs*.","summary":"<p>Returns the element-wise division of the quaternion by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":199,"url":null},"def":{"name":"/","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"Quat[@w / rhs, @x / rhs, @y / rhs, @z / rhs]"}},{"html_id":"abs:Float64-instance-method","name":"abs","doc":"Returns the absolute value (norm) using the Pythagorean theorem.","summary":"<p>Returns the absolute value (norm) using the Pythagorean theorem.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":204,"url":null},"def":{"name":"abs","return_type":"Float64","visibility":"Public","body":"Math.sqrt(abs2)"}},{"html_id":"abs2:Float64-instance-method","name":"abs2","doc":"Returns the square of the absolute value (norm).","summary":"<p>Returns the square of the absolute value (norm).</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":209,"url":null},"def":{"name":"abs2","return_type":"Float64","visibility":"Public","body":"(((@w ** 2) + (@x ** 2)) + (@y ** 2)) + (@z ** 2)"}},{"html_id":"close_to?(rhs:self,delta:Number=Float64::EPSILON):Bool-instance-method","name":"close_to?","doc":"Returns `true` if the elements of the quaternions are within\n*delta* from each other, else `false`.\n\n```\nQuat[1, 2, 3, 4].close_to?(Quat[1, 2, 3, 4])                     # => true\nQuat[1, 2, 3, 4].close_to?(Quat[1.001, 1.999, 3.00004, 4], 1e-3) # => true\nQuat[1, 2, 3, 4].close_to?(Quat[4, 3, 2, 1])                     # => false\nQuat[1, 2, 3, 4].close_to?(Quat[1.001, 1.999, 3.00004, 4], 1e-8) # => false\n```","summary":"<p>Returns <code>true</code> if the elements of the quaternions are within <em>delta</em> from each other, else <code>false</code>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"delta","default_value":"Float64::EPSILON","external_name":"delta","restriction":"Number"}],"args_string":"(rhs : self, delta : Number = Float64::EPSILON) : Bool","args_html":"(rhs : <span class=\"k\">self</span>, delta : <a href=\"../../Number.html\">Number</a> = <span class=\"t\">Float64</span><span class=\"t\">::</span><span class=\"t\">EPSILON</span>) : Bool","location":{"filename":"src/chem/spatial/quat.cr","line_number":222,"url":null},"def":{"name":"close_to?","args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"delta","default_value":"Float64::EPSILON","external_name":"delta","restriction":"Number"}],"return_type":"Bool","visibility":"Public","body":"(((@w.close_to?(rhs.w, delta)) && (@x.close_to?(rhs.x, delta))) && (@y.close_to?(rhs.y, delta))) && (@z.close_to?(rhs.z, delta))"}},{"html_id":"conj:self-instance-method","name":"conj","doc":"Returns the conjugate of the quaternion.","summary":"<p>Returns the conjugate of the quaternion.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":230,"url":null},"def":{"name":"conj","return_type":"self","visibility":"Public","body":"Quat[@w, -@x, -@y, -@z]"}},{"html_id":"dot(rhs:self):Float64-instance-method","name":"dot","doc":"Returns the dot product of the quaternion and *rhs*.","summary":"<p>Returns the dot product of the quaternion and <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Float64","args_html":"(rhs : <span class=\"k\">self</span>) : Float64","location":{"filename":"src/chem/spatial/quat.cr","line_number":235,"url":null},"def":{"name":"dot","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"Float64","visibility":"Public","body":"(((@w * rhs.w) + (@x * rhs.x)) + (@y * rhs.y)) + (@z * rhs.z)"}},{"html_id":"imag:Vec3-instance-method","name":"imag","doc":"Returns the imaginary part of the quaternion.","summary":"<p>Returns the imaginary part of the quaternion.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":240,"url":null},"def":{"name":"imag","return_type":"Vec3","visibility":"Public","body":"Vec3[@x, @y, @z]"}},{"html_id":"inv:self-instance-method","name":"inv","doc":"Returns the inverse of the quaternion.","summary":"<p>Returns the inverse of the quaternion.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":245,"url":null},"def":{"name":"inv","return_type":"self","visibility":"Public","body":"conj / abs2"}},{"html_id":"normalize:self-instance-method","name":"normalize","doc":"Returns the normalized quaternion of the quaternion.","summary":"<p>Returns the normalized quaternion of the quaternion.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":250,"url":null},"def":{"name":"normalize","return_type":"self","visibility":"Public","body":"if zero?\n  return dup\nend\nself * (1 / abs)\n"}},{"html_id":"real:Float64-instance-method","name":"real","doc":"Returns the real part of the quaternion.","summary":"<p>Returns the real part of the quaternion.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":256,"url":null},"def":{"name":"real","return_type":"Float64","visibility":"Public","body":"@w"}},{"html_id":"to_mat3:Mat3-instance-method","name":"to_mat3","doc":"Returns the rotation matrix equivalent to the quaternion.","summary":"<p>Returns the rotation matrix equivalent to the quaternion.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":261,"url":null},"def":{"name":"to_mat3","return_type":"Mat3","visibility":"Public","body":"if zero?\n  return Mat3.zero\nend\nq = normalize\nw2 = q.w ** 2\nx2 = q.x ** 2\ny2 = q.y ** 2\nz2 = q.z ** 2\nwx = q.w * q.x\nwy = q.w * q.y\nwz = q.w * q.z\nxy = q.x * q.y\nxz = q.x * q.z\nyz = q.y * q.z\nMat3[[((w2 + x2) - y2) - z2, 2 * (xy - wz), 2 * (xz + wy)], [2 * (xy + wz), ((w2 - x2) + y2) - z2, 2 * (yz - wx)], [2 * (xz - wy), 2 * (yz + wx), ((w2 - x2) - y2) + z2]]\n"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code>#inspect(io)</code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/spatial/quat.cr","line_number":284,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << \"Quat[ \"\n{% for name, i in [\"w\", \"x\", \"y\", \"z\"] of ::String %}\n        {% if i > 0 %}\n          io << (@{{ name.id }} >= 0 ? \"  \" : ' ')\n        {% end %}\n        io.printf \"%.{{ PRINT_PRECISION }}g\", @{{ name.id }}\n      {% end %}\nio << \" ]\"\n"}},{"html_id":"unit?:Bool-instance-method","name":"unit?","doc":"Returns `true` if the quaternion is a unit quaternion, else\n`false`.","summary":"<p>Returns <code>true</code> if the quaternion is a unit quaternion, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":297,"url":null},"def":{"name":"unit?","return_type":"Bool","visibility":"Public","body":"(abs - 1).abs <= 1e-15"}},{"html_id":"w:Float64-instance-method","name":"w","doc":"Real (scalar) part of the quaternion.","summary":"<p>Real (scalar) part of the quaternion.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":79,"url":null},"def":{"name":"w","return_type":"Float64","visibility":"Public","body":"@w"}},{"html_id":"x:Float64-instance-method","name":"x","doc":"X component of the imaginary (vector) part of the quaternion.","summary":"<p>X component of the imaginary (vector) part of the quaternion.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":81,"url":null},"def":{"name":"x","return_type":"Float64","visibility":"Public","body":"@x"}},{"html_id":"y:Float64-instance-method","name":"y","doc":"Y component of the imaginary (vector) part of the quaternion.","summary":"<p>Y component of the imaginary (vector) part of the quaternion.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":83,"url":null},"def":{"name":"y","return_type":"Float64","visibility":"Public","body":"@y"}},{"html_id":"z:Float64-instance-method","name":"z","doc":"Z component of the imaginary (vector) part of the quaternion.","summary":"<p>Z component of the imaginary (vector) part of the quaternion.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":85,"url":null},"def":{"name":"z","return_type":"Float64","visibility":"Public","body":"@z"}},{"html_id":"zero?:Bool-instance-method","name":"zero?","doc":"Returns `true` if the quaternion is a zero quaternion, else\n`false`.","summary":"<p>Returns <code>true</code> if the quaternion is a zero quaternion, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":303,"url":null},"def":{"name":"zero?","return_type":"Bool","visibility":"Public","body":"(((@w == 0) && (@x == 0)) && (@y == 0)) && (@z == 0)"}}]},{"html_id":"chem.cr/Chem/Spatial/Size3","path":"Chem/Spatial/Size3.html","kind":"struct","full_name":"Chem::Spatial::Size3","name":"Size3","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/size3.cr","line_number":4,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":"A `Size3` represents the size of an object in three-dimensional\nspace.","summary":"<p>A <code><a href=\"../../Chem/Spatial/Size3.html\">Size3</a></code> represents the size of an object in three-dimensional space.</p>","constructors":[{"html_id":"[](x:Number,y:Number,z:Number):self-class-method","name":"[]","doc":"Returns a size with values *x*, *y* and *z*.","summary":"<p>Returns a size with values <em>x</em>, <em>y</em> and <em>z</em>.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"args_string":"(x : Number, y : Number, z : Number) : self","args_html":"(x : <a href=\"../../Number.html\">Number</a>, y : <a href=\"../../Number.html\">Number</a>, z : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/size3.cr","line_number":20,"url":null},"def":{"name":"[]","args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"new(x.to_f, y.to_f, z.to_f)"}},{"html_id":"new(x:Float64,y:Float64,z:Float64)-class-method","name":"new","doc":"Creates a size with values *x*, *y* and *z*. Raises\n`ArgumentError` if *x*, *y* or *z* is negative.","summary":"<p>Creates a size with values <em>x</em>, <em>y</em> and <em>z</em>.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Float64"},{"name":"y","external_name":"y","restriction":"Float64"},{"name":"z","external_name":"z","restriction":"Float64"}],"args_string":"(x : Float64, y : Float64, z : Float64)","args_html":"(x : Float64, y : Float64, z : Float64)","location":{"filename":"src/chem/spatial/size3.cr","line_number":14,"url":null},"def":{"name":"new","args":[{"name":"x","external_name":"x","restriction":"Float64"},{"name":"y","external_name":"y","restriction":"Float64"},{"name":"z","external_name":"z","restriction":"Float64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(x, y, z)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"zero:self-class-method","name":"zero","doc":"Returns the zero size.","summary":"<p>Returns the zero size.</p>","abstract":false,"location":{"filename":"src/chem/spatial/size3.cr","line_number":25,"url":null},"def":{"name":"zero","return_type":"self","visibility":"Public","body":"Size3[0, 0, 0]"}}],"instance_methods":[{"html_id":"*(rhs:Number):self-instance-method","name":"*","doc":"Returns the element-wise multiplication of the size by\n*rhs*.","summary":"<p>Returns the element-wise multiplication of the size by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/size3.cr","line_number":40,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"self.class[@x * rhs, @y * rhs, @z * rhs]"}},{"html_id":"*(rhs:self):self-instance-method","name":"*","doc":"Returns the element-wise multiplication of the size by\n*rhs*.","summary":"<p>Returns the element-wise multiplication of the size by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/size3.cr","line_number":40,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"self.class.new(@x * rhs.x, @y * rhs.y, @z * rhs.z)"}},{"html_id":"+(rhs:self):self-instance-method","name":"+","doc":"Returns the element-wise addition of the size by\n*rhs*.","summary":"<p>Returns the element-wise addition of the size by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/size3.cr","line_number":40,"url":null},"def":{"name":"+","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"self.class.new(@x + rhs.x, @y + rhs.y, @z + rhs.z)"}},{"html_id":"-(rhs:self):self-instance-method","name":"-","doc":"Returns the element-wise substraction of the size by *rhs*.\n\nWARNING: This will clamp negative values to zero.","summary":"<p>Returns the element-wise substraction of the size by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/size3.cr","line_number":32,"url":null},"def":{"name":"-","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"self.class.new(Math.max(0.0, @x - rhs.x), Math.max(0.0, @y - rhs.y), Math.max(0.0, @z - rhs.z))"}},{"html_id":"/(rhs:Number):self-instance-method","name":"/","doc":"Returns the element-wise division of the size by\n*rhs*.","summary":"<p>Returns the element-wise division of the size by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/size3.cr","line_number":40,"url":null},"def":{"name":"/","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"self.class[@x / rhs, @y / rhs, @z / rhs]"}},{"html_id":"/(rhs:self):self-instance-method","name":"/","doc":"Returns the element-wise division of the size by\n*rhs*.","summary":"<p>Returns the element-wise division of the size by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/size3.cr","line_number":40,"url":null},"def":{"name":"/","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"self.class.new(@x / rhs.x, @y / rhs.y, @z / rhs.z)"}},{"html_id":"[](index:Int):Float64-instance-method","name":"[]","doc":"Returns the element at *index* in the XYZ order. Raises\n`IndexError` if *index* is out of bounds.\n\n```\nsize = Size3[10, 15, 20]\nsize[0]  # => 10\nsize[1]  # => 15\nsize[2]  # => 20\nsize[3]  # raises IndexError\nsize[-1] # raises IndexError\n```","summary":"<p>Returns the element at <em>index</em> in the XYZ order.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : Float64","args_html":"(index : Int) : Float64","location":{"filename":"src/chem/spatial/size3.cr","line_number":73,"url":null},"def":{"name":"[]","args":[{"name":"index","external_name":"index","restriction":"Int"}],"return_type":"Float64","visibility":"Public","body":"case index\nwhen 0\n  @x\nwhen 1\n  @y\nwhen 2\n  @z\nelse\n  raise(IndexError.new)\nend"}},{"html_id":"clamp(min:Number|Nil,max:Number|Nil):self-instance-method","name":"clamp","abstract":false,"args":[{"name":"min","external_name":"min","restriction":"Number | ::Nil"},{"name":"max","external_name":"max","restriction":"Number | ::Nil"}],"args_string":"(min : Number | Nil, max : Number | Nil) : self","args_html":"(min : <a href=\"../../Number.html\">Number</a> | Nil, max : <a href=\"../../Number.html\">Number</a> | Nil) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/size3.cr","line_number":86,"url":null},"def":{"name":"clamp","args":[{"name":"min","external_name":"min","restriction":"Number | ::Nil"},{"name":"max","external_name":"max","restriction":"Number | ::Nil"}],"return_type":"self","visibility":"Public","body":"min || (min = 0.0)\nmap(&.clamp(min, max))\n"}},{"html_id":"clamp(range:Range):self-instance-method","name":"clamp","abstract":false,"args":[{"name":"range","external_name":"range","restriction":"Range"}],"args_string":"(range : Range) : self","args_html":"(range : <a href=\"../../Range.html\">Range</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/size3.cr","line_number":82,"url":null},"def":{"name":"clamp","args":[{"name":"range","external_name":"range","restriction":"Range"}],"return_type":"self","visibility":"Public","body":"clamp(range.begin, range.end)"}},{"html_id":"close_to?(rhs:self,delta:Number=Float64::EPSILON):Bool-instance-method","name":"close_to?","doc":"Returns `true` if the elements of the size are within *delta*\nfrom each other, else `false`.\n\n```\nSize3[1, 2, 3].close_to?(Size3[1, 2, 3])                     # => true\nSize3[1, 2, 3].close_to?(Size3[1.001, 1.999, 3.00004], 1e-3) # => true\nSize3[1, 2, 3].close_to?(Size3[3, 2, 1])                     # => false\nSize3[1, 2, 3].close_to?(Size3[1.001, 1.999, 3.00004], 1e-8) # => false\n```","summary":"<p>Returns <code>true</code> if the elements of the size are within <em>delta</em> from each other, else <code>false</code>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"delta","default_value":"Float64::EPSILON","external_name":"delta","restriction":"Number"}],"args_string":"(rhs : self, delta : Number = Float64::EPSILON) : Bool","args_html":"(rhs : <span class=\"k\">self</span>, delta : <a href=\"../../Number.html\">Number</a> = <span class=\"t\">Float64</span><span class=\"t\">::</span><span class=\"t\">EPSILON</span>) : Bool","location":{"filename":"src/chem/spatial/size3.cr","line_number":100,"url":null},"def":{"name":"close_to?","args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"delta","default_value":"Float64::EPSILON","external_name":"delta","restriction":"Number"}],"return_type":"Bool","visibility":"Public","body":"((@x.close_to?(rhs.x, delta)) && (@y.close_to?(rhs.y, delta))) && (@z.close_to?(rhs.z, delta))"}},{"html_id":"map(&:Float64->Float64):self-instance-method","name":"map","abstract":false,"location":{"filename":"src/chem/spatial/size3.cr","line_number":106,"url":null},"def":{"name":"map","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Float64 -> Float64)"},"return_type":"self","visibility":"Public","body":"self.class.new((yield @x), (yield @y), (yield @z))"}},{"html_id":"transform(&:Float64,Float64,Float64->FloatTriple):self-instance-method","name":"transform","doc":"Returns a new size with the return value of the given block, which\nis invoked with the X, Y, and Z components.\n\n```\nSize3[1, 2, 3].transform do |x, y, z|\n  x *= 2\n  z /= 0.3\n  {x, y, z}\nend # => Size3[2, 2, 10]\n```","summary":"<p>Returns a new size with the return value of the given block, which is invoked with the X, Y, and Z components.</p>","abstract":false,"location":{"filename":"src/chem/spatial/size3.cr","line_number":120,"url":null},"def":{"name":"transform","yields":3,"block_arity":3,"block_arg":{"name":"","external_name":"","restriction":"(Float64, Float64, Float64 -> FloatTriple)"},"return_type":"self","visibility":"Public","body":"components = yield @x, @y, @z\nself.class.new(*components)\n"}},{"html_id":"x:Float64-instance-method","name":"x","doc":"X component of the size.","summary":"<p>X component of the size.</p>","abstract":false,"location":{"filename":"src/chem/spatial/size3.cr","line_number":6,"url":null},"def":{"name":"x","return_type":"Float64","visibility":"Public","body":"@x"}},{"html_id":"y:Float64-instance-method","name":"y","doc":"Y component of the size.","summary":"<p>Y component of the size.</p>","abstract":false,"location":{"filename":"src/chem/spatial/size3.cr","line_number":8,"url":null},"def":{"name":"y","return_type":"Float64","visibility":"Public","body":"@y"}},{"html_id":"z:Float64-instance-method","name":"z","doc":"Z component of the size.","summary":"<p>Z component of the size.</p>","abstract":false,"location":{"filename":"src/chem/spatial/size3.cr","line_number":10,"url":null},"def":{"name":"z","return_type":"Float64","visibility":"Public","body":"@z"}}]},{"html_id":"chem.cr/Chem/Spatial/Transform","path":"Chem/Spatial/Transform.html","kind":"struct","full_name":"Chem::Spatial::Transform","name":"Transform","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/transform.cr","line_number":53,"url":null},{"filename":"src/chem/spatial/transform.cr","line_number":275,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"doc":"A `Transform` encodes an affine transformation in 3D space such as\ntranslation, scaling, rotation, reflection, and more.\n\nAn affine transformation is the composition of a linear map *A* (3x3\nmatrix) and a translation *b* (3x1 vector), which can be represented\nby the augmented 4x4 matrix:\n\n```text\n[ A   b ]\n[ 0   1 ]\n```\n\nwhere the bottom row is [0, 0, 0, 1]. This representation encodes\nthe linear map and translation in a single matrix, which allows to\ncombine and apply transformations by matrix multiplication.\nAdditionally, the affine transformation matrix has some properties\nthat allows for efficient code (see the multiplication operator with\na vector). For further details, refer to the [Wikipedia\narticle](https://en.wikipedia.org/wiki/Affine_transformation).\n\nThe transformation is internally represented by a `Mat3`\n(`#linear_map`) and `Vec3` (`#offset`) instances.\n\n### Examples\n\n```\nscaling = Transform.scaling(2)\ntranslation = Transform.translation(Vec3[1, 2, 3])\nvec = Vec3[1, 0, 1]\n\n# apply the transformation\nscaling * vec     # => Vec3[2.0, 0.0, 2.0]\ntranslation * vec # => Vec3[2.0, 2.0, 4.0]\n# or\nvec.transform(scaling)     # => Vec3[2.0, 0.0, 2.0]\nvec.transform(translation) # => Vec3[2.0, 2.0, 4.0]\n\n# note that multiplication is not commutative\nscaling * vec # => Vec3[2.0, 0.0, 2.0]\nvec * scaling # => Vec3[0.5, 0.0, 0.5] # inverse transformation\n\n# combine transformations\ntranslate_scale = scaling * translation # translates then scales\ntranslate_scale * vec                   # => Vec3[4.0, 4.0, 8.0]\nscale_translate = translation * scaling # scales than translates\nscale_translate * vec                   # => Vec3[3.0, 2.0, 5.0]\n\n# chain methods for composing a transformation\ntransform = Transform.scaling(2).translate(Vec3[1, 2, 3])\ntransform * vec # => Vec3[3.0, 2.0, 5.0]\n```","summary":"<p>A <code><a href=\"../../Chem/Spatial/Transform.html\">Transform</a></code> encodes an affine transformation in 3D space such as translation, scaling, rotation, reflection, and more.</p>","constructors":[{"html_id":"aligning(u:Tuple(Vec3,Vec3),tov:Tuple(Vec3,Vec3)):self-class-method","name":"aligning","doc":"Returns a transformation encoding the rotation to align *u[0]* to\n*v[0]* and *u[1]* to *v[1]*.\n\nFirst compute the alignment of *u[0]* to *v[0]*, then the\nalignment of the transformed *u[1]* to *v[1]* on the plane\nperpendicular to *v[0]* by taking their projections.","summary":"<p>Returns a transformation encoding the rotation to align <em>u[0]</em> to <em>v[0]</em> and <em>u[1]</em> to <em>v[1]</em>.</p>","abstract":false,"args":[{"name":"u","external_name":"u","restriction":"Tuple(Vec3, Vec3)"},{"name":"v","external_name":"to","restriction":"Tuple(Vec3, Vec3)"}],"args_string":"(u : Tuple(Vec3, Vec3), to v : Tuple(Vec3, Vec3)) : self","args_html":"(u : Tuple(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>), to v : Tuple(<a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":75,"url":null},"def":{"name":"aligning","args":[{"name":"u","external_name":"u","restriction":"Tuple(Vec3, Vec3)"},{"name":"v","external_name":"to","restriction":"Tuple(Vec3, Vec3)"}],"return_type":"self","visibility":"Public","body":"rotation(Quat.aligning(u, v))"}},{"html_id":"aligning(u:Vec3,tov:Vec3):self-class-method","name":"aligning","doc":"Returns a transformation encoding the rotation operation to align\n*u* to *v*.","summary":"<p>Returns a transformation encoding the rotation operation to align <em>u</em> to <em>v</em>.</p>","abstract":false,"args":[{"name":"u","external_name":"u","restriction":"Vec3"},{"name":"v","external_name":"to","restriction":"Vec3"}],"args_string":"(u : Vec3, to v : Vec3) : self","args_html":"(u : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, to v : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":65,"url":null},"def":{"name":"aligning","args":[{"name":"u","external_name":"u","restriction":"Vec3"},{"name":"v","external_name":"to","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"rotation(Quat.aligning(u, v))"}},{"html_id":"aligning(pos:CoordinatesProxy,toref_pos:CoordinatesProxy):self-class-method","name":"aligning","doc":"Returns the transformation encoding the rotation and traslation to\nalign *pos* onto *ref_pos*. Raises `ArgumentError` if the two\ncoordinate sets are of different size.\n\nThe optimal rotation matrix is computed by minimizing the root\nmean square deviation (RMSD) using the QCP method (refer to\n`Spatial.qcp` for details).","summary":"<p>Returns the transformation encoding the rotation and traslation to align <em>pos</em> onto <em>ref_pos</em>.</p>","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"CoordinatesProxy"},{"name":"ref_pos","external_name":"to","restriction":"CoordinatesProxy"}],"args_string":"(pos : CoordinatesProxy, to ref_pos : CoordinatesProxy) : self","args_html":"(pos : <a href=\"../../Chem/Spatial/CoordinatesProxy.html\">CoordinatesProxy</a>, to ref_pos : <a href=\"../../Chem/Spatial/CoordinatesProxy.html\">CoordinatesProxy</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":86,"url":null},"def":{"name":"aligning","args":[{"name":"pos","external_name":"pos","restriction":"CoordinatesProxy"},{"name":"ref_pos","external_name":"to","restriction":"CoordinatesProxy"}],"return_type":"self","visibility":"Public","body":"pos = pos.to_a\nref_pos = ref_pos.to_a\nif pos.size != ref_pos.size\n  raise(ArgumentError.new(\"Incompatible coordinates\"))\nend\ncenter = pos.mean\npos.map!(&.-(center))\nref_center = ref_pos.mean\nref_pos.map!(&.-(ref_center))\nquat, _ = Spatial.qcp(pos, ref_pos)\n((translation(-center)).rotate(quat)).translate(ref_center)\n"}},{"html_id":"aligning(pos:AtomCollection,toref_pos:AtomCollection):self-class-method","name":"aligning","abstract":false,"args":[{"name":"pos","external_name":"pos","restriction":"AtomCollection"},{"name":"ref_pos","external_name":"to","restriction":"AtomCollection"}],"args_string":"(pos : AtomCollection, to ref_pos : AtomCollection) : self","args_html":"(pos : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>, to ref_pos : <a href=\"../../Chem/AtomCollection.html\">AtomCollection</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":276,"url":null},"def":{"name":"aligning","args":[{"name":"pos","external_name":"pos","restriction":"AtomCollection"},{"name":"ref_pos","external_name":"to","restriction":"AtomCollection"}],"return_type":"self","visibility":"Public","body":"aligning(pos.coords, ref_pos.coords)"}},{"html_id":"identity:self-class-method","name":"identity","doc":"Returns the identity transformation.","summary":"<p>Returns the identity transformation.</p>","abstract":false,"location":{"filename":"src/chem/spatial/transform.cr","line_number":100,"url":null},"def":{"name":"identity","return_type":"self","visibility":"Public","body":"new(Mat3.identity)"}},{"html_id":"new(linear_map:Mat3,offset:Vec3=Vec3.zero)-class-method","name":"new","doc":"Creates a new transformation with *linear_map* and *offset*.","summary":"<p>Creates a new transformation with <em>linear_map</em> and <em>offset</em>.</p>","abstract":false,"args":[{"name":"linear_map","external_name":"linear_map","restriction":"Mat3"},{"name":"offset","default_value":"Vec3.zero","external_name":"offset","restriction":"Vec3"}],"args_string":"(linear_map : Mat3, offset : Vec3 = Vec3.zero)","args_html":"(linear_map : <a href=\"../../Chem/Spatial/Mat3.html\">Mat3</a>, offset : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a> = <span class=\"t\">Vec3</span>.zero)","location":{"filename":"src/chem/spatial/transform.cr","line_number":60,"url":null},"def":{"name":"new","args":[{"name":"linear_map","external_name":"linear_map","restriction":"Mat3"},{"name":"offset","default_value":"Vec3.zero","external_name":"offset","restriction":"Vec3"}],"visibility":"Public","body":"_ = allocate\n_.initialize(linear_map, offset)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"rotation(x:Number,y:Number,z:Number):self-class-method","name":"rotation","doc":"Returns a transformation that rotates by the Euler angles in\ndegrees. Delegates to `Quat.rotation` for computing the rotation.","summary":"<p>Returns a transformation that rotates by the Euler angles in degrees.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"args_string":"(x : Number, y : Number, z : Number) : self","args_html":"(x : <a href=\"../../Number.html\">Number</a>, y : <a href=\"../../Number.html\">Number</a>, z : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":106,"url":null},"def":{"name":"rotation","args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"rotation(Quat.rotation(x, y, z))"}},{"html_id":"rotation(aboutrotaxis:Vec3,byangle:Number):self-class-method","name":"rotation","doc":"Returns a transformation that rotates about the axis vector\n*rotaxis* by *angle* degrees. Delegates to `Quat.rotation` for\ncomputing the rotation.","summary":"<p>Returns a transformation that rotates about the axis vector <em>rotaxis</em> by <em>angle</em> degrees.</p>","abstract":false,"args":[{"name":"rotaxis","external_name":"about","restriction":"Vec3"},{"name":"angle","external_name":"by","restriction":"Number"}],"args_string":"(about rotaxis : Vec3, by angle : Number) : self","args_html":"(about rotaxis : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, by angle : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":113,"url":null},"def":{"name":"rotation","args":[{"name":"rotaxis","external_name":"about","restriction":"Vec3"},{"name":"angle","external_name":"by","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"rotation(Quat.rotation(rotaxis, angle))"}},{"html_id":"rotation(quat:Quat):self-class-method","name":"rotation","doc":"Returns a transformation that applies the rotation encoded by\nthe given quaternion.","summary":"<p>Returns a transformation that applies the rotation encoded by the given quaternion.</p>","abstract":false,"args":[{"name":"quat","external_name":"quat","restriction":"Quat"}],"args_string":"(quat : Quat) : self","args_html":"(quat : <a href=\"../../Chem/Spatial/Quat.html\">Quat</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":119,"url":null},"def":{"name":"rotation","args":[{"name":"quat","external_name":"quat","restriction":"Quat"}],"return_type":"self","visibility":"Public","body":"new(quat.to_mat3)"}},{"html_id":"scaling(sx:Number,sy:Number,sz:Number):self-class-method","name":"scaling","doc":"Returns a transformation that scales by the given factors.","summary":"<p>Returns a transformation that scales by the given factors.</p>","abstract":false,"args":[{"name":"sx","external_name":"sx","restriction":"Number"},{"name":"sy","external_name":"sy","restriction":"Number"},{"name":"sz","external_name":"sz","restriction":"Number"}],"args_string":"(sx : Number, sy : Number, sz : Number) : self","args_html":"(sx : <a href=\"../../Number.html\">Number</a>, sy : <a href=\"../../Number.html\">Number</a>, sz : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":129,"url":null},"def":{"name":"scaling","args":[{"name":"sx","external_name":"sx","restriction":"Number"},{"name":"sy","external_name":"sy","restriction":"Number"},{"name":"sz","external_name":"sz","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"new(Mat3.diagonal(sx, sy, sz))"}},{"html_id":"scaling(factor:Number):self-class-method","name":"scaling","doc":"Returns a transformation that scales by *factor*.","summary":"<p>Returns a transformation that scales by <em>factor</em>.</p>","abstract":false,"args":[{"name":"factor","external_name":"factor","restriction":"Number"}],"args_string":"(factor : Number) : self","args_html":"(factor : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":124,"url":null},"def":{"name":"scaling","args":[{"name":"factor","external_name":"factor","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"new(Mat3.diagonal(factor))"}},{"html_id":"translation(offset:Vec3):self-class-method","name":"translation","doc":"Returns a transformation that translates by *offset*.","summary":"<p>Returns a transformation that translates by <em>offset</em>.</p>","abstract":false,"args":[{"name":"offset","external_name":"offset","restriction":"Vec3"}],"args_string":"(offset : Vec3) : self","args_html":"(offset : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":134,"url":null},"def":{"name":"translation","args":[{"name":"offset","external_name":"offset","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"new(Mat3.identity, offset)"}}],"instance_methods":[{"html_id":"*(rhs:self):self-instance-method","name":"*","doc":"Returns the multiplication of the transformation by *rhs*. It\neffectively combines two transformation.\n\nNOTE: Multiplication of transformations is not commutative, i.e.,\n`a * b != b * a`.\n\n```\nscaling = Transform.scaling(2)\ntranslation = Transform.translation(Vec3[1, 2, 3])\nvec = Vec3[1, 0, 1]\n\ntranslate_scale = scaling * translation # translates then scales\ntranslate_scale * vec                   # => Vec3[4.0, 4.0, 8.0]\nscale_translate = translation * scaling # scales than translates\nscale_translate * vec                   # => Vec3[3.0, 2.0, 5.0]","summary":"<p>Returns the multiplication of the transformation by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : self","args_html":"(rhs : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":153,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"self","visibility":"Public","body":"linear_map = @linear_map * rhs.linear_map\noffset = @offset + (@linear_map * rhs.offset)\nTransform.new(linear_map, offset)\n"}},{"html_id":"*(rhs:Vec3):Vec3-instance-method","name":"*","doc":"Returns the multiplication of the transformation by *rhs*. It\neffectively applies the transformation to *rhs*.","summary":"<p>Returns the multiplication of the transformation by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"args_string":"(rhs : Vec3) : Vec3","args_html":"(rhs : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>","location":{"filename":"src/chem/spatial/transform.cr","line_number":161,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"return_type":"Vec3","visibility":"Public","body":"(@linear_map * rhs) + @offset"}},{"html_id":"==(rhs:self):Bool-instance-method","name":"==","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Bool","args_html":"(rhs : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/spatial/transform.cr","line_number":165,"url":null},"def":{"name":"==","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"(@linear_map == rhs.linear_map) && (@offset == rhs.offset)"}},{"html_id":"close_to?(rhs:self,delta:Float64=Float64::EPSILON):Bool-instance-method","name":"close_to?","doc":"Returns `true` if the elements of the quaternions are within\n*delta* from each other, else `false`.","summary":"<p>Returns <code>true</code> if the elements of the quaternions are within <em>delta</em> from each other, else <code>false</code>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"delta","default_value":"Float64::EPSILON","external_name":"delta","restriction":"Float64"}],"args_string":"(rhs : self, delta : Float64 = Float64::EPSILON) : Bool","args_html":"(rhs : <span class=\"k\">self</span>, delta : Float64 = <span class=\"t\">Float64</span><span class=\"t\">::</span><span class=\"t\">EPSILON</span>) : Bool","location":{"filename":"src/chem/spatial/transform.cr","line_number":171,"url":null},"def":{"name":"close_to?","args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"delta","default_value":"Float64::EPSILON","external_name":"delta","restriction":"Float64"}],"return_type":"Bool","visibility":"Public","body":"(@linear_map.close_to?(rhs.linear_map, delta)) && (@offset.close_to?(rhs.offset, delta))"}},{"html_id":"inv:self-instance-method","name":"inv","doc":"Returns the inverse transformation.\n\nThe algorithm exploits the fact that the affine transformation\nmatrix is defined as\n\n```text\n[ A   b ]\n[ 0   1 ]\n```\n\nwhere *A* is the linear map (3x3 matrix), *b* is the translation\nvector (3x1 vector), and the bottom row is [0, 0, 0, 1]. In such\ncase, the inverse matrix can be computed as\n\n```text\n[ inv(A)   -inv(A) * b ]\n[   0            1     ]\n```\n\nwhere `inv(A)` is computed following the standard procedure (see\n[Inversion of 3x3 matrices](https://en.wikipedia.org/wiki/Invertible_matrix#Inversion_of_3_%C3%97_3_matrices) at Wikipedia).\n\nRefer to the [Affine\nTransformation](https://en.wikipedia.org/wiki/Affine_transformation#Groups)\nWikipedia article for a detailed explanation or [this\nanswer](https://stackoverflow.com/a/2625420/1089898) in Stack\nOverflow.","summary":"<p>Returns the inverse transformation.</p>","abstract":false,"location":{"filename":"src/chem/spatial/transform.cr","line_number":203,"url":null},"def":{"name":"inv","return_type":"self","visibility":"Public","body":"inv_map = @linear_map.inv\nTransform.new(inv_map, (-inv_map) * @offset)\n"}},{"html_id":"linear_map:Mat3-instance-method","name":"linear_map","doc":"Linear map encoded as a 3x3 matrix.","summary":"<p>Linear map encoded as a 3x3 matrix.</p>","abstract":false,"location":{"filename":"src/chem/spatial/transform.cr","line_number":55,"url":null},"def":{"name":"linear_map","return_type":"Mat3","visibility":"Public","body":"@linear_map"}},{"html_id":"offset:Vec3-instance-method","name":"offset","doc":"Translation vector.","summary":"<p>Translation vector.</p>","abstract":false,"location":{"filename":"src/chem/spatial/transform.cr","line_number":57,"url":null},"def":{"name":"offset","return_type":"Vec3","visibility":"Public","body":"@offset"}},{"html_id":"rotate(x:Number,y:Number,z:Number):self-instance-method","name":"rotate","doc":"Returns the transformation rotated by the given Euler angles in\ndegrees. Delegates to `Quat.rotation` for computing the rotation.","summary":"<p>Returns the transformation rotated by the given Euler angles in degrees.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"args_string":"(x : Number, y : Number, z : Number) : self","args_html":"(x : <a href=\"../../Number.html\">Number</a>, y : <a href=\"../../Number.html\">Number</a>, z : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":210,"url":null},"def":{"name":"rotate","args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"rotate(Quat.rotation(x, y, z))"}},{"html_id":"rotate(aboutrotaxis:Vec3,byangle:Number):self-instance-method","name":"rotate","doc":"Returns the transformation rotated about *rotaxis* by *angle*\ndegrees. Delegates to `Quat.rotation` for computing the rotation.","summary":"<p>Returns the transformation rotated about <em>rotaxis</em> by <em>angle</em> degrees.</p>","abstract":false,"args":[{"name":"rotaxis","external_name":"about","restriction":"Vec3"},{"name":"angle","external_name":"by","restriction":"Number"}],"args_string":"(about rotaxis : Vec3, by angle : Number) : self","args_html":"(about rotaxis : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, by angle : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":216,"url":null},"def":{"name":"rotate","args":[{"name":"rotaxis","external_name":"about","restriction":"Vec3"},{"name":"angle","external_name":"by","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"rotate(Quat.rotation(rotaxis, angle))"}},{"html_id":"rotate(quat:Quat):self-instance-method","name":"rotate","doc":"Returns the transformation rotated by the given quaternion.","summary":"<p>Returns the transformation rotated by the given quaternion.</p>","abstract":false,"args":[{"name":"quat","external_name":"quat","restriction":"Quat"}],"args_string":"(quat : Quat) : self","args_html":"(quat : <a href=\"../../Chem/Spatial/Quat.html\">Quat</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":221,"url":null},"def":{"name":"rotate","args":[{"name":"quat","external_name":"quat","restriction":"Quat"}],"return_type":"self","visibility":"Public","body":"transform(({{ @type }}).rotation(quat))"}},{"html_id":"rotation:self-instance-method","name":"rotation","doc":"Returns the rotation component of the transformation.","summary":"<p>Returns the rotation component of the transformation.</p>","abstract":false,"location":{"filename":"src/chem/spatial/transform.cr","line_number":226,"url":null},"def":{"name":"rotation","return_type":"self","visibility":"Public","body":"({{ @type }}).new(@linear_map)"}},{"html_id":"scale(sx:Number,sy:Number,sz:Number):self-instance-method","name":"scale","doc":"Returns the transformation scaled by the given factors.","summary":"<p>Returns the transformation scaled by the given factors.</p>","abstract":false,"args":[{"name":"sx","external_name":"sx","restriction":"Number"},{"name":"sy","external_name":"sy","restriction":"Number"},{"name":"sz","external_name":"sz","restriction":"Number"}],"args_string":"(sx : Number, sy : Number, sz : Number) : self","args_html":"(sx : <a href=\"../../Number.html\">Number</a>, sy : <a href=\"../../Number.html\">Number</a>, sz : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":236,"url":null},"def":{"name":"scale","args":[{"name":"sx","external_name":"sx","restriction":"Number"},{"name":"sy","external_name":"sy","restriction":"Number"},{"name":"sz","external_name":"sz","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"transform(({{ @type }}).scaling(sx, sy, sz))"}},{"html_id":"scale(byfactor:Number):self-instance-method","name":"scale","doc":"Returns the transformation scaled by *factor*.","summary":"<p>Returns the transformation scaled by <em>factor</em>.</p>","abstract":false,"args":[{"name":"factor","external_name":"by","restriction":"Number"}],"args_string":"(by factor : Number) : self","args_html":"(by factor : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":231,"url":null},"def":{"name":"scale","args":[{"name":"factor","external_name":"by","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"transform(({{ @type }}).scaling(factor))"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code>#inspect(io)</code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/spatial/transform.cr","line_number":240,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"format_spec = \"%.#{PRINT_PRECISION}g\"\nio << \"[\"\n0.upto(2) do |i|\n  io << \"[ \"\n  0.upto(2) do |j|\n    if j > 0\n      io << (@linear_map[i, j] >= 0 ? \"  \" : ' ')\n    end\n    io.printf(format_spec, @linear_map[i, j])\n  end\n  io << (@offset[i] >= 0 ? \"  \" : ' ')\n  io.printf(format_spec, @offset[i])\n  io << \" ]\"\n  if i < 2\n    io << \", \"\n  end\nend\nio << \", [0  0  0  1]]\"\n"}},{"html_id":"transform(bytransform:self):self-instance-method","name":"transform","doc":"Returns the transformation transformed by *transform*. It\neffectively combines two transformations.","summary":"<p>Returns the transformation transformed by <em>transform</em>.</p>","abstract":false,"args":[{"name":"transform","external_name":"by","restriction":"self"}],"args_string":"(by transform : self) : self","args_html":"(by transform : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":259,"url":null},"def":{"name":"transform","args":[{"name":"transform","external_name":"by","restriction":"self"}],"return_type":"self","visibility":"Public","body":"transform * self"}},{"html_id":"translate(byoffset:Vec3):self-instance-method","name":"translate","doc":"Returns the transformation translated by the given offset.","summary":"<p>Returns the transformation translated by the given offset.</p>","abstract":false,"args":[{"name":"offset","external_name":"by","restriction":"Vec3"}],"args_string":"(by offset : Vec3) : self","args_html":"(by offset : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/transform.cr","line_number":264,"url":null},"def":{"name":"translate","args":[{"name":"offset","external_name":"by","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"transform(({{ @type }}).translation(offset))"}},{"html_id":"translation:self-instance-method","name":"translation","doc":"Returns the translation component of the transformation.","summary":"<p>Returns the translation component of the transformation.</p>","abstract":false,"location":{"filename":"src/chem/spatial/transform.cr","line_number":269,"url":null},"def":{"name":"translation","return_type":"self","visibility":"Public","body":"({{ @type }}).new(Mat3.identity, @offset)"}}]},{"html_id":"chem.cr/Chem/Spatial/Vec3","path":"Chem/Spatial/Vec3.html","kind":"struct","full_name":"Chem::Spatial::Vec3","name":"Vec3","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/spatial/quat.cr","line_number":308,"url":null},{"filename":"src/chem/spatial/vec3.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Spatial","kind":"module","full_name":"Chem::Spatial","name":"Spatial"},"constructors":[{"html_id":"[](x:Number,y:Number,z:Number):self-class-method","name":"[]","doc":"Returns a new vector representing the position (*x*, *y*, *z*).","summary":"<p>Returns a new vector representing the position (<em>x</em>, <em>y</em>, <em>z</em>).</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"args_string":"(x : Number, y : Number, z : Number) : self","args_html":"(x : <a href=\"../../Number.html\">Number</a>, y : <a href=\"../../Number.html\">Number</a>, z : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":16,"url":null},"def":{"name":"[]","args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"new(x.to_f, y.to_f, z.to_f)"}},{"html_id":"additive_identity:self-class-method","name":"additive_identity","doc":"Returns the additive identity of this type. This is the zero\nvector.","summary":"<p>Returns the additive identity of this type.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":22,"url":null},"def":{"name":"additive_identity","return_type":"self","visibility":"Public","body":"zero"}},{"html_id":"from_io(io:IO,format:IO::ByteFormat):self-class-method","name":"from_io","doc":"Reads a vector from *io* in the given *format*. See also:\n`IO#read_bytes`.","summary":"<p>Reads a vector from <em>io</em> in the given <em>format</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","external_name":"format","restriction":"IO::ByteFormat"}],"args_string":"(io : IO, format : IO::ByteFormat) : self","args_html":"(io : IO, format : IO::ByteFormat) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":28,"url":null},"def":{"name":"from_io","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","external_name":"format","restriction":"IO::ByteFormat"}],"return_type":"self","visibility":"Public","body":"new(io.read_bytes(Float64, format), io.read_bytes(Float64, format), io.read_bytes(Float64, format))"}},{"html_id":"new(x:Float64,y:Float64,z:Float64)-class-method","name":"new","doc":"Creates a new vector representing the position (*x*, *y*, *z*).","summary":"<p>Creates a new vector representing the position (<em>x</em>, <em>y</em>, <em>z</em>).</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Float64"},{"name":"y","external_name":"y","restriction":"Float64"},{"name":"z","external_name":"z","restriction":"Float64"}],"args_string":"(x : Float64, y : Float64, z : Float64)","args_html":"(x : Float64, y : Float64, z : Float64)","location":{"filename":"src/chem/spatial/vec3.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"x","external_name":"x","restriction":"Float64"},{"name":"y","external_name":"y","restriction":"Float64"},{"name":"z","external_name":"z","restriction":"Float64"}],"visibility":"Public","body":"_ = allocate\n_.initialize(x, y, z)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"rand(random=Random::DEFAULT):self-class-method","name":"rand","doc":"Returns a random vector with the elements within 0 and 1.","summary":"<p>Returns a random vector with the elements within 0 and 1.</p>","abstract":false,"args":[{"name":"random","default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"args_string":"(random = Random::DEFAULT) : self","args_html":"(random = <span class=\"t\">Random</span><span class=\"t\">::</span><span class=\"t\">DEFAULT</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":35,"url":null},"def":{"name":"rand","args":[{"name":"random","default_value":"Random::DEFAULT","external_name":"random","restriction":""}],"return_type":"self","visibility":"Public","body":"Vec3[random.rand, random.rand, random.rand]"}},{"html_id":"zero:self-class-method","name":"zero","doc":"Returns the zero vector.","summary":"<p>Returns the zero vector.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":41,"url":null},"def":{"name":"zero","return_type":"self","visibility":"Public","body":"Vec3[0, 0, 0]"}}],"instance_methods":[{"html_id":"*(rhs:Number):self-instance-method","name":"*","doc":"Returns the element-wise multiplication of the vector by\n*rhs*.","summary":"<p>Returns the element-wise multiplication of the vector by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":56,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"Vec3[@x * rhs, @y * rhs, @z * rhs]"}},{"html_id":"*(rhs:Vec3):self-instance-method","name":"*","doc":"Returns the element-wise multiplication of the vector by\n*rhs*.","summary":"<p>Returns the element-wise multiplication of the vector by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"args_string":"(rhs : Vec3) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":56,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"Vec3[@x * rhs.x, @y * rhs.y, @z * rhs.z]"}},{"html_id":"*(rhs:Quat):self-instance-method","name":"*","doc":"Returns the conjugate of the vector by the inverse of *rhs*. See\n`Quat#*` for details.","summary":"<p>Returns the conjugate of the vector by the inverse of <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Quat"}],"args_string":"(rhs : Quat) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/Quat.html\">Quat</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/quat.cr","line_number":311,"url":null},"def":{"name":"*","args":[{"name":"rhs","external_name":"rhs","restriction":"Quat"}],"return_type":"self","visibility":"Public","body":"rhs.inv * self"}},{"html_id":"+(rhs:Number):self-instance-method","name":"+","doc":"Returns the element-wise addition of the vector by\n*rhs*.","summary":"<p>Returns the element-wise addition of the vector by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":56,"url":null},"def":{"name":"+","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"Vec3[@x + rhs, @y + rhs, @z + rhs]"}},{"html_id":"+(rhs:Vec3):self-instance-method","name":"+","doc":"Returns the element-wise addition of the vector by\n*rhs*.","summary":"<p>Returns the element-wise addition of the vector by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"args_string":"(rhs : Vec3) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":56,"url":null},"def":{"name":"+","args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"Vec3[@x + rhs.x, @y + rhs.y, @z + rhs.z]"}},{"html_id":"+(rhs:Size3):self-instance-method","name":"+","doc":"Returns the element-wise addition of the vector by\n*rhs*.","summary":"<p>Returns the element-wise addition of the vector by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Size3"}],"args_string":"(rhs : Size3) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/Size3.html\">Size3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":56,"url":null},"def":{"name":"+","args":[{"name":"rhs","external_name":"rhs","restriction":"Size3"}],"return_type":"self","visibility":"Public","body":"Vec3[@x + rhs[0], @y + rhs[1], @z + rhs[2]]"}},{"html_id":"-(rhs:Number):self-instance-method","name":"-","doc":"Returns the element-wise subtraction of the vector by\n*rhs*.","summary":"<p>Returns the element-wise subtraction of the vector by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":56,"url":null},"def":{"name":"-","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"Vec3[@x - rhs, @y - rhs, @z - rhs]"}},{"html_id":"-(rhs:Vec3):self-instance-method","name":"-","doc":"Returns the element-wise subtraction of the vector by\n*rhs*.","summary":"<p>Returns the element-wise subtraction of the vector by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"args_string":"(rhs : Vec3) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":56,"url":null},"def":{"name":"-","args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"Vec3[@x - rhs.x, @y - rhs.y, @z - rhs.z]"}},{"html_id":"-(rhs:Size3):self-instance-method","name":"-","doc":"Returns the element-wise subtraction of the vector by\n*rhs*.","summary":"<p>Returns the element-wise subtraction of the vector by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Size3"}],"args_string":"(rhs : Size3) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/Size3.html\">Size3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":56,"url":null},"def":{"name":"-","args":[{"name":"rhs","external_name":"rhs","restriction":"Size3"}],"return_type":"self","visibility":"Public","body":"Vec3[@x - rhs[0], @y - rhs[1], @z - rhs[2]]"}},{"html_id":"-:self-instance-method","name":"-","doc":"Returns the negation of the vector.","summary":"<p>Returns the negation of the vector.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":86,"url":null},"def":{"name":"-","return_type":"self","visibility":"Public","body":"Vec3[-@x, -@y, -@z]"}},{"html_id":"/(rhs:Number):self-instance-method","name":"/","doc":"Returns the element-wise division of the vector by\n*rhs*.","summary":"<p>Returns the element-wise division of the vector by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"args_string":"(rhs : Number) : self","args_html":"(rhs : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":56,"url":null},"def":{"name":"/","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"Vec3[@x / rhs, @y / rhs, @z / rhs]"}},{"html_id":"/(rhs:Vec3):self-instance-method","name":"/","doc":"Returns the element-wise division of the vector by\n*rhs*.","summary":"<p>Returns the element-wise division of the vector by <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"args_string":"(rhs : Vec3) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":56,"url":null},"def":{"name":"/","args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"Vec3[@x / rhs.x, @y / rhs.y, @z / rhs.z]"}},{"html_id":"[](index:Int32):Float64-instance-method","name":"[]","doc":"Returns the *i*th component of the vector in the XYZ order. Raises\n`IndexError` if *index* is invalid.","summary":"<p>Returns the <em>i</em>th component of the vector in the XYZ order.</p>","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int32"}],"args_string":"(index : Int32) : Float64","args_html":"(index : Int32) : Float64","location":{"filename":"src/chem/spatial/vec3.cr","line_number":47,"url":null},"def":{"name":"[]","args":[{"name":"index","external_name":"index","restriction":"Int32"}],"return_type":"Float64","visibility":"Public","body":"case index\nwhen 0\n  @x\nwhen 1\n  @y\nwhen 2\n  @z\nelse\n  raise(IndexError.new)\nend"}},{"html_id":"abs:Float64-instance-method","name":"abs","doc":"Returns the absolute value (norm or length) of the vector.","summary":"<p>Returns the absolute value (norm or length) of the vector.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":91,"url":null},"def":{"name":"abs","return_type":"Float64","visibility":"Public","body":"Math.sqrt(abs2)"}},{"html_id":"abs2:Float64-instance-method","name":"abs2","doc":"Returns the square of the absolute value of the vector.","summary":"<p>Returns the square of the absolute value of the vector.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":96,"url":null},"def":{"name":"abs2","return_type":"Float64","visibility":"Public","body":"((@x ** 2) + (@y ** 2)) + (@z ** 2)"}},{"html_id":"close_to?(rhs:self,delta:Number=Float64::EPSILON):Bool-instance-method","name":"close_to?","doc":"Returns `true` if the elements of the vectors are within *delta*\nfrom each other, else `false`.\n\n```\nVec3[1, 2, 3].close_to?(Vec3[1, 2, 3])                     # => true\nVec3[1, 2, 3].close_to?(Vec3[1.001, 1.999, 3.00004], 1e-3) # => true\nVec3[1, 2, 3].close_to?(Vec3[3, 2, 1])                     # => false\nVec3[1, 2, 3].close_to?(Vec3[1.001, 1.999, 3.00004], 1e-8) # => false\n```","summary":"<p>Returns <code>true</code> if the elements of the vectors are within <em>delta</em> from each other, else <code>false</code>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"delta","default_value":"Float64::EPSILON","external_name":"delta","restriction":"Number"}],"args_string":"(rhs : self, delta : Number = Float64::EPSILON) : Bool","args_html":"(rhs : <span class=\"k\">self</span>, delta : <a href=\"../../Number.html\">Number</a> = <span class=\"t\">Float64</span><span class=\"t\">::</span><span class=\"t\">EPSILON</span>) : Bool","location":{"filename":"src/chem/spatial/vec3.cr","line_number":109,"url":null},"def":{"name":"close_to?","args":[{"name":"rhs","external_name":"rhs","restriction":"self"},{"name":"delta","default_value":"Float64::EPSILON","external_name":"delta","restriction":"Number"}],"return_type":"Bool","visibility":"Public","body":"((@x.close_to?(rhs.x, delta)) && (@y.close_to?(rhs.y, delta))) && (@z.close_to?(rhs.z, delta))"}},{"html_id":"cross(rhs:Vec3):self-instance-method","name":"cross","doc":"Returns the cross product of the vector and *rhs*.","summary":"<p>Returns the cross product of the vector and <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"args_string":"(rhs : Vec3) : self","args_html":"(rhs : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":116,"url":null},"def":{"name":"cross","args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"Vec3[(@y * rhs.z) - (@z * rhs.y), (@z * rhs.x) - (@x * rhs.z), (@x * rhs.y) - (@y * rhs.x)]"}},{"html_id":"dot(rhs:Vec3):Float64-instance-method","name":"dot","doc":"Returns the dot product of the vector and *rhs*.","summary":"<p>Returns the dot product of the vector and <em>rhs</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"args_string":"(rhs : Vec3) : Float64","args_html":"(rhs : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : Float64","location":{"filename":"src/chem/spatial/vec3.cr","line_number":125,"url":null},"def":{"name":"dot","args":[{"name":"rhs","external_name":"rhs","restriction":"Vec3"}],"return_type":"Float64","visibility":"Public","body":"((@x * rhs.x) + (@y * rhs.y)) + (@z * rhs.z)"}},{"html_id":"image(i:Int,j:Int,k:Int):self-instance-method","name":"image","doc":"Returns vector's PBC image in fractional coordinates\n\n```\nvec = Vec3[0.456, 0.1, 0.8]\nvec.image 1, 0, 0   # => Vec3[1.456, 0.1, 0.8]\nvec.image -1, 0, 0  # => Vec3[-0.544, 0.1, 0.8]\nvec.image -1, 1, -5 # => Vec3[-0.544, 1.1, -4.2]\n```","summary":"<p>Returns vector's PBC image in fractional coordinates</p>","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int"},{"name":"j","external_name":"j","restriction":"Int"},{"name":"k","external_name":"k","restriction":"Int"}],"args_string":"(i : Int, j : Int, k : Int) : self","args_html":"(i : Int, j : Int, k : Int) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":137,"url":null},"def":{"name":"image","args":[{"name":"i","external_name":"i","restriction":"Int"},{"name":"j","external_name":"j","restriction":"Int"},{"name":"k","external_name":"k","restriction":"Int"}],"return_type":"self","visibility":"Public","body":"self + Vec3[i, j, k]"}},{"html_id":"inv:self-instance-method","name":"inv","doc":"Returns the inverse of the vector. It is equivalent to the unary\nnegation operator.","summary":"<p>Returns the inverse of the vector.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":143,"url":null},"def":{"name":"inv","return_type":"self","visibility":"Public","body":"-self"}},{"html_id":"map(&:Float64->Number):self-instance-method","name":"map","doc":"Returns a vector with the results of the component-wise mapping by\nthe given block. This is useful to perform non-standard\ntransformations.\n\n```\nVec3[1, 2, 3].map(&.**(2)) # => Vec3[1.0, 4.0, 9.0]\n```","summary":"<p>Returns a vector with the results of the component-wise mapping by the given block.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":154,"url":null},"def":{"name":"map","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Float64 -> Number)"},"return_type":"self","visibility":"Public","body":"Vec3[(yield @x), (yield @y), (yield @z)]"}},{"html_id":"map_with_index(&:Float64,Int32->Number):self-instance-method","name":"map_with_index","doc":"Returns a vector with the results of the component-wise mapping by\nthe given block yielding both the value and index. This is useful\nto perform non-standard transformations.\n\n```\nVec3[1, 2, 3].map { |ele, i| ele * i } # => Vec3[0.0, 2.0, 6.0]\n```","summary":"<p>Returns a vector with the results of the component-wise mapping by the given block yielding both the value and index.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":165,"url":null},"def":{"name":"map_with_index","yields":2,"block_arity":2,"block_arg":{"name":"","external_name":"","restriction":"(Float64, Int32 -> Number)"},"return_type":"self","visibility":"Public","body":"Vec3[(yield @x, 0), (yield @y, 1), (yield @z, 2)]"}},{"html_id":"normalize:self-instance-method","name":"normalize","doc":"Returns the unit vector pointing in the same direction of the\nvector.\n\n```\nv = Vec3[2.5, 0, 0].normalize # => Vec[1.0, 0.0, 0.0]\nv.abs                         # => 1.0\nv = Vec3[1, 1, 1].normalize   # => Vec[0.577, 0.577, 0.577]\nv.abs                         # => 1.0\n```","summary":"<p>Returns the unit vector pointing in the same direction of the vector.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":178,"url":null},"def":{"name":"normalize","return_type":"self","visibility":"Public","body":"resize(1)"}},{"html_id":"pad(padding:Number):self-instance-method","name":"pad","doc":"Returns a vector by increasing the length by *padding*.\n\n```\nVec3[1, 0, 0].pad(2) # => Vec3[3, 0, 0]\na = Vec3[1, 2, 3]\na.abs                             # => 3.7416573867739413\nb = a.pad(2)                      # => Vec3[1.535, 3.069, 4.604]\nb.abs                             # => 5.741657386773941\na.normalize.close_to? b.normalize # => true\n```","summary":"<p>Returns a vector by increasing the length by <em>padding</em>.</p>","abstract":false,"args":[{"name":"padding","external_name":"padding","restriction":"Number"}],"args_string":"(padding : Number) : self","args_html":"(padding : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":192,"url":null},"def":{"name":"pad","args":[{"name":"padding","external_name":"padding","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"resize(abs + padding)"}},{"html_id":"project(vec:self):self-instance-method","name":"project","doc":"Returns the projection of the vector on *vec*.","summary":"<p>Returns the projection of the vector on <em>vec</em>.</p>","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"self"}],"args_string":"(vec : self) : self","args_html":"(vec : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":197,"url":null},"def":{"name":"project","args":[{"name":"vec","external_name":"vec","restriction":"self"}],"return_type":"self","visibility":"Public","body":"vec = vec.normalize\n(dot(vec)) * vec\n"}},{"html_id":"reject(vec:self):self-instance-method","name":"reject","doc":"Returns the rejection of the vector on *vec*.","summary":"<p>Returns the rejection of the vector on <em>vec</em>.</p>","abstract":false,"args":[{"name":"vec","external_name":"vec","restriction":"self"}],"args_string":"(vec : self) : self","args_html":"(vec : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":203,"url":null},"def":{"name":"reject","args":[{"name":"vec","external_name":"vec","restriction":"self"}],"return_type":"self","visibility":"Public","body":"self - (project(vec))"}},{"html_id":"resize(length:Number):self-instance-method","name":"resize","doc":"Returns a vector pointing in the same direction with the given\nlength.\n\n```\na = Vec3[1, 2, 3]\na.abs                              # => 3.7416573867739413\nb = a.resize 0.5                   # => Vec3[0.134, 0.267, 0.401]\nb.abs                              # => 0.5\nb.normalize.close_to?(a.normalize) # => true\n```","summary":"<p>Returns a vector pointing in the same direction with the given length.</p>","abstract":false,"args":[{"name":"length","external_name":"length","restriction":"Number"}],"args_string":"(length : Number) : self","args_html":"(length : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":217,"url":null},"def":{"name":"resize","args":[{"name":"length","external_name":"length","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"if zero?\n  return dup\nend\nself * (length / abs)\n"}},{"html_id":"rotate(x:Number,y:Number,z:Number):self-instance-method","name":"rotate","doc":"Returns the vector rotated by the given Euler angles in degrees.\nDelegates to `Quat.rotation` for computing the rotation.","summary":"<p>Returns the vector rotated by the given Euler angles in degrees.</p>","abstract":false,"args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"args_string":"(x : Number, y : Number, z : Number) : self","args_html":"(x : <a href=\"../../Number.html\">Number</a>, y : <a href=\"../../Number.html\">Number</a>, z : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":224,"url":null},"def":{"name":"rotate","args":[{"name":"x","external_name":"x","restriction":"Number"},{"name":"y","external_name":"y","restriction":"Number"},{"name":"z","external_name":"z","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"rotate(Quat.rotation(x, y, z))"}},{"html_id":"rotate(aboutrotaxis:Vec3,byangle:Number):self-instance-method","name":"rotate","doc":"Returns the vector rotated about *rotaxis* by *angle*\ndegrees. Delegates to `Quat.rotation` for computing the rotation.","summary":"<p>Returns the vector rotated about <em>rotaxis</em> by <em>angle</em> degrees.</p>","abstract":false,"args":[{"name":"rotaxis","external_name":"about","restriction":"Vec3"},{"name":"angle","external_name":"by","restriction":"Number"}],"args_string":"(about rotaxis : Vec3, by angle : Number) : self","args_html":"(about rotaxis : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>, by angle : <a href=\"../../Number.html\">Number</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":230,"url":null},"def":{"name":"rotate","args":[{"name":"rotaxis","external_name":"about","restriction":"Vec3"},{"name":"angle","external_name":"by","restriction":"Number"}],"return_type":"self","visibility":"Public","body":"rotate(Quat.rotation(rotaxis, angle))"}},{"html_id":"rotate(quat:Quat):self-instance-method","name":"rotate","doc":"Returns the vector rotated by the given quaternion.","summary":"<p>Returns the vector rotated by the given quaternion.</p>","abstract":false,"args":[{"name":"quat","external_name":"quat","restriction":"Quat"}],"args_string":"(quat : Quat) : self","args_html":"(quat : <a href=\"../../Chem/Spatial/Quat.html\">Quat</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":235,"url":null},"def":{"name":"rotate","args":[{"name":"quat","external_name":"quat","restriction":"Quat"}],"return_type":"self","visibility":"Public","body":"quat * self"}},{"html_id":"to_a:Array(Float64)-instance-method","name":"to_a","doc":"Returns an array with the components of the vector.\n\n```\nVec3[1, 2, 3].to_a # => [1.0, 2.0, 3.0]\n```","summary":"<p>Returns an array with the components of the vector.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":244,"url":null},"def":{"name":"to_a","return_type":"Array(Float64)","visibility":"Public","body":"[@x, @y, @z]"}},{"html_id":"to_io(io:IO,format:IO::ByteFormat=:system_endian):Nil-instance-method","name":"to_io","doc":"Writes the binary representation of the vector to *io* in the\ngiven *format*. See also `IO#write_bytes`.","summary":"<p>Writes the binary representation of the vector to <em>io</em> in the given <em>format</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","default_value":":system_endian","external_name":"format","restriction":"IO::ByteFormat"}],"args_string":"(io : IO, format : IO::ByteFormat = :system_endian) : Nil","args_html":"(io : IO, format : IO::ByteFormat = <span class=\"n\">:system_endian</span>) : Nil","location":{"filename":"src/chem/spatial/vec3.cr","line_number":250,"url":null},"def":{"name":"to_io","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"format","default_value":":system_endian","external_name":"format","restriction":"IO::ByteFormat"}],"return_type":"Nil","visibility":"Public","body":"@x.to_io(io, format)\n@y.to_io(io, format)\n@z.to_io(io, format)\n"}},{"html_id":"to_q:Quat-instance-method","name":"to_q","doc":"Returns the quaternion representation of the vector, i.e.,\n`Quat[0, x, y, z]`.","summary":"<p>Returns the quaternion representation of the vector, i.e., <code><a href=\"../../Chem/Spatial/Quat.html\">Quat</a>[0, x, y, z]</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/quat.cr","line_number":317,"url":null},"def":{"name":"to_q","return_type":"Quat","visibility":"Public","body":"Quat[0, @x, @y, @z]"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Same as `#inspect(io)`.","summary":"<p>Same as <code>#inspect(io)</code>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/spatial/vec3.cr","line_number":256,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"io << \"Vec3[ \"\n{% for name, i in [\"x\", \"y\", \"z\"] of ::String %}\n        {% if i > 0 %}\n          io << (@{{ name.id }} >= 0 ? \"  \" : ' ')\n        {% end %}\n        io.printf \"%.{{ PRINT_PRECISION }}g\", @{{ name.id }}\n      {% end %}\nio << \" ]\"\n"}},{"html_id":"transform(transformation:Transform):self-instance-method","name":"transform","doc":"Returns the vector resulting of applying the given transformation.","summary":"<p>Returns the vector resulting of applying the given transformation.</p>","abstract":false,"args":[{"name":"transformation","external_name":"transformation","restriction":"Transform"}],"args_string":"(transformation : Transform) : self","args_html":"(transformation : <a href=\"../../Chem/Spatial/Transform.html\">Transform</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":268,"url":null},"def":{"name":"transform","args":[{"name":"transformation","external_name":"transformation","restriction":"Transform"}],"return_type":"self","visibility":"Public","body":"transformation * self"}},{"html_id":"transform(&:Float64,Float64,Float64->FloatTriple):self-instance-method","name":"transform","doc":"Returns a new vector with the return value of the given block,\nwhich is invoked with the X, Y, and Z components.\n\n```\nVec3[3, 2, 1].transform do |x, y, z|\n  x *= 2\n  z /= 0.5\n  {x, y, z}\nend # => Vec3[6, 2, 2]\n```","summary":"<p>Returns a new vector with the return value of the given block, which is invoked with the X, Y, and Z components.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":282,"url":null},"def":{"name":"transform","yields":3,"block_arity":3,"block_arg":{"name":"","external_name":"","restriction":"(Float64, Float64, Float64 -> FloatTriple)"},"return_type":"self","visibility":"Public","body":"components = yield @x, @y, @z\nself.class.new(*components)\n"}},{"html_id":"translate(byoffset:Vec3):self-instance-method","name":"translate","doc":"Returns the vector translated by the given offset.","summary":"<p>Returns the vector translated by the given offset.</p>","abstract":false,"args":[{"name":"offset","external_name":"by","restriction":"Vec3"}],"args_string":"(by offset : Vec3) : self","args_html":"(by offset : <a href=\"../../Chem/Spatial/Vec3.html\">Vec3</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":288,"url":null},"def":{"name":"translate","args":[{"name":"offset","external_name":"by","restriction":"Vec3"}],"return_type":"self","visibility":"Public","body":"self + offset"}},{"html_id":"unsafe_fetch(index:Int):Float64-instance-method","name":"unsafe_fetch","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : Float64","args_html":"(index : Int) : Float64","location":{"filename":"src/chem/spatial/vec3.cr","line_number":292,"url":null},"def":{"name":"unsafe_fetch","args":[{"name":"index","external_name":"index","restriction":"Int"}],"return_type":"Float64","visibility":"Public","body":"case index\nwhen 0\n  @x\nwhen 1\n  @y\nwhen 2\n  @z\nelse\n  Float64::NAN\nend"}},{"html_id":"wrap(aroundcenter:self):self-instance-method","name":"wrap","doc":"Returns the vector by wrapping into the primary unit cell centered\nat *center*. The vector is assumed to be expressed in fractional\ncoordinates.","summary":"<p>Returns the vector by wrapping into the primary unit cell centered at <em>center</em>.</p>","abstract":false,"args":[{"name":"center","external_name":"around","restriction":"self"}],"args_string":"(around center : self) : self","args_html":"(around center : <span class=\"k\">self</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/spatial/vec3.cr","line_number":310,"url":null},"def":{"name":"wrap","args":[{"name":"center","external_name":"around","restriction":"self"}],"return_type":"self","visibility":"Public","body":"offset = self - (center - Vec3[0.5, 0.5, 0.5])\nself - offset.map do |ele|\n  ele == 1 ? 0 : ele.floor\nend\n"}},{"html_id":"wrap:self-instance-method","name":"wrap","doc":"Returns the vector by wrapping into the primary unit cell. The\nvector is assumed to be expressed in fractional coordinates.","summary":"<p>Returns the vector by wrapping into the primary unit cell.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":303,"url":null},"def":{"name":"wrap","return_type":"self","visibility":"Public","body":"self - map do |ele|\n  ele == 1 ? 0 : ele.floor\nend"}},{"html_id":"x:Float64-instance-method","name":"x","doc":"X component of the vector.","summary":"<p>X component of the vector.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":4,"url":null},"def":{"name":"x","return_type":"Float64","visibility":"Public","body":"@x"}},{"html_id":"x?:Bool-instance-method","name":"x?","doc":"Returns `true` if the vector lies along X axis, else `false`.","summary":"<p>Returns <code>true</code> if the vector lies along X axis, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":316,"url":null},"def":{"name":"x?","return_type":"Bool","visibility":"Public","body":"((!(@x.close_to?(0))) && (@y.close_to?(0))) && (@z.close_to?(0))"}},{"html_id":"xy?:Bool-instance-method","name":"xy?","doc":"Returns `true` if the vector lies in the XY-plane, else `false`.","summary":"<p>Returns <code>true</code> if the vector lies in the XY-plane, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":321,"url":null},"def":{"name":"xy?","return_type":"Bool","visibility":"Public","body":"((!(@x.close_to?(0))) || (!(@y.close_to?(0)))) && (@z.close_to?(0))"}},{"html_id":"xz?:Bool-instance-method","name":"xz?","doc":"Returns `true` if the vector lies in the XZ-plane, else `false`.","summary":"<p>Returns <code>true</code> if the vector lies in the XZ-plane, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":326,"url":null},"def":{"name":"xz?","return_type":"Bool","visibility":"Public","body":"((!(@x.close_to?(0))) || (!(@z.close_to?(0)))) && (@y.close_to?(0))"}},{"html_id":"y:Float64-instance-method","name":"y","doc":"Y component of the vector.","summary":"<p>Y component of the vector.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":6,"url":null},"def":{"name":"y","return_type":"Float64","visibility":"Public","body":"@y"}},{"html_id":"y?:Bool-instance-method","name":"y?","doc":"Returns `true` if the vector lies along Y axis, else `false`.","summary":"<p>Returns <code>true</code> if the vector lies along Y axis, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":331,"url":null},"def":{"name":"y?","return_type":"Bool","visibility":"Public","body":"((@x.close_to?(0)) && (!(@y.close_to?(0)))) && (@z.close_to?(0))"}},{"html_id":"yz?:Bool-instance-method","name":"yz?","doc":"Returns `true` if the vector lies in the YZ-plane, else `false`.","summary":"<p>Returns <code>true</code> if the vector lies in the YZ-plane, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":336,"url":null},"def":{"name":"yz?","return_type":"Bool","visibility":"Public","body":"(@x.close_to?(0)) && ((!(@y.close_to?(0))) || (!(@z.close_to?(0))))"}},{"html_id":"z:Float64-instance-method","name":"z","doc":"Z component of the vector.","summary":"<p>Z component of the vector.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":8,"url":null},"def":{"name":"z","return_type":"Float64","visibility":"Public","body":"@z"}},{"html_id":"z?:Bool-instance-method","name":"z?","doc":"Returns `true` if the vector lies along Z axis, else `false`.","summary":"<p>Returns <code>true</code> if the vector lies along Z axis, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":341,"url":null},"def":{"name":"z?","return_type":"Bool","visibility":"Public","body":"((@x.close_to?(0)) && (@y.close_to?(0))) && (!(@z.close_to?(0)))"}},{"html_id":"zero?:Bool-instance-method","name":"zero?","doc":"Returns `true` if the vector is zero, else `false`.","summary":"<p>Returns <code>true</code> if the vector is zero, else <code>false</code>.</p>","abstract":false,"location":{"filename":"src/chem/spatial/vec3.cr","line_number":346,"url":null},"def":{"name":"zero?","return_type":"Bool","visibility":"Public","body":"((@x.close_to?(0)) && (@y.close_to?(0))) && (@z.close_to?(0))"}}]}]},{"html_id":"chem.cr/Chem/Structure","path":"Chem/Structure.html","kind":"class","full_name":"Chem::Structure","name":"Structure","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/structure.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":270,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"constructors":[{"html_id":"build(*args,**options,&):self-class-method","name":"build","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &) : self","args_html":"(*args, **options, &) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/structure.cr","line_number":27,"url":null},"def":{"name":"build","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"return_type":"self","visibility":"Public","body":"builder = Structure::Builder.new(*args, **options)\nwith builder yield builder\nbuilder.build\n"}},{"html_id":"from_chgcar(input:IO|Path|String):self-class-method","name":"from_chgcar","doc":"Returns the structure encoded in *input* using the\n`Chem::VASP::Chgcar` file format. Arguments are forwarded to\n`Chem::VASP::Chgcar::Reader.open`.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/VASP/Chgcar.html\">Chem::VASP::Chgcar</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_chgcar","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::VASP::Chgcar::Reader.open(input) do |reader|\n  reader.read_attached\nend"}},{"html_id":"from_cube(input:IO|Path|String):self-class-method","name":"from_cube","doc":"Returns the structure encoded in *input* using the\n`Chem::Cube` file format. Arguments are forwarded to\n`Chem::Cube::Reader.open`.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/Cube.html\">Chem::Cube</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_cube","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::Cube::Reader.open(input) do |reader|\n  reader.read_attached\nend"}},{"html_id":"from_gen(input:IO|Path|String,guess_bonds:Bool=false,guess_names:Bool=false):self-class-method","name":"from_gen","doc":"Returns the structure encoded in *input* using the\n`Chem::Gen` file format. Arguments are forwarded to\n`Chem::Gen::Reader.open`.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/Gen.html\">Chem::Gen</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"args_string":"(input : IO | Path | String, guess_bonds : Bool = false, guess_names : Bool = false) : self","args_html":"(input : IO | Path | String, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_gen","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"Chem::Gen::Reader.open(input, guess_bonds, guess_names) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_locpot(input:IO|Path|String):self-class-method","name":"from_locpot","doc":"Returns the structure encoded in *input* using the\n`Chem::VASP::Locpot` file format. Arguments are forwarded to\n`Chem::VASP::Locpot::Reader.open`.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/VASP/Locpot.html\">Chem::VASP::Locpot</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_locpot","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::VASP::Locpot::Reader.open(input) do |reader|\n  reader.read_attached\nend"}},{"html_id":"from_mol(input:IO|Path|String):self-class-method","name":"from_mol","doc":"Returns the structure encoded in *input* using the\n`Chem::Mol` file format. Arguments are forwarded to\n`Chem::Mol::Reader.open`.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/Mol.html\">Chem::Mol</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_mol","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::Mol::Reader.open(input) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_mol2(input:IO|Path|String):self-class-method","name":"from_mol2","doc":"Returns the structure encoded in *input* using the\n`Chem::Mol2` file format. Arguments are forwarded to\n`Chem::Mol2::Reader.open`.\n\nIf *input* contains multiple entries, this method returns\nthe first one only. Use `Array#from_mol2` or\n`Chem::Mol2::Reader#each` to get multiple entries instead.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_mol2","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::Mol2::Reader.open(input) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_pdb(input:IO|Path|String,alt_loc:Char|Nil=nil,chains:Enumerable(Char)|String|Nil=nil,guess_bonds:Bool=false,het:Bool=true):self-class-method","name":"from_pdb","doc":"Returns the structure encoded in *input* using the\n`Chem::PDB` file format. Arguments are forwarded to\n`Chem::PDB::Reader.open`.\n\nIf *input* contains multiple entries, this method returns\nthe first one only. Use `Array#from_pdb` or\n`Chem::PDB::Reader#each` to get multiple entries instead.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"}],"args_string":"(input : IO | Path | String, alt_loc : Char | Nil = nil, chains : Enumerable(Char) | String | Nil = nil, guess_bonds : Bool = false, het : Bool = true) : self","args_html":"(input : IO | Path | String, alt_loc : <a href=\"../Char.html\">Char</a> | Nil = <span class=\"n\">nil</span>, chains : <a href=\"../Enumerable.html\">Enumerable</a>(<a href=\"../Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, guess_bonds : Bool = <span class=\"n\">false</span>, het : Bool = <span class=\"n\">true</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_pdb","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"Chem::PDB::Reader.open(input, alt_loc, chains, guess_bonds, het) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_poscar(input:IO|Path|String,guess_bonds:Bool=false,guess_names:Bool=false):self-class-method","name":"from_poscar","doc":"Returns the structure encoded in *input* using the\n`Chem::VASP::Poscar` file format. Arguments are forwarded to\n`Chem::VASP::Poscar::Reader.open`.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/VASP/Poscar.html\">Chem::VASP::Poscar</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"args_string":"(input : IO | Path | String, guess_bonds : Bool = false, guess_names : Bool = false) : self","args_html":"(input : IO | Path | String, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_poscar","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"Chem::VASP::Poscar::Reader.open(input, guess_bonds, guess_names) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_psf(input:IO|Path|String):self-class-method","name":"from_psf","doc":"Returns the structure encoded in *input* using the\n`Chem::PSF` file format. Arguments are forwarded to\n`Chem::PSF::Reader.open`.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/PSF.html\">Chem::PSF</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_psf","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::PSF::Reader.open(input) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_sdf(input:IO|Path|String):self-class-method","name":"from_sdf","doc":"Returns the structure encoded in *input* using the\n`Chem::SDF` file format. Arguments are forwarded to\n`Chem::SDF::Reader.open`.\n\nIf *input* contains multiple entries, this method returns\nthe first one only. Use `Array#from_sdf` or\n`Chem::SDF::Reader#each` to get multiple entries instead.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/SDF.html\">Chem::SDF</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"args_string":"(input : IO | Path | String) : self","args_html":"(input : IO | Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_sdf","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"}],"return_type":"self","visibility":"Public","body":"Chem::SDF::Reader.open(input) do |reader|\n  reader.read_entry\nend"}},{"html_id":"from_xyz(input:IO|Path|String,guess_bonds:Bool=false,guess_names:Bool=false):self-class-method","name":"from_xyz","doc":"Returns the structure encoded in *input* using the\n`Chem::XYZ` file format. Arguments are forwarded to\n`Chem::XYZ::Reader.open`.\n\nIf *input* contains multiple entries, this method returns\nthe first one only. Use `Array#from_xyz` or\n`Chem::XYZ::Reader#each` to get multiple entries instead.","summary":"<p>Returns the structure encoded in <em>input</em> using the <code><a href=\"../Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"args_string":"(input : IO | Path | String, guess_bonds : Bool = false, guess_names : Bool = false) : self","args_html":"(input : IO | Path | String, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_xyz","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"Chem::XYZ::Reader.open(input, guess_bonds, guess_names) do |reader|\n  reader.read_entry\nend"}},{"html_id":"new(topology:Topology=Topology.new,source_file:Path|String|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"topology","default_value":"Topology.new","external_name":"topology","restriction":"Topology"},{"name":"source_file","default_value":"nil","external_name":"source_file","restriction":"Path | String | Nil"}],"args_string":"(topology : Topology = Topology.new, source_file : Path | String | Nil = nil)","args_html":"(topology : <a href=\"../Chem/Topology.html\">Topology</a> = <span class=\"t\">Topology</span>.new, source_file : Path | String | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/core/structure.cr","line_number":21,"url":null},"def":{"name":"new","args":[{"name":"topology","default_value":"Topology.new","external_name":"topology","restriction":"Topology"},{"name":"source_file","default_value":"nil","external_name":"source_file","restriction":"Path | String | Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(topology, source_file)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"read(input:IO|Path|String,format:Chem::Format|String):self-class-method","name":"read","doc":"Returns the structure encoded in the specified file\nusing *format*. Raises `ArgumentError` if *format* has\nrequired arguments or cannot read `Chem::Structure`.\n\nIf *input* contains multiple entries, this method returns\nthe first one only. Use `Array.read` or\n`Chem::FormatReader::MultiEntry#each` (reader can be\nobtained via `Chem::Format.reader`) to get multiple entries\ninstead.\n\nThe supported file formats are `Chem::Cube`, `Chem::Gen`, `Chem::Mol2`, `Chem::Mol`, `Chem::PDB`, `Chem::PSF`, `Chem::SDF`, `Chem::VASP::Chgcar`, `Chem::VASP::Locpot`, `Chem::VASP::Poscar`, `Chem::XYZ`. Use the\n`.from_*` methods to customize how the object is decoded in\nthe corresponding file format if possible.","summary":"<p>Returns the structure encoded in the specified file using <em>format</em>.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(input : IO | Path | String, format : Chem::Format | String) : self","args_html":"(input : IO | Path | String, format : <a href=\"../Chem/Format.html\">Chem::Format</a> | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"read","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"return_type":"self","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .gen?\n  from_gen(input)\nwhen .mol?\n  from_mol(input)\nwhen .mol2?\n  from_mol2(input)\nwhen .pdb?\n  from_pdb(input)\nwhen .psf?\n  from_psf(input)\nwhen .sdf?\n  from_sdf(input)\nwhen .xyz?\n  from_xyz(input)\nwhen .poscar?\n  from_poscar(input)\nwhen .cube?\n  from_cube(input)\nwhen .chgcar?\n  from_chgcar(input)\nwhen .locpot?\n  from_locpot(input)\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::Structure\"))\nend\n"}},{"html_id":"read(path:Path|String):self-class-method","name":"read","doc":"Returns the structure encoded in the specified file.\nThe file format is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nIf the file contains multiple entries, this method returns\nthe first one only. Use `Array.read` to get multiple entries\ninstead.\n\nThe supported file formats are the following:\n\n- `Chem::Gen` (.gen)\n- `Chem::Mol` (.mol)\n- `Chem::Mol2` (.mol2)\n- `Chem::PDB` (.ent, .pdb)\n- `Chem::PSF` (.psf)\n- `Chem::SDF` (.sdf)\n- `Chem::XYZ` (.xyz)\n- `Chem::VASP::Poscar` (.poscar, POSCAR, CONTCAR)\n- `Chem::Cube` (.cube)\n- `Chem::VASP::Chgcar` (CHGCAR)\n- `Chem::VASP::Locpot` (LOCPOT)\n\nUse the `.from_*` methods to customize how the object is\ndecoded in the corresponding file format if possible.","summary":"<p>Returns the structure encoded in the specified file.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"read","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"read(path, ::Chem::Format.from_filename(path))"}}],"instance_methods":[{"html_id":"[](*args,**options)-instance-method","name":"[]","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@topology[*args, **options]"}},{"html_id":"[](*args,**options,&)-instance-method","name":"[]","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"[]","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@topology.[](*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"[]?(*args,**options)-instance-method","name":"[]?","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"[]?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@topology[*args, **options]?"}},{"html_id":"[]?(*args,**options,&)-instance-method","name":"[]?","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"[]?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@topology.[]?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"atoms(*args,**options)-instance-method","name":"atoms","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"atoms","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@topology.atoms(*args, **options)"}},{"html_id":"atoms(*args,**options,&)-instance-method","name":"atoms","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"atoms","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@topology.atoms(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"biases:Array(Chem::Bias)-instance-method","name":"biases","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":7,"url":null},"def":{"name":"biases","visibility":"Public","body":"@biases"}},{"html_id":"cell:Spatial::Parallelepiped-instance-method","name":"cell","doc":"Returns the unit cell. Raises `Spatial::NotPeriodicError` if cell\nis `nil`.","summary":"<p>Returns the unit cell.</p>","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":35,"url":null},"def":{"name":"cell","return_type":"Spatial::Parallelepiped","visibility":"Public","body":"@cell || (raise(Spatial::NotPeriodicError.new(\"#{title || \"Structure\"} is not periodic\")))"}},{"html_id":"cell=(cell:Spatial::Parallelepiped|Nil)-instance-method","name":"cell=","abstract":false,"args":[{"name":"cell","external_name":"cell","restriction":"Spatial::Parallelepiped | ::Nil"}],"args_string":"(cell : Spatial::Parallelepiped | Nil)","args_html":"(cell : <a href=\"../Chem/Spatial/Parallelepiped.html\">Spatial::Parallelepiped</a> | Nil)","location":{"filename":"src/chem/core/structure.cr","line_number":9,"url":null},"def":{"name":"cell=","args":[{"name":"cell","external_name":"cell","restriction":"Spatial::Parallelepiped | ::Nil"}],"visibility":"Public","body":"@cell = cell"}},{"html_id":"cell?:Spatial::Parallelepiped|Nil|Nil-instance-method","name":"cell?","abstract":false,"def":{"name":"cell?","return_type":"Spatial::Parallelepiped | ::Nil | ::Nil","visibility":"Public","body":"@cell"}},{"html_id":"chains(*args,**options)-instance-method","name":"chains","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"chains","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@topology.chains(*args, **options)"}},{"html_id":"chains(*args,**options,&)-instance-method","name":"chains","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"chains","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@topology.chains(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"clear:self-instance-method","name":"clear","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":40,"url":null},"def":{"name":"clear","return_type":"self","visibility":"Public","body":"@topology.clear\nself\n"}},{"html_id":"clone:self-instance-method","name":"clone","doc":"Returns a deep copy of `self`, that is, every chain/residue/atom is copied.\n\nUnlike array-like classes in the language, `#dup` (shallow copy) is not possible.\n\n```\nstructure = Structure.new \"/path/to/file.pdb\"\nother = structure.clone\nother == structure     # => true\nother.same?(structure) # => false\n\nstructure.dig('A', 23, \"OG\").partial_charge         # => 0.0\nother.dig('A', 23, \"OG\").partial_charge             # => 0.0\nstructure.dig('A', 23, \"OG\").partial_charge = 0.635 # => 0.635\nother.dig('A', 23, \"OG\").partial_charge             # => 0.0\n```","summary":"<p>Returns a deep copy of <code>self</code>, that is, every chain/residue/atom is copied.</p>","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":60,"url":null},"def":{"name":"clone","return_type":"self","visibility":"Public","body":"structure = Structure.new(@topology.clone, @source_file)\nstructure.biases.concat(@biases)\nstructure.experiment = @experiment\nstructure.cell = @cell\nstructure.title = @title\nstructure\n"}},{"html_id":"coords:Spatial::CoordinatesProxy-instance-method","name":"coords","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":69,"url":null},"def":{"name":"coords","return_type":"Spatial::CoordinatesProxy","visibility":"Public","body":"Spatial::CoordinatesProxy.new(self, @cell)"}},{"html_id":"delete(*args,**options)-instance-method","name":"delete","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"delete","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@topology.delete(*args, **options)"}},{"html_id":"delete(*args,**options,&)-instance-method","name":"delete","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"delete","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@topology.delete(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"dig(*args,**options)-instance-method","name":"dig","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"dig","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@topology.dig(*args, **options)"}},{"html_id":"dig(*args,**options,&)-instance-method","name":"dig","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"dig","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@topology.dig(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"dig?(*args,**options)-instance-method","name":"dig?","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"dig?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@topology.dig?(*args, **options)"}},{"html_id":"dig?(*args,**options,&)-instance-method","name":"dig?","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"dig?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@topology.dig?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":73,"url":null},"def":{"name":"each_atom","return_type":"Iterator(Atom)","visibility":"Public","body":"iterators = [] of Iterator(Atom)\neach_chain do |chain|\n  chain.each_residue do |residue|\n    iterators << residue.each_atom\n  end\nend\nIterator.chain(iterators)\n"}},{"html_id":"each_atom(&:Atom->)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":83,"url":null},"def":{"name":"each_atom","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Atom ->)"},"visibility":"Public","body":"each_chain do |chain|\n  chain.each_atom do |atom|\n    yield atom\n  end\nend"}},{"html_id":"each_chain:Iterator(Chain)-instance-method","name":"each_chain","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":91,"url":null},"def":{"name":"each_chain","return_type":"Iterator(Chain)","visibility":"Public","body":"@topology.each_chain"}},{"html_id":"each_chain(&:Chain->)-instance-method","name":"each_chain","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":95,"url":null},"def":{"name":"each_chain","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Chain ->)"},"visibility":"Public","body":"@topology.each_chain do |chain|\n  yield chain\nend"}},{"html_id":"each_residue:Iterator(Residue)-instance-method","name":"each_residue","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":101,"url":null},"def":{"name":"each_residue","return_type":"Iterator(Residue)","visibility":"Public","body":"Iterator.chain(each_chain.map(&.each_residue).to_a)"}},{"html_id":"each_residue(&:Residue->)-instance-method","name":"each_residue","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":105,"url":null},"def":{"name":"each_residue","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Residue ->)"},"visibility":"Public","body":"each_chain do |chain|\n  chain.each_residue do |residue|\n    yield residue\n  end\nend"}},{"html_id":"experiment:Structure::Experiment|Nil-instance-method","name":"experiment","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":8,"url":null},"def":{"name":"experiment","return_type":"Structure::Experiment | ::Nil","visibility":"Public","body":"@experiment"}},{"html_id":"experiment=(experiment:Structure::Experiment|Nil)-instance-method","name":"experiment=","abstract":false,"args":[{"name":"experiment","external_name":"experiment","restriction":"Structure::Experiment | ::Nil"}],"args_string":"(experiment : Structure::Experiment | Nil)","args_html":"(experiment : <a href=\"../Chem/Structure/Experiment.html\">Structure::Experiment</a> | Nil)","location":{"filename":"src/chem/core/structure.cr","line_number":8,"url":null},"def":{"name":"experiment=","args":[{"name":"experiment","external_name":"experiment","restriction":"Structure::Experiment | ::Nil"}],"visibility":"Public","body":"@experiment = experiment"}},{"html_id":"extract(copy_properties:Bool=true,&:Atom->Bool):self-instance-method","name":"extract","doc":"Returns a new structure containing the selected atoms by the given\nblock.\n\nStructure properties such as biases, unit cell, title, etc. are\ncopied only if *copy_properties* is `true`.","summary":"<p>Returns a new structure containing the selected atoms by the given block.</p>","abstract":false,"args":[{"name":"copy_properties","default_value":"true","external_name":"copy_properties","restriction":"Bool"}],"args_string":"(copy_properties : Bool = true, & : Atom -> Bool) : self","args_html":"(copy_properties : Bool = <span class=\"n\">true</span>, & : <a href=\"../Chem/Atom.html\">Atom</a> -> Bool) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core/structure.cr","line_number":118,"url":null},"def":{"name":"extract","args":[{"name":"copy_properties","default_value":"true","external_name":"copy_properties","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Atom -> Bool)"},"return_type":"self","visibility":"Public","body":"top = Topology.new\natoms.each do |atom|\n  if yield atom\n  else\n    next\n  end\n  chain = (top.dig?(atom.chain.id)) || (atom.chain.copy_to(top, recursive: false))\n  residue = (chain.dig?(atom.residue.number, atom.residue.insertion_code)) || (atom.residue.copy_to(chain, recursive: false))\n  atom.copy_to(residue)\nend\nstructure = self.class.new(top, (if copy_properties\n  @source_file\nend))\nif copy_properties\n  structure.biases.concat(@biases)\n  structure.cell = @cell\n  structure.experiment = @experiment\n  structure.title = @title\nend\nstructure\n"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":138,"url":null},"def":{"name":"n_atoms","return_type":"Int32","visibility":"Public","body":"@topology.n_atoms"}},{"html_id":"n_chains:Int32-instance-method","name":"n_chains","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":142,"url":null},"def":{"name":"n_chains","return_type":"Int32","visibility":"Public","body":"@topology.n_chains"}},{"html_id":"n_residues:Int32-instance-method","name":"n_residues","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":146,"url":null},"def":{"name":"n_residues","return_type":"Int32","visibility":"Public","body":"@topology.n_residues"}},{"html_id":"periodic?:Bool-instance-method","name":"periodic?","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":150,"url":null},"def":{"name":"periodic?","return_type":"Bool","visibility":"Public","body":"!(!@cell)"}},{"html_id":"residues(*args,**options)-instance-method","name":"residues","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"residues","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@topology.residues(*args, **options)"}},{"html_id":"residues(*args,**options,&)-instance-method","name":"residues","doc":"TODO: remove this delegates... directly use the topology class","summary":"<p><span class=\"flag orange\">TODO</span>  remove this delegates...</p>","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/core/structure.cr","line_number":15,"url":null},"def":{"name":"residues","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@topology.residues(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"source_file:Path|Nil-instance-method","name":"source_file","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":10,"url":null},"def":{"name":"source_file","return_type":"Path | ::Nil","visibility":"Public","body":"@source_file"}},{"html_id":"title:String-instance-method","name":"title","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":11,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"}},{"html_id":"title=(title:String)-instance-method","name":"title=","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/chem/core/structure.cr","line_number":11,"url":null},"def":{"name":"title=","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@title = title"}},{"html_id":"to_gen(fractional:Bool=false):String-instance-method","name":"to_gen","doc":"Returns a string representation of the structure using\nthe `Chem::Gen` file format. Arguments are fowarded to\n`Chem::Gen::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/Gen.html\">Chem::Gen</a></code> file format.</p>","abstract":false,"args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(fractional : Bool = false) : String","args_html":"(fractional : Bool = <span class=\"n\">false</span>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_gen","args":[{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_gen(io, fractional)\nend"}},{"html_id":"to_gen(output:IO|Path|String,fractional:Bool=false):Nil-instance-method","name":"to_gen","doc":"Writes the structure to *output* using the `Chem::Gen`\nfile format. Arguments are fowarded to `Chem::Gen::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/Gen.html\">Chem::Gen</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"args_string":"(output : IO | Path | String, fractional : Bool = false) : Nil","args_html":"(output : IO | Path | String, fractional : Bool = <span class=\"n\">false</span>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_gen","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"}],"return_type":"Nil","visibility":"Public","body":"Chem::Gen::Writer.open(output, fractional) do |writer|\n  writer << self\nend"}},{"html_id":"to_mol2(output:IO|Path|String):Nil-instance-method","name":"to_mol2","doc":"Writes the structure to *output* using the `Chem::Mol2`\nfile format. Arguments are fowarded to `Chem::Mol2::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_mol2","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"return_type":"Nil","visibility":"Public","body":"Chem::Mol2::Writer.open(output, total_entries: 1) do |writer|\n  writer << self\nend"}},{"html_id":"to_mol2:String-instance-method","name":"to_mol2","doc":"Returns a string representation of the structure using\nthe `Chem::Mol2` file format. Arguments are fowarded to\n`Chem::Mol2::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/Mol2.html\">Chem::Mol2</a></code> file format.</p>","abstract":false,"location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_mol2","return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_mol2(io)\nend"}},{"html_id":"to_pdb(bonds:Chem::PDB::Writer::BondOptions=Chem::PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,ter_on_fragment:Bool=false):String-instance-method","name":"to_pdb","doc":"Returns a string representation of the structure using\nthe `Chem::PDB` file format. Arguments are fowarded to\n`Chem::PDB::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"}],"args_string":"(bonds : Chem::PDB::Writer::BondOptions = Chem::PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, ter_on_fragment : Bool = false) : String","args_html":"(bonds : <a href=\"../Chem/PDB/Writer/BondOptions.html\">Chem::PDB::Writer::BondOptions</a> = <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, ter_on_fragment : Bool = <span class=\"n\">false</span>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_pdb","args":[{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"}],"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_pdb(io, bonds, renumber, ter_on_fragment)\nend"}},{"html_id":"to_pdb(output:IO|Path|String,bonds:Chem::PDB::Writer::BondOptions=Chem::PDB::Writer::BondOptions.flags(Het,Disulfide),renumber:Bool=true,ter_on_fragment:Bool=false):Nil-instance-method","name":"to_pdb","doc":"Writes the structure to *output* using the `Chem::PDB`\nfile format. Arguments are fowarded to `Chem::PDB::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"}],"args_string":"(output : IO | Path | String, bonds : Chem::PDB::Writer::BondOptions = Chem::PDB::Writer::BondOptions.flags(Het, Disulfide), renumber : Bool = true, ter_on_fragment : Bool = false) : Nil","args_html":"(output : IO | Path | String, bonds : <a href=\"../Chem/PDB/Writer/BondOptions.html\">Chem::PDB::Writer::BondOptions</a> = <span class=\"t\">Chem</span><span class=\"t\">::</span><span class=\"t\">PDB</span><span class=\"t\">::</span><span class=\"t\">Writer</span><span class=\"t\">::</span><span class=\"t\">BondOptions</span>.flags(<span class=\"t\">Het</span>, <span class=\"t\">Disulfide</span>), renumber : Bool = <span class=\"n\">true</span>, ter_on_fragment : Bool = <span class=\"n\">false</span>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_pdb","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"bonds","default_value":"Chem::PDB::Writer::BondOptions.flags(Het, Disulfide)","external_name":"bonds","restriction":"Chem::PDB::Writer::BondOptions"},{"name":"renumber","default_value":"true","external_name":"renumber","restriction":"Bool"},{"name":"ter_on_fragment","default_value":"false","external_name":"ter_on_fragment","restriction":"Bool"}],"return_type":"Nil","visibility":"Public","body":"Chem::PDB::Writer.open(output, bonds, renumber, ter_on_fragment, total_entries: 1) do |writer|\n  writer << self\nend"}},{"html_id":"to_poscar(order:Array(Element)|Array(String)|Nil=nil,fractional:Bool=false,wrap:Bool=false):String-instance-method","name":"to_poscar","doc":"Returns a string representation of the structure using\nthe `Chem::VASP::Poscar` file format. Arguments are fowarded to\n`Chem::VASP::Poscar::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/VASP/Poscar.html\">Chem::VASP::Poscar</a></code> file format.</p>","abstract":false,"args":[{"name":"order","default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","default_value":"false","external_name":"wrap","restriction":"Bool"}],"args_string":"(order : Array(Element) | Array(String) | Nil = nil, fractional : Bool = false, wrap : Bool = false) : String","args_html":"(order : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Element.html\">Element</a>) | <a href=\"../Array.html\">Array</a>(String) | Nil = <span class=\"n\">nil</span>, fractional : Bool = <span class=\"n\">false</span>, wrap : Bool = <span class=\"n\">false</span>) : String","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_poscar","args":[{"name":"order","default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","default_value":"false","external_name":"wrap","restriction":"Bool"}],"return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_poscar(io, order, fractional, wrap)\nend"}},{"html_id":"to_poscar(output:IO|Path|String,order:Array(Element)|Array(String)|Nil=nil,fractional:Bool=false,wrap:Bool=false):Nil-instance-method","name":"to_poscar","doc":"Writes the structure to *output* using the `Chem::VASP::Poscar`\nfile format. Arguments are fowarded to `Chem::VASP::Poscar::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/VASP/Poscar.html\">Chem::VASP::Poscar</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"order","default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","default_value":"false","external_name":"wrap","restriction":"Bool"}],"args_string":"(output : IO | Path | String, order : Array(Element) | Array(String) | Nil = nil, fractional : Bool = false, wrap : Bool = false) : Nil","args_html":"(output : IO | Path | String, order : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Element.html\">Element</a>) | <a href=\"../Array.html\">Array</a>(String) | Nil = <span class=\"n\">nil</span>, fractional : Bool = <span class=\"n\">false</span>, wrap : Bool = <span class=\"n\">false</span>) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_poscar","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"order","default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","default_value":"false","external_name":"wrap","restriction":"Bool"}],"return_type":"Nil","visibility":"Public","body":"Chem::VASP::Poscar::Writer.open(output, order, fractional, wrap) do |writer|\n  writer << self\nend"}},{"html_id":"to_pymol(output:IO|Path|String):Nil-instance-method","name":"to_pymol","doc":"Writes the structure to *output* using the `Chem::PyMOL`\nfile format. Arguments are fowarded to `Chem::PyMOL::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/PyMOL.html\">Chem::PyMOL</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_pymol","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"return_type":"Nil","visibility":"Public","body":"Chem::PyMOL::Writer.open(output) do |writer|\n  writer << self\nend"}},{"html_id":"to_pymol:String-instance-method","name":"to_pymol","doc":"Returns a string representation of the structure using\nthe `Chem::PyMOL` file format. Arguments are fowarded to\n`Chem::PyMOL::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/PyMOL.html\">Chem::PyMOL</a></code> file format.</p>","abstract":false,"location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_pymol","return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_pymol(io)\nend"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/core/structure.cr","line_number":154,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"io << \"<Structure\"\nif title.blank?\nelse\n  (io << \" \") << title.inspect\nend\nio << \": \"\n(io << n_atoms) << \" atoms\"\nif n_residues > 1\n  ((io << \", \") << n_residues) << \" residues\"\nend\nio << \", \"\nif @cell\nelse\n  io << \"non-\"\nend\nio << \"periodic>\"\n"}},{"html_id":"to_stride(output:IO|Path|String):Nil-instance-method","name":"to_stride","doc":"Writes the structure to *output* using the `Chem::Protein::Stride`\nfile format. Arguments are fowarded to `Chem::Protein::Stride::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/Protein/Stride.html\">Chem::Protein::Stride</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_stride","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"return_type":"Nil","visibility":"Public","body":"Chem::Protein::Stride::Writer.open(output) do |writer|\n  writer << self\nend"}},{"html_id":"to_stride:String-instance-method","name":"to_stride","doc":"Returns a string representation of the structure using\nthe `Chem::Protein::Stride` file format. Arguments are fowarded to\n`Chem::Protein::Stride::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/Protein/Stride.html\">Chem::Protein::Stride</a></code> file format.</p>","abstract":false,"location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_stride","return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_stride(io)\nend"}},{"html_id":"to_vmd(output:IO|Path|String):Nil-instance-method","name":"to_vmd","doc":"Writes the structure to *output* using the `Chem::VMD`\nfile format. Arguments are fowarded to `Chem::VMD::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/VMD.html\">Chem::VMD</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_vmd","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"return_type":"Nil","visibility":"Public","body":"Chem::VMD::Writer.open(output) do |writer|\n  writer << self\nend"}},{"html_id":"to_vmd:String-instance-method","name":"to_vmd","doc":"Returns a string representation of the structure using\nthe `Chem::VMD` file format. Arguments are fowarded to\n`Chem::VMD::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/VMD.html\">Chem::VMD</a></code> file format.</p>","abstract":false,"location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_vmd","return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_vmd(io)\nend"}},{"html_id":"to_xyz(output:IO|Path|String):Nil-instance-method","name":"to_xyz","doc":"Writes the structure to *output* using the `Chem::XYZ`\nfile format. Arguments are fowarded to `Chem::XYZ::Writer.open`.","summary":"<p>Writes the structure to <em>output</em> using the <code><a href=\"../Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"args_string":"(output : IO | Path | String) : Nil","args_html":"(output : IO | Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_xyz","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"}],"return_type":"Nil","visibility":"Public","body":"Chem::XYZ::Writer.open(output, total_entries: 1) do |writer|\n  writer << self\nend"}},{"html_id":"to_xyz:String-instance-method","name":"to_xyz","doc":"Returns a string representation of the structure using\nthe `Chem::XYZ` file format. Arguments are fowarded to\n`Chem::XYZ::Writer.open`.","summary":"<p>Returns a string representation of the structure using the <code><a href=\"../Chem/XYZ.html\">Chem::XYZ</a></code> file format.</p>","abstract":false,"location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"to_xyz","return_type":"String","visibility":"Public","body":"String.build do |io|\n  to_xyz(io)\nend"}},{"html_id":"topology:Topology-instance-method","name":"topology","abstract":false,"location":{"filename":"src/chem/core/structure.cr","line_number":12,"url":null},"def":{"name":"topology","return_type":"Topology","visibility":"Public","body":"@topology"}},{"html_id":"write(output:IO|Path|String,format:Chem::Format|String):Nil-instance-method","name":"write","doc":"Writes the structure to *output* using *format*. Raises\n`ArgumentError` if *format* has required arguments or cannot\nwrite `Chem::Structure`.\n\nThe supported file formats are `Chem::Gen`, `Chem::Mol2`, `Chem::PDB`, `Chem::Protein::Stride`, `Chem::PyMOL`, `Chem::VASP::Poscar`, `Chem::VMD`, `Chem::XYZ`. Use the\n`#to_*` methods to customize how the object is written in the\ncorresponding file format if possible.","summary":"<p>Writes the structure to <em>output</em> using <em>format</em>.</p>","abstract":false,"args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(output : IO | Path | String, format : Chem::Format | String) : Nil","args_html":"(output : IO | Path | String, format : <a href=\"../Chem/Format.html\">Chem::Format</a> | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"write","args":[{"name":"output","external_name":"output","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"return_type":"Nil","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .gen?\n  to_gen(output)\nwhen .mol2?\n  to_mol2(output)\nwhen .pdb?\n  to_pdb(output)\nwhen .pymol?\n  to_pymol(output)\nwhen .vmd?\n  to_vmd(output)\nwhen .xyz?\n  to_xyz(output)\nwhen .stride?\n  to_stride(output)\nwhen .poscar?\n  to_poscar(output)\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::Structure\"))\nend\n"}},{"html_id":"write(path:Path|String):Nil-instance-method","name":"write","doc":"Writes the structure to the specified file. The file\nformat is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nThe supported file formats are the following:\n\n- `Chem::Gen` (.gen)\n- `Chem::Mol2` (.mol2)\n- `Chem::PDB` (.ent, .pdb)\n- `Chem::PyMOL` (.pml)\n- `Chem::VMD` (.vmd)\n- `Chem::XYZ` (.xyz)\n- `Chem::Protein::Stride` (.stride)\n- `Chem::VASP::Poscar` (.poscar, POSCAR, CONTCAR)\n\nUse the `#to_*` methods to customize how the object is written\nin the corresponding file format if possible.","summary":"<p>Writes the structure to the specified file.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : Nil","args_html":"(path : Path | String) : Nil","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"write","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"Nil","visibility":"Public","body":"write(path, ::Chem::Format.from_filename(path))"}}],"types":[{"html_id":"chem.cr/Chem/Structure/Builder","path":"Chem/Structure/Builder.html","kind":"class","full_name":"Chem::Structure::Builder","name":"Builder","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/structure/builder.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Structure","kind":"class","full_name":"Chem::Structure","name":"Structure"},"constructors":[{"html_id":"new(guess_bonds:Bool=false,guess_names:Bool=false,use_templates:Bool=false,**options)-class-method","name":"new","abstract":false,"args":[{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"use_templates","default_value":"false","external_name":"use_templates","restriction":"Bool"}],"args_string":"(guess_bonds : Bool = false, guess_names : Bool = false, use_templates : Bool = false, **options)","args_html":"(guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>, use_templates : Bool = <span class=\"n\">false</span>, **options)","location":{"filename":"src/chem/core/structure/builder.cr","line_number":10,"url":null},"def":{"name":"new","args":[{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"use_templates","default_value":"false","external_name":"use_templates","restriction":"Bool"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"visibility":"Public","body":"_ = allocate\n_.initialize(guess_bonds, guess_names, use_templates, **options)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"atom(name:String,serial:Int32,coords:Spatial::Vec3,element:Element,**options):Atom-instance-method","name":"atom","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"serial","external_name":"serial","restriction":"Int32"},{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"},{"name":"element","external_name":"element","restriction":"Element"}],"args_string":"(name : String, serial : Int32, coords : Spatial::Vec3, element : Element, **options) : Atom","args_html":"(name : String, serial : Int32, coords : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, element : <a href=\"../../Chem/Element.html\">Element</a>, **options) : <a href=\"../../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":66,"url":null},"def":{"name":"atom","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"serial","external_name":"serial","restriction":"Int32"},{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"},{"name":"element","external_name":"element","restriction":"Element"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"return_type":"Atom","visibility":"Public","body":"@atom_serial = serial\n(Atom.new(residue, @atom_serial, element, name, coords, **options)).tap do |atom|\n  @atom_map[atom.serial] = atom\nend\n"}},{"html_id":"atom(name:String,serial:Int32,coords:Spatial::Vec3,**options):Atom-instance-method","name":"atom","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"serial","external_name":"serial","restriction":"Int32"},{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"}],"args_string":"(name : String, serial : Int32, coords : Spatial::Vec3, **options) : Atom","args_html":"(name : String, serial : Int32, coords : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, **options) : <a href=\"../../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":62,"url":null},"def":{"name":"atom","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"serial","external_name":"serial","restriction":"Int32"},{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"return_type":"Atom","visibility":"Public","body":"atom(name, serial, coords, Topology.guess_element(name), **options)"}},{"html_id":"atom(element:Element|Symbol,coords:Spatial::Vec3,**options):Atom-instance-method","name":"atom","doc":"Creates an `Atom` of *element* at the given coordinates. Extra\nnamed arguments are forwarded to the `Atom` constructor.\n\nThe atom name will set to the element's symbol followed by the\nnumber of atoms with the same element within the current residue.\n\n```\nstructure = Chem::Structure.build do |builder|\n  builder.residue\n  builder.atom Chem::PeriodicTable::H, Chem::Spatial::Vec3.zero\n  builder.atom Chem::PeriodicTable::C, Chem::Spatial::Vec3.zero\n  builder.atom Chem::PeriodicTable::H, Chem::Spatial::Vec3.zero\n  builder.atom Chem::PeriodicTable::H, Chem::Spatial::Vec3.zero\n  builder.atom Chem::PeriodicTable::C, Chem::Spatial::Vec3.zero\n  builder.residue\n  builder.atom Chem::PeriodicTable::H, Chem::Spatial::Vec3.zero\n  builder.atom Chem::PeriodicTable::C, Chem::Spatial::Vec3.zero\n  builder.atom Chem::PeriodicTable::N, Chem::Spatial::Vec3.zero\nend\nstructure.atoms.map(&.name) # => [\"H1\", \"C1\", \"H2\", \"H3\", \"C2\", \"H1\", \"C1\", \"N1\"]\n```\n\nNote that the atom names resets on a new residue.\n\nWARNING: This method assumes that residues are created in\nsequence, so calling `#residue` will always create a new residue,\nnot retrieving a preceding one. Otherwise, the order of the atom\nnames will be reset.","summary":"<p>Creates an <code><a href=\"../../Chem/Atom.html\">Atom</a></code> of <em>element</em> at the given coordinates.</p>","abstract":false,"args":[{"name":"element","external_name":"element","restriction":"Element | Symbol"},{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"}],"args_string":"(element : Element | Symbol, coords : Spatial::Vec3, **options) : Atom","args_html":"(element : <a href=\"../../Chem/Element.html\">Element</a> | Symbol, coords : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, **options) : <a href=\"../../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":51,"url":null},"def":{"name":"atom","args":[{"name":"element","external_name":"element","restriction":"Element | Symbol"},{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"return_type":"Atom","visibility":"Public","body":"if element.is_a?(Symbol)\n  element = PeriodicTable[element.to_s.capitalize]\nend\nid = ((__temp_203 = element\n@element_counter[__temp_203] = @element_counter[__temp_203] + 1))\natom(\"#{element.symbol}#{id}\", coords, **options.merge(element: element))\n"}},{"html_id":"atom(name:String,coords:Spatial::Vec3,**options):Atom-instance-method","name":"atom","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"}],"args_string":"(name : String, coords : Spatial::Vec3, **options) : Atom","args_html":"(name : String, coords : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, **options) : <a href=\"../../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":58,"url":null},"def":{"name":"atom","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"return_type":"Atom","visibility":"Public","body":"atom(name, @atom_serial + 1, coords, **options)"}},{"html_id":"atom(index:Int):Atom-instance-method","name":"atom","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : Atom","args_html":"(index : Int) : <a href=\"../../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":72,"url":null},"def":{"name":"atom","args":[{"name":"index","external_name":"index","restriction":"Int"}],"return_type":"Atom","visibility":"Public","body":"@atom_map[index]"}},{"html_id":"atom(coords:Spatial::Vec3,**options):Atom-instance-method","name":"atom","abstract":false,"args":[{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"}],"args_string":"(coords : Spatial::Vec3, **options) : Atom","args_html":"(coords : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, **options) : <a href=\"../../Chem/Atom.html\">Atom</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":19,"url":null},"def":{"name":"atom","args":[{"name":"coords","external_name":"coords","restriction":"Spatial::Vec3"}],"double_splat":{"name":"options","external_name":"options","restriction":""},"return_type":"Atom","visibility":"Public","body":"atom(:C, coords, **options)"}},{"html_id":"atom?(index:Int):Atom|Nil-instance-method","name":"atom?","abstract":false,"args":[{"name":"index","external_name":"index","restriction":"Int"}],"args_string":"(index : Int) : Atom | Nil","args_html":"(index : Int) : <a href=\"../../Chem/Atom.html\">Atom</a> | Nil","location":{"filename":"src/chem/core/structure/builder.cr","line_number":76,"url":null},"def":{"name":"atom?","args":[{"name":"index","external_name":"index","restriction":"Int"}],"return_type":"Atom | ::Nil","visibility":"Public","body":"@atom_map[index]?"}},{"html_id":"bond(name:String,other:String,order:BondOrder=:single):Bond-instance-method","name":"bond","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"other","external_name":"other","restriction":"String"},{"name":"order","default_value":":single","external_name":"order","restriction":"BondOrder"}],"args_string":"(name : String, other : String, order : BondOrder = :single) : Bond","args_html":"(name : String, other : String, order : <a href=\"../../Chem/BondOrder.html\">BondOrder</a> = <span class=\"n\">:single</span>) : <a href=\"../../Chem/Bond.html\">Bond</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":80,"url":null},"def":{"name":"bond","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"other","external_name":"other","restriction":"String"},{"name":"order","default_value":":single","external_name":"order","restriction":"BondOrder"}],"return_type":"Bond","visibility":"Public","body":"(atom!(name)).bonds.add(atom!(other), order)"}},{"html_id":"bond(i:Int,j:Int,order:BondOrder=:single,aromatic:Bool=false):Bond-instance-method","name":"bond","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Int"},{"name":"j","external_name":"j","restriction":"Int"},{"name":"order","default_value":":single","external_name":"order","restriction":"BondOrder"},{"name":"aromatic","default_value":"false","external_name":"aromatic","restriction":"Bool"}],"args_string":"(i : Int, j : Int, order : BondOrder = :single, aromatic : Bool = false) : Bond","args_html":"(i : Int, j : Int, order : <a href=\"../../Chem/BondOrder.html\">BondOrder</a> = <span class=\"n\">:single</span>, aromatic : Bool = <span class=\"n\">false</span>) : <a href=\"../../Chem/Bond.html\">Bond</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":84,"url":null},"def":{"name":"bond","args":[{"name":"i","external_name":"i","restriction":"Int"},{"name":"j","external_name":"j","restriction":"Int"},{"name":"order","default_value":":single","external_name":"order","restriction":"BondOrder"},{"name":"aromatic","default_value":"false","external_name":"aromatic","restriction":"Bool"}],"return_type":"Bond","visibility":"Public","body":"bond = (atom(i)).bonds.add(atom(j), order)\nif aromatic\n  aromatic_bonds << bond\nend\nbond\n"}},{"html_id":"bonds(bond_table:Hash(Tuple(Int32,Int32),BondOrder)):Nil-instance-method","name":"bonds","abstract":false,"args":[{"name":"bond_table","external_name":"bond_table","restriction":"Hash(Tuple(Int32, Int32), BondOrder)"}],"args_string":"(bond_table : Hash(Tuple(Int32, Int32), BondOrder)) : Nil","args_html":"(bond_table : Hash(Tuple(Int32, Int32), <a href=\"../../Chem/BondOrder.html\">BondOrder</a>)) : Nil","location":{"filename":"src/chem/core/structure/builder.cr","line_number":90,"url":null},"def":{"name":"bonds","args":[{"name":"bond_table","external_name":"bond_table","restriction":"Hash(Tuple(Int32, Int32), BondOrder)"}],"return_type":"Nil","visibility":"Public","body":"atom_table = {} of Int32 => Atom\natom_serials = Set(Int32).new(bond_table.size * 2)\nbond_table.each_key do |__arg0|\n  i = __arg0[0]\n  j = __arg0[1]\n  (atom_serials << i) << j\nend\n@structure.each_atom do |atom|\n  if atom.serial.in?(atom_serials)\n    atom_table[atom.serial] = atom\n  end\nend\nbond_table.each do |__arg1, order|\n  i = __arg1[0]\n  j = __arg1[1]\n  if (lhs = atom_table[i]?) && (rhs = atom_table[j]?)\n    lhs.bonds.add(rhs, order)\n  end\nend\n"}},{"html_id":"build:Structure-instance-method","name":"build","abstract":false,"location":{"filename":"src/chem/core/structure/builder.cr","line_number":104,"url":null},"def":{"name":"build","return_type":"Structure","visibility":"Public","body":"kekulize\nif @use_templates\n  @structure.topology.apply_templates\nend\nif @guess_bonds\n  include_h = !@structure.each_residue.any? do |r|\n    r.protein? && (!r.has_hydrogens?)\n  end\n  @structure.topology.guess_bonds(perceive_order: include_h)\n  if include_h\n    @structure.topology.guess_formal_charges\n  end\nend\nif @guess_names\n  @structure.topology.guess_names\nend\nif (@guess_bonds || @guess_names) || @use_templates\n  @structure.topology.guess_unknown_residue_types\nend\n@structure\n"}},{"html_id":"cell(a:Spatial::Vec3,b:Spatial::Vec3,c:Spatial::Vec3):Spatial::Parallelepiped-instance-method","name":"cell","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Spatial::Vec3"},{"name":"b","external_name":"b","restriction":"Spatial::Vec3"},{"name":"c","external_name":"c","restriction":"Spatial::Vec3"}],"args_string":"(a : Spatial::Vec3, b : Spatial::Vec3, c : Spatial::Vec3) : Spatial::Parallelepiped","args_html":"(a : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, b : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>, c : <a href=\"../../Chem/Spatial/Vec3.html\">Spatial::Vec3</a>) : <a href=\"../../Chem/Spatial/Parallelepiped.html\">Spatial::Parallelepiped</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":166,"url":null},"def":{"name":"cell","args":[{"name":"a","external_name":"a","restriction":"Spatial::Vec3"},{"name":"b","external_name":"b","restriction":"Spatial::Vec3"},{"name":"c","external_name":"c","restriction":"Spatial::Vec3"}],"return_type":"Spatial::Parallelepiped","visibility":"Public","body":"@structure.cell = Spatial::Parallelepiped.new(a, b, c)"}},{"html_id":"cell(a:Float64,b:Float64,c:Float64):Spatial::Parallelepiped-instance-method","name":"cell","abstract":false,"args":[{"name":"a","external_name":"a","restriction":"Float64"},{"name":"b","external_name":"b","restriction":"Float64"},{"name":"c","external_name":"c","restriction":"Float64"}],"args_string":"(a : Float64, b : Float64, c : Float64) : Spatial::Parallelepiped","args_html":"(a : Float64, b : Float64, c : Float64) : <a href=\"../../Chem/Spatial/Parallelepiped.html\">Spatial::Parallelepiped</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":170,"url":null},"def":{"name":"cell","args":[{"name":"a","external_name":"a","restriction":"Float64"},{"name":"b","external_name":"b","restriction":"Float64"},{"name":"c","external_name":"c","restriction":"Float64"}],"return_type":"Spatial::Parallelepiped","visibility":"Public","body":"@structure.cell = Spatial::Parallelepiped.new({a, b, c})"}},{"html_id":"cell(cell:Spatial::Parallelepiped|Nil)-instance-method","name":"cell","abstract":false,"args":[{"name":"cell","external_name":"cell","restriction":"Spatial::Parallelepiped | ::Nil"}],"args_string":"(cell : Spatial::Parallelepiped | Nil)","args_html":"(cell : <a href=\"../../Chem/Spatial/Parallelepiped.html\">Spatial::Parallelepiped</a> | Nil)","location":{"filename":"src/chem/core/structure/builder.cr","line_number":162,"url":null},"def":{"name":"cell","args":[{"name":"cell","external_name":"cell","restriction":"Spatial::Parallelepiped | ::Nil"}],"visibility":"Public","body":"@structure.cell = cell"}},{"html_id":"cell:Spatial::Parallelepiped|Nil-instance-method","name":"cell","abstract":false,"location":{"filename":"src/chem/core/structure/builder.cr","line_number":154,"url":null},"def":{"name":"cell","return_type":"Spatial::Parallelepiped | ::Nil","visibility":"Public","body":"@structure.cell?"}},{"html_id":"cell!:Spatial::Parallelepiped-instance-method","name":"cell!","abstract":false,"location":{"filename":"src/chem/core/structure/builder.cr","line_number":158,"url":null},"def":{"name":"cell!","return_type":"Spatial::Parallelepiped","visibility":"Public","body":"@structure.cell? || (raise(Spatial::NotPeriodicError.new))"}},{"html_id":"chain(id:Char):Chain-instance-method","name":"chain","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Char"}],"args_string":"(id : Char) : Chain","args_html":"(id : <a href=\"../../Char.html\">Char</a>) : <a href=\"../../Chem/Chain.html\">Chain</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":133,"url":null},"def":{"name":"chain","args":[{"name":"id","external_name":"id","restriction":"Char"}],"return_type":"Chain","visibility":"Public","body":"@chain = @structure[id]? || (Chain.new(@structure.topology, id))"}},{"html_id":"chain:Chain-instance-method","name":"chain","abstract":false,"location":{"filename":"src/chem/core/structure/builder.cr","line_number":124,"url":null},"def":{"name":"chain","return_type":"Chain","visibility":"Public","body":"@chain || next_chain"}},{"html_id":"chain(id:Char,&:self->):Nil-instance-method","name":"chain","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Char"}],"args_string":"(id : Char, & : self -> ) : Nil","args_html":"(id : <a href=\"../../Char.html\">Char</a>, & : <span class=\"k\">self</span> -> ) : Nil","location":{"filename":"src/chem/core/structure/builder.cr","line_number":137,"url":null},"def":{"name":"chain","args":[{"name":"id","external_name":"id","restriction":"Char"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"return_type":"Nil","visibility":"Public","body":"chain(id)\nwith self yield self\n"}},{"html_id":"chain(&:self->):Nil-instance-method","name":"chain","abstract":false,"location":{"filename":"src/chem/core/structure/builder.cr","line_number":128,"url":null},"def":{"name":"chain","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"return_type":"Nil","visibility":"Public","body":"next_chain\nwith self yield self\n"}},{"html_id":"current_chain:Chain|Nil-instance-method","name":"current_chain","abstract":false,"location":{"filename":"src/chem/core/structure/builder.cr","line_number":142,"url":null},"def":{"name":"current_chain","return_type":"Chain | ::Nil","visibility":"Public","body":"@chain"}},{"html_id":"current_residue:Residue|Nil-instance-method","name":"current_residue","abstract":false,"location":{"filename":"src/chem/core/structure/builder.cr","line_number":146,"url":null},"def":{"name":"current_residue","return_type":"Residue | ::Nil","visibility":"Public","body":"@residue"}},{"html_id":"expt(expt:Structure::Experiment|Nil)-instance-method","name":"expt","abstract":false,"args":[{"name":"expt","external_name":"expt","restriction":"Structure::Experiment | ::Nil"}],"args_string":"(expt : Structure::Experiment | Nil)","args_html":"(expt : <a href=\"../../Chem/Structure/Experiment.html\">Structure::Experiment</a> | Nil)","location":{"filename":"src/chem/core/structure/builder.cr","line_number":150,"url":null},"def":{"name":"expt","args":[{"name":"expt","external_name":"expt","restriction":"Structure::Experiment | ::Nil"}],"visibility":"Public","body":"@structure.experiment = expt"}},{"html_id":"residue(name:String,number:Int32,inscode:Char|Nil=nil):Residue-instance-method","name":"residue","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"number","external_name":"number","restriction":"Int32"},{"name":"inscode","default_value":"nil","external_name":"inscode","restriction":"Char | ::Nil"}],"args_string":"(name : String, number : Int32, inscode : Char | Nil = nil) : Residue","args_html":"(name : String, number : Int32, inscode : <a href=\"../../Char.html\">Char</a> | Nil = <span class=\"n\">nil</span>) : <a href=\"../../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":187,"url":null},"def":{"name":"residue","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"number","external_name":"number","restriction":"Int32"},{"name":"inscode","default_value":"nil","external_name":"inscode","restriction":"Char | ::Nil"}],"return_type":"Residue","visibility":"Public","body":"if @residue\n  @element_counter.clear\nend\nif residue = chain[number, inscode]?\n  @residue = residue\nelse\n  @residue = Residue.new(chain, number, inscode, name)\nend\n"}},{"html_id":"residue(name:String):Residue-instance-method","name":"residue","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Residue","args_html":"(name : String) : <a href=\"../../Chem/Residue.html\">Residue</a>","location":{"filename":"src/chem/core/structure/builder.cr","line_number":178,"url":null},"def":{"name":"residue","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Residue","visibility":"Public","body":"@residue = next_residue(name)"}},{"html_id":"residue:Residue-instance-method","name":"residue","abstract":false,"location":{"filename":"src/chem/core/structure/builder.cr","line_number":174,"url":null},"def":{"name":"residue","return_type":"Residue","visibility":"Public","body":"@residue || next_residue"}},{"html_id":"residue(name:String,number:Int32,inscode:Char|Nil=nil,&:self->):Nil-instance-method","name":"residue","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"number","external_name":"number","restriction":"Int32"},{"name":"inscode","default_value":"nil","external_name":"inscode","restriction":"Char | ::Nil"}],"args_string":"(name : String, number : Int32, inscode : Char | Nil = nil, & : self -> ) : Nil","args_html":"(name : String, number : Int32, inscode : <a href=\"../../Char.html\">Char</a> | Nil = <span class=\"n\">nil</span>, & : <span class=\"k\">self</span> -> ) : Nil","location":{"filename":"src/chem/core/structure/builder.cr","line_number":196,"url":null},"def":{"name":"residue","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"number","external_name":"number","restriction":"Int32"},{"name":"inscode","default_value":"nil","external_name":"inscode","restriction":"Char | ::Nil"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"return_type":"Nil","visibility":"Public","body":"residue(name, number, inscode)\nwith self yield self\n"}},{"html_id":"residue(name:String,&:self->):Nil-instance-method","name":"residue","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String, & : self -> ) : Nil","args_html":"(name : String, & : <span class=\"k\">self</span> -> ) : Nil","location":{"filename":"src/chem/core/structure/builder.cr","line_number":182,"url":null},"def":{"name":"residue","args":[{"name":"name","external_name":"name","restriction":"String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"return_type":"Nil","visibility":"Public","body":"residue(name)\nwith self yield self\n"}},{"html_id":"secondary_structure(i:Tuple(Char,Int32,Char|Nil),j:Tuple(Char,Int32,Char|Nil),type:Protein::SecondaryStructure):Nil-instance-method","name":"secondary_structure","abstract":false,"args":[{"name":"i","external_name":"i","restriction":"Tuple(Char, Int32, Char | ::Nil)"},{"name":"j","external_name":"j","restriction":"Tuple(Char, Int32, Char | ::Nil)"},{"name":"type","external_name":"type","restriction":"Protein::SecondaryStructure"}],"args_string":"(i : Tuple(Char, Int32, Char | Nil), j : Tuple(Char, Int32, Char | Nil), type : Protein::SecondaryStructure) : Nil","args_html":"(i : Tuple(<a href=\"../../Char.html\">Char</a>, Int32, <a href=\"../../Char.html\">Char</a> | Nil), j : Tuple(<a href=\"../../Char.html\">Char</a>, Int32, <a href=\"../../Char.html\">Char</a> | Nil), type : <a href=\"../../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>) : Nil","location":{"filename":"src/chem/core/structure/builder.cr","line_number":201,"url":null},"def":{"name":"secondary_structure","args":[{"name":"i","external_name":"i","restriction":"Tuple(Char, Int32, Char | ::Nil)"},{"name":"j","external_name":"j","restriction":"Tuple(Char, Int32, Char | ::Nil)"},{"name":"type","external_name":"type","restriction":"Protein::SecondaryStructure"}],"return_type":"Nil","visibility":"Public","body":"if (ri = @structure.dig?(*i)) && (rj = @structure.dig?(*j))\nelse\n  return\nend\nsecondary_structure(ri, rj, type)\n"}},{"html_id":"secondary_structure(ri:Residue,rj:Residue,type:Protein::SecondaryStructure)-instance-method","name":"secondary_structure","abstract":false,"args":[{"name":"ri","external_name":"ri","restriction":"Residue"},{"name":"rj","external_name":"rj","restriction":"Residue"},{"name":"type","external_name":"type","restriction":"Protein::SecondaryStructure"}],"args_string":"(ri : Residue, rj : Residue, type : Protein::SecondaryStructure)","args_html":"(ri : <a href=\"../../Chem/Residue.html\">Residue</a>, rj : <a href=\"../../Chem/Residue.html\">Residue</a>, type : <a href=\"../../Chem/Protein/SecondaryStructure.html\">Protein::SecondaryStructure</a>)","location":{"filename":"src/chem/core/structure/builder.cr","line_number":208,"url":null},"def":{"name":"secondary_structure","args":[{"name":"ri","external_name":"ri","restriction":"Residue"},{"name":"rj","external_name":"rj","restriction":"Residue"},{"name":"type","external_name":"type","restriction":"Protein::SecondaryStructure"}],"visibility":"Public","body":"@structure.each_residue do |residue|\n  if ri <= residue && residue <= rj\n    residue.sec = type\n  end\nend"}},{"html_id":"title(title:String)-instance-method","name":"title","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"}],"args_string":"(title : String)","args_html":"(title : String)","location":{"filename":"src/chem/core/structure/builder.cr","line_number":216,"url":null},"def":{"name":"title","args":[{"name":"title","external_name":"title","restriction":"String"}],"visibility":"Public","body":"@structure.title = title"}}]},{"html_id":"chem.cr/Chem/Structure/Experiment","path":"Chem/Structure/Experiment.html","kind":"struct","full_name":"Chem::Structure::Experiment","name":"Experiment","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/structure/experiment.cr","line_number":1,"url":null},{"filename":"src/chem/register_format.cr","line_number":270,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Structure","kind":"class","full_name":"Chem::Structure","name":"Structure"},"constructors":[{"html_id":"from_pdb(input:IO|Path|String,alt_loc:Char|Nil=nil,chains:Enumerable(Char)|String|Nil=nil,guess_bonds:Bool=false,het:Bool=true):self-class-method","name":"from_pdb","doc":"Returns the header encoded in *input* using the\n`Chem::PDB` file format. Arguments are forwarded to\n`Chem::PDB::Reader.open`.\n\nIf *input* contains multiple entries, this method returns\nthe first one only. Use `Array#from_pdb` or\n`Chem::PDB::Reader#each` to get multiple entries instead.","summary":"<p>Returns the header encoded in <em>input</em> using the <code><a href=\"../../Chem/PDB.html\">Chem::PDB</a></code> file format.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"}],"args_string":"(input : IO | Path | String, alt_loc : Char | Nil = nil, chains : Enumerable(Char) | String | Nil = nil, guess_bonds : Bool = false, het : Bool = true) : self","args_html":"(input : IO | Path | String, alt_loc : <a href=\"../../Char.html\">Char</a> | Nil = <span class=\"n\">nil</span>, chains : <a href=\"../../Enumerable.html\">Enumerable</a>(<a href=\"../../Char.html\">Char</a>) | String | Nil = <span class=\"n\">nil</span>, guess_bonds : Bool = <span class=\"n\">false</span>, het : Bool = <span class=\"n\">true</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"from_pdb","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"alt_loc","default_value":"nil","external_name":"alt_loc","restriction":"Char | ::Nil"},{"name":"chains","default_value":"nil","external_name":"chains","restriction":"Enumerable(Char) | String | Nil"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"het","default_value":"true","external_name":"het","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"Chem::PDB::Reader.open(input, alt_loc, chains, guess_bonds, het) do |reader|\n  reader.read_header\nend"}},{"html_id":"new(title:String,method:Method,resolution:Float64|Nil,pdb_accession:String,deposition_date:Time,doi:String|Nil)-class-method","name":"new","abstract":false,"args":[{"name":"title","external_name":"title","restriction":"String"},{"name":"method","external_name":"method","restriction":"Method"},{"name":"resolution","external_name":"resolution","restriction":"Float64 | ::Nil"},{"name":"pdb_accession","external_name":"pdb_accession","restriction":"String"},{"name":"deposition_date","external_name":"deposition_date","restriction":"Time"},{"name":"doi","external_name":"doi","restriction":"String | ::Nil"}],"args_string":"(title : String, method : Method, resolution : Float64 | Nil, pdb_accession : String, deposition_date : Time, doi : String | Nil)","args_html":"(title : String, method : <a href=\"../../Chem/Structure/Experiment/Method.html\">Method</a>, resolution : Float64 | Nil, pdb_accession : String, deposition_date : Time, doi : String | Nil)","location":{"filename":"src/chem/core/structure/experiment.cr","line_number":20,"url":null},"def":{"name":"new","args":[{"name":"title","external_name":"title","restriction":"String"},{"name":"method","external_name":"method","restriction":"Method"},{"name":"resolution","external_name":"resolution","restriction":"Float64 | ::Nil"},{"name":"pdb_accession","external_name":"pdb_accession","restriction":"String"},{"name":"deposition_date","external_name":"deposition_date","restriction":"Time"},{"name":"doi","external_name":"doi","restriction":"String | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(title, method, resolution, pdb_accession, deposition_date, doi)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"read(input:IO|Path|String,format:Chem::Format|String):self-class-method","name":"read","doc":"Returns the header encoded in the specified file\nusing *format*. Raises `ArgumentError` if *format* has\nrequired arguments or cannot read `Chem::Structure::Experiment`.\n\nThe supported file formats are `Chem::PDB`. Use the\n`.from_*` methods to customize how the object is decoded in\nthe corresponding file format if possible.","summary":"<p>Returns the header encoded in the specified file using <em>format</em>.</p>","abstract":false,"args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"args_string":"(input : IO | Path | String, format : Chem::Format | String) : self","args_html":"(input : IO | Path | String, format : <a href=\"../../Chem/Format.html\">Chem::Format</a> | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"read","args":[{"name":"input","external_name":"input","restriction":"IO | Path | String"},{"name":"format","external_name":"format","restriction":"::Chem::Format | String"}],"return_type":"self","visibility":"Public","body":"if format.is_a?(String)\n  format = ::Chem::Format.parse(format)\nend\ncase format\nwhen .pdb?\n  from_pdb(input)\nelse\n  raise(ArgumentError.new(\"#{format} does not encode Chem::Structure::Experiment\"))\nend\n"}},{"html_id":"read(path:Path|String):self-class-method","name":"read","doc":"Returns the header encoded in the specified file.\nThe file format is chosen based on the filename (see\n`Chem::Format#from_filename`). Raises `ArgumentError` if the\nfile format cannot be determined.\n\nThe supported file formats are the following:\n\n- `Chem::PDB` (.ent, .pdb)\n\nUse the `.from_*` methods to customize how the object is\ndecoded in the corresponding file format if possible.","summary":"<p>Returns the header encoded in the specified file.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/register_format.cr","line_number":270,"url":null},"def":{"name":"read","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"read(path, ::Chem::Format.from_filename(path))"}}],"instance_methods":[{"html_id":"deposition_date:Time-instance-method","name":"deposition_date","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":13,"url":null},"def":{"name":"deposition_date","return_type":"Time","visibility":"Public","body":"@deposition_date"}},{"html_id":"doi:String|Nil-instance-method","name":"doi","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":14,"url":null},"def":{"name":"doi","return_type":"String | ::Nil","visibility":"Public","body":"@doi"}},{"html_id":"method:Method-instance-method","name":"method","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":15,"url":null},"def":{"name":"method","return_type":"Method","visibility":"Public","body":"@method"}},{"html_id":"pdb_accession:String-instance-method","name":"pdb_accession","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":16,"url":null},"def":{"name":"pdb_accession","return_type":"String","visibility":"Public","body":"@pdb_accession"}},{"html_id":"resolution:Float64|Nil-instance-method","name":"resolution","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":17,"url":null},"def":{"name":"resolution","return_type":"Float64 | ::Nil","visibility":"Public","body":"@resolution"}},{"html_id":"title:String-instance-method","name":"title","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":18,"url":null},"def":{"name":"title","return_type":"String","visibility":"Public","body":"@title"}}],"types":[{"html_id":"chem.cr/Chem/Structure/Experiment/Method","path":"Chem/Structure/Experiment/Method.html","kind":"enum","full_name":"Chem::Structure::Experiment::Method","name":"Method","abstract":false,"ancestors":[{"html_id":"chem.cr/Enum","kind":"struct","full_name":"Enum","name":"Enum"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core/structure/experiment.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":true,"alias":false,"const":false,"constants":[{"id":"ElectronCrystallography","name":"ElectronCrystallography","value":"0"},{"id":"ElectronMicroscopy","name":"ElectronMicroscopy","value":"1"},{"id":"FiberDiffraction","name":"FiberDiffraction","value":"2"},{"id":"NeutronDiffraction","name":"NeutronDiffraction","value":"3"},{"id":"SolidStateNMR","name":"SolidStateNMR","value":"4"},{"id":"SolutionNMR","name":"SolutionNMR","value":"5"},{"id":"SolutionScattering","name":"SolutionScattering","value":"6"},{"id":"XRayDiffraction","name":"XRayDiffraction","value":"7"}],"namespace":{"html_id":"chem.cr/Chem/Structure/Experiment","kind":"struct","full_name":"Chem::Structure::Experiment","name":"Experiment"},"instance_methods":[{"html_id":"electron_crystallography?-instance-method","name":"electron_crystallography?","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":3,"url":null},"def":{"name":"electron_crystallography?","visibility":"Public","body":"self == ElectronCrystallography"}},{"html_id":"electron_microscopy?-instance-method","name":"electron_microscopy?","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":4,"url":null},"def":{"name":"electron_microscopy?","visibility":"Public","body":"self == ElectronMicroscopy"}},{"html_id":"fiber_diffraction?-instance-method","name":"fiber_diffraction?","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":5,"url":null},"def":{"name":"fiber_diffraction?","visibility":"Public","body":"self == FiberDiffraction"}},{"html_id":"neutron_diffraction?-instance-method","name":"neutron_diffraction?","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":6,"url":null},"def":{"name":"neutron_diffraction?","visibility":"Public","body":"self == NeutronDiffraction"}},{"html_id":"solid_state_nmr?-instance-method","name":"solid_state_nmr?","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":7,"url":null},"def":{"name":"solid_state_nmr?","visibility":"Public","body":"self == SolidStateNMR"}},{"html_id":"solution_nmr?-instance-method","name":"solution_nmr?","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":8,"url":null},"def":{"name":"solution_nmr?","visibility":"Public","body":"self == SolutionNMR"}},{"html_id":"solution_scattering?-instance-method","name":"solution_scattering?","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":9,"url":null},"def":{"name":"solution_scattering?","visibility":"Public","body":"self == SolutionScattering"}},{"html_id":"x_ray_diffraction?-instance-method","name":"x_ray_diffraction?","abstract":false,"location":{"filename":"src/chem/core/structure/experiment.cr","line_number":10,"url":null},"def":{"name":"x_ray_diffraction?","visibility":"Public","body":"self == XRayDiffraction"}}]}]}]},{"html_id":"chem.cr/Chem/Templates","path":"Chem/Templates.html","kind":"module","full_name":"Chem::Templates","name":"Templates","abstract":false,"locations":[{"filename":"src/chem/templates.cr","line_number":3,"url":null},{"filename":"src/chem/templates/atom.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"class_methods":[{"html_id":"alias(new_name:String,toexisting_name:String):Nil-class-method","name":"alias","doc":"Registers an aliases to a known residue template into the _global\nregistry_. Refer to the `Registry` documentation and\n`Registry#alias` for details.","summary":"<p>Registers an aliases to a known residue template into the <em>global registry</em>.</p>","abstract":false,"args":[{"name":"new_name","external_name":"new_name","restriction":"String"},{"name":"existing_name","external_name":"to","restriction":"String"}],"args_string":"(new_name : String, to existing_name : String) : Nil","args_html":"(new_name : String, to existing_name : String) : Nil","location":{"filename":"src/chem/templates.cr","line_number":7,"url":null},"def":{"name":"alias","args":[{"name":"new_name","external_name":"new_name","restriction":"String"},{"name":"existing_name","external_name":"to","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"Chem::Templates::Registry.default.alias(new_name, existing_name)"}},{"html_id":"load(filepath:Path|String):Nil-class-method","name":"load","doc":"Loads and registers the residue template(s) from a structure file or\nYAML file into the _global registry_.\n\nRefer to the `Registry` documentation and `Registry#load` for more\ninformation.","summary":"<p>Loads and registers the residue template(s) from a structure file or YAML file into the <em>global registry</em>.</p>","abstract":false,"args":[{"name":"filepath","external_name":"filepath","restriction":"Path | String"}],"args_string":"(filepath : Path | String) : Nil","args_html":"(filepath : Path | String) : Nil","location":{"filename":"src/chem/templates.cr","line_number":16,"url":null},"def":{"name":"load","args":[{"name":"filepath","external_name":"filepath","restriction":"Path | String"}],"return_type":"Nil","visibility":"Public","body":"Chem::Templates::Registry.default.load(filepath)"}},{"html_id":"parse(filepath:String):Nil-class-method","name":"parse","doc":"Parses and registers the residue templates encoded in the given YAML\ncontent into the _global registry_. Refer to the `Registry`\ndocumentation and `Registry#parse` for details.","summary":"<p>Parses and registers the residue templates encoded in the given YAML content into the <em>global registry</em>.</p>","abstract":false,"args":[{"name":"filepath","external_name":"filepath","restriction":"String"}],"args_string":"(filepath : String) : Nil","args_html":"(filepath : String) : Nil","location":{"filename":"src/chem/templates.cr","line_number":23,"url":null},"def":{"name":"parse","args":[{"name":"filepath","external_name":"filepath","restriction":"String"}],"return_type":"Nil","visibility":"Public","body":"Chem::Templates::Registry.default.parse(filepath)"}},{"html_id":"register(structure:Structure):Nil-class-method","name":"register","doc":"Creates and registers a residue template from a structure into the\n_global registry_. Refer to the `Registry` documentation and\n`Registry#register` for details.","summary":"<p>Creates and registers a residue template from a structure into the <em>global registry</em>.</p>","abstract":false,"args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure) : Nil","args_html":"(structure : <a href=\"../Chem/Structure.html\">Structure</a>) : Nil","location":{"filename":"src/chem/templates.cr","line_number":30,"url":null},"def":{"name":"register","args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"return_type":"Nil","visibility":"Public","body":"Chem::Templates::Registry.default.register(structure)"}}],"types":[{"html_id":"chem.cr/Chem/Templates/Atom","path":"Chem/Templates/Atom.html","kind":"class","full_name":"Chem::Templates::Atom","name":"Atom","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/templates/atom.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Templates","kind":"module","full_name":"Chem::Templates","name":"Templates"},"constructors":[{"html_id":"new(name:String,element:Element,bonded_elements:Array(Element),formal_charge:Int32=0,valence:Int32|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"element","external_name":"element","restriction":"Element"},{"name":"bonded_elements","external_name":"bonded_elements","restriction":"Array(Element)"},{"name":"formal_charge","default_value":"0","external_name":"formal_charge","restriction":"Int32"},{"name":"valence","default_value":"nil","external_name":"valence","restriction":"Int32 | ::Nil"}],"args_string":"(name : String, element : Element, bonded_elements : Array(Element), formal_charge : Int32 = 0, valence : Int32 | Nil = nil)","args_html":"(name : String, element : <a href=\"../../Chem/Element.html\">Element</a>, bonded_elements : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Element.html\">Element</a>), formal_charge : Int32 = <span class=\"n\">0</span>, valence : Int32 | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/templates/atom.cr","line_number":8,"url":null},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"element","external_name":"element","restriction":"Element"},{"name":"bonded_elements","external_name":"bonded_elements","restriction":"Array(Element)"},{"name":"formal_charge","default_value":"0","external_name":"formal_charge","restriction":"Int32"},{"name":"valence","default_value":"nil","external_name":"valence","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, element, bonded_elements, formal_charge, valence)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(name:String,top_spec:String,formal_charge:Int32=0,valence:Int32|Nil=nil):self-class-method","name":"new","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"top_spec","external_name":"top_spec","restriction":"String"},{"name":"formal_charge","default_value":"0","external_name":"formal_charge","restriction":"Int32"},{"name":"valence","default_value":"nil","external_name":"valence","restriction":"Int32 | ::Nil"}],"args_string":"(name : String, top_spec : String, formal_charge : Int32 = 0, valence : Int32 | Nil = nil) : self","args_html":"(name : String, top_spec : String, formal_charge : Int32 = <span class=\"n\">0</span>, valence : Int32 | Nil = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/atom.cr","line_number":22,"url":null},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"top_spec","external_name":"top_spec","restriction":"String"},{"name":"formal_charge","default_value":"0","external_name":"formal_charge","restriction":"Int32"},{"name":"valence","default_value":"nil","external_name":"valence","restriction":"Int32 | ::Nil"}],"return_type":"self","visibility":"Public","body":"if top_spec.blank?\n  raise(ArgumentError.new(\"Empty atom topology spec\"))\nend\nelements = (top_spec.scan(/[A-Z][a-z]?/)).map do |sym|\n  PeriodicTable[sym[0]]\nend\nnew(name, elements[0], elements[1..], formal_charge, valence)\n"}}],"instance_methods":[{"html_id":"bonded_elements:Array::View(Element)-instance-method","name":"bonded_elements","abstract":false,"location":{"filename":"src/chem/templates/atom.cr","line_number":33,"url":null},"def":{"name":"bonded_elements","return_type":"Array::View(Element)","visibility":"Public","body":"@bonded_elements.view"}},{"html_id":"element:Element-instance-method","name":"element","abstract":false,"location":{"filename":"src/chem/templates/atom.cr","line_number":2,"url":null},"def":{"name":"element","return_type":"Element","visibility":"Public","body":"@element"}},{"html_id":"formal_charge:Int32-instance-method","name":"formal_charge","abstract":false,"location":{"filename":"src/chem/templates/atom.cr","line_number":3,"url":null},"def":{"name":"formal_charge","return_type":"Int32","visibility":"Public","body":"@formal_charge"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"location":{"filename":"src/chem/templates/atom.cr","line_number":4,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}},{"html_id":"suffix:String|Nil-instance-method","name":"suffix","abstract":false,"location":{"filename":"src/chem/templates/atom.cr","line_number":37,"url":null},"def":{"name":"suffix","return_type":"String | ::Nil","visibility":"Public","body":"name[@element.symbol.size..].presence"}},{"html_id":"to_s(io:IO)-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","args_html":"(io : IO)","location":{"filename":"src/chem/templates/atom.cr","line_number":41,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"visibility":"Public","body":"(((io << '<') << ({{ (@type.name.split(\"::\"))[1..].join(\"::\") }})) << ' ') << @name\nif @formal_charge == 0\nelse\n  io << (@formal_charge > 0 ? '+' : '-')\nend\nif @formal_charge.abs > 1\n  io << @formal_charge.abs\nend\nio << '>'\n"}},{"html_id":"top_spec:String-instance-method","name":"top_spec","abstract":false,"location":{"filename":"src/chem/templates/atom.cr","line_number":5,"url":null},"def":{"name":"top_spec","return_type":"String","visibility":"Public","body":"@top_spec"}},{"html_id":"valence:Int32|Nil-instance-method","name":"valence","abstract":false,"location":{"filename":"src/chem/templates/atom.cr","line_number":6,"url":null},"def":{"name":"valence","return_type":"Int32 | ::Nil","visibility":"Public","body":"@valence"}}]},{"html_id":"chem.cr/Chem/Templates/Bond","path":"Chem/Templates/Bond.html","kind":"class","full_name":"Chem::Templates::Bond","name":"Bond","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/templates/bond.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Templates","kind":"module","full_name":"Chem::Templates","name":"Templates"},"constructors":[{"html_id":"new(lhs:Atom,rhs:Atom,order:BondOrder=:single)-class-method","name":"new","abstract":false,"args":[{"name":"lhs","external_name":"lhs","restriction":"Atom"},{"name":"rhs","external_name":"rhs","restriction":"Atom"},{"name":"order","default_value":":single","external_name":"order","restriction":"BondOrder"}],"args_string":"(lhs : Atom, rhs : Atom, order : BondOrder = :single)","args_html":"(lhs : <a href=\"../../Chem/Templates/Atom.html\">Atom</a>, rhs : <a href=\"../../Chem/Templates/Atom.html\">Atom</a>, order : <a href=\"../../Chem/BondOrder.html\">BondOrder</a> = <span class=\"n\">:single</span>)","location":{"filename":"src/chem/templates/bond.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"lhs","external_name":"lhs","restriction":"Atom"},{"name":"rhs","external_name":"rhs","restriction":"Atom"},{"name":"order","default_value":":single","external_name":"order","restriction":"BondOrder"}],"visibility":"Public","body":"_ = allocate\n_.initialize(lhs, rhs, order)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"==(rhs:self):Bool-instance-method","name":"==","doc":"Returns `true` if this reference is the same as *other*. Invokes `same?`.","summary":"<p>Returns <code>true</code> if this reference is the same as <em>other</em>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"args_string":"(rhs : self) : Bool","args_html":"(rhs : <span class=\"k\">self</span>) : Bool","location":{"filename":"src/chem/templates/bond.cr","line_number":11,"url":null},"def":{"name":"==","args":[{"name":"rhs","external_name":"rhs","restriction":"self"}],"return_type":"Bool","visibility":"Public","body":"if @order != rhs.order\n  return false\nend\n(@atoms == rhs.atoms) || (@atoms.reverse == rhs.atoms)\n"}},{"html_id":"atoms:Tuple(Atom,Atom)-instance-method","name":"atoms","abstract":false,"location":{"filename":"src/chem/templates/bond.cr","line_number":2,"url":null},"def":{"name":"atoms","return_type":"::Tuple(Atom, Atom)","visibility":"Public","body":"@atoms"}},{"html_id":"double?(*args,**options)-instance-method","name":"double?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/templates/bond.cr","line_number":5,"url":null},"def":{"name":"double?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@order.double?(*args, **options)"}},{"html_id":"double?(*args,**options,&)-instance-method","name":"double?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/templates/bond.cr","line_number":5,"url":null},"def":{"name":"double?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@order.double?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"includes?(atom_t:Atom):Bool-instance-method","name":"includes?","abstract":false,"args":[{"name":"atom_t","external_name":"atom_t","restriction":"Atom"}],"args_string":"(atom_t : Atom) : Bool","args_html":"(atom_t : <a href=\"../../Chem/Templates/Atom.html\">Atom</a>) : Bool","location":{"filename":"src/chem/templates/bond.cr","line_number":16,"url":null},"def":{"name":"includes?","args":[{"name":"atom_t","external_name":"atom_t","restriction":"Atom"}],"return_type":"Bool","visibility":"Public","body":"@atoms.includes?(atom_t)"}},{"html_id":"includes?(name:String):Bool-instance-method","name":"includes?","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Bool","args_html":"(name : String) : Bool","location":{"filename":"src/chem/templates/bond.cr","line_number":20,"url":null},"def":{"name":"includes?","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Bool","visibility":"Public","body":"@atoms.any? do |__arg0|\n  __arg0.name == name\nend"}},{"html_id":"order:BondOrder-instance-method","name":"order","abstract":false,"location":{"filename":"src/chem/templates/bond.cr","line_number":3,"url":null},"def":{"name":"order","return_type":"BondOrder","visibility":"Public","body":"@order"}},{"html_id":"other(atom_t:Atom):Atom-instance-method","name":"other","abstract":false,"args":[{"name":"atom_t","external_name":"atom_t","restriction":"Atom"}],"args_string":"(atom_t : Atom) : Atom","args_html":"(atom_t : <a href=\"../../Chem/Templates/Atom.html\">Atom</a>) : <a href=\"../../Chem/Templates/Atom.html\">Atom</a>","location":{"filename":"src/chem/templates/bond.cr","line_number":24,"url":null},"def":{"name":"other","args":[{"name":"atom_t","external_name":"atom_t","restriction":"Atom"}],"return_type":"Atom","visibility":"Public","body":"(other?(atom_t)) || (raise(KeyError.new(\"#{atom_t} not found in #{self}\")))"}},{"html_id":"other(name:String):Atom-instance-method","name":"other","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom","args_html":"(name : String) : <a href=\"../../Chem/Templates/Atom.html\">Atom</a>","location":{"filename":"src/chem/templates/bond.cr","line_number":28,"url":null},"def":{"name":"other","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Atom","visibility":"Public","body":"(other?(name)) || (raise(KeyError.new(\"Atom #{name.inspect} not found in #{self}\")))"}},{"html_id":"other?(atom_t:Atom):Atom|Nil-instance-method","name":"other?","abstract":false,"args":[{"name":"atom_t","external_name":"atom_t","restriction":"Atom"}],"args_string":"(atom_t : Atom) : Atom | Nil","args_html":"(atom_t : <a href=\"../../Chem/Templates/Atom.html\">Atom</a>) : <a href=\"../../Chem/Templates/Atom.html\">Atom</a> | Nil","location":{"filename":"src/chem/templates/bond.cr","line_number":32,"url":null},"def":{"name":"other?","args":[{"name":"atom_t","external_name":"atom_t","restriction":"Atom"}],"return_type":"Atom | ::Nil","visibility":"Public","body":"case atom_t\nwhen @atoms[0]\n  @atoms[1]\nwhen @atoms[1]\n  @atoms[0]\nend"}},{"html_id":"other?(name:String):Atom|Nil-instance-method","name":"other?","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom | Nil","args_html":"(name : String) : <a href=\"../../Chem/Templates/Atom.html\">Atom</a> | Nil","location":{"filename":"src/chem/templates/bond.cr","line_number":41,"url":null},"def":{"name":"other?","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Atom | ::Nil","visibility":"Public","body":"case name\nwhen @atoms[0].name\n  @atoms[1]\nwhen @atoms[1].name\n  @atoms[0]\nend"}},{"html_id":"reverse:self-instance-method","name":"reverse","abstract":false,"location":{"filename":"src/chem/templates/bond.cr","line_number":50,"url":null},"def":{"name":"reverse","return_type":"self","visibility":"Public","body":"self.class.new(*@atoms.reverse, @order)"}},{"html_id":"single?(*args,**options)-instance-method","name":"single?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/templates/bond.cr","line_number":5,"url":null},"def":{"name":"single?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@order.single?(*args, **options)"}},{"html_id":"single?(*args,**options,&)-instance-method","name":"single?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/templates/bond.cr","line_number":5,"url":null},"def":{"name":"single?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@order.single?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/templates/bond.cr","line_number":54,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"((io << '<') << ({{ (@type.name.split(\"::\"))[1..].join(\"::\") }})) << ' '\n((io << @atoms[0].name) << @order.to_char) << @atoms[1].name\nio << '>'\n"}},{"html_id":"triple?(*args,**options)-instance-method","name":"triple?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/templates/bond.cr","line_number":5,"url":null},"def":{"name":"triple?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@order.triple?(*args, **options)"}},{"html_id":"triple?(*args,**options,&)-instance-method","name":"triple?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/templates/bond.cr","line_number":5,"url":null},"def":{"name":"triple?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@order.triple?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}},{"html_id":"zero?(*args,**options)-instance-method","name":"zero?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options)","args_html":"(*args, **options)","location":{"filename":"src/chem/templates/bond.cr","line_number":5,"url":null},"def":{"name":"zero?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"visibility":"Public","body":"@order.zero?(*args, **options)"}},{"html_id":"zero?(*args,**options,&)-instance-method","name":"zero?","abstract":false,"args":[{"name":"args","external_name":"args","restriction":""}],"args_string":"(*args, **options, &)","args_html":"(*args, **options, &)","location":{"filename":"src/chem/templates/bond.cr","line_number":5,"url":null},"def":{"name":"zero?","args":[{"name":"args","external_name":"args","restriction":""}],"double_splat":{"name":"options","external_name":"options","restriction":""},"splat_index":0,"yields":1,"block_arity":1,"visibility":"Public","body":"@order.zero?(*args, **options) do |*yield_args|\n  yield *yield_args\nend"}}]},{"html_id":"chem.cr/Chem/Templates/Builder","path":"Chem/Templates/Builder.html","kind":"class","full_name":"Chem::Templates::Builder","name":"Builder","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/templates/builder.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Templates","kind":"module","full_name":"Chem::Templates","name":"Templates"},"doc":"TODO: add docs (include checks)","summary":"<p><span class=\"flag orange\">TODO</span>  add docs (include checks)</p>","class_methods":[{"html_id":"guess_root(atoms:Array(Atom),bonds:Array(Bond),link_bond:Bond|Nil):String-class-method","name":"guess_root","doc":"Returns the atom with the highest bonding complexity.\n\nThe bonding complexity of an atom depends on the nature of the atom,\nthe bonds, and the bonds of its neighbors.\n\nFirst, carbon atoms are the most frequent so they have the lowest\ncomplexity (0), followed by non-carbon atoms (+1), and then\nnon-organic (not CHON) atoms (+2). Hydrogen atoms are ignored.\n\nThe complexity is further increased by the number of bonds with\nother heavy atoms, i.e., bonds X-H are ignored.\n\nThe total complexity of an atom is computed as the sum of its\ncomplexity and the complexities of the bonded atoms.","summary":"<p>Returns the atom with the highest bonding complexity.</p>","abstract":false,"args":[{"name":"atoms","external_name":"atoms","restriction":"Array(Atom)"},{"name":"bonds","external_name":"bonds","restriction":"Array(Bond)"},{"name":"link_bond","external_name":"link_bond","restriction":"Bond | ::Nil"}],"args_string":"(atoms : Array(Atom), bonds : Array(Bond), link_bond : Bond | Nil) : String","args_html":"(atoms : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Templates/Atom.html\">Atom</a>), bonds : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Templates/Bond.html\">Bond</a>), link_bond : <a href=\"../../Chem/Templates/Bond.html\">Bond</a> | Nil) : String","location":{"filename":"src/chem/templates/builder.cr","line_number":138,"url":null},"def":{"name":"guess_root","args":[{"name":"atoms","external_name":"atoms","restriction":"Array(Atom)"},{"name":"bonds","external_name":"bonds","restriction":"Array(Bond)"},{"name":"link_bond","external_name":"link_bond","restriction":"Bond | ::Nil"}],"return_type":"String","visibility":"Public","body":"heavy_atoms = atoms.select do |__arg4|\n  __arg4.element.heavy?\nend\nif heavy_atoms.size > 1\nelse\n  return heavy_atoms[0].name\nend\ncomplexity_table = heavy_atoms.to_h do |atom_t|\n  complexity = case atom_t.element\n  when .carbon?\n    0\n  when .oxygen?, .nitrogen?\n    1\n  else\n    2\n  end\n  {atom_t, complexity}\nend\nbonded_table = {} of Atom => Array(Atom)\nif link_bond\n  bonds = bonds + [link_bond]\nend\nbonds.each do |bond_t|\n  if bond_t.atoms.all?() do |__arg5|\n    __arg5.element.heavy?\n  end\n  else\n    next\n  end\n  bond_t.atoms.each do |atom_t|\n    ((    __temp_207 = atom_t\n    bonded_table[__temp_207]? || (bonded_table[__temp_207] = [] of Atom))) << (bond_t.other(atom_t))\n    __temp_209 = atom_t\n    complexity_table[__temp_209] = complexity_table[__temp_209] + 1\n  end\nend\nheavy_atoms.max_by do |atom_t|\n  complexity_table[atom_t] + bonded_table[atom_t].sum do |other_t|\n    complexity_table[other_t]\n  end\nend.name\n"}}],"constructors":[{"html_id":"new(spec_aliases:Hash(String,String)|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"spec_aliases","default_value":"nil","external_name":"spec_aliases","restriction":"Hash(String, String) | ::Nil"}],"args_string":"(spec_aliases : Hash(String, String) | Nil = nil)","args_html":"(spec_aliases : Hash(String, String) | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/templates/builder.cr","line_number":12,"url":null},"def":{"name":"new","args":[{"name":"spec_aliases","default_value":"nil","external_name":"spec_aliases","restriction":"Hash(String, String) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(spec_aliases)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"build:Residue-instance-method","name":"build","abstract":false,"location":{"filename":"src/chem/templates/builder.cr","line_number":15,"url":null},"def":{"name":"build","return_type":"Residue","visibility":"Public","body":"if @names.empty?\n  raise(\"Missing residue name\")\nend\nif parser = @spec_parser\nelse\n  raise(\"Empty structure\")\nend\nif @type.protein? && {\"C\", \"N\", \"CA\"}.none? do |name|\n  parser.atom_map[name]?\nend\n  raise(\"Missing backbone atoms for #{@names.first}\")\nend\natom_t_map = {} of String => Atom\nbond_ts = [] of Bond\nname_gen = HydrogenNameGenerator.new\nbonded_h_table = {} of String => Array(Atom)\nparser.atoms.sort_by() do |__arg0|\n  -__arg0.element.atomic_number\nend.each do |atom|\n  bonds = parser.bonds.select do |bond|\n    atom.name.in?(bond.lhs, bond.rhs)\n  end\n  implicit_bonds = parser.implicit_bonds.select do |bond|\n    bond.lhs == atom.name\n  end\n  effective_valence = atom.explicit_hydrogens || 0\n  effective_valence = effective_valence + (atom.formal_charge * (atom.element.valence_electrons >= 4 ? -1 : 1))\n  effective_valence = effective_valence + bonds.sum do |__arg1|\n    __arg1.order.to_i\n  end\n  effective_valence = effective_valence + implicit_bonds.sum() do |__arg2|\n    __arg2.order.to_i\n  end\n  if bond = @link_bond\n    if atom.name.in?(bond)\n      effective_valence = effective_valence + bond[2].to_i\n    end\n  end\n  target_valence = atom.element.target_valence(effective_valence)\n  if effective_valence > target_valence || (atom.explicit_hydrogens && (effective_valence != target_valence))\n    raise(\"Expected valence of #{atom.name} is #{target_valence}, got #{effective_valence}\")\n  end\n  h_count = atom.explicit_hydrogens || (target_valence - effective_valence)\n  bonded_elements = bonds.map do |bond|\n    parser.atom_map[atom.name == bond.lhs ? bond.rhs : bond.lhs].element\n  end\n  bonded_elements.concat(implicit_bonds.map(&.rhs))\n  @link_bond.try do |lhs, rhs, order|\n    case atom.name\n    when lhs\n      bonded_elements << parser.atom_map[rhs].element\n    when rhs\n      bonded_elements << parser.atom_map[lhs].element\n    end\n  end\n  h_count.times do\n    bonded_elements << PeriodicTable::H\n  end\n  atom_t = Atom.new(atom.name, atom.element, bonded_elements, atom.formal_charge, target_valence)\n  atom_t_map[atom_t.name] = atom_t\n  h_count.times do |i|\n    name = name_gen.next_for(atom_t, (    if h_count > 1\n      i\n    end))\n    h_atom = Atom.new(name, PeriodicTable::H, [atom_t.element])\n    ((    __temp_205 = atom_t.name\n    bonded_h_table[__temp_205]? || (bonded_h_table[__temp_205] = [] of Atom))) << h_atom\n    bond_ts << (Bond.new(atom_t, h_atom))\n  end\nend\natoms = [] of Atom\nparser.atoms.each do |atom_r|\n  atoms << atom_t_map[atom_r.name]\n  if h_atoms = bonded_h_table[atom_r.name]?\n    atoms.concat(h_atoms)\n  end\nend\nparser.bonds.each do |bond|\n  bond_ts << (Bond.new(atom_t_map[bond.lhs], atom_t_map[bond.rhs], bond.order))\nend\nlink_bond = @link_bond.try do |lhs, rhs, order|\n  Bond.new(atom_t_map[lhs], atom_t_map[rhs], order)\nend\nroot_name = if atom_name = @root_name\n  atom_name\nelse\n  if @type.protein?\n    \"CA\"\n  else\n    self.class.guess_root(atoms, bond_ts, link_bond)\n  end\nend\nResidue.new(@names, @code, @type, @description, atoms, bond_ts, root_name, link_bond, @symmetric_atom_groups)\n"}},{"html_id":"code(char:Char):self-instance-method","name":"code","abstract":false,"args":[{"name":"char","external_name":"char","restriction":"Char"}],"args_string":"(char : Char) : self","args_html":"(char : <a href=\"../../Char.html\">Char</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/builder.cr","line_number":108,"url":null},"def":{"name":"code","args":[{"name":"char","external_name":"char","restriction":"Char"}],"return_type":"self","visibility":"Public","body":"@code = char\nself\n"}},{"html_id":"description(name:String):self-instance-method","name":"description","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : self","args_html":"(name : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/builder.cr","line_number":119,"url":null},"def":{"name":"description","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"self","visibility":"Public","body":"@description = name\nself\n"}},{"html_id":"link_adjacent_by(bond_spec:String):self-instance-method","name":"link_adjacent_by","abstract":false,"args":[{"name":"bond_spec","external_name":"bond_spec","restriction":"String"}],"args_string":"(bond_spec : String) : self","args_html":"(bond_spec : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/builder.cr","line_number":176,"url":null},"def":{"name":"link_adjacent_by","args":[{"name":"bond_spec","external_name":"bond_spec","restriction":"String"}],"return_type":"self","visibility":"Public","body":"parser = SpecParser.new(bond_spec)\nparser.parse\nif bond_r = parser.bonds[0]?\n  @link_bond = {bond_r.lhs, bond_r.rhs, bond_r.order}\nelse\n  raise(ParseException.new(\"Invalid link bond specification #{bond_spec.inspect}\"))\nend\nself\n"}},{"html_id":"name(*names:String):self-instance-method","name":"name","abstract":false,"args":[{"name":"names","external_name":"names","restriction":"String"}],"args_string":"(*names : String) : self","args_html":"(*names : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/builder.cr","line_number":187,"url":null},"def":{"name":"name","args":[{"name":"names","external_name":"names","restriction":"String"}],"splat_index":0,"return_type":"self","visibility":"Public","body":"names(names)\nself\n"}},{"html_id":"names(names:Enumerable(String)):self-instance-method","name":"names","abstract":false,"args":[{"name":"names","external_name":"names","restriction":"Enumerable(String)"}],"args_string":"(names : Enumerable(String)) : self","args_html":"(names : <a href=\"../../Enumerable.html\">Enumerable</a>(String)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/builder.cr","line_number":197,"url":null},"def":{"name":"names","args":[{"name":"names","external_name":"names","restriction":"Enumerable(String)"}],"return_type":"self","visibility":"Public","body":"@names.concat(names)\nself\n"}},{"html_id":"names(*names:String):self-instance-method","name":"names","abstract":false,"args":[{"name":"names","external_name":"names","restriction":"String"}],"args_string":"(*names : String) : self","args_html":"(*names : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/builder.cr","line_number":192,"url":null},"def":{"name":"names","args":[{"name":"names","external_name":"names","restriction":"String"}],"splat_index":0,"return_type":"self","visibility":"Public","body":"names(names)\nself\n"}},{"html_id":"root(atom_name:String):self-instance-method","name":"root","abstract":false,"args":[{"name":"atom_name","external_name":"atom_name","restriction":"String"}],"args_string":"(atom_name : String) : self","args_html":"(atom_name : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/builder.cr","line_number":206,"url":null},"def":{"name":"root","args":[{"name":"atom_name","external_name":"atom_name","restriction":"String"}],"return_type":"self","visibility":"Public","body":"check_atom(atom_name)\n@root_name = atom_name\nself\n"}},{"html_id":"spec(spec:String):self-instance-method","name":"spec","abstract":false,"args":[{"name":"spec","external_name":"spec","restriction":"String"}],"args_string":"(spec : String) : self","args_html":"(spec : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/builder.cr","line_number":212,"url":null},"def":{"name":"spec","args":[{"name":"spec","external_name":"spec","restriction":"String"}],"return_type":"self","visibility":"Public","body":"if @spec_parser\n  raise(\"Residue structure already defined\")\nend\nparser = SpecParser.new(spec, @spec_aliases)\nparser.parse\nif parser.atom_map.empty?\n  raise(\"Empty structure\")\nend\n@spec_parser = parser\nself\n"}},{"html_id":"symmetry(pairs:Enumerable(Tuple(String,String))):self-instance-method","name":"symmetry","abstract":false,"args":[{"name":"pairs","external_name":"pairs","restriction":"Enumerable(Tuple(String, String))"}],"args_string":"(pairs : Enumerable(Tuple(String, String))) : self","args_html":"(pairs : <a href=\"../../Enumerable.html\">Enumerable</a>(Tuple(String, String))) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/builder.cr","line_number":226,"url":null},"def":{"name":"symmetry","args":[{"name":"pairs","external_name":"pairs","restriction":"Enumerable(Tuple(String, String))"}],"return_type":"self","visibility":"Public","body":"visited = Set(String).new(pairs.size * 2)\npairs.each do |__arg6|\n  a = __arg6[0]\n  b = __arg6[1]\n  check_atom(a)\n  check_atom(b)\n  if a == b\n    raise(\"#{a} cannot be symmetric with itself\")\n  end\n  {a, b}.each do |name|\n    if name.in?(visited)\n      raise(\"#{name} cannot be reassigned for symmetry\")\n    end\n  end\n  (visited << a) << b\nend\n@symmetric_atom_groups << pairs.to_a\nself\n"}},{"html_id":"symmetry(*pairs:Tuple(String,String)):self-instance-method","name":"symmetry","abstract":false,"args":[{"name":"pairs","external_name":"pairs","restriction":"Tuple(String, String)"}],"args_string":"(*pairs : Tuple(String, String)) : self","args_html":"(*pairs : Tuple(String, String)) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/builder.cr","line_number":221,"url":null},"def":{"name":"symmetry","args":[{"name":"pairs","external_name":"pairs","restriction":"Tuple(String, String)"}],"splat_index":0,"return_type":"self","visibility":"Public","body":"symmetry(pairs)\nself\n"}},{"html_id":"type(type:ResidueType):self-instance-method","name":"type","abstract":false,"args":[{"name":"type","external_name":"type","restriction":"ResidueType"}],"args_string":"(type : ResidueType) : self","args_html":"(type : <a href=\"../../Chem/ResidueType.html\">ResidueType</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/builder.cr","line_number":171,"url":null},"def":{"name":"type","args":[{"name":"type","external_name":"type","restriction":"ResidueType"}],"return_type":"self","visibility":"Public","body":"@type = type\nself\n"}}]},{"html_id":"chem.cr/Chem/Templates/Detector","path":"Chem/Templates/Detector.html","kind":"class","full_name":"Chem::Templates::Detector","name":"Detector","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/templates/detector.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Templates","kind":"module","full_name":"Chem::Templates","name":"Templates"},"constructors":[{"html_id":"new(atoms:Enumerable(Chem::Atom))-class-method","name":"new","abstract":false,"args":[{"name":"atoms","external_name":"atoms","restriction":"Enumerable(::Chem::Atom)"}],"args_string":"(atoms : Enumerable(Chem::Atom))","args_html":"(atoms : <a href=\"../../Enumerable.html\">Enumerable</a>(<a href=\"../../Chem/Atom.html\">Chem::Atom</a>))","location":{"filename":"src/chem/templates/detector.cr","line_number":5,"url":null},"def":{"name":"new","args":[{"name":"atoms","external_name":"atoms","restriction":"Enumerable(::Chem::Atom)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(atoms)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"detect(templates:Registry=Registry.default):Tuple(Array(MatchData),AtomView)-instance-method","name":"detect","abstract":false,"args":[{"name":"templates","default_value":"Registry.default","external_name":"templates","restriction":"Registry"}],"args_string":"(templates : Registry = Registry.default) : Tuple(Array(MatchData), AtomView)","args_html":"(templates : <a href=\"../../Chem/Templates/Registry.html\">Registry</a> = <span class=\"t\">Registry</span>.default) : Tuple(<a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Templates/MatchData.html\">MatchData</a>), <a href=\"../../Chem/AtomView.html\">AtomView</a>)","location":{"filename":"src/chem/templates/detector.cr","line_number":19,"url":null},"def":{"name":"detect","args":[{"name":"templates","default_value":"Registry.default","external_name":"templates","restriction":"Registry"}],"return_type":"::Tuple(Array(MatchData), AtomView)","visibility":"Public","body":"matches = [] of MatchData\ntemplates.to_a.sort_by() do |__arg1|\n  -__arg1.atoms.size\nend.each do |res_t|\n  if (res_t.atoms.size <= @unmatched_atoms.size) && (root_atoms = @atoms_with_spec[res_t.root.top_spec]?)\n  else\n    next\n  end\n  ters = templates.ters.select do |__arg2|\n    __arg2.type == res_t.type\n  end\n  i = 0\n  while i < root_atoms.size\n    root_atom = root_atoms.unsafe_fetch(i)\n    if root_atom.in?(@unmatched_atoms)\n    else\n      next\n    end\n    atom_map = {} of Atom => ::Chem::Atom\n    search(res_t, res_t.root, root_atom, atom_map)\n    if ters.empty?\n    else\n      extend_search(atom_map, ters)\n    end\n    if atom_map.size >= res_t.atoms.size\n      matches << (MatchData.new(res_t, sort_match(atom_map, res_t.atoms)))\n      atom_map.each_value do |atom|\n        @unmatched_atoms.delete(atom)\n        @atoms_with_spec[@atom_top_specs[atom]].delete(atom)\n      end\n      i = i - 1\n    end\n    i = i + 1\n  end\nend\n{matches, AtomView.new(@unmatched_atoms.to_a.sort_by!(&.serial))}\n"}}]},{"html_id":"chem.cr/Chem/Templates/MatchData","path":"Chem/Templates/MatchData.html","kind":"struct","full_name":"Chem::Templates::MatchData","name":"MatchData","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/templates/match_data.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Templates","kind":"module","full_name":"Chem::Templates","name":"Templates"},"constructors":[{"html_id":"new(template:Residue,atom_map:Hash(Atom,Chem::Atom))-class-method","name":"new","abstract":false,"args":[{"name":"template","external_name":"template","restriction":"Residue"},{"name":"atom_map","external_name":"atom_map","restriction":"Hash(Atom, ::Chem::Atom)"}],"args_string":"(template : Residue, atom_map : Hash(Atom, Chem::Atom))","args_html":"(template : <a href=\"../../Chem/Templates/Residue.html\">Residue</a>, atom_map : Hash(<a href=\"../../Chem/Templates/Atom.html\">Atom</a>, <a href=\"../../Chem/Atom.html\">Chem::Atom</a>))","location":{"filename":"src/chem/templates/match_data.cr","line_number":4,"url":null},"def":{"name":"new","args":[{"name":"template","external_name":"template","restriction":"Residue"},{"name":"atom_map","external_name":"atom_map","restriction":"Hash(Atom, ::Chem::Atom)"}],"visibility":"Public","body":"_ = allocate\n_.initialize(template, atom_map)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"atom_map:Hash::View(Atom,Chem::Atom)-instance-method","name":"atom_map","abstract":false,"location":{"filename":"src/chem/templates/match_data.cr","line_number":10,"url":null},"def":{"name":"atom_map","return_type":"Hash::View(Atom, ::Chem::Atom)","visibility":"Public","body":"@atom_map.view"}},{"html_id":"template:Residue-instance-method","name":"template","abstract":false,"location":{"filename":"src/chem/templates/match_data.cr","line_number":2,"url":null},"def":{"name":"template","return_type":"Residue","visibility":"Public","body":"@template"}}]},{"html_id":"chem.cr/Chem/Templates/Registry","path":"Chem/Templates/Registry.html","kind":"class","full_name":"Chem::Templates::Registry","name":"Registry","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/templates/registry.cr","line_number":142,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Templates","kind":"module","full_name":"Chem::Templates","name":"Templates"},"doc":"Stores a map of residue templates (see `Residue`).\n\nIt behaves as a hash, where residue templates are indexed (registered)\nby the residue names.\n\nA _global registry_ can be accessed via the `Registry.default` method,\nwhich contains the default templates as well as other templates that\nhave been globally registered. For instance, the topology detection\nmechanism (see `Topology::Detector`) uses the global registry unless a\nregistry is specified.\n\nLocal registries could be used to selectively detect a few templates,\nwhich would speed up the process if existing residues are known\nbeforehand, or for another reason.\n\n### Loading residue templates\n\nResidue templates can be parsed and loaded from a file, IO, or string\nthat encodes a registry in the YAML format (refer to the [Format\nspecification](#format-specification) section).\n\nThe following example shows how to create a new registry directly from\nYAML content:\n\n```\nregistry = Chem::Templates::Registry.from_yaml <<-YAML\n  templates:\n    - description: Phenylalanine\n      names: [PHE, PHY]\n      code: F\n      type: protein\n      link_bond: C-N\n      spec: '{backbone}-CB-CG%1=CD1-CE1=CZ-CE2=CD2-%1'\n      symmetry:\n    - [[CD1, CD2], [CE1, CE2]]\n  aliases:\n    backbone: N(-H)-CA(-HA)(-C=O)\n  YAML\nregistry.size               # => 1\nregistry[\"PHE\"].description # => \"Phenylalanine\"\n```\n\nResidue templates can also be loaded into an existing registry using\neither the `#load` or `#parse` methods.\n\n```\nregistry = Chem::Templates::Registry.new.parse <<-YAML\n  ...\n  YAML\n```\n\nNOTE: A YAML file can be baked into the executable using the\n`read_file` macro at compilation time so it's can be executed\nanywhere. Otherwise, the hardcoded filepath may be unaccesible at\nruntime.\n\n```\nregistry = Chem::Templates::Registry.from_yaml {{read_file(\"/path/to/yaml\")}}\n```\n\n### Registering a new residue template\n\nResidue templates can also be registered using the DSL provided by the\n`Builder` type using the `#register` method:\n\n```\nregistry = Chem::Templates::Registry.new\nres_t = registry.register do\n  description \"Phenylalanine\"\n  names %w(PHE PHY)\n  code 'F'\n  type :protein\n  link_bond \"C-N\"\n  spec \"{backbone}-CB-CG%1=CD1-CE1=CZ-CE2=CD2-%1\"\n  symmetry({CD1, CD2}, {CE1, CE2})\nend\nregistry[\"PHE\"] == res_t # => true\n```\n\n### Retrieving a residue template\n\nResidue templates are indexed by every residue name, so they can be\naccessed using the bracket methods much like a hash.\n\n```\nregistry = Chem::Templates::Registry.from_yaml <<-YAML\n  names: [CX1, CX2]\n  description: \"Fake residue\"\n  spec: CX\n  YAML\nregistry[\"CX1\"].description        # => \"Fake residue\"\nregistry[\"CX1\"] == registry[\"CX2\"] # => true\nregistry[\"CX3\"]                    # Raises Chem::Error\nregistry[\"CX3\"]?                   # => nil\n```\n\n### Format specification\n\nAs shown above, residue templates can be encoded in a YAML document.\n\nResidue templates can be defined either under the `templates` field or\nat the top-level, and listed as an array of records. A single record\ncan also be specified at the top level.\n\nThe following examples are equivalent:\n\n```yaml\ntemplates:\n  - name: LFG\n    spec: '[N1H3+]-C2-C3-O4-C5(-C6)=O7'\n```\n\n```yaml\n- name: LFG\n  spec: '[N1H3+]-C2-C3-O4-C5(-C6)=O7'\n```\n\n```yaml\nname: LFG\nspec: '[N1H3+]-C2-C3-O4-C5(-C6)=O7'\n```\n\nThe records are transformed into `Residue` instances via the `Builder`\ntype. Each allowed field correspond to a specific method of the\nbuilder. The latter dictates the type of data and also handles\nvalidation.\n\nAliases for common residue template specifications (spec aliases) can\nbe defined as a map under the `aliases` field at the top level:\n\n```yaml\n...\naliases:\n  backbone: 'N(-H)-CA(-HA)(-C=O)'\n```\n\nRegistered aliases are passed down to the `SpecParser` type such that\nthey are expanded when parsing the specification of a residue template\nvia the bracket syntax, e.g., `'%{backbone}-CB-OH'`.","summary":"<p>Stores a map of residue templates (see <code><a href=\"../../Chem/Templates/Residue.html\">Residue</a></code>).</p>","constructors":[{"html_id":"default:self-class-method","name":"default","doc":"Returns the global residue template registry.\n\nNOTE: It loads the default templates including proteinogenic\naminoacids and their variants (e.g., HIS, HSE, and HSP), and\nsolvents such as water.","summary":"<p>Returns the global residue template registry.</p>","abstract":false,"location":{"filename":"src/chem/templates/registry.cr","line_number":160,"url":null},"def":{"name":"default","return_type":"self","visibility":"Public","body":"@@default_registry || (@@default_registry = new.tap do |registry|\n  registry.parse({{ read_file(\"/__w/chem.cr/chem.cr/src/chem/templates/../../../data/templates/amino.yaml\") }})\n  registry.parse({{ read_file(\"/__w/chem.cr/chem.cr/src/chem/templates/../../../data/templates/solvent.yaml\") }})\nend)"}},{"html_id":"from_yaml(content:IO|String):self-class-method","name":"from_yaml","doc":"Returns the residue templates encoded in the given YAML content.","summary":"<p>Returns the residue templates encoded in the given YAML content.</p>","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"IO | String"}],"args_string":"(content : IO | String) : self","args_html":"(content : IO | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/registry.cr","line_number":169,"url":null},"def":{"name":"from_yaml","args":[{"name":"content","external_name":"content","restriction":"IO | String"}],"return_type":"self","visibility":"Public","body":"new.parse(content)"}},{"html_id":"new-class-method","name":"new","doc":"Creates a new, empty residue template registry.","summary":"<p>Creates a new, empty residue template registry.</p>","abstract":false,"location":{"filename":"src/chem/templates/registry.cr","line_number":149,"url":null},"def":{"name":"new","visibility":"Public","body":"_ = allocate\n_.initialize\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"read(filepath:Path|String):self-class-method","name":"read","doc":"Returns the residue templates encoded in the given YAML file.","summary":"<p>Returns the residue templates encoded in the given YAML file.</p>","abstract":false,"args":[{"name":"filepath","external_name":"filepath","restriction":"Path | String"}],"args_string":"(filepath : Path | String) : self","args_html":"(filepath : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/registry.cr","line_number":174,"url":null},"def":{"name":"read","args":[{"name":"filepath","external_name":"filepath","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"new.load(filepath)"}}],"instance_methods":[{"html_id":"<<(res_t:Residue):self-instance-method","name":"<<","doc":"Adds the residue template to the registry. The template is\nregistered under every residue name.\n\nRaises `Error` if any of the residue names already exists.","summary":"<p>Adds the residue template to the registry.</p>","abstract":false,"args":[{"name":"res_t","external_name":"res_t","restriction":"Residue"}],"args_string":"(res_t : Residue) : self","args_html":"(res_t : <a href=\"../../Chem/Templates/Residue.html\">Residue</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/registry.cr","line_number":194,"url":null},"def":{"name":"<<","args":[{"name":"res_t","external_name":"res_t","restriction":"Residue"}],"return_type":"self","visibility":"Public","body":"res_t.names.each do |name|\n  if @table.has_key?(name)\n    raise(Error.new(\"#{name} residue template already exists\"))\n  end\n  @table[name] = res_t\nend\n@size = @size + 1\nself\n"}},{"html_id":"<<(ter_t:Ter):self-instance-method","name":"<<","doc":"Adds the termination template to the registry. The template is\nregistered under every name.\n\nRaises `Error` if any of the names already exists.","summary":"<p>Adds the termination template to the registry.</p>","abstract":false,"args":[{"name":"ter_t","external_name":"ter_t","restriction":"Ter"}],"args_string":"(ter_t : Ter) : self","args_html":"(ter_t : <a href=\"../../Chem/Templates/Ter.html\">Ter</a>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/registry.cr","line_number":207,"url":null},"def":{"name":"<<","args":[{"name":"ter_t","external_name":"ter_t","restriction":"Ter"}],"return_type":"self","visibility":"Public","body":"ter_t.names.each do |name|\n  if @ter_map.has_key?(name)\n    raise(Error.new(\"#{name} termination template already exists\"))\n  end\n  @ter_map[name] = ter_t\nend\nself\n"}},{"html_id":"[](name:String):Residue-instance-method","name":"[]","doc":"Returns the residue template registered under *name*. Raises `Error`\nif no template exist with the given name.","summary":"<p>Returns the residue template registered under <em>name</em>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Residue","args_html":"(name : String) : <a href=\"../../Chem/Templates/Residue.html\">Residue</a>","location":{"filename":"src/chem/templates/registry.cr","line_number":180,"url":null},"def":{"name":"[]","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Residue","visibility":"Public","body":"self[name]? || (raise(Error.new(\"Unknown residue template #{name}\")))"}},{"html_id":"[]?(name:String):Residue|Nil-instance-method","name":"[]?","doc":"Returns the residue template registered under *name*, or `nil` if no\ntemplate exist with the given name.","summary":"<p>Returns the residue template registered under <em>name</em>, or <code>nil</code> if no template exist with the given name.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Residue | Nil","args_html":"(name : String) : <a href=\"../../Chem/Templates/Residue.html\">Residue</a> | Nil","location":{"filename":"src/chem/templates/registry.cr","line_number":186,"url":null},"def":{"name":"[]?","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Residue | ::Nil","visibility":"Public","body":"@table[name]?"}},{"html_id":"alias(new_name:String,toexisting_name:String):self-instance-method","name":"alias","doc":"Registers an aliases to a known residue template. Raises `Error` if\n*name* is not registered.","summary":"<p>Registers an aliases to a known residue template.</p>","abstract":false,"args":[{"name":"new_name","external_name":"new_name","restriction":"String"},{"name":"existing_name","external_name":"to","restriction":"String"}],"args_string":"(new_name : String, to existing_name : String) : self","args_html":"(new_name : String, to existing_name : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/registry.cr","line_number":219,"url":null},"def":{"name":"alias","args":[{"name":"new_name","external_name":"new_name","restriction":"String"},{"name":"existing_name","external_name":"to","restriction":"String"}],"return_type":"self","visibility":"Public","body":"if res_t = self[existing_name]?\n  @table[new_name] = res_t\nelse\n  raise(Error.new(\"Unknown residue template #{existing_name}\"))\nend\nself\n"}},{"html_id":"includes?(res_t:Residue):Bool-instance-method","name":"includes?","doc":"Returns `true` if the registry contains the given residue template,\nelse `false`. Both template's name and content are checked for a\nmatch.","summary":"<p>Returns <code>true</code> if the registry contains the given residue template, else <code>false</code>.</p>","abstract":false,"args":[{"name":"res_t","external_name":"res_t","restriction":"Residue"}],"args_string":"(res_t : Residue) : Bool","args_html":"(res_t : <a href=\"../../Chem/Templates/Residue.html\">Residue</a>) : Bool","location":{"filename":"src/chem/templates/registry.cr","line_number":231,"url":null},"def":{"name":"includes?","args":[{"name":"res_t","external_name":"res_t","restriction":"Residue"}],"return_type":"Bool","visibility":"Public","body":"res_t.names.any? do |name|\n  self[name]? == res_t\nend"}},{"html_id":"load(filepath:Path|String):self-instance-method","name":"load","doc":"Loads the residue template(s) encoded in the given YAML or structure\nfile into the registry.\n\nIf a valid structure file (checked via `Format.from_filename?`) is\npassed, it's read into a `Structure` instance, and the first residue\nis transformed into a template by calling `Residue.build`.\n\nOtherwise, the content of the YAML file is parsed by calling\n`Registry#parse`.","summary":"<p>Loads the residue template(s) encoded in the given YAML or structure file into the registry.</p>","abstract":false,"args":[{"name":"filepath","external_name":"filepath","restriction":"Path | String"}],"args_string":"(filepath : Path | String) : self","args_html":"(filepath : Path | String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/registry.cr","line_number":247,"url":null},"def":{"name":"load","args":[{"name":"filepath","external_name":"filepath","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"if Format.from_filename?(filepath)\n  structure = Structure.read(filepath)\n  res_t = Residue.build(structure.residues[0])\n  self << res_t\nelse\n  File.open(filepath) do |io|\n    parse(io)\n  end\nend"}},{"html_id":"parse(io:IO):self-instance-method","name":"parse","doc":"Parses the residue templates encoded in the given YAML content into\nthe registry. Refer to the [Format\nspecification](#format-specification) section above.\n\nValidation on template data is handled by\n`Builder`, which may raise `Error`.","summary":"<p>Parses the residue templates encoded in the given YAML content into the registry.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : self","args_html":"(io : IO) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/registry.cr","line_number":265,"url":null},"def":{"name":"parse","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"self","visibility":"Public","body":"data = YAML.parse(io)\nscoped = false\n(data.dig?(\"aliases\")).try do |aliases|\n  scoped = true\n  aliases.as_h.each do |name, spec|\n    @spec_aliases[name.as_s] = spec.as_s\n  end\nend\n(data.dig?(\"ters\")).try do |ters|\n  scoped = true\n  ters.as_a.each do |hash|\n    self << Ter.build do |builder|\n      hash[\"description\"]?.try do |any|\n        builder.description(any.as_s)\n      end\n      if name = hash[\"name\"]?\n        builder.name(name.as_s)\n      else\n        if names = hash[\"names\"]\n          builder.names(names.as_a.map(&.as_s))\n        end\n      end\n      hash[\"type\"]?.try do |type|\n        builder.type(ResidueType.parse(type.as_s))\n      end\n      hash[\"spec\"]?.try do |spec|\n        builder.spec(spec.as_s)\n      end\n      hash[\"root\"]?.try do |any|\n        builder.root(any.as_s)\n      end\n    end\n  end\nend\ntemplates = (data.dig?(\"templates\")).try(&.as_a)\nif scoped\nelse\n  templates || (templates = data.as_a? || [data])\nend\ntemplates.try(&.each do |hash|\n  register do |builder|\n    hash[\"description\"]?.try do |any|\n      builder.description(any.as_s)\n    end\n    if name = hash[\"name\"]?\n      builder.name(name.as_s)\n    else\n      if names = hash[\"names\"]\n        builder.names(names.as_a.map(&.as_s))\n      end\n    end\n    hash[\"code\"]?.try do |code|\n      builder.code(code.as_s[0])\n    end\n    hash[\"type\"]?.try do |type|\n      builder.type(ResidueType.parse(type.as_s))\n    end\n    hash[\"spec\"]?.try do |spec|\n      builder.spec(spec.as_s)\n    end\n    hash[\"root\"]?.try do |any|\n      builder.root(any.as_s)\n    end\n    hash[\"link_bond\"]?.try do |any|\n      builder.link_adjacent_by(any.as_s)\n    end\n    hash[\"symmetry\"]?.try do |symmetric_atom_groups|\n      symmetric_atom_groups.as_a.each do |atom_pairs|\n        builder.symmetry(atom_pairs.as_a.map do |p|\n          {p[0].as_s, p[1].as_s}\n        end)\n      end\n    end\n  end\nend)\nself\n"}},{"html_id":"parse(content:String):self-instance-method","name":"parse","doc":"Parses the residue templates encoded in the given YAML content into\nthe registry. Refer to the [Format\nspecification](#format-specification) section above.\n\nValidation on template data is handled by\n`Builder`, which may raise `Error`.","summary":"<p>Parses the residue templates encoded in the given YAML content into the registry.</p>","abstract":false,"args":[{"name":"content","external_name":"content","restriction":"String"}],"args_string":"(content : String) : self","args_html":"(content : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/registry.cr","line_number":323,"url":null},"def":{"name":"parse","args":[{"name":"content","external_name":"content","restriction":"String"}],"return_type":"self","visibility":"Public","body":"parse(IO::Memory.new(content))"}},{"html_id":"register(structure:Structure):Residue-instance-method","name":"register","doc":"Convenience method that creates and registers a new residue\ntemplate from a structure. See `Residue.build` and `#<<`.","summary":"<p>Convenience method that creates and registers a new residue template from a structure.</p>","abstract":false,"args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure) : Residue","args_html":"(structure : <a href=\"../../Chem/Structure.html\">Structure</a>) : <a href=\"../../Chem/Templates/Residue.html\">Residue</a>","location":{"filename":"src/chem/templates/registry.cr","line_number":329,"url":null},"def":{"name":"register","args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"return_type":"Residue","visibility":"Public","body":"res_t = Residue.build(structure.residues[0])\nself << res_t\nres_t\n"}},{"html_id":"register(&):Residue-instance-method","name":"register","doc":"Convenience method that creates and registers a new residue\ntemplate. See `Builder` and `#<<`.","summary":"<p>Convenience method that creates and registers a new residue template.</p>","abstract":false,"location":{"filename":"src/chem/templates/registry.cr","line_number":337,"url":null},"def":{"name":"register","yields":1,"block_arity":1,"return_type":"Residue","visibility":"Public","body":"builder = Builder.new(@spec_aliases)\nwith builder yield builder\nres_t = builder.build\nself << res_t\nres_t\n"}},{"html_id":"reject(&:Residue->_):self-instance-method","name":"reject","doc":"Returns a new registry with all the residue templates for which the\npassed block is falsey.","summary":"<p>Returns a new registry with all the residue templates for which the passed block is falsey.</p>","abstract":false,"location":{"filename":"src/chem/templates/registry.cr","line_number":347,"url":null},"def":{"name":"reject","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Residue -> _)"},"return_type":"self","visibility":"Public","body":"self.select do |res_t|\n  !(yield res_t)\nend"}},{"html_id":"select(&:Residue->_):self-instance-method","name":"select","doc":"Returns a new registry with all the residue templates for which the\npassed block is truthy.","summary":"<p>Returns a new registry with all the residue templates for which the passed block is truthy.</p>","abstract":false,"location":{"filename":"src/chem/templates/registry.cr","line_number":355,"url":null},"def":{"name":"select","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Residue -> _)"},"return_type":"self","visibility":"Public","body":"registry = self.class.new\n@table.each_value do |res_t|\n  if (!(res_t.in?(registry))) && (yield res_t)\n    registry << res_t\n  end\nend\nters.each do |ter_t|\n  registry << ter_t\nend\nregistry\n"}},{"html_id":"size:Int32-instance-method","name":"size","doc":"Number of residue templates.","summary":"<p>Number of residue templates.</p>","abstract":false,"location":{"filename":"src/chem/templates/registry.cr","line_number":144,"url":null},"def":{"name":"size","return_type":"Int32","visibility":"Public","body":"@size"}},{"html_id":"spec_alias(name:String,spec:String):self-instance-method","name":"spec_alias","doc":"Registers an alias for a residue template specification.\n\nRegistered aliases are passed to `SpecParser` such\nthat they are expanded when parsing the specification of a residue\ntemplate.","summary":"<p>Registers an alias for a residue template specification.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"spec","external_name":"spec","restriction":"String"}],"args_string":"(name : String, spec : String) : self","args_html":"(name : String, spec : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/registry.cr","line_number":371,"url":null},"def":{"name":"spec_alias","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"spec","external_name":"spec","restriction":"String"}],"return_type":"self","visibility":"Public","body":"@spec_aliases[name] = spec\nself\n"}},{"html_id":"ters:Array(Ter)-instance-method","name":"ters","doc":"Returns an array containing all the termination templates.","summary":"<p>Returns an array containing all the termination templates.</p>","abstract":false,"location":{"filename":"src/chem/templates/registry.cr","line_number":377,"url":null},"def":{"name":"ters","return_type":"Array(Ter)","visibility":"Public","body":"@ter_map.values.uniq!"}},{"html_id":"to_a:Array(Residue)-instance-method","name":"to_a","doc":"Returns an array containing all the residue templates.","summary":"<p>Returns an array containing all the residue templates.</p>","abstract":false,"location":{"filename":"src/chem/templates/registry.cr","line_number":382,"url":null},"def":{"name":"to_a","return_type":"Array(Residue)","visibility":"Public","body":"@table.values.uniq!"}}]},{"html_id":"chem.cr/Chem/Templates/Residue","path":"Chem/Templates/Residue.html","kind":"class","full_name":"Chem::Templates::Residue","name":"Residue","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/templates/residue.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Templates","kind":"module","full_name":"Chem::Templates","name":"Templates"},"constructors":[{"html_id":"build(&):self-class-method","name":"build","abstract":false,"location":{"filename":"src/chem/templates/residue.cr","line_number":52,"url":null},"def":{"name":"build","yields":1,"block_arity":1,"return_type":"self","visibility":"Public","body":"builder = Builder.new\nwith builder yield builder\nbuilder.build\n"}},{"html_id":"build(residue:Chem::Residue,description:String|Nil=nil,link_bond:Bond|Nil=nil,symmetric_atom_groups:Array(Array(Tuple(String,String)))|Nil=nil):self-class-method","name":"build","doc":"Creates a new residue template from an existing residue.\n\nEvery atom and bond is converted to a template, which are then\npassed down to the constructor along with the optional arguments.\nInformation such as name, code, etc. is obtained from the residue.\n\nIf *link_bond* is `nil`, it will be obtained from the associated\nresidue template if exists. Otherwise, it will be guessed from the\nconnectivity. If the residue is connected to two other residues by\nequivalent bonds, one of them will be chosen. The sense of the link\nbond will be infered from the residue numbering.\n\nRaises `Error` if there is missing connectivity (no bonds).","summary":"<p>Creates a new residue template from an existing residue.</p>","abstract":false,"args":[{"name":"residue","external_name":"residue","restriction":"::Chem::Residue"},{"name":"description","default_value":"nil","external_name":"description","restriction":"String | ::Nil"},{"name":"link_bond","default_value":"nil","external_name":"link_bond","restriction":"Bond | ::Nil"},{"name":"symmetric_atom_groups","default_value":"nil","external_name":"symmetric_atom_groups","restriction":"Array(Array(Tuple(String, String))) | ::Nil"}],"args_string":"(residue : Chem::Residue, description : String | Nil = nil, link_bond : Bond | Nil = nil, symmetric_atom_groups : Array(Array(Tuple(String, String))) | Nil = nil) : self","args_html":"(residue : <a href=\"../../Chem/Residue.html\">Chem::Residue</a>, description : String | Nil = <span class=\"n\">nil</span>, link_bond : <a href=\"../../Chem/Templates/Bond.html\">Bond</a> | Nil = <span class=\"n\">nil</span>, symmetric_atom_groups : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Array.html\">Array</a>(Tuple(String, String))) | Nil = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","location":{"filename":"src/chem/templates/residue.cr","line_number":71,"url":null},"def":{"name":"build","args":[{"name":"residue","external_name":"residue","restriction":"::Chem::Residue"},{"name":"description","default_value":"nil","external_name":"description","restriction":"String | ::Nil"},{"name":"link_bond","default_value":"nil","external_name":"link_bond","restriction":"Bond | ::Nil"},{"name":"symmetric_atom_groups","default_value":"nil","external_name":"symmetric_atom_groups","restriction":"Array(Array(Tuple(String, String))) | ::Nil"}],"return_type":"self","visibility":"Public","body":"atoms = residue.atoms.map do |atom|\n  Atom.new(atom.name, atom.element, atom.bonded_atoms.map(&.element), atom.formal_charge, atom.valence)\nend\natom_table = atoms.index_by(&.name)\nif atom_table.size < atoms.size\n  name, _ = atoms.map(&.name).tally.max_by(&.[](1))\n  raise(Error.new(\"Duplicate atom name #{name.inspect} found in #{residue}\"))\nend\nbonds = residue.bonds.map do |bond|\n  Bond.new(*bond.atoms.map do |atom|\n    atom_table[atom.name]\n  end, bond.order)\nend\nif bonds.empty?\n  raise(Error.new(\"Cannot create template from #{residue} due to missing connectivity\"))\nend\nlink_bond || (link_bond = residue.template.try(&.link_bond))\nif (!link_bond) && (bond = guess_link_bond(residue))\n  atom_templates = bond.atoms.map do |atom|\n    atom_table[atom.name]\n  end\n  link_bond = Bond.new(*atom_templates, bond.order)\nend\nnew([residue.name], residue.code, residue.type, description, atoms, bonds, Builder.guess_root(atoms, bonds, link_bond), link_bond, symmetric_atom_groups)\n"}},{"html_id":"new(names:Array(String),code:Char|Nil,type:ResidueType,description:String|Nil,atoms:Array(Atom),bonds:Array(Bond),rootroot_name:String,link_bond:Bond|Nil=nil,symmetric_atom_groups:Array(Array(Tuple(String,String)))|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"names","external_name":"names","restriction":"Array(String)"},{"name":"code","external_name":"code","restriction":"Char | ::Nil"},{"name":"type","external_name":"type","restriction":"ResidueType"},{"name":"description","external_name":"description","restriction":"String | ::Nil"},{"name":"atoms","external_name":"atoms","restriction":"Array(Atom)"},{"name":"bonds","external_name":"bonds","restriction":"Array(Bond)"},{"name":"root_name","external_name":"root","restriction":"String"},{"name":"link_bond","default_value":"nil","external_name":"link_bond","restriction":"Bond | ::Nil"},{"name":"symmetric_atom_groups","default_value":"nil","external_name":"symmetric_atom_groups","restriction":"Array(Array(Tuple(String, String))) | ::Nil"}],"args_string":"(names : Array(String), code : Char | Nil, type : ResidueType, description : String | Nil, atoms : Array(Atom), bonds : Array(Bond), root root_name : String, link_bond : Bond | Nil = nil, symmetric_atom_groups : Array(Array(Tuple(String, String))) | Nil = nil)","args_html":"(names : <a href=\"../../Array.html\">Array</a>(String), code : <a href=\"../../Char.html\">Char</a> | Nil, type : <a href=\"../../Chem/ResidueType.html\">ResidueType</a>, description : String | Nil, atoms : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Templates/Atom.html\">Atom</a>), bonds : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Templates/Bond.html\">Bond</a>), root root_name : String, link_bond : <a href=\"../../Chem/Templates/Bond.html\">Bond</a> | Nil = <span class=\"n\">nil</span>, symmetric_atom_groups : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Array.html\">Array</a>(Tuple(String, String))) | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/templates/residue.cr","line_number":14,"url":null},"def":{"name":"new","args":[{"name":"names","external_name":"names","restriction":"Array(String)"},{"name":"code","external_name":"code","restriction":"Char | ::Nil"},{"name":"type","external_name":"type","restriction":"ResidueType"},{"name":"description","external_name":"description","restriction":"String | ::Nil"},{"name":"atoms","external_name":"atoms","restriction":"Array(Atom)"},{"name":"bonds","external_name":"bonds","restriction":"Array(Bond)"},{"name":"root_name","external_name":"root","restriction":"String"},{"name":"link_bond","default_value":"nil","external_name":"link_bond","restriction":"Bond | ::Nil"},{"name":"symmetric_atom_groups","default_value":"nil","external_name":"symmetric_atom_groups","restriction":"Array(Array(Tuple(String, String))) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(names, code, type, description, atoms, bonds, root_name, link_bond, symmetric_atom_groups)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](atom_t:Atom,other:Atom):Bond-instance-method","name":"[]","doc":"Returns the bond template between the given atoms. Raises `KeyError`\nif the bond does not exist.","summary":"<p>Returns the bond template between the given atoms.</p>","abstract":false,"args":[{"name":"atom_t","external_name":"atom_t","restriction":"Atom"},{"name":"other","external_name":"other","restriction":"Atom"}],"args_string":"(atom_t : Atom, other : Atom) : Bond","args_html":"(atom_t : <a href=\"../../Chem/Templates/Atom.html\">Atom</a>, other : <a href=\"../../Chem/Templates/Atom.html\">Atom</a>) : <a href=\"../../Chem/Templates/Bond.html\">Bond</a>","location":{"filename":"src/chem/templates/residue.cr","line_number":112,"url":null},"def":{"name":"[]","args":[{"name":"atom_t","external_name":"atom_t","restriction":"Atom"},{"name":"other","external_name":"other","restriction":"Atom"}],"return_type":"Bond","visibility":"Public","body":"self[name, other]? || (unknown_bond(atom_t, other))"}},{"html_id":"[](name:String,other:String):Bond-instance-method","name":"[]","doc":"Returns the bond template between the given atoms. Raises `KeyError`\nif the bond does not exist.","summary":"<p>Returns the bond template between the given atoms.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"other","external_name":"other","restriction":"String"}],"args_string":"(name : String, other : String) : Bond","args_html":"(name : String, other : String) : <a href=\"../../Chem/Templates/Bond.html\">Bond</a>","location":{"filename":"src/chem/templates/residue.cr","line_number":117,"url":null},"def":{"name":"[]","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"other","external_name":"other","restriction":"String"}],"return_type":"Bond","visibility":"Public","body":"self[name, other]? || (unknown_bond(name, other))"}},{"html_id":"[](name:String):Atom-instance-method","name":"[]","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom","args_html":"(name : String) : <a href=\"../../Chem/Templates/Atom.html\">Atom</a>","location":{"filename":"src/chem/templates/residue.cr","line_number":121,"url":null},"def":{"name":"[]","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Atom","visibility":"Public","body":"self[name]? || (unknown_atom(name))"}},{"html_id":"[]?(atom_t:Atom,other:Atom):Bond|Nil-instance-method","name":"[]?","doc":"Returns the bond template between the given atoms if exists, else\n`nil`.","summary":"<p>Returns the bond template between the given atoms if exists, else <code>nil</code>.</p>","abstract":false,"args":[{"name":"atom_t","external_name":"atom_t","restriction":"Atom"},{"name":"other","external_name":"other","restriction":"Atom"}],"args_string":"(atom_t : Atom, other : Atom) : Bond | Nil","args_html":"(atom_t : <a href=\"../../Chem/Templates/Atom.html\">Atom</a>, other : <a href=\"../../Chem/Templates/Atom.html\">Atom</a>) : <a href=\"../../Chem/Templates/Bond.html\">Bond</a> | Nil","location":{"filename":"src/chem/templates/residue.cr","line_number":127,"url":null},"def":{"name":"[]?","args":[{"name":"atom_t","external_name":"atom_t","restriction":"Atom"},{"name":"other","external_name":"other","restriction":"Atom"}],"return_type":"Bond | ::Nil","visibility":"Public","body":"@bonds.find do |bond_t|\n  (atom_t.in?(bond_t)) && (other.in?(bond_t))\nend"}},{"html_id":"[]?(name:String,other:String):Bond|Nil-instance-method","name":"[]?","doc":"Returns the bond template between the given atoms if exists, else\n`nil`.","summary":"<p>Returns the bond template between the given atoms if exists, else <code>nil</code>.</p>","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"other","external_name":"other","restriction":"String"}],"args_string":"(name : String, other : String) : Bond | Nil","args_html":"(name : String, other : String) : <a href=\"../../Chem/Templates/Bond.html\">Bond</a> | Nil","location":{"filename":"src/chem/templates/residue.cr","line_number":134,"url":null},"def":{"name":"[]?","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"other","external_name":"other","restriction":"String"}],"return_type":"Bond | ::Nil","visibility":"Public","body":"if (atom_t = self[name]?) && (other_t = self[other]?)\nelse\n  return\nend\nself[atom_t, other_t]?\n"}},{"html_id":"[]?(name:String):Atom|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom | Nil","args_html":"(name : String) : <a href=\"../../Chem/Templates/Atom.html\">Atom</a> | Nil","location":{"filename":"src/chem/templates/residue.cr","line_number":139,"url":null},"def":{"name":"[]?","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Atom | ::Nil","visibility":"Public","body":"@atom_table[name]?"}},{"html_id":"atoms:Array::View(Atom)-instance-method","name":"atoms","abstract":false,"location":{"filename":"src/chem/templates/residue.cr","line_number":143,"url":null},"def":{"name":"atoms","return_type":"Array::View(Atom)","visibility":"Public","body":"@atoms.view"}},{"html_id":"bonds:Array::View(Bond)-instance-method","name":"bonds","abstract":false,"location":{"filename":"src/chem/templates/residue.cr","line_number":147,"url":null},"def":{"name":"bonds","return_type":"Array::View(Bond)","visibility":"Public","body":"@bonds.view"}},{"html_id":"code:Char|Nil-instance-method","name":"code","abstract":false,"location":{"filename":"src/chem/templates/residue.cr","line_number":11,"url":null},"def":{"name":"code","return_type":"Char | ::Nil","visibility":"Public","body":"@code"}},{"html_id":"description:String|Nil-instance-method","name":"description","abstract":false,"location":{"filename":"src/chem/templates/residue.cr","line_number":9,"url":null},"def":{"name":"description","return_type":"String | ::Nil","visibility":"Public","body":"@description"}},{"html_id":"formal_charge:Int32-instance-method","name":"formal_charge","abstract":false,"location":{"filename":"src/chem/templates/residue.cr","line_number":151,"url":null},"def":{"name":"formal_charge","return_type":"Int32","visibility":"Public","body":"@atoms.sum(&.formal_charge)"}},{"html_id":"link_bond:Bond|Nil-instance-method","name":"link_bond","abstract":false,"location":{"filename":"src/chem/templates/residue.cr","line_number":8,"url":null},"def":{"name":"link_bond","return_type":"Bond | ::Nil","visibility":"Public","body":"@link_bond"}},{"html_id":"name:String-instance-method","name":"name","doc":"Returns the designated residue name.","summary":"<p>Returns the designated residue name.</p>","abstract":false,"location":{"filename":"src/chem/templates/residue.cr","line_number":156,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@names.first"}},{"html_id":"names:Array(String)-instance-method","name":"names","abstract":false,"location":{"filename":"src/chem/templates/residue.cr","line_number":6,"url":null},"def":{"name":"names","return_type":"Array(String)","visibility":"Public","body":"@names"}},{"html_id":"polymer?:Bool-instance-method","name":"polymer?","abstract":false,"location":{"filename":"src/chem/templates/residue.cr","line_number":160,"url":null},"def":{"name":"polymer?","return_type":"Bool","visibility":"Public","body":"!(!link_bond)"}},{"html_id":"root:Atom-instance-method","name":"root","abstract":false,"location":{"filename":"src/chem/templates/residue.cr","line_number":10,"url":null},"def":{"name":"root","return_type":"Atom","visibility":"Public","body":"@root"}},{"html_id":"symmetric_atom_groups:Array(Array(Tuple(String,String)))|Nil-instance-method","name":"symmetric_atom_groups","abstract":false,"location":{"filename":"src/chem/templates/residue.cr","line_number":12,"url":null},"def":{"name":"symmetric_atom_groups","return_type":"Array(Array(Tuple(String, String))) | ::Nil","visibility":"Public","body":"@symmetric_atom_groups"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/templates/residue.cr","line_number":164,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"(((io << '<') << ({{ (@type.name.split(\"::\"))[1..].join(\"::\") }})) << ' ') << name\nif @code\n  ((io << '(') << @code) << ')'\nend\nif @type.other?\nelse\n  (io << ' ') << @type.to_s.downcase\nend\nio << '>'\n"}},{"html_id":"type:ResidueType-instance-method","name":"type","abstract":false,"location":{"filename":"src/chem/templates/residue.cr","line_number":7,"url":null},"def":{"name":"type","return_type":"ResidueType","visibility":"Public","body":"@type"}}]},{"html_id":"chem.cr/Chem/Templates/SpecParser","path":"Chem/Templates/SpecParser.html","kind":"class","full_name":"Chem::Templates::SpecParser","name":"SpecParser","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/templates/spec_parser.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Templates","kind":"module","full_name":"Chem::Templates","name":"Templates"},"constructors":[{"html_id":"new(str,aliases:Hash(String,String)|Nil=nil)-class-method","name":"new","abstract":false,"args":[{"name":"str","external_name":"str","restriction":""},{"name":"aliases","default_value":"nil","external_name":"aliases","restriction":"Hash(String, String) | ::Nil"}],"args_string":"(str, aliases : Hash(String, String) | Nil = nil)","args_html":"(str, aliases : Hash(String, String) | Nil = <span class=\"n\">nil</span>)","location":{"filename":"src/chem/templates/spec_parser.cr","line_number":9,"url":null},"def":{"name":"new","args":[{"name":"str","external_name":"str","restriction":""},{"name":"aliases","default_value":"nil","external_name":"aliases","restriction":"Hash(String, String) | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(str, aliases)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"atom_map:Hash(String,AtomRecord)-instance-method","name":"atom_map","abstract":false,"location":{"filename":"src/chem/templates/spec_parser.cr","line_number":30,"url":null},"def":{"name":"atom_map","return_type":"Hash(String, AtomRecord)","visibility":"Public","body":"@atom_map"}},{"html_id":"atoms:Array(AtomRecord)-instance-method","name":"atoms","abstract":false,"location":{"filename":"src/chem/templates/spec_parser.cr","line_number":26,"url":null},"def":{"name":"atoms","return_type":"Array(AtomRecord)","visibility":"Public","body":"@atom_map.values"}},{"html_id":"bonds:Array(BondRecord)-instance-method","name":"bonds","abstract":false,"location":{"filename":"src/chem/templates/spec_parser.cr","line_number":34,"url":null},"def":{"name":"bonds","return_type":"Array(BondRecord)","visibility":"Public","body":"@bond_map.values"}},{"html_id":"implicit_bonds:Array::View(ImplicitBondRecord)-instance-method","name":"implicit_bonds","abstract":false,"location":{"filename":"src/chem/templates/spec_parser.cr","line_number":79,"url":null},"def":{"name":"implicit_bonds","return_type":"Array::View(ImplicitBondRecord)","visibility":"Public","body":"@implicit_bonds.view"}},{"html_id":"parse:Nil-instance-method","name":"parse","abstract":false,"location":{"filename":"src/chem/templates/spec_parser.cr","line_number":90,"url":null},"def":{"name":"parse","return_type":"Nil","visibility":"Public","body":"bond_atom = nil\nbond_order = BondOrder::Single\nroot_stack = Deque(AtomRecord).new\nlabel_map = {} of Int32 => AtomRecord\nadvance_char = true\nloop do\n  case char = current_char\n  when '[', .ascii_letter?\n    if @atom_map.empty? || bond_atom\n    else\n      raise(\"Expected bond between atoms\")\n    end\n    atom = read_atom\n    if bond_atom\n      add_bond(bond_atom, atom, bond_order)\n      bond_atom = nil\n    end\n  when '-'\n    check_bond_succ\n    bond_atom || (bond_atom = expect_atom(\"before bond\"))\n    bond_order = BondOrder::Single\n  when '='\n    check_bond_succ\n    bond_atom || (bond_atom = expect_atom(\"before bond\"))\n    bond_order = BondOrder::Double\n  when '#'\n    check_bond_succ\n    bond_atom || (bond_atom = expect_atom(\"before bond\"))\n    bond_order = BondOrder::Triple\n  when '('\n    if char = peek_char\n      if char.in?(\"-=#\")\n      else\n        raise(\"Expected a bond at the beginning of a branch, got #{char.inspect}\")\n      end\n    else\n      raise(\"Unclosed branch\")\n    end\n    root_stack << (bond_atom || (expect_atom(\"before branch\")))\n  when ')'\n    bond_atom = root_stack.pop? || (raise(\"Unmatched branch closing\"))\n    if char = peek_char\n      if char.in?(\"-=#({\")\n      else\n        raise(\"Expected bond after a branch\")\n      end\n    end\n  when '{'\n    atom = bond_atom || (expect_atom(\"before implicit branch\"))\n    order = case char = next_char\n    when '-'\n      BondOrder::Single\n    when '='\n      BondOrder::Double\n    when '#'\n      BondOrder::Triple\n    when Nil\n      raise(\"Unclosed implicit branch\")\n    else\n      raise(\"Expected bond at the beginning of an implicit branch, got #{char.inspect}\")\n    end\n    check_bond_succ\n    next_char\n    element = read_element\n    if next_char == '}'\n    else\n      raise(\"Unclosed implicit bond\")\n    end\n    @implicit_bonds << (ImplicitBondRecord.new(atom.name, element, order))\n  when '%'\n    next_char\n    if current_char == '{'\n      next_char\n      name = consume_while(&.ascii_lowercase?)\n      if name.empty?\n        raise(\"Expected alias\")\n      end\n      spec = @aliases.try(&.[]?(name)) || (raise(\"Unknown alias #{name}\"))\n      if next_char == '}'\n      else\n        raise(\"Unclosed alias\")\n      end\n      raw_value = String.build do |io|\n        ((io << @reader.string[0, (@reader.pos - name.size) - 1]) << spec) << @reader.string[(@reader.pos + 1)..]\n      end\n      @reader = Char::Reader.new(raw_value, (@reader.pos - name.size) - 1)\n      advance_char = false\n    else\n      label_id = read_int\n      if bond_atom\n        atom = label_map[label_id]? || (raise(\"Unknown label %#{label_id}\"))\n        add_bond(atom, bond_atom, bond_order)\n        bond_atom = nil\n        label_map.delete(label_id)\n      else\n        if label_map.has_key?(label_id)\n          raise(\"Duplicate label %#{label_id}\")\n        end\n        label_map[label_id] = expect_atom(\"before label %#{label_id}\")\n      end\n    end\n  when '\\0'\n    break\n  else\n    raise(\"Invalid character #{char.inspect}\")\n  end\n  if advance_char\n    if next_char\n    else\n      break\n    end\n  else\n    advance_char = true\n  end\nend\nif root_stack.empty?\nelse\n  raise(\"Unclosed branch\")\nend\nif label_map.empty?\nelse\n  raise(\"Unclosed label %#{label_map.first_key}\")\nend\n"}}],"types":[{"html_id":"chem.cr/Chem/Templates/SpecParser/AtomRecord","path":"Chem/Templates/SpecParser/AtomRecord.html","kind":"struct","full_name":"Chem::Templates::SpecParser::AtomRecord","name":"AtomRecord","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/templates/spec_parser.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Templates/SpecParser","kind":"class","full_name":"Chem::Templates::SpecParser","name":"SpecParser"},"constructors":[{"html_id":"new(name:String,element:Element,formal_charge:Int32,explicit_hydrogens:Int32|Nil)-class-method","name":"new","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"element","external_name":"element","restriction":"Element"},{"name":"formal_charge","external_name":"formal_charge","restriction":"Int32"},{"name":"explicit_hydrogens","external_name":"explicit_hydrogens","restriction":"Int32 | ::Nil"}],"args_string":"(name : String, element : Element, formal_charge : Int32, explicit_hydrogens : Int32 | Nil)","args_html":"(name : String, element : <a href=\"../../../Chem/Element.html\">Element</a>, formal_charge : Int32, explicit_hydrogens : Int32 | Nil)","location":{"filename":"src/chem/templates/spec_parser.cr","line_number":2,"url":null},"def":{"name":"new","args":[{"name":"name","external_name":"name","restriction":"String"},{"name":"element","external_name":"element","restriction":"Element"},{"name":"formal_charge","external_name":"formal_charge","restriction":"Int32"},{"name":"explicit_hydrogens","external_name":"explicit_hydrogens","restriction":"Int32 | ::Nil"}],"visibility":"Public","body":"_ = allocate\n_.initialize(name, element, formal_charge, explicit_hydrogens)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/chem/templates/spec_parser.cr","line_number":2,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@name.clone, @element.clone, @formal_charge.clone, @explicit_hydrogens.clone)"}},{"html_id":"copy_with(name_name=@name,element_element=@element,formal_charge_formal_charge=@formal_charge,explicit_hydrogens_explicit_hydrogens=@explicit_hydrogens)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_name","default_value":"@name","external_name":"name","restriction":""},{"name":"_element","default_value":"@element","external_name":"element","restriction":""},{"name":"_formal_charge","default_value":"@formal_charge","external_name":"formal_charge","restriction":""},{"name":"_explicit_hydrogens","default_value":"@explicit_hydrogens","external_name":"explicit_hydrogens","restriction":""}],"args_string":"(name _name = @name, element _element = @element, formal_charge _formal_charge = @formal_charge, explicit_hydrogens _explicit_hydrogens = @explicit_hydrogens)","args_html":"(name _name = @name, element _element = @element, formal_charge _formal_charge = @formal_charge, explicit_hydrogens _explicit_hydrogens = @explicit_hydrogens)","location":{"filename":"src/chem/templates/spec_parser.cr","line_number":2,"url":null},"def":{"name":"copy_with","args":[{"name":"_name","default_value":"@name","external_name":"name","restriction":""},{"name":"_element","default_value":"@element","external_name":"element","restriction":""},{"name":"_formal_charge","default_value":"@formal_charge","external_name":"formal_charge","restriction":""},{"name":"_explicit_hydrogens","default_value":"@explicit_hydrogens","external_name":"explicit_hydrogens","restriction":""}],"visibility":"Public","body":"self.class.new(_name, _element, _formal_charge, _explicit_hydrogens)"}},{"html_id":"element:Element-instance-method","name":"element","abstract":false,"def":{"name":"element","return_type":"Element","visibility":"Public","body":"@element"}},{"html_id":"explicit_hydrogens:Int32|Nil-instance-method","name":"explicit_hydrogens","abstract":false,"def":{"name":"explicit_hydrogens","return_type":"Int32 | ::Nil","visibility":"Public","body":"@explicit_hydrogens"}},{"html_id":"formal_charge:Int32-instance-method","name":"formal_charge","abstract":false,"def":{"name":"formal_charge","return_type":"Int32","visibility":"Public","body":"@formal_charge"}},{"html_id":"name:String-instance-method","name":"name","abstract":false,"def":{"name":"name","return_type":"String","visibility":"Public","body":"@name"}}]},{"html_id":"chem.cr/Chem/Templates/SpecParser/BondRecord","path":"Chem/Templates/SpecParser/BondRecord.html","kind":"struct","full_name":"Chem::Templates::SpecParser::BondRecord","name":"BondRecord","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/templates/spec_parser.cr","line_number":6,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Templates/SpecParser","kind":"class","full_name":"Chem::Templates::SpecParser","name":"SpecParser"},"constructors":[{"html_id":"new(lhs:String,rhs:String,order:BondOrder)-class-method","name":"new","abstract":false,"args":[{"name":"lhs","external_name":"lhs","restriction":"String"},{"name":"rhs","external_name":"rhs","restriction":"String"},{"name":"order","external_name":"order","restriction":"BondOrder"}],"args_string":"(lhs : String, rhs : String, order : BondOrder)","args_html":"(lhs : String, rhs : String, order : <a href=\"../../../Chem/BondOrder.html\">BondOrder</a>)","location":{"filename":"src/chem/templates/spec_parser.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"lhs","external_name":"lhs","restriction":"String"},{"name":"rhs","external_name":"rhs","restriction":"String"},{"name":"order","external_name":"order","restriction":"BondOrder"}],"visibility":"Public","body":"_ = allocate\n_.initialize(lhs, rhs, order)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/chem/templates/spec_parser.cr","line_number":6,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@lhs.clone, @rhs.clone, @order.clone)"}},{"html_id":"copy_with(lhs_lhs=@lhs,rhs_rhs=@rhs,order_order=@order)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_lhs","default_value":"@lhs","external_name":"lhs","restriction":""},{"name":"_rhs","default_value":"@rhs","external_name":"rhs","restriction":""},{"name":"_order","default_value":"@order","external_name":"order","restriction":""}],"args_string":"(lhs _lhs = @lhs, rhs _rhs = @rhs, order _order = @order)","args_html":"(lhs _lhs = @lhs, rhs _rhs = @rhs, order _order = @order)","location":{"filename":"src/chem/templates/spec_parser.cr","line_number":6,"url":null},"def":{"name":"copy_with","args":[{"name":"_lhs","default_value":"@lhs","external_name":"lhs","restriction":""},{"name":"_rhs","default_value":"@rhs","external_name":"rhs","restriction":""},{"name":"_order","default_value":"@order","external_name":"order","restriction":""}],"visibility":"Public","body":"self.class.new(_lhs, _rhs, _order)"}},{"html_id":"lhs:String-instance-method","name":"lhs","abstract":false,"def":{"name":"lhs","return_type":"String","visibility":"Public","body":"@lhs"}},{"html_id":"order:BondOrder-instance-method","name":"order","abstract":false,"def":{"name":"order","return_type":"BondOrder","visibility":"Public","body":"@order"}},{"html_id":"rhs:String-instance-method","name":"rhs","abstract":false,"def":{"name":"rhs","return_type":"String","visibility":"Public","body":"@rhs"}}]},{"html_id":"chem.cr/Chem/Templates/SpecParser/ImplicitBondRecord","path":"Chem/Templates/SpecParser/ImplicitBondRecord.html","kind":"struct","full_name":"Chem::Templates::SpecParser::ImplicitBondRecord","name":"ImplicitBondRecord","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/templates/spec_parser.cr","line_number":7,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Templates/SpecParser","kind":"class","full_name":"Chem::Templates::SpecParser","name":"SpecParser"},"constructors":[{"html_id":"new(lhs:String,rhs:Element,order:BondOrder)-class-method","name":"new","abstract":false,"args":[{"name":"lhs","external_name":"lhs","restriction":"String"},{"name":"rhs","external_name":"rhs","restriction":"Element"},{"name":"order","external_name":"order","restriction":"BondOrder"}],"args_string":"(lhs : String, rhs : Element, order : BondOrder)","args_html":"(lhs : String, rhs : <a href=\"../../../Chem/Element.html\">Element</a>, order : <a href=\"../../../Chem/BondOrder.html\">BondOrder</a>)","location":{"filename":"src/chem/templates/spec_parser.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"lhs","external_name":"lhs","restriction":"String"},{"name":"rhs","external_name":"rhs","restriction":"Element"},{"name":"order","external_name":"order","restriction":"BondOrder"}],"visibility":"Public","body":"_ = allocate\n_.initialize(lhs, rhs, order)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"clone-instance-method","name":"clone","abstract":false,"location":{"filename":"src/chem/templates/spec_parser.cr","line_number":7,"url":null},"def":{"name":"clone","visibility":"Public","body":"self.class.new(@lhs.clone, @rhs.clone, @order.clone)"}},{"html_id":"copy_with(lhs_lhs=@lhs,rhs_rhs=@rhs,order_order=@order)-instance-method","name":"copy_with","abstract":false,"args":[{"name":"_lhs","default_value":"@lhs","external_name":"lhs","restriction":""},{"name":"_rhs","default_value":"@rhs","external_name":"rhs","restriction":""},{"name":"_order","default_value":"@order","external_name":"order","restriction":""}],"args_string":"(lhs _lhs = @lhs, rhs _rhs = @rhs, order _order = @order)","args_html":"(lhs _lhs = @lhs, rhs _rhs = @rhs, order _order = @order)","location":{"filename":"src/chem/templates/spec_parser.cr","line_number":7,"url":null},"def":{"name":"copy_with","args":[{"name":"_lhs","default_value":"@lhs","external_name":"lhs","restriction":""},{"name":"_rhs","default_value":"@rhs","external_name":"rhs","restriction":""},{"name":"_order","default_value":"@order","external_name":"order","restriction":""}],"visibility":"Public","body":"self.class.new(_lhs, _rhs, _order)"}},{"html_id":"lhs:String-instance-method","name":"lhs","abstract":false,"def":{"name":"lhs","return_type":"String","visibility":"Public","body":"@lhs"}},{"html_id":"order:BondOrder-instance-method","name":"order","abstract":false,"def":{"name":"order","return_type":"BondOrder","visibility":"Public","body":"@order"}},{"html_id":"rhs:Element-instance-method","name":"rhs","abstract":false,"def":{"name":"rhs","return_type":"Element","visibility":"Public","body":"@rhs"}}]}]},{"html_id":"chem.cr/Chem/Templates/Ter","path":"Chem/Templates/Ter.html","kind":"class","full_name":"Chem::Templates::Ter","name":"Ter","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/templates/ter.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/Templates","kind":"module","full_name":"Chem::Templates","name":"Templates"},"constructors":[{"html_id":"build(&):self-class-method","name":"build","abstract":false,"location":{"filename":"src/chem/templates/ter.cr","line_number":30,"url":null},"def":{"name":"build","yields":1,"block_arity":1,"return_type":"self","visibility":"Public","body":"builder = Builder.new\nwith builder yield builder\nres_t = builder.build\nnew(res_t.names, res_t.type, res_t.description, res_t.atoms.to_a, res_t.bonds.to_a, res_t.root.name)\n"}},{"html_id":"new(names:Array(String),type:ResidueType,description:String|Nil,atoms:Array(Atom),bonds:Array(Bond),rootroot_name:String)-class-method","name":"new","abstract":false,"args":[{"name":"names","external_name":"names","restriction":"Array(String)"},{"name":"type","external_name":"type","restriction":"ResidueType"},{"name":"description","external_name":"description","restriction":"String | ::Nil"},{"name":"atoms","external_name":"atoms","restriction":"Array(Atom)"},{"name":"bonds","external_name":"bonds","restriction":"Array(Bond)"},{"name":"root_name","external_name":"root","restriction":"String"}],"args_string":"(names : Array(String), type : ResidueType, description : String | Nil, atoms : Array(Atom), bonds : Array(Bond), root root_name : String)","args_html":"(names : <a href=\"../../Array.html\">Array</a>(String), type : <a href=\"../../Chem/ResidueType.html\">ResidueType</a>, description : String | Nil, atoms : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Templates/Atom.html\">Atom</a>), bonds : <a href=\"../../Array.html\">Array</a>(<a href=\"../../Chem/Templates/Bond.html\">Bond</a>), root root_name : String)","location":{"filename":"src/chem/templates/ter.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"names","external_name":"names","restriction":"Array(String)"},{"name":"type","external_name":"type","restriction":"ResidueType"},{"name":"description","external_name":"description","restriction":"String | ::Nil"},{"name":"atoms","external_name":"atoms","restriction":"Array(Atom)"},{"name":"bonds","external_name":"bonds","restriction":"Array(Bond)"},{"name":"root_name","external_name":"root","restriction":"String"}],"visibility":"Public","body":"_ = allocate\n_.initialize(names, type, description, atoms, bonds, root_name)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"html_id":"[](name:String):Atom-instance-method","name":"[]","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom","args_html":"(name : String) : <a href=\"../../Chem/Templates/Atom.html\">Atom</a>","location":{"filename":"src/chem/templates/ter.cr","line_number":39,"url":null},"def":{"name":"[]","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Atom","visibility":"Public","body":"self[name]? || (unknown_atom(name))"}},{"html_id":"[]?(name:String):Atom|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"name","external_name":"name","restriction":"String"}],"args_string":"(name : String) : Atom | Nil","args_html":"(name : String) : <a href=\"../../Chem/Templates/Atom.html\">Atom</a> | Nil","location":{"filename":"src/chem/templates/ter.cr","line_number":43,"url":null},"def":{"name":"[]?","args":[{"name":"name","external_name":"name","restriction":"String"}],"return_type":"Atom | ::Nil","visibility":"Public","body":"@atom_table[name]?"}},{"html_id":"atoms:Array::View(Atom)-instance-method","name":"atoms","abstract":false,"location":{"filename":"src/chem/templates/ter.cr","line_number":47,"url":null},"def":{"name":"atoms","return_type":"Array::View(Atom)","visibility":"Public","body":"@atoms.view"}},{"html_id":"bonds:Array::View(Bond)-instance-method","name":"bonds","abstract":false,"location":{"filename":"src/chem/templates/ter.cr","line_number":51,"url":null},"def":{"name":"bonds","return_type":"Array::View(Bond)","visibility":"Public","body":"@bonds.view"}},{"html_id":"description:String|Nil-instance-method","name":"description","abstract":false,"location":{"filename":"src/chem/templates/ter.cr","line_number":8,"url":null},"def":{"name":"description","return_type":"String | ::Nil","visibility":"Public","body":"@description"}},{"html_id":"name:String-instance-method","name":"name","doc":"Returns the designated residue name.","summary":"<p>Returns the designated residue name.</p>","abstract":false,"location":{"filename":"src/chem/templates/ter.cr","line_number":56,"url":null},"def":{"name":"name","return_type":"String","visibility":"Public","body":"@names.first"}},{"html_id":"names:Array(String)-instance-method","name":"names","abstract":false,"location":{"filename":"src/chem/templates/ter.cr","line_number":6,"url":null},"def":{"name":"names","return_type":"Array(String)","visibility":"Public","body":"@names"}},{"html_id":"root:Atom-instance-method","name":"root","abstract":false,"location":{"filename":"src/chem/templates/ter.cr","line_number":9,"url":null},"def":{"name":"root","return_type":"Atom","visibility":"Public","body":"@root"}},{"html_id":"to_s(io:IO):Nil-instance-method","name":"to_s","doc":"Appends a short String representation of this object\nwhich includes its class name and its object address.\n\n```\nclass Person\n  def initialize(@name : String, @age : Int32)\n  end\nend\n\nPerson.new(\"John\", 32).to_s # => #<Person:0x10a199f20>\n```","summary":"<p>Appends a short String representation of this object which includes its class name and its object address.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"}],"args_string":"(io : IO) : Nil","args_html":"(io : IO) : Nil","location":{"filename":"src/chem/templates/ter.cr","line_number":60,"url":null},"def":{"name":"to_s","args":[{"name":"io","external_name":"io","restriction":"IO"}],"return_type":"Nil","visibility":"Public","body":"(((io << '<') << ({{ (@type.name.split(\"::\")).last }})) << ' ') << name\nif @type.other?\nelse\n  (io << ' ') << @type.to_s.downcase\nend\nio << '>'\n"}},{"html_id":"type:ResidueType-instance-method","name":"type","abstract":false,"location":{"filename":"src/chem/templates/ter.cr","line_number":7,"url":null},"def":{"name":"type","return_type":"ResidueType","visibility":"Public","body":"@type"}}]}]},{"html_id":"chem.cr/Chem/Topology","path":"Chem/Topology.html","kind":"class","full_name":"Chem::Topology","name":"Topology","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/topology.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"MAX_CHAINS","name":"MAX_CHAINS","value":"62"}],"included_modules":[{"html_id":"chem.cr/Chem/AtomCollection","kind":"module","full_name":"Chem::AtomCollection","name":"AtomCollection"},{"html_id":"chem.cr/Chem/ChainCollection","kind":"module","full_name":"Chem::ChainCollection","name":"ChainCollection"},{"html_id":"chem.cr/Chem/ResidueCollection","kind":"module","full_name":"Chem::ResidueCollection","name":"ResidueCollection"}],"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"class_methods":[{"html_id":"guess_element(atom_name:String):Element-class-method","name":"guess_element","doc":"Returns the element of an atom based on its name. Raises `Error` if\nthe element could not be determined. Refer to `guess_element?` for\ndetails.","summary":"<p>Returns the element of an atom based on its name.</p>","abstract":false,"args":[{"name":"atom_name","external_name":"atom_name","restriction":"String"}],"args_string":"(atom_name : String) : Element","args_html":"(atom_name : String) : <a href=\"../Chem/Element.html\">Element</a>","location":{"filename":"src/chem/topology.cr","line_number":368,"url":null},"def":{"name":"guess_element","args":[{"name":"atom_name","external_name":"atom_name","restriction":"String"}],"return_type":"Element","visibility":"Public","body":"(guess_element?(atom_name)) || (raise(Error.new(\"Could not guess element of #{atom_name}\")))"}},{"html_id":"guess_element?(atom_name:String):Element|Nil-class-method","name":"guess_element?","doc":"Returns the element of an atom based on its name if possible, else\n`nil`.\n\nThis is a naive approach, where the first letter of *atom_name* is\ntested first to get the element, then the name with trailing digits\nstripped.","summary":"<p>Returns the element of an atom based on its name if possible, else <code>nil</code>.</p>","abstract":false,"args":[{"name":"atom_name","external_name":"atom_name","restriction":"String"}],"args_string":"(atom_name : String) : Element | Nil","args_html":"(atom_name : String) : <a href=\"../Chem/Element.html\">Element</a> | Nil","location":{"filename":"src/chem/topology.cr","line_number":378,"url":null},"def":{"name":"guess_element?","args":[{"name":"atom_name","external_name":"atom_name","restriction":"String"}],"return_type":"Element | ::Nil","visibility":"Public","body":"atom_name = (atom_name.lstrip(\"123456789\")).capitalize\nPeriodicTable[atom_name[0]]? || PeriodicTable[atom_name]?\n"}}],"instance_methods":[{"html_id":"[](chain_id:Char):Chain-instance-method","name":"[]","abstract":false,"args":[{"name":"chain_id","external_name":"chain_id","restriction":"Char"}],"args_string":"(chain_id : Char) : Chain","args_html":"(chain_id : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Chain.html\">Chain</a>","location":{"filename":"src/chem/topology.cr","line_number":25,"url":null},"def":{"name":"[]","args":[{"name":"chain_id","external_name":"chain_id","restriction":"Char"}],"return_type":"Chain","visibility":"Public","body":"self[chain_id]? || (raise(KeyError.new))"}},{"html_id":"[]?(chain_id:Char):Chain|Nil-instance-method","name":"[]?","abstract":false,"args":[{"name":"chain_id","external_name":"chain_id","restriction":"Char"}],"args_string":"(chain_id : Char) : Chain | Nil","args_html":"(chain_id : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Chain.html\">Chain</a> | Nil","location":{"filename":"src/chem/topology.cr","line_number":29,"url":null},"def":{"name":"[]?","args":[{"name":"chain_id","external_name":"chain_id","restriction":"Char"}],"return_type":"Chain | ::Nil","visibility":"Public","body":"@chain_table[chain_id]?"}},{"html_id":"angles:Array::View(Angle)-instance-method","name":"angles","doc":"Returns the angles in the topology. See `Angle` for definition.","summary":"<p>Returns the angles in the topology.</p>","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":40,"url":null},"def":{"name":"angles","return_type":"Array::View(Angle)","visibility":"Public","body":"if @angles.empty?\n  guess_angles\nend\n@angles.view\n"}},{"html_id":"angles=(angles:Array(Chem::Angle))-instance-method","name":"angles=","doc":"Angles in the topology. See `Angle` for definition.","summary":"<p>Angles in the topology.</p>","abstract":false,"args":[{"name":"angles","external_name":"angles","restriction":"::Array(::Chem::Angle)"}],"args_string":"(angles : Array(Chem::Angle))","args_html":"(angles : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Angle.html\">Chem::Angle</a>))","location":{"filename":"src/chem/topology.cr","line_number":12,"url":null},"def":{"name":"angles=","args":[{"name":"angles","external_name":"angles","restriction":"::Array(::Chem::Angle)"}],"visibility":"Public","body":"@angles = angles"}},{"html_id":"apply_templates:Nil-instance-method","name":"apply_templates","doc":"Assign bonds, formal charges, and residue's type from known residue\ntypes.","summary":"<p>Assign bonds, formal charges, and residue's type from known residue types.</p>","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":47,"url":null},"def":{"name":"apply_templates","return_type":"Nil","visibility":"Public","body":"prev_res = nil\neach_residue do |residue|\n  if template = residue.template\n    residue.type = template.type\n    residue.each_atom do |atom|\n      if atom_t = template[atom.name]?\n        atom.formal_charge = atom_t.formal_charge\n      end\n    end\n    template.bonds.each do |bond_t|\n      if ((lhs = residue[bond_t.atoms[0]]?) && (rhs = residue[bond_t.atoms[1]]?)) && (lhs.within_covalent_distance?(rhs))\n        lhs.bonds.add(rhs, bond_t.order)\n      end\n    end\n    if (((prev_res && (bond_t = template.link_bond)) && (lhs = prev_res[bond_t.atoms[0]]?)) && (rhs = residue[bond_t.atoms[1]]?)) && (lhs.within_covalent_distance?(rhs))\n      lhs.bonds.add(rhs, bond_t.order)\n    end\n  end\n  prev_res = residue\nend\n"}},{"html_id":"bonds:Array(Bond)-instance-method","name":"bonds","doc":"Returns the bonds between all atoms.","summary":"<p>Returns the bonds between all atoms.</p>","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":79,"url":null},"def":{"name":"bonds","return_type":"Array(Bond)","visibility":"Public","body":"bonds = Set(Bond).new\neach_atom do |atom|\n  atoms.bonds.each do |bond|\n    bonds << bond\n  end\nend\nbonds.to_a\n"}},{"html_id":"clear:self-instance-method","name":"clear","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":90,"url":null},"def":{"name":"clear","return_type":"self","visibility":"Public","body":"@chain_table.clear\n@chains.clear\nself\n"}},{"html_id":"clone:self-instance-method","name":"clone","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":96,"url":null},"def":{"name":"clone","return_type":"self","visibility":"Public","body":"top = Topology.new\n@chains.each(&.copy_to(top))\nbonds.each do |bond|\n  a, b = bond.atoms\n  a = top.dig(a.chain.id, a.residue.number, a.residue.insertion_code, a.name)\n  b = top.dig(b.chain.id, b.residue.number, b.residue.insertion_code, b.name)\n  a.bonds.add(b, order: bond.order)\nend\ntop\n"}},{"html_id":"delete(ch:Chain):Chain|Nil-instance-method","name":"delete","abstract":false,"args":[{"name":"ch","external_name":"ch","restriction":"Chain"}],"args_string":"(ch : Chain) : Chain | Nil","args_html":"(ch : <a href=\"../Chem/Chain.html\">Chain</a>) : <a href=\"../Chem/Chain.html\">Chain</a> | Nil","location":{"filename":"src/chem/topology.cr","line_number":109,"url":null},"def":{"name":"delete","args":[{"name":"ch","external_name":"ch","restriction":"Chain"}],"return_type":"Chain | ::Nil","visibility":"Public","body":"ch = @chains.delete(ch)\nif ch && (@chain_table[ch.id]?.same?(ch))\n  @chain_table.delete(ch.id)\nend\nch\n"}},{"html_id":"dig(id:Char):Chain-instance-method","name":"dig","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Char"}],"args_string":"(id : Char) : Chain","args_html":"(id : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Chain.html\">Chain</a>","location":{"filename":"src/chem/topology.cr","line_number":115,"url":null},"def":{"name":"dig","args":[{"name":"id","external_name":"id","restriction":"Char"}],"return_type":"Chain","visibility":"Public","body":"self[id]"}},{"html_id":"dig(id:Char,*subindexes)-instance-method","name":"dig","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Char"},{"name":"subindexes","external_name":"subindexes","restriction":""}],"args_string":"(id : Char, *subindexes)","args_html":"(id : <a href=\"../Char.html\">Char</a>, *subindexes)","location":{"filename":"src/chem/topology.cr","line_number":119,"url":null},"def":{"name":"dig","args":[{"name":"id","external_name":"id","restriction":"Char"},{"name":"subindexes","external_name":"subindexes","restriction":""}],"splat_index":1,"visibility":"Public","body":"self[id].dig(*subindexes)"}},{"html_id":"dig?(id:Char):Chain|Nil-instance-method","name":"dig?","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Char"}],"args_string":"(id : Char) : Chain | Nil","args_html":"(id : <a href=\"../Char.html\">Char</a>) : <a href=\"../Chem/Chain.html\">Chain</a> | Nil","location":{"filename":"src/chem/topology.cr","line_number":123,"url":null},"def":{"name":"dig?","args":[{"name":"id","external_name":"id","restriction":"Char"}],"return_type":"Chain | ::Nil","visibility":"Public","body":"self[id]?"}},{"html_id":"dig?(id:Char,*subindexes)-instance-method","name":"dig?","abstract":false,"args":[{"name":"id","external_name":"id","restriction":"Char"},{"name":"subindexes","external_name":"subindexes","restriction":""}],"args_string":"(id : Char, *subindexes)","args_html":"(id : <a href=\"../Char.html\">Char</a>, *subindexes)","location":{"filename":"src/chem/topology.cr","line_number":127,"url":null},"def":{"name":"dig?","args":[{"name":"id","external_name":"id","restriction":"Char"},{"name":"subindexes","external_name":"subindexes","restriction":""}],"splat_index":1,"visibility":"Public","body":"if chain = self[id]?\n  chain.dig?(*subindexes)\nend"}},{"html_id":"dihedrals:Array::View(Dihedral)-instance-method","name":"dihedrals","doc":"Returns the dihedral angles in the topology. See `Dihedral` for\ndefinition.","summary":"<p>Returns the dihedral angles in the topology.</p>","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":135,"url":null},"def":{"name":"dihedrals","return_type":"Array::View(Dihedral)","visibility":"Public","body":"if @dihedrals.empty?\n  guess_dihedrals\nend\n@dihedrals.view\n"}},{"html_id":"dihedrals=(dihedrals:Array(Chem::Dihedral))-instance-method","name":"dihedrals=","doc":"Dihedral angles in the topology. See `Dihedral` for definition.","summary":"<p>Dihedral angles in the topology.</p>","abstract":false,"args":[{"name":"dihedrals","external_name":"dihedrals","restriction":"::Array(::Chem::Dihedral)"}],"args_string":"(dihedrals : Array(Chem::Dihedral))","args_html":"(dihedrals : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Dihedral.html\">Chem::Dihedral</a>))","location":{"filename":"src/chem/topology.cr","line_number":14,"url":null},"def":{"name":"dihedrals=","args":[{"name":"dihedrals","external_name":"dihedrals","restriction":"::Array(::Chem::Dihedral)"}],"visibility":"Public","body":"@dihedrals = dihedrals"}},{"html_id":"each_atom:Iterator(Atom)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":140,"url":null},"def":{"name":"each_atom","return_type":"Iterator(Atom)","visibility":"Public","body":"iterators = [] of Iterator(Atom)\n@chains.each do |chain|\n  chain.each_residue do |residue|\n    iterators << residue.each_atom\n  end\nend\nIterator.chain(iterators)\n"}},{"html_id":"each_atom(&block:Atom->)-instance-method","name":"each_atom","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":150,"url":null},"def":{"name":"each_atom","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Atom ->)"},"visibility":"Public","body":"@chains.each do |chain|\n  chain.each_atom do |atom|\n    yield atom\n  end\nend"}},{"html_id":"each_chain:Iterator(Chain)-instance-method","name":"each_chain","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":158,"url":null},"def":{"name":"each_chain","return_type":"Iterator(Chain)","visibility":"Public","body":"@chains.each"}},{"html_id":"each_chain(&block:Chain->)-instance-method","name":"each_chain","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":162,"url":null},"def":{"name":"each_chain","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Chain ->)"},"visibility":"Public","body":"@chains.each do |chain|\n  yield chain\nend"}},{"html_id":"each_residue:Iterator(Residue)-instance-method","name":"each_residue","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":168,"url":null},"def":{"name":"each_residue","return_type":"Iterator(Residue)","visibility":"Public","body":"Iterator.chain(@chains.each.map(&.each_residue).to_a)"}},{"html_id":"each_residue(&block:Residue->)-instance-method","name":"each_residue","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":172,"url":null},"def":{"name":"each_residue","yields":1,"block_arity":1,"block_arg":{"name":"block","external_name":"block","restriction":"(Residue ->)"},"visibility":"Public","body":"@chains.each do |chain|\n  chain.each_residue do |residue|\n    yield residue\n  end\nend"}},{"html_id":"guess_angles:Nil-instance-method","name":"guess_angles","doc":"Determines the angles based on connectivity. See `Angle` for\ndefinition.\n\nNOTE: It deletes existing angles.","summary":"<p>Determines the angles based on connectivity.</p>","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":184,"url":null},"def":{"name":"guess_angles","return_type":"Nil","visibility":"Public","body":"@angles.clear\neach_atom do |a2|\n  a2.bonded_atoms.each_combination(2, reuse: true) do |__arg2|\n    a1 = __arg2[0]\n    a3 = __arg2[1]\n    @angles << (Angle.new(a1, a2, a3))\n  end\nend\n"}},{"html_id":"guess_bonds(perceive_order:Bool=true):Nil-instance-method","name":"guess_bonds","doc":"Determines the bonds from connectivity and geometry.\n\nBonds are added when the pairwise distances are within the\ncorresponding covalent distances (see\n`PeriodicTable.covalent_distance`). Bonds are added until the atoms'\nvalences are fulfilled. If extraneous bonds are found (beyond the\nmaximum number of bonds, see `Element#max_bonds`), the longest ones\nwill be removed.\n\nBonds to atoms that could potential be as cations (K, Na, etc.) are\ndisfavored such that they won't be added if the neighbor is\nover-valence or the bond can be substituted by increasing the bond\norder of another bond of the neighbor (e.g., *C-O + K* is preferred\nover *C-O-K* since *C-O* can be converted to *C=O*).\n\nBond orders are assigned based on the following procedure. First,\natom hybridization is guessed from the geometry. Then, the bond\norders are determined such that both atoms must have the same\nhybridization to assign a double (sp2) or triple (sp) bond. Bond\norder is only changed if the bonded atoms have missing valence. If\nmultiple bonded atoms fulfill the requirements for increasing the\nbond order, the atom with the most missing valence or that is\nclosest to the current atom is selected first. This procedure is\nloosely based on OpenBabel's `PerceiveBondOrders` function.","summary":"<p>Determines the bonds from connectivity and geometry.</p>","abstract":false,"args":[{"name":"perceive_order","default_value":"true","external_name":"perceive_order","restriction":"Bool"}],"args_string":"(perceive_order : Bool = true) : Nil","args_html":"(perceive_order : Bool = <span class=\"n\">true</span>) : Nil","location":{"filename":"src/chem/topology.cr","line_number":217,"url":null},"def":{"name":"guess_bonds","args":[{"name":"perceive_order","default_value":"true","external_name":"perceive_order","restriction":"Bool"}],"return_type":"Nil","visibility":"Public","body":"if (atoms = self.atoms).empty?\n  return\nend\nbond_table = Hash(Atom, Array(Atom)).new\ndcov2_map = Hash(::Tuple(Element, Element), Float64).new\nelements = Set(Element).new\nlargest_atom = atoms.first\ncation_atoms = [] of Atom\natoms.each do |atom|\n  bond_table[atom] = Array(Atom).new(atom.element.max_bonds)\n  atom.each_bonded_atom do |other|\n    bond_table[atom] << other\n  end\n  if atom.covalent_radius > largest_atom.covalent_radius\n    largest_atom = atom\n  end\n  if atom.element.in?(elements)\n  else\n    elements << atom.element\n    elements.each do |ele|\n      dcov2 = (PeriodicTable.covalent_distance(atom.element, ele)) ** 2\n      dcov2_map[{atom.element, ele}] = dcov2_map[{ele, atom.element}] = dcov2\n    end\n  end\n  if atom.max_valence.nil? || (atom.heavy? && atom.valence_electrons < 4)\n    cation_atoms << atom\n  end\nend\nkdtree = Spatial::KDTree.new(atoms.map(&.coords), @structure.cell?)\natoms.each do |atom|\n  cutoff = Math.sqrt(dcov2_map[{atom.element, largest_atom.element}])\n  kdtree.each_neighbor(atom.coords, within: cutoff) do |index, dis2|\n    other = atoms.unsafe_fetch(index)\n    if ((atom.serial < other.serial && other.element.max_bonds > 0) && (!(other.in?(bond_table[atom])))) && (0.16 <= dis2 && dis2 <= dcov2_map[{atom.element, other.element}])\n      bond_table[atom] << other\n      bond_table[other] << atom\n    end\n  end\nend\ncation_atoms.each do |atom|\n  bond_table[atom].reject! do |other|\n    neighbors = bond_table[other]\n    over_valence = neighbors.size > (other.max_valence || Int32::MAX)\n    can_increase_bond_order = neighbors.any? do |n|\n      bond_table[n].size < (n.max_valence || Int32::MAX)\n    end\n    if over_valence || can_increase_bond_order\n      bond_table[other].reject!(&.==(atom))\n    end\n    over_valence || can_increase_bond_order\n  end\nend\nbond_table.each do |atom, bonded_atoms|\n  max_bonds = atom.element.max_bonds\n  if bonded_atoms.size > max_bonds\n    if cell = @structure.cell?\n      bonded_atoms.sort_by! do |other|\n        Spatial.distance2(cell, atom, other)\n      end\n    else\n      bonded_atoms.sort_by! do |other|\n        Spatial.distance2(atom, other)\n      end\n    end\n    bonded_atoms.each(within: max_bonds..) do |other|\n      bond_table[other].delete(atom)\n    end\n    bonded_atoms.truncate(0, max_bonds)\n  end\nend\nbond_table.each do |atom, bonds|\n  bonds.each do |other|\n    if atom.serial < other.serial\n      atom.bonds.add(other)\n    end\n  end\nend\nif perceive_order\n  hybridization_map = guess_hybridization\n  atoms.select do |atom|\n    atom.valence < (atom.max_valence || Int32::MAX) && hybridization_map[atom]?\n  end.to_a.sort_by! do |atom|\n    {-atom.degree, -atom.missing_valence, atom.serial}\n  end.each do |atom|\n    if atom.valence < (atom.max_valence || Int32::MAX)\n    else\n      next\n    end\n    missing_valence = atom.missing_valence\n    atom.bonded_atoms.select! do |other|\n      (hybridization_map[other]? == hybridization_map[atom]?) && other.missing_valence > 0\n    end.sort_by! do |other|\n      {-other.missing_valence, Spatial.distance2(atom, other)}\n    end.each do |other|\n      case hybridization_map[other]\n      when 2\n        atom.bonds[other].order = :double\n        missing_valence = missing_valence - 1\n      when 1\n        atom.bonds[other].order = :triple\n        missing_valence = missing_valence - 2\n      end\n      if missing_valence == 0\n        break\n      end\n    end\n  end\nend\n"}},{"html_id":"guess_dihedrals:Nil-instance-method","name":"guess_dihedrals","doc":"Determines the dihedral angles based on connectivity. See `Dihedral`\nfor definition.\n\nNOTE: It deletes existing dihedral angles.","summary":"<p>Determines the dihedral angles based on connectivity.</p>","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":346,"url":null},"def":{"name":"guess_dihedrals","return_type":"Nil","visibility":"Public","body":"@dihedrals.clear\ndihedrals = Set(Dihedral).new\nangles.each do |angle|\n  a1, a2, a3 = angle.atoms\n  a1.each_bonded_atom do |a0|\n    if (a0 == a2) || (a0 == a3)\n      next\n    end\n    dihedrals << (Dihedral.new(a0, a1, a2, a3))\n  end\n  a3.each_bonded_atom do |a4|\n    if (a4 == a2) || (a4 == a1)\n      next\n    end\n    dihedrals << (Dihedral.new(a1, a2, a3, a4))\n  end\nend\ndihedrals.each do |dihedral|\n  @dihedrals << dihedral\nend\n"}},{"html_id":"guess_formal_charges:Nil-instance-method","name":"guess_formal_charges","doc":"Sets the formal charges based on the existing bonds.\n\nFor most cases, the formal charge is calculated as\n\n    Nele - Tele + V\n\nwhere *Nele* is the number of valence electrons, *Tele* is the\nnumber of electrons in the full valence shell, and *V* is the\neffective valence, which is equivalent to the sum of the bond\norders. *Tele* is usually 8 following the octet rule, but there are\nsome exceptions (see `Element#target_electrons`).\n\nIf an atom has no bonds, it is considered as a monoatomic ion, where\nthe formal charge is set according to the following rule: if the\nvalence electrons < 4 (cation, e.g., Na+, Mg2+), the formal charge\nis equal to the number of valence electrons, else (anions, e.g.,\nCl-) it is equal to `Nele - Tele`.\n\nWARNING: Elements that have no valence determined such as transition\nmetals are ignored.","summary":"<p>Sets the formal charges based on the existing bonds.</p>","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":403,"url":null},"def":{"name":"guess_formal_charges","return_type":"Nil","visibility":"Public","body":"each_atom do |atom|\n  valence = atom.valence\n  if valence == 0\n    if atom.element.valence_electrons < 4\n      atom.formal_charge = atom.element.valence_electrons\n    else\n      target_electrons = atom.element.target_electrons(valence)\n      atom.formal_charge = atom.element.valence_electrons - target_electrons\n    end\n  else\n    if atom.element.max_valence\n      target_electrons = atom.element.target_electrons(valence)\n      atom.formal_charge = (atom.element.valence_electrons - target_electrons) + valence\n    end\n  end\nend"}},{"html_id":"guess_impropers:Nil-instance-method","name":"guess_impropers","doc":"Determines the improper dihedral angles based on connectivity. See\n`Improper` for definition.\n\nImproper dihedral angles are often used to constraint the planarity\nof certain functional groups of molecules in molecular mechanics\nsimulations, and so not every possible improper dihedral angle is\nrequired. This method lists every possible improper dihedral angle\nfollowing the formal definition, which will probably generate\nextraneous angles.\n\nNOTE: It deletes existing improper dihedral angles.","summary":"<p>Determines the improper dihedral angles based on connectivity.</p>","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":431,"url":null},"def":{"name":"guess_impropers","return_type":"Nil","visibility":"Public","body":"@impropers.clear\nimpropers = Set(Improper).new\nangles.each do |angle|\n  a1, a2, a3 = angle.atoms\n  a2.each_bonded_atom do |a4|\n    if a4.in?(a1, a3)\n    else\n      impropers << (Improper.new(a1, a2, a3, a4))\n    end\n  end\nend\nimpropers.each do |improper|\n  @impropers << improper\nend\n"}},{"html_id":"guess_names:Nil-instance-method","name":"guess_names","doc":"Detects and assigns topology names from known residue templates based on\nbond information.\n\nThe method creates chains and residues according to the detected\nfragments and residue matches. The procedure is as follows. First,\natoms are split into fragments, where each fragment is scanned for\nmatches to known residue templates. Then, fragments are divided into\npolymer (e.g., peptide) and non-polymer (e.g., water) fragments\nbased on the number of residues per fragment. Non-polymer residues\nare grouped together by their type (i.e., ion, solvent, etc.).\nFinally, every polymer fragment and group of non-polymer fragments\nare assigned to a unique chain and residues are created for each\nmatch.\n\nNOTE: Fragments are assigned to a unique chain unless the chain\nlimit (62) is reached, otherwise all residues are assigned to the\nsame chain.\n\nWARNING: Existing chains and residues are invalid after calling this\nmethod so do not cache them.","summary":"<p>Detects and assigns topology names from known residue templates based on bond information.</p>","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":464,"url":null},"def":{"name":"guess_names","return_type":"Nil","visibility":"Public","body":"atoms = self.atoms.to_a\nclear\nmatches, unmatched_atoms = (Templates::Detector.new(atoms)).detect\nchain = Chain.new(self, 'A')\nresid = 0\nmatches.each do |match|\n  residue = Residue.new(chain, (  resid = resid + 1), match.template.name)\n  residue.type = match.template.type\n  match.atom_map.each do |atom_t, atom|\n    atom.name = atom_t.name\n    atom.residue = residue\n  end\nend\nele_index = Hash(Element, Int32).new(default_value: 0)\nunmatched_atoms.fragments.each do |atoms|\n  residue = Residue.new(chain, (  resid = resid + 1), \"UNK\")\n  atoms.each do |atom|\n    atom.name = \"#{atom.element.symbol.upcase}#{    __temp_211 = atom.element\n    ele_index[__temp_211] = ele_index[__temp_211] + 1\n}\"\n    atom.residue = residue\n  end\n  ele_index.clear\nend\nfragments = chain.residue_fragments\npolymers, nonpolymers = fragments.partition do |__arg5|\n  __arg5.size > 1\nend\ngrouped_nonpolymers = nonpolymers.map(&.first).group_by(&.type).values\nif (polymers.size + grouped_nonpolymers.size) <= MAX_CHAINS\n  clear\n  (polymers + grouped_nonpolymers).each do |residues|\n    chain = Chain.new(self, next_chain_id(@chains.last?.try(&.id) || 'A'.pred))\n    residues.each(&.chain = chain)\n  end\nend\nrenumber_residues_by_connectivity(split_chains: false)\nguess_unknown_residue_types\n"}},{"html_id":"guess_unknown_residue_types:Nil-instance-method","name":"guess_unknown_residue_types","doc":"Determines the type of unknown residues based on their neighbors.","summary":"<p>Determines the type of unknown residues based on their neighbors.</p>","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":553,"url":null},"def":{"name":"guess_unknown_residue_types","return_type":"Nil","visibility":"Public","body":"if bond_t = each_residue.compact_map() do |__arg13|\n  __arg13.template.try(&.link_bond)\nend.first?\nelse\n  return\nend\neach_residue do |residue|\n  if residue.template\n    next\n  end\n  types = (residue.bonded_residues(bond_t, forward_only: false, strict: false)).map(&.type).uniq!.reject!(&.other?)\n  residue.type = types.size == 1 ? types[0] : ResidueType::Other\nend\n"}},{"html_id":"impropers:Array::View(Improper)-instance-method","name":"impropers","doc":"Returns the improper dihedral angles in the topology. See `Improper`\nfor definition.","summary":"<p>Returns the improper dihedral angles in the topology.</p>","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":569,"url":null},"def":{"name":"impropers","return_type":"Array::View(Improper)","visibility":"Public","body":"if @impropers.empty?\n  guess_impropers\nend\n@impropers.view\n"}},{"html_id":"impropers=(impropers:Array(Chem::Improper))-instance-method","name":"impropers=","doc":"Improper dihedral angles in the topology. See `Improper` for\ndefinition.","summary":"<p>Improper dihedral angles in the topology.</p>","abstract":false,"args":[{"name":"impropers","external_name":"impropers","restriction":"::Array(::Chem::Improper)"}],"args_string":"(impropers : Array(Chem::Improper))","args_html":"(impropers : <a href=\"../Array.html\">Array</a>(<a href=\"../Chem/Improper.html\">Chem::Improper</a>))","location":{"filename":"src/chem/topology.cr","line_number":17,"url":null},"def":{"name":"impropers=","args":[{"name":"impropers","external_name":"impropers","restriction":"::Array(::Chem::Improper)"}],"visibility":"Public","body":"@impropers = impropers"}},{"html_id":"n_atoms:Int32-instance-method","name":"n_atoms","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":574,"url":null},"def":{"name":"n_atoms","return_type":"Int32","visibility":"Public","body":"@chains.sum(&.n_atoms)"}},{"html_id":"n_chains:Int32-instance-method","name":"n_chains","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":578,"url":null},"def":{"name":"n_chains","return_type":"Int32","visibility":"Public","body":"@chains.size"}},{"html_id":"n_residues:Int32-instance-method","name":"n_residues","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":582,"url":null},"def":{"name":"n_residues","return_type":"Int32","visibility":"Public","body":"@chains.sum(&.n_residues)"}},{"html_id":"renumber_residues_by(&:Residue->_):Nil-instance-method","name":"renumber_residues_by","doc":"Renumber residues per chain based on the order by the output value\nof the block.\n\nNOTE: This won't change the order of the existing chains.","summary":"<p>Renumber residues per chain based on the order by the output value of the block.</p>","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":590,"url":null},"def":{"name":"renumber_residues_by","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(Residue -> _)"},"return_type":"Nil","visibility":"Public","body":"@chains.each do |chain|\n  chain.renumber_residues_by do |residue|\n    yield residue\n  end\nend"}},{"html_id":"renumber_residues_by_connectivity(split_chains:Bool=true):Nil-instance-method","name":"renumber_residues_by_connectivity","doc":"Renumber chain and residues based on bond information.\n\nResidue fragments are assigned to unique chains unless\n*split_chains* is `false`, which keeps existing chains intact.\nResidue ordering is computed based on the link bond if available.\n\nNOTE: existing chains are reused to re-arrang the residues among\nthem, so avoid caching them before calling this.","summary":"<p>Renumber chain and residues based on bond information.</p>","abstract":false,"args":[{"name":"split_chains","default_value":"true","external_name":"split_chains","restriction":"Bool"}],"args_string":"(split_chains : Bool = true) : Nil","args_html":"(split_chains : Bool = <span class=\"n\">true</span>) : Nil","location":{"filename":"src/chem/topology.cr","line_number":606,"url":null},"def":{"name":"renumber_residues_by_connectivity","args":[{"name":"split_chains","default_value":"true","external_name":"split_chains","restriction":"Bool"}],"return_type":"Nil","visibility":"Public","body":"if split_chains\n  id = 'A'.pred\n  residues.residue_fragments.each do |residues|\n    chain = (dig?(id = id.succ)) || (Chain.new(self, id))\n    chain.clear\n    residues.each(&.chain = chain)\n    chain.renumber_residues_by_connectivity\n  end\nelse\n  @chains.each(&.renumber_residues_by_connectivity)\nend"}},{"html_id":"structure:Structure-instance-method","name":"structure","abstract":false,"location":{"filename":"src/chem/topology.cr","line_number":23,"url":null},"def":{"name":"structure","return_type":"Structure","visibility":"Public","body":"@structure"}},{"html_id":"structure=(structure:Structure)-instance-method","name":"structure=","abstract":false,"args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(structure : Structure)","args_html":"(structure : <a href=\"../Chem/Structure.html\">Structure</a>)","location":{"filename":"src/chem/topology.cr","line_number":23,"url":null},"def":{"name":"structure=","args":[{"name":"structure","external_name":"structure","restriction":"Structure"}],"visibility":"Public","body":"@structure = structure"}}]},{"html_id":"chem.cr/Chem/VASP","path":"Chem/VASP.html","kind":"module","full_name":"Chem::VASP","name":"VASP","abstract":false,"locations":[{"filename":"src/chem/formats/vasp/utils.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"types":[{"html_id":"chem.cr/Chem/VASP/Chgcar","path":"Chem/VASP/Chgcar.html","kind":"module","full_name":"Chem::VASP::Chgcar","name":"Chgcar","abstract":false,"locations":[{"filename":"src/chem/formats/vasp/chgcar.cr","line_number":4,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/VASP","kind":"module","full_name":"Chem::VASP","name":"VASP"},"types":[{"html_id":"chem.cr/Chem/VASP/Chgcar/Reader","path":"Chem/VASP/Chgcar/Reader.html","kind":"class","full_name":"Chem::VASP::Chgcar::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/VASP/GridReader","kind":"module","full_name":"Chem::VASP::GridReader","name":"GridReader"},{"html_id":"chem.cr/Chem/FormatReader/Attached","kind":"module","full_name":"Chem::FormatReader::Attached","name":"Attached"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vasp/chgcar.cr","line_number":5,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/Attached","kind":"module","full_name":"Chem::FormatReader::Attached","name":"Attached"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/VASP/GridReader","kind":"module","full_name":"Chem::VASP::GridReader","name":"GridReader"}],"namespace":{"html_id":"chem.cr/Chem/VASP/Chgcar","kind":"module","full_name":"Chem::VASP::Chgcar","name":"Chgcar"},"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/vasp/chgcar.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}]},{"html_id":"chem.cr/Chem/VASP/Chgcar/Writer","path":"Chem/VASP/Chgcar/Writer.html","kind":"class","full_name":"Chem::VASP::Chgcar::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/VASP/GridWriter","kind":"module","full_name":"Chem::VASP::GridWriter","name":"GridWriter"},{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vasp/chgcar.cr","line_number":22,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/Chem/VASP/GridWriter","kind":"module","full_name":"Chem::VASP::GridWriter","name":"GridWriter"}],"namespace":{"html_id":"chem.cr/Chem/VASP/Chgcar","kind":"module","full_name":"Chem::VASP::Chgcar","name":"Chgcar"},"class_methods":[{"html_id":"open(io:IO,structure:Structure,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, structure : Structure, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, structure : <a href=\"../../../Chem/Structure.html\">Structure</a>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, structure, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,structure:Structure,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(path : Path | String, structure : Structure, & : self -> )","args_html":"(path : Path | String, structure : <a href=\"../../../Chem/Structure.html\">Structure</a>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path, structure)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(path:Path|String,structure:Structure):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(path : Path | String, structure : Structure) : self","args_html":"(path : Path | String, structure : <a href=\"../../../Chem/Structure.html\">Structure</a>) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), structure, sync_close: true)"}}]}]},{"html_id":"chem.cr/Chem/VASP/GridReader","path":"Chem/VASP/GridReader.html","kind":"module","full_name":"Chem::VASP::GridReader","name":"GridReader","abstract":false,"locations":[{"filename":"src/chem/formats/vasp/utils.cr","line_number":2,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"chem.cr/Chem/VASP/Chgcar/Reader","kind":"class","full_name":"Chem::VASP::Chgcar::Reader","name":"Reader"},{"html_id":"chem.cr/Chem/VASP/Locpot/Reader","kind":"class","full_name":"Chem::VASP::Locpot::Reader","name":"Reader"}],"namespace":{"html_id":"chem.cr/Chem/VASP","kind":"module","full_name":"Chem::VASP","name":"VASP"},"instance_methods":[{"html_id":"read_attached:Structure-instance-method","name":"read_attached","abstract":false,"location":{"filename":"src/chem/formats/vasp/utils.cr","line_number":3,"url":null},"def":{"name":"read_attached","return_type":"Structure","visibility":"Public","body":"read_header\n@attached || (raise(\"BUG: @attached is nil after reading header\"))\n"}}]},{"html_id":"chem.cr/Chem/VASP/GridWriter","path":"Chem/VASP/GridWriter.html","kind":"module","full_name":"Chem::VASP::GridWriter","name":"GridWriter","abstract":false,"locations":[{"filename":"src/chem/formats/vasp/utils.cr","line_number":41,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"chem.cr/Chem/VASP/Chgcar/Writer","kind":"class","full_name":"Chem::VASP::Chgcar::Writer","name":"Writer"},{"html_id":"chem.cr/Chem/VASP/Locpot/Writer","kind":"class","full_name":"Chem::VASP::Locpot::Writer","name":"Writer"}],"namespace":{"html_id":"chem.cr/Chem/VASP","kind":"module","full_name":"Chem::VASP","name":"VASP"},"constructors":[{"html_id":"new(io:IO,structure:Structure,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, structure : Structure, sync_close : Bool = false)","args_html":"(io : IO, structure : <a href=\"../../Chem/Structure.html\">Structure</a>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/vasp/utils.cr","line_number":44,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, structure, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}]},{"html_id":"chem.cr/Chem/VASP/Locpot","path":"Chem/VASP/Locpot.html","kind":"module","full_name":"Chem::VASP::Locpot","name":"Locpot","abstract":false,"locations":[{"filename":"src/chem/formats/vasp/locpot.cr","line_number":4,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/VASP","kind":"module","full_name":"Chem::VASP","name":"VASP"},"types":[{"html_id":"chem.cr/Chem/VASP/Locpot/Reader","path":"Chem/VASP/Locpot/Reader.html","kind":"class","full_name":"Chem::VASP::Locpot::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/VASP/GridReader","kind":"module","full_name":"Chem::VASP::GridReader","name":"GridReader"},{"html_id":"chem.cr/Chem/FormatReader/Attached","kind":"module","full_name":"Chem::FormatReader::Attached","name":"Attached"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vasp/locpot.cr","line_number":5,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/Attached","kind":"module","full_name":"Chem::FormatReader::Attached","name":"Attached"},{"html_id":"chem.cr/Chem/FormatReader/Headed","kind":"module","full_name":"Chem::FormatReader::Headed","name":"Headed"},{"html_id":"chem.cr/Chem/VASP/GridReader","kind":"module","full_name":"Chem::VASP::GridReader","name":"GridReader"}],"namespace":{"html_id":"chem.cr/Chem/VASP/Locpot","kind":"module","full_name":"Chem::VASP::Locpot","name":"Locpot"},"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/vasp/locpot.cr","line_number":11,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}]},{"html_id":"chem.cr/Chem/VASP/Locpot/Writer","path":"Chem/VASP/Locpot/Writer.html","kind":"class","full_name":"Chem::VASP::Locpot::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/VASP/GridWriter","kind":"module","full_name":"Chem::VASP::GridWriter","name":"GridWriter"},{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vasp/locpot.cr","line_number":20,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/Chem/VASP/GridWriter","kind":"module","full_name":"Chem::VASP::GridWriter","name":"GridWriter"}],"namespace":{"html_id":"chem.cr/Chem/VASP/Locpot","kind":"module","full_name":"Chem::VASP::Locpot","name":"Locpot"},"class_methods":[{"html_id":"open(io:IO,structure:Structure,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, structure : Structure, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, structure : <a href=\"../../../Chem/Structure.html\">Structure</a>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"structure","external_name":"structure","restriction":"Structure"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, structure, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,structure:Structure,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(path : Path | String, structure : Structure, & : self -> )","args_html":"(path : Path | String, structure : <a href=\"../../../Chem/Structure.html\">Structure</a>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path, structure)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(path:Path|String,structure:Structure):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"args_string":"(path : Path | String, structure : Structure) : self","args_html":"(path : Path | String, structure : <a href=\"../../../Chem/Structure.html\">Structure</a>) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"structure","external_name":"structure","restriction":"Structure"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), structure, sync_close: true)"}}]}]},{"html_id":"chem.cr/Chem/VASP/Poscar","path":"Chem/VASP/Poscar.html","kind":"module","full_name":"Chem::VASP::Poscar","name":"Poscar","abstract":false,"locations":[{"filename":"src/chem/formats/vasp/poscar.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem/VASP","kind":"module","full_name":"Chem::VASP","name":"VASP"},"types":[{"html_id":"chem.cr/Chem/VASP/Poscar/Reader","path":"Chem/VASP/Poscar/Reader.html","kind":"class","full_name":"Chem::VASP::Poscar::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vasp/poscar.cr","line_number":3,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"}],"namespace":{"html_id":"chem.cr/Chem/VASP/Poscar","kind":"module","full_name":"Chem::VASP::Poscar","name":"Poscar"},"class_methods":[{"html_id":"open(io:IO,guess_bonds:Bool=false,guess_names:Bool=false,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, guess_bonds : Bool = false, guess_names : Bool = false, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, guess_bonds, guess_names, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,guess_bonds:Bool=false,guess_names:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"args_string":"(path : Path | String, guess_bonds : Bool = false, guess_names : Bool = false, & : self -> )","args_html":"(path : Path | String, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path, guess_bonds, guess_names)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,guess_bonds:Bool=false,guess_names:Bool=false,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, guess_bonds : Bool = false, guess_names : Bool = false, sync_close : Bool = false)","args_html":"(io : IO, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/vasp/poscar.cr","line_number":6,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, guess_bonds, guess_names, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,guess_bonds:Bool=false,guess_names:Bool=false):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"args_string":"(path : Path | String, guess_bonds : Bool = false, guess_names : Bool = false) : self","args_html":"(path : Path | String, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), guess_bonds, guess_names, sync_close: true)"}}]},{"html_id":"chem.cr/Chem/VASP/Poscar/Writer","path":"Chem/VASP/Poscar/Writer.html","kind":"class","full_name":"Chem::VASP::Poscar::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vasp/poscar.cr","line_number":111,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"namespace":{"html_id":"chem.cr/Chem/VASP/Poscar","kind":"module","full_name":"Chem::VASP::Poscar","name":"Poscar"},"class_methods":[{"html_id":"open(io:IO,order:Array(Element)|Array(String)|Nil=nil,fractional:Bool=false,wrap:Bool=false,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"order","default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","default_value":"false","external_name":"wrap","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, order : Array(Element) | Array(String) | Nil = nil, fractional : Bool = false, wrap : Bool = false, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, order : <a href=\"../../../Array.html\">Array</a>(<a href=\"../../../Chem/Element.html\">Element</a>) | <a href=\"../../../Array.html\">Array</a>(String) | Nil = <span class=\"n\">nil</span>, fractional : Bool = <span class=\"n\">false</span>, wrap : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"order","default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","default_value":"false","external_name":"wrap","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, order, fractional, wrap, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,order:Array(Element)|Array(String)|Nil=nil,fractional:Bool=false,wrap:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"order","default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","default_value":"false","external_name":"wrap","restriction":"Bool"}],"args_string":"(path : Path | String, order : Array(Element) | Array(String) | Nil = nil, fractional : Bool = false, wrap : Bool = false, & : self -> )","args_html":"(path : Path | String, order : <a href=\"../../../Array.html\">Array</a>(<a href=\"../../../Chem/Element.html\">Element</a>) | <a href=\"../../../Array.html\">Array</a>(String) | Nil = <span class=\"n\">nil</span>, fractional : Bool = <span class=\"n\">false</span>, wrap : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"order","default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","default_value":"false","external_name":"wrap","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path, order, fractional, wrap)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,order:Array(Element)|Array(String)|Nil=nil,fractional:Bool=false,wrap:Bool=false,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"order","default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","default_value":"false","external_name":"wrap","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, order : Array(Element) | Array(String) | Nil = nil, fractional : Bool = false, wrap : Bool = false, sync_close : Bool = false)","args_html":"(io : IO, order : <a href=\"../../../Array.html\">Array</a>(<a href=\"../../../Chem/Element.html\">Element</a>) | <a href=\"../../../Array.html\">Array</a>(String) | Nil = <span class=\"n\">nil</span>, fractional : Bool = <span class=\"n\">false</span>, wrap : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/vasp/poscar.cr","line_number":116,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"order","default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","default_value":"false","external_name":"wrap","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, order, fractional, wrap, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,order:Array(Element)|Array(String)|Nil=nil,fractional:Bool=false,wrap:Bool=false):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"order","default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","default_value":"false","external_name":"wrap","restriction":"Bool"}],"args_string":"(path : Path | String, order : Array(Element) | Array(String) | Nil = nil, fractional : Bool = false, wrap : Bool = false) : self","args_html":"(path : Path | String, order : <a href=\"../../../Array.html\">Array</a>(<a href=\"../../../Chem/Element.html\">Element</a>) | <a href=\"../../../Array.html\">Array</a>(String) | Nil = <span class=\"n\">nil</span>, fractional : Bool = <span class=\"n\">false</span>, wrap : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"order","default_value":"nil","external_name":"order","restriction":"Array(Element) | Array(String) | Nil"},{"name":"fractional","default_value":"false","external_name":"fractional","restriction":"Bool"},{"name":"wrap","default_value":"false","external_name":"wrap","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), order, fractional, wrap, sync_close: true)"}}]}]}]},{"html_id":"chem.cr/Chem/VMD","path":"Chem/VMD.html","kind":"module","full_name":"Chem::VMD","name":"VMD","abstract":false,"locations":[{"filename":"src/chem/formats/vmd.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"types":[{"html_id":"chem.cr/Chem/VMD/Writer","path":"Chem/VMD/Writer.html","kind":"class","full_name":"Chem::VMD::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/vmd.cr","line_number":3,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"}],"namespace":{"html_id":"chem.cr/Chem/VMD","kind":"module","full_name":"Chem::VMD","name":"VMD"},"class_methods":[{"html_id":"open(io:IO,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String, & : self -> )","args_html":"(path : Path | String, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,sync_close:Bool=false)-class-method","name":"new","doc":"Creates a new object from the given *io*.","summary":"<p>Creates a new object from the given <em>io</em>.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, sync_close : Bool = false)","args_html":"(io : IO, sync_close : Bool = <span class=\"n\">false</span>)","def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"args_string":"(path : Path | String) : self","args_html":"(path : Path | String) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), sync_close: true)"}}]}]},{"html_id":"chem.cr/Chem/XYZ","path":"Chem/XYZ.html","kind":"module","full_name":"Chem::XYZ","name":"XYZ","abstract":false,"locations":[{"filename":"src/chem/formats/xyz.cr","line_number":2,"url":null},{"filename":"src/chem/register_format.cr","line_number":172,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Chem","kind":"module","full_name":"Chem","name":"Chem"},"types":[{"html_id":"chem.cr/Chem/XYZ/Reader","path":"Chem/XYZ/Reader.html","kind":"class","full_name":"Chem::XYZ::Reader","name":"Reader","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"},{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/xyz.cr","line_number":3,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatReader","kind":"module","full_name":"Chem::FormatReader","name":"FormatReader"},{"html_id":"chem.cr/Chem/FormatReader/MultiEntry","kind":"module","full_name":"Chem::FormatReader::MultiEntry","name":"MultiEntry"}],"namespace":{"html_id":"chem.cr/Chem/XYZ","kind":"module","full_name":"Chem::XYZ","name":"XYZ"},"class_methods":[{"html_id":"open(io:IO,guess_bonds:Bool=false,guess_names:Bool=false,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, guess_bonds : Bool = false, guess_names : Bool = false, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, guess_bonds, guess_names, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,guess_bonds:Bool=false,guess_names:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"args_string":"(path : Path | String, guess_bonds : Bool = false, guess_names : Bool = false, & : self -> )","args_html":"(path : Path | String, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path, guess_bonds, guess_names)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(io:IO,guess_bonds:Bool=false,guess_names:Bool=false,sync_close:Bool=false)-class-method","name":"new","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, guess_bonds : Bool = false, guess_names : Bool = false, sync_close : Bool = false)","args_html":"(io : IO, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>, sync_close : Bool = <span class=\"n\">false</span>)","location":{"filename":"src/chem/formats/xyz.cr","line_number":7,"url":null},"def":{"name":"new","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"visibility":"Public","body":"_ = allocate\n_.initialize(io, guess_bonds, guess_names, sync_close)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}},{"html_id":"new(path:Path|String,guess_bonds:Bool=false,guess_names:Bool=false):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"args_string":"(path : Path | String, guess_bonds : Bool = false, guess_names : Bool = false) : self","args_html":"(path : Path | String, guess_bonds : Bool = <span class=\"n\">false</span>, guess_names : Bool = <span class=\"n\">false</span>) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"guess_bonds","default_value":"false","external_name":"guess_bonds","restriction":"Bool"},{"name":"guess_names","default_value":"false","external_name":"guess_names","restriction":"Bool"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), guess_bonds, guess_names, sync_close: true)"}}],"instance_methods":[{"html_id":"skip_entry:Nil-instance-method","name":"skip_entry","doc":"Discards the next entry in the IO without fully parsing it.","summary":"<p>Discards the next entry in the IO without fully parsing it.</p>","abstract":false,"location":{"filename":"src/chem/formats/xyz.cr","line_number":38,"url":null},"def":{"name":"skip_entry","return_type":"Nil","visibility":"Public","body":"if @pull.eof?\n  return\nend\nn_atoms = @pull.next_i\n(n_atoms + 2).times do\n  @pull.next_line\nend\n"}}]},{"html_id":"chem.cr/Chem/XYZ/Writer","path":"Chem/XYZ/Writer.html","kind":"class","full_name":"Chem::XYZ::Writer","name":"Writer","abstract":false,"superclass":{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","kind":"module","full_name":"Chem::FormatWriter::MultiEntry","name":"MultiEntry"},{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/IO/Wrapper","kind":"module","full_name":"IO::Wrapper","name":"Wrapper"},{"html_id":"chem.cr/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/formats/xyz.cr","line_number":45,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Chem/FormatWriter","kind":"module","full_name":"Chem::FormatWriter","name":"FormatWriter"},{"html_id":"chem.cr/Chem/FormatWriter/MultiEntry","kind":"module","full_name":"Chem::FormatWriter::MultiEntry","name":"MultiEntry"}],"namespace":{"html_id":"chem.cr/Chem/XYZ","kind":"module","full_name":"Chem::XYZ","name":"XYZ"},"class_methods":[{"html_id":"open(io:IO,total_entries:Int32|Nil=nil,sync_close:Bool=false,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *io*, yields it to the given\nblock, and closes it at the end. Positional and named arguments\nare forwarded to the constructor.","summary":"<p>Creates a new object from the given <em>io</em>, yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"args_string":"(io : IO, total_entries : Int32 | Nil = nil, sync_close : Bool = false, & : self -> )","args_html":"(io : IO, total_entries : Int32 | Nil = <span class=\"n\">nil</span>, sync_close : Bool = <span class=\"n\">false</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"io","external_name":"io","restriction":"IO"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"},{"name":"sync_close","default_value":"false","external_name":"sync_close","restriction":"Bool"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(io, total_entries, sync_close: sync_close)\nbegin\n  yield io\nensure\n  io.close\nend\n"}},{"html_id":"open(path:Path|String,total_entries:Int32|Nil=nil,&:self->)-class-method","name":"open","doc":"Creates a new object from the given *path* yields it to the\ngiven block, and closes it at the end. Positional and named\narguments are forwarded to the constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em> yields it to the given block, and closes it at the end.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"args_string":"(path : Path | String, total_entries : Int32 | Nil = nil, & : self -> )","args_html":"(path : Path | String, total_entries : Int32 | Nil = <span class=\"n\">nil</span>, & : <span class=\"k\">self</span> -> )","def":{"name":"open","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(self ->)"},"visibility":"Public","body":"io = new(path, total_entries)\nbegin\n  yield io\nensure\n  io.close\nend\n"}}],"constructors":[{"html_id":"new(path:Path|String,total_entries:Int32|Nil=nil):self-class-method","name":"new","doc":"Creates a new object from the given *path*. Positional and named\narguments are forwarded to the designated constructor.\n\nAn `IO` object will be created and open from the given *path*,\nwhich will be closed when closing this object (`sync_close =\ntrue`). The file open mode is specified by the `FILE_MODE`\nconstant.","summary":"<p>Creates a new object from the given <em>path</em>.</p>","abstract":false,"args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"args_string":"(path : Path | String, total_entries : Int32 | Nil = nil) : self","args_html":"(path : Path | String, total_entries : Int32 | Nil = <span class=\"n\">nil</span>) : <span class=\"k\">self</span>","def":{"name":"new","args":[{"name":"path","external_name":"path","restriction":"Path | String"},{"name":"total_entries","default_value":"nil","external_name":"total_entries","restriction":"Int32 | ::Nil"}],"return_type":"self","visibility":"Public","body":"new(File.new(path, FILE_MODE), total_entries, sync_close: true)"}}]}]}]},{"html_id":"chem.cr/Colorize","path":"Colorize.html","kind":"module","full_name":"Colorize","name":"Colorize","abstract":false,"locations":[{"filename":"src/chem/core_ext/colorize.cr","line_number":3,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"doc":"With `Colorize` you can change the fore- and background colors and text decorations when rendering text\non terminals supporting ANSI escape codes. It adds the `colorize` method to `Object` and thus all classes\nas its main interface, which calls `to_s` and surrounds it with the necessary escape codes\nwhen it comes to obtaining a string representation of the object.\n\nNOTE: To use `Colorize`, you must explicitly import it with `require \"colorize\"`\n\nIts first argument changes the foreground color:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize(:green)\n100.colorize(:red)\n[1, 2, 3].colorize(:blue)\n```\n\nThere are alternative ways to change the foreground color:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize.fore(:green)\n\"foo\".colorize.green\n```\n\nTo change the background color, the following methods are available:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize.back(:green)\n\"foo\".colorize.on(:green)\n\"foo\".colorize.on_green\n```\n\nYou can also pass an RGB color to `colorize`:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize(0, 255, 255)      # => \"foo\" in aqua\n\"foo\".colorize.fore(0, 255, 255) # => \"foo\" in aqua\n\n# This is the same as:\n\n\"foo\".colorize(Colorize::ColorRGB.new(0, 255, 255))      # => \"foo\" in aqua\n\"foo\".colorize.fore(Colorize::ColorRGB.new(0, 255, 255)) # => \"foo\" in aqua\n```\n\nOr an 8-bit color:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize(Colorize::Color256.new(208))      # => \"foo\" in orange\n\"foo\".colorize.fore(Colorize::Color256.new(208)) # => \"foo\" in orange\n```\n\nIt's also possible to change the text decoration:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize.mode(:underline)\n\"foo\".colorize.underline\n```\n\nThe `colorize` method returns a `Colorize::Object` instance,\nwhich allows chaining methods together:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize.fore(:yellow).back(:blue).mode(:underline)\n```\n\nWith the `toggle` method you can temporarily disable adding the escape codes.\nSettings of the instance are preserved however and can be turned back on later:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize(:red).toggle(false)              # => \"foo\" without color\n\"foo\".colorize(:red).toggle(false).toggle(true) # => \"foo\" in red\n```\n\nThe color `:default` leaves the object's representation as it is but the object is a `Colorize::Object` then\nwhich is handy in conditions such as:\n\n```\nrequire \"colorize\"\n\n\"foo\".colorize(Random::DEFAULT.next_bool ? :green : :default)\n```\n\nAvailable colors are:\n```\n:default\n:black\n:red\n:green\n:yellow\n:blue\n:magenta\n:cyan\n:light_gray\n:dark_gray\n:light_red\n:light_green\n:light_yellow\n:light_blue\n:light_magenta\n:light_cyan\n:white\n```\n\nSee `Colorize::Mode` for available text decorations.","summary":"<p>With <code><a href=\"Colorize.html\">Colorize</a></code> you can change the fore- and background colors and text decorations when rendering text on terminals supporting ANSI escape codes.</p>","types":[{"html_id":"chem.cr/Colorize/ColorRGB","path":"Colorize/ColorRGB.html","kind":"struct","full_name":"Colorize::ColorRGB","name":"ColorRGB","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core_ext/colorize.cr","line_number":4,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"namespace":{"html_id":"chem.cr/Colorize","kind":"module","full_name":"Colorize","name":"Colorize"},"doc":"An RGB color.","summary":"<p>An RGB color.</p>","constructors":[{"html_id":"from_hex(hex:String):self-class-method","name":"from_hex","abstract":false,"args":[{"name":"hex","external_name":"hex","restriction":"String"}],"args_string":"(hex : String) : self","args_html":"(hex : String) : <span class=\"k\">self</span>","location":{"filename":"src/chem/core_ext/colorize.cr","line_number":5,"url":null},"def":{"name":"from_hex","args":[{"name":"hex","external_name":"hex","restriction":"String"}],"return_type":"self","visibility":"Public","body":"hex = hex.lchop('#')\nnew(hex[0..1].to_u8(16), hex[2..3].to_u8(16), hex[4..5].to_u8(16))\n"}}],"instance_methods":[{"html_id":"to_a:Array(UInt8)-instance-method","name":"to_a","abstract":false,"location":{"filename":"src/chem/core_ext/colorize.cr","line_number":10,"url":null},"def":{"name":"to_a","return_type":"Array(UInt8)","visibility":"Public","body":"[@red, @green, @blue]"}}]}]},{"html_id":"chem.cr/Enumerable","path":"Enumerable.html","kind":"module","full_name":"Enumerable(T)","name":"Enumerable","abstract":false,"locations":[{"filename":"src/chem/core_ext/enumerable.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"including_types":[{"html_id":"chem.cr/Chem/Metadata","kind":"class","full_name":"Chem::Metadata","name":"Metadata"},{"html_id":"chem.cr/Chem/Spatial/CoordinatesProxy","kind":"struct","full_name":"Chem::Spatial::CoordinatesProxy","name":"CoordinatesProxy"},{"html_id":"chem.cr/Range","kind":"struct","full_name":"Range(B, E)","name":"Range"}],"doc":"The `Enumerable` mixin provides collection classes with several traversal, searching,\nfiltering and querying methods.\n\nIncluding types must provide an `each` method, which yields successive members\nof the collection.\n\nFor example:\n\n```\nclass Three\n  include Enumerable(Int32)\n\n  def each(&)\n    yield 1\n    yield 2\n    yield 3\n  end\nend\n\nthree = Three.new\nthree.to_a                # => [1, 2, 3]\nthree.select &.odd?       # => [1, 3]\nthree.all? { |x| x < 10 } # => true\n```\n\nNote that most search and filter methods traverse an Enumerable eagerly,\nproducing an `Array` as the result. For a lazy alternative refer to\nthe `Iterator` and `Iterable` modules.","summary":"<p>The <code><a href=\"Enumerable.html\">Enumerable</a></code> mixin provides collection classes with several traversal, searching, filtering and querying methods.</p>","instance_methods":[{"html_id":"average(weights:Indexable(Number))-instance-method","name":"average","doc":"Returns the weighted average of the elements in the collection.\nRaises `EmptyError` if the collection is empty or `ArgumentError` if\n*weights* has a different number of elements.\n\nExpects all element types to respond to `#+` and `#/` methods.\n\n```\n[1, 2, 3, 4, 5, 6].average((1..6).to_a) # => 4.333333333333333\n(1..6).average((1..6).to_a)             # => 4.333333333333333\n([] of Int32).average([1, 1, 1])        # raises EmptyError\n(1..6).average([1, 1])                  # raises ArgumentError\n```\n\nNOTE: This method calls `.additive_identity` on the element type and\n*weights*' element type to determine the type of the intermediate\nsum values.","summary":"<p>Returns the weighted average of the elements in the collection.</p>","abstract":false,"args":[{"name":"weights","external_name":"weights","restriction":"Indexable(Number)"}],"args_string":"(weights : Indexable(Number))","args_html":"(weights : Indexable(<a href=\"Number.html\">Number</a>))","location":{"filename":"src/chem/core_ext/enumerable.cr","line_number":18,"url":null},"def":{"name":"average","args":[{"name":"weights","external_name":"weights","restriction":"Indexable(Number)"}],"visibility":"Public","body":"average(weights, &.itself)"}},{"html_id":"average(weights:Indexable(Number),&:T->_)-instance-method","name":"average","doc":"Returns the weighted average of the results of the passed block for\neach element in the collection. Raises `EmptyError` if the\ncollection is empty or `ArgumentError` if *weights* has a different\nnumber of elements.\n\nExpects all element types to respond to `#+` and `#/` methods.\n\n```\n[\"Alice\", \"Bob\"].average([7, 2], &.size)    # => 4.555555555555555\n('a'..'z').average((0..25).to_a, &.ord)     # => 4.333333333333333\n([] of String).average([1, 1], &.size)      # raises EmptyError\n[\"Alice\", \"Bob\"].average([1, 1, 1], &.size) # raises ArgumentError\n```\n\nNOTE: This method calls `.additive_identity` on the yielded type and\n*weights*' element type to determine the type of the intermediate\nsum values.","summary":"<p>Returns the weighted average of the results of the passed block for each element in the collection.</p>","abstract":false,"args":[{"name":"weights","external_name":"weights","restriction":"Indexable(Number)"}],"args_string":"(weights : Indexable(Number), & : T -> _)","args_html":"(weights : Indexable(<a href=\"Number.html\">Number</a>), & : T -> _)","location":{"filename":"src/chem/core_ext/enumerable.cr","line_number":39,"url":null},"def":{"name":"average","args":[{"name":"weights","external_name":"weights","restriction":"Indexable(Number)"}],"yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(T -> _)"},"visibility":"Public","body":"memo = (typeof(yield Enumerable.element_type(self))).additive_identity\ntotal = (typeof(weights.unsafe_fetch(0))).additive_identity\nif self.responds_to?(:size)\n  if size > 0\n  else\n    raise(EmptyError.new)\n  end\n  if weights.size == size\n  else\n    raise(ArgumentError.new(\"Incompatible size\"))\n  end\n  each_with_index do |ele, i|\n    weight = weights.unsafe_fetch(i)\n    value = yield ele\n    memo = memo + (value * weight)\n    total = total + weight\n  end\nelse\n  count = 0\n  each_with_index do |ele, i|\n    weight = weights[i]\n    value = yield ele\n    memo = memo + (value * weight)\n    total = total + weight\n    count = count + 1\n  end\n  if count == weights.size\n  else\n    raise(ArgumentError.new(\"Incompatible size\"))\n  end\nend\nmemo / total\n"}},{"html_id":"mean-instance-method","name":"mean","doc":"Returns the arithmetic mean of the elements in the collection.\nRaises `EmptyError` if the collection is empty.\n\nExpects all element types to respond to `#+` and `#/` methods.\n\n```\n[1, 2, 3, 4, 5, 6].mean # => 3.5\n(1..6).mean             # => 3.5\n([] of Int32).mean      # raises EmptyError\n```\n\nNOTE: This method calls `.additive_identity` on the element type to\ndetermine the type of the intermediate sum.","summary":"<p>Returns the arithmetic mean of the elements in the collection.</p>","abstract":false,"location":{"filename":"src/chem/core_ext/enumerable.cr","line_number":78,"url":null},"def":{"name":"mean","visibility":"Public","body":"mean(&.itself)"}},{"html_id":"mean(&:T->_)-instance-method","name":"mean","doc":"Returns the arithmetic mean of the results of the passed block for\neach element in the collection. Raises `EmptyError` if the\ncollection is empty.\n\nExpects all element types to respond to `#+` and `#/` methods.\n\n```\n[\"Alice\", \"Bob\"].mean(&.size) # => 4\n('a'..'z').mean(&.ord)        # => 109.5\n([] of String).mean(&.size)   # raises EmptyError\n```\n\nNOTE: This method calls `.additive_identity` on the yielded type to\ndetermine the type of the intermediate sum.","summary":"<p>Returns the arithmetic mean of the results of the passed block for each element in the collection.</p>","abstract":false,"location":{"filename":"src/chem/core_ext/enumerable.cr","line_number":96,"url":null},"def":{"name":"mean","yields":1,"block_arity":1,"block_arg":{"name":"","external_name":"","restriction":"(T -> _)"},"visibility":"Public","body":"count = 0\nsum = self.sum do |ele|\n  count = count + 1\n  yield ele\nend\ncount > 0 ? sum / count : raise(EmptyError.new)\n"}}]},{"html_id":"chem.cr/Float","path":"Float.html","kind":"struct","full_name":"Float","name":"Float","abstract":true,"superclass":{"html_id":"chem.cr/Number","kind":"struct","full_name":"Number","name":"Number"},"ancestors":[{"html_id":"chem.cr/Number","kind":"struct","full_name":"Number","name":"Number"},{"html_id":"chem.cr/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core_ext/float.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"doc":"Float is the base type of all floating point numbers.\n\nThere are two floating point types, `Float32` and `Float64`,\nwhich correspond to the [binary32](http://en.wikipedia.org/wiki/Single_precision_floating-point_format)\nand [binary64](http://en.wikipedia.org/wiki/Double_precision_floating-point_format)\ntypes defined by IEEE.\n\nA floating point literal is an optional `+` or `-` sign, followed by\na sequence of numbers or underscores, followed by a dot,\nfollowed by numbers or underscores, followed by an optional exponent suffix,\nfollowed by an optional type suffix. If no suffix is present, the literal's type is `Float64`.\n\n```\n1.0     # Float64\n1.0_f32 # Float32\n1_f32   # Float32\n\n1e10   # Float64\n1.5e10 # Float64\n1.5e-7 # Float64\n\n+1.3 # Float64\n-0.5 # Float64\n```\n\nThe underscore `_` before the suffix is optional.\n\nUnderscores can be used to make some numbers more readable:\n\n```\n1_000_000.111_111 # better than 1000000.111111\n```\n\nSee [`Float` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/floats.html) in the language reference.","summary":"<p>Float is the base type of all floating point numbers.</p>","instance_methods":[{"html_id":"close_to?(other:Number,delta:Number={{@type.constant(\"EPSILON\")}}):Bool-instance-method","name":"close_to?","doc":"Returns `true` if numbers are within *delta* from each other, else `false`.\n\n```\n1.0.close_to?(1.0)                          # => true\n1.0_f32.close_to?(1.0)                      # => true\n1.0.close_to?(1.0 + Float64::EPSILON)       # => true\n1.0_f32.close_to?(1.0 + Float32::EPSILON)   # => true\n1.0.close_to?(1.0005, 1e-3)                 # => true\n1.0.close_to?(1.0 + Float64::EPSILON*2)     # => false\n1.0_f32.close_to?(1.0 + Float32::EPSILON*2) # => false\n1.0.close_to?(1.01, 1e-3)                   # => false\n```","summary":"<p>Returns <code>true</code> if numbers are within <em>delta</em> from each other, else <code>false</code>.</p>","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Number"},{"name":"delta","default_value":"{{ @type.constant(\"EPSILON\") }}","external_name":"delta","restriction":"Number"}],"args_string":"(other : Number, delta : Number = {{ @type.constant(\"EPSILON\") }}) : Bool","args_html":"(other : <a href=\"Number.html\">Number</a>, delta : <a href=\"Number.html\">Number</a> = <span class=\"o\">{{</span> @type.constant(<span class=\"s\">&quot;EPSILON&quot;</span>) }}) : Bool","location":{"filename":"src/chem/core_ext/float.cr","line_number":14,"url":null},"def":{"name":"close_to?","args":[{"name":"other","external_name":"other","restriction":"Number"},{"name":"delta","default_value":"{{ @type.constant(\"EPSILON\") }}","external_name":"delta","restriction":"Number"}],"return_type":"Bool","visibility":"Public","body":"(self - other).abs <= delta"}}]},{"html_id":"chem.cr/Number","path":"Number.html","kind":"struct","full_name":"Number","name":"Number","abstract":true,"superclass":{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},"ancestors":[{"html_id":"chem.cr/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"},{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core_ext/number.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"constants":[{"id":"DEGREE_TO_RADIAN","name":"DEGREE_TO_RADIAN","value":"Math::PI / 180"},{"id":"RADIAN_TO_DEGREE","name":"RADIAN_TO_DEGREE","value":"180 / Math::PI"}],"included_modules":[{"html_id":"chem.cr/Comparable","kind":"module","full_name":"Comparable","name":"Comparable"},{"html_id":"chem.cr/Steppable","kind":"module","full_name":"Steppable","name":"Steppable"}],"subclasses":[{"html_id":"chem.cr/Float","kind":"struct","full_name":"Float","name":"Float"}],"doc":"The top-level number type.","summary":"<p>The top-level number type.</p>","instance_methods":[{"html_id":"*(other:Chem::Spatial::Vec3):Chem::Spatial::Vec3-instance-method","name":"*","abstract":false,"args":[{"name":"other","external_name":"other","restriction":"Chem::Spatial::Vec3"}],"args_string":"(other : Chem::Spatial::Vec3) : Chem::Spatial::Vec3","args_html":"(other : <a href=\"Chem/Spatial/Vec3.html\">Chem::Spatial::Vec3</a>) : <a href=\"Chem/Spatial/Vec3.html\">Chem::Spatial::Vec3</a>","location":{"filename":"src/chem/core_ext/number.cr","line_number":5,"url":null},"def":{"name":"*","args":[{"name":"other","external_name":"other","restriction":"Chem::Spatial::Vec3"}],"return_type":"Chem::Spatial::Vec3","visibility":"Public","body":"other * self"}},{"html_id":"close_to?(rhs:Number,delta:Number=0):Bool-instance-method","name":"close_to?","doc":"Returns `true` if numbers are within *delta* from each other, else\n`false`.\n\n```\n1.0.close_to?(1.0)                          # => true\n1.0_f32.close_to?(1.0)                      # => true\n1.0.close_to?(1.0 + Float64::EPSILON)       # => true\n1.0_f32.close_to?(1.0 + Float32::EPSILON)   # => true\n1.0.close_to?(1.0005, 1e-3)                 # => true\n1.0.close_to?(1.0 + Float64::EPSILON*2)     # => false\n1.0_f32.close_to?(1.0 + Float32::EPSILON*2) # => false\n1.0.close_to?(1.01, 1e-3)                   # => false\n```","summary":"<p>Returns <code>true</code> if numbers are within <em>delta</em> from each other, else <code>false</code>.</p>","abstract":false,"args":[{"name":"rhs","external_name":"rhs","restriction":"Number"},{"name":"delta","default_value":"0","external_name":"delta","restriction":"Number"}],"args_string":"(rhs : Number, delta : Number = 0) : Bool","args_html":"(rhs : <a href=\"Number.html\">Number</a>, delta : <a href=\"Number.html\">Number</a> = <span class=\"n\">0</span>) : Bool","location":{"filename":"src/chem/core_ext/number.cr","line_number":22,"url":null},"def":{"name":"close_to?","args":[{"name":"rhs","external_name":"rhs","restriction":"Number"},{"name":"delta","default_value":"0","external_name":"delta","restriction":"Number"}],"return_type":"Bool","visibility":"Public","body":"(self - rhs).abs <= delta"}},{"html_id":"degree-instance-method","name":"degree","abstract":false,"location":{"filename":"src/chem/core_ext/number.cr","line_number":26,"url":null},"def":{"name":"degree","visibility":"Public","body":"degrees"}},{"html_id":"degrees-instance-method","name":"degrees","abstract":false,"location":{"filename":"src/chem/core_ext/number.cr","line_number":30,"url":null},"def":{"name":"degrees","visibility":"Public","body":"self * RADIAN_TO_DEGREE"}},{"html_id":"radian-instance-method","name":"radian","abstract":false,"location":{"filename":"src/chem/core_ext/number.cr","line_number":34,"url":null},"def":{"name":"radian","visibility":"Public","body":"radians"}},{"html_id":"radians-instance-method","name":"radians","abstract":false,"location":{"filename":"src/chem/core_ext/number.cr","line_number":38,"url":null},"def":{"name":"radians","visibility":"Public","body":"self * DEGREE_TO_RADIAN"}},{"html_id":"scale(min:Number,max:Number):Float64-instance-method","name":"scale","doc":"Scales the number into the given range. The result will be between\nzero and one.\n\n```\n10.scale(0, 100)   # => 0.1\n2.5.scale(0, 5)    # 0.5\n401.scale(50, 500) # => 0.78\n```","summary":"<p>Scales the number into the given range.</p>","abstract":false,"args":[{"name":"min","external_name":"min","restriction":"Number"},{"name":"max","external_name":"max","restriction":"Number"}],"args_string":"(min : Number, max : Number) : Float64","args_html":"(min : <a href=\"Number.html\">Number</a>, max : <a href=\"Number.html\">Number</a>) : Float64","location":{"filename":"src/chem/core_ext/number.cr","line_number":50,"url":null},"def":{"name":"scale","args":[{"name":"min","external_name":"min","restriction":"Number"},{"name":"max","external_name":"max","restriction":"Number"}],"return_type":"Float64","visibility":"Public","body":"(self - min) / (max - min)"}},{"html_id":"scale(range:Range(Number,Number)):Float64-instance-method","name":"scale","doc":"Scales the number into the given range. The result will be between\nzero and one.\n\n```\n10.scale(0, 100)   # => 0.1\n2.5.scale(0, 5)    # 0.5\n401.scale(50, 500) # => 0.78\n```","summary":"<p>Scales the number into the given range.</p>","abstract":false,"args":[{"name":"range","external_name":"range","restriction":"Range(Number, Number)"}],"args_string":"(range : Range(Number, Number)) : Float64","args_html":"(range : <a href=\"Range.html\">Range</a>(<a href=\"Number.html\">Number</a>, <a href=\"Number.html\">Number</a>)) : Float64","location":{"filename":"src/chem/core_ext/number.cr","line_number":55,"url":null},"def":{"name":"scale","args":[{"name":"range","external_name":"range","restriction":"Range(Number, Number)"}],"return_type":"Float64","visibility":"Public","body":"scale(range.begin, range.end)"}},{"html_id":"unscale(min:Number,max:Number):Float64-instance-method","name":"unscale","doc":"Reverts the scaling in the given range.\n\n0.5.unscale(0, 100) # => 50.0\n0.1.unscale(0, 5) # => 0.05\n5.scale(-4, 20).unscale(-4, 20) # => 5.0","summary":"<p>Reverts the scaling in the given range.</p>","abstract":false,"args":[{"name":"min","external_name":"min","restriction":"Number"},{"name":"max","external_name":"max","restriction":"Number"}],"args_string":"(min : Number, max : Number) : Float64","args_html":"(min : <a href=\"Number.html\">Number</a>, max : <a href=\"Number.html\">Number</a>) : Float64","location":{"filename":"src/chem/core_ext/number.cr","line_number":64,"url":null},"def":{"name":"unscale","args":[{"name":"min","external_name":"min","restriction":"Number"},{"name":"max","external_name":"max","restriction":"Number"}],"return_type":"Float64","visibility":"Public","body":"(self * (max - min)) + min"}},{"html_id":"unscale(range:Range(Number,Number)):Float64-instance-method","name":"unscale","doc":"Reverts the scaling in the given range.\n\n0.5.unscale(0, 100) # => 50.0\n0.1.unscale(0, 5) # => 0.05\n5.scale(-4, 20).unscale(-4, 20) # => 5.0","summary":"<p>Reverts the scaling in the given range.</p>","abstract":false,"args":[{"name":"range","external_name":"range","restriction":"Range(Number, Number)"}],"args_string":"(range : Range(Number, Number)) : Float64","args_html":"(range : <a href=\"Range.html\">Range</a>(<a href=\"Number.html\">Number</a>, <a href=\"Number.html\">Number</a>)) : Float64","location":{"filename":"src/chem/core_ext/number.cr","line_number":69,"url":null},"def":{"name":"unscale","args":[{"name":"range","external_name":"range","restriction":"Range(Number, Number)"}],"return_type":"Float64","visibility":"Public","body":"unscale(range.begin, range.end)"}}]},{"html_id":"chem.cr/Range","path":"Range.html","kind":"struct","full_name":"Range(B, E)","name":"Range","abstract":false,"superclass":{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"},{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"chem.cr/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"chem.cr/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[{"filename":"src/chem/core_ext/range.cr","line_number":1,"url":null}],"repository_name":"chem.cr","program":false,"enum":false,"alias":false,"const":false,"included_modules":[{"html_id":"chem.cr/Enumerable","kind":"module","full_name":"Enumerable","name":"Enumerable"},{"html_id":"chem.cr/Iterable","kind":"module","full_name":"Iterable","name":"Iterable"}],"doc":"A `Range` represents an interval: a set of values with a beginning and an end.\n\nRanges may be constructed using the usual `new` method or with literals:\n\n```\nx..y  # an inclusive range, in mathematics: [x, y]\nx...y # an exclusive range, in mathematics: [x, y)\n(x..) # an endless range, in mathematics: >= x\n..y   # a beginless inclusive range, in mathematics: <= y\n...y  # a beginless exclusive range, in mathematics: < y\n```\n\nSee [`Range` literals](https://crystal-lang.org/reference/syntax_and_semantics/literals/range.html) in the language reference.\n\nAn easy way to remember which one is inclusive and which one is exclusive it\nto think of the extra dot as if it pushes *y* further away, thus leaving it outside of the range.\n\nRanges typically involve integers, but can be created using arbitrary objects\nas long as they define `succ` (or `pred` for `reverse_each`), to get the\nnext element in the range, and `<` and `==`, to know when the range reached the end:\n\n```\n# Represents a string of 'x's.\nstruct Xs\n  include Comparable(Xs)\n\n  getter size\n\n  def initialize(@size : Int32)\n  end\n\n  def succ\n    Xs.new(@size + 1)\n  end\n\n  def <=>(other)\n    @size <=> other.size\n  end\n\n  def inspect(io)\n    @size.times { io << 'x' }\n  end\n\n  def to_s(io)\n    io << @size << ' '\n    inspect(io)\n  end\nend\n```\n\nAn example of using `Xs` to construct a range:\n\n```\nr = Xs.new(3)..Xs.new(6)\nr.to_s                 # => \"xxx..xxxxxx\"\nr.to_a                 # => [Xs.new(3), Xs.new(4), Xs.new(5), Xs.new(6)]\nr.includes?(Xs.new(5)) # => true\n```","summary":"<p>A <code><a href=\"Range.html\">Range</a></code> represents an interval: a set of values with a beginning and an end.</p>","instance_methods":[{"html_id":"clamp(min,max):Range-instance-method","name":"clamp","abstract":false,"args":[{"name":"min","external_name":"min","restriction":""},{"name":"max","external_name":"max","restriction":""}],"args_string":"(min, max) : Range","args_html":"(min, max) : <a href=\"Range.html\">Range</a>","location":{"filename":"src/chem/core_ext/range.cr","line_number":2,"url":null},"def":{"name":"clamp","args":[{"name":"min","external_name":"min","restriction":""},{"name":"max","external_name":"max","restriction":""}],"return_type":"Range","visibility":"Public","body":"if exclusive?\n  raise(ArgumentError.new(\"Can't clamp an exclusive range\"))\nend\nif (b = @begin) && (e = @end)\n  (b.clamp(min, max))..(e.clamp(min, max))\nelse\n  if b = @begin\n    (b.clamp(min, max))..max\n  else\n    if e = @end\n      min..(e.clamp(min, max))\n    else\n      min..max\n    end\n  end\nend\n"}},{"html_id":"clamp(range:Range):Range-instance-method","name":"clamp","abstract":false,"args":[{"name":"range","external_name":"range","restriction":"Range"}],"args_string":"(range : Range) : Range","args_html":"(range : <a href=\"Range.html\">Range</a>) : <a href=\"Range.html\">Range</a>","location":{"filename":"src/chem/core_ext/range.cr","line_number":15,"url":null},"def":{"name":"clamp","args":[{"name":"range","external_name":"range","restriction":"Range"}],"return_type":"Range","visibility":"Public","body":"if range.end.nil? || (!range.exclusive?)\n  clamp(range.begin, range.end)\nelse\n  raise(ArgumentError.new(\"Can't clamp by an exclusive range\"))\nend"}}]}]}}